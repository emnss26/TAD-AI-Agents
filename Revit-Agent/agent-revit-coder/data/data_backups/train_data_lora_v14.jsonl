{"prompt":"Generate a new room on Level 2 at point (6, 11).","completion":"string levelName = \"Level 2\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    UV point = new UV(6, 11);\n    Room newRoom = doc.Create.NewRoom(targetLevel, point);\n}"}
{"prompt":"Build a new wall type 'Generic Wall 272mm' with a thickness of 30cm.","completion":"string newTypeName = \"Generic Wall 272mm\";\nWallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif (oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(newTypeName) as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(30, UnitTypeId.Centimeters));\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n}"}
{"prompt":"Une la geometría de una columna y un suelo que se cruzan.","completion":"Element column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().FirstOrDefault();\nElement floor = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault();\n\nif (column != null && floor != null)\n{\n    JoinGeometryUtils.JoinGeometry(doc, column, floor);\n}"}
{"prompt":"Clona el nivel 5 con un desfase de 7m y llámalo 'Mezanine'.","completion":"string levelName = \"Nivel 5\";\nLevel levelToCopy = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (levelToCopy != null)\n{\n    double offset = UnitUtils.ConvertToInternalUnits(7, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, levelToCopy.Elevation + offset);\n    newLevel.Name = \"Mezanine\";\n}"}
{"prompt":"Crea un nuevo Nivel llamado 'Nivel 1' a una elevación de 13 metros.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(13, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Nivel 1\";\n}"}
{"prompt":"Encuentra todas las familias de anotación y cuenta cuántas hay.","completion":"List<Family> annotationFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.CategoryType == CategoryType.Annotation).ToList();"}
{"prompt":"Create a vertical shaft opening from the base level to the top level.","completion":"using (Transaction t = new Transaction(doc, \"Create Shaft\"))\n{\n    t.Start();\n    Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderBy(l => l.ProjectElevation).FirstOrDefault();\n    Level topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderByDescending(l => l.ProjectElevation).FirstOrDefault();\n\n    if (bottomLevel != null && topLevel != null)\n    {\n        XYZ p1 = new XYZ(2 \/ 0.3048, 2 \/ 0.3048,0);\n        XYZ p2 = new XYZ(5 \/ 0.3048, 2 \/ 0.3048,0);\n        XYZ p3 = new XYZ(5 \/ 0.3048, 5 \/ 0.3048,0);\n        XYZ p4 = new XYZ(2 \/ 0.3048, 5 \/ 0.3048,0);\n        CurveArray profile = new CurveArray();\n        profile.Append(Line.CreateBound(p1,p2));\n        profile.Append(Line.CreateBound(p2,p3));\n        profile.Append(Line.CreateBound(p3,p4));\n        profile.Append(Line.CreateBound(p4,p1));\n        doc.Create.NewOpening(bottomLevel, topLevel, profile);\n    }\n    t.Commit();\n}"}
{"prompt":"Construct a new schedule for Structural Columns.","completion":"string scheduleName = \"Structural Column Schedule\";\nElementId categoryId = new ElementId(BuiltInCategory.OST_StructuralColumns);\nViewSchedule schedule = ViewSchedule.CreateSchedule(doc, categoryId);\nschedule.Name = scheduleName;"}
{"prompt":"Copia el tipo de muro 'Genérico - 145mm' y nómbralo 'Interior - 19cm Yeso'.","completion":"string originalName = \"Genérico - 145mm\";\nstring newName = \"Interior - 19cm Yeso\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif (originalType != null)\n{\n    WallType newType = originalType.Duplicate(newName) as WallType;\n}"}
{"prompt":"Coloca una instancia de la familia 'Mesa de Oficina' en el centro de la habitación 'Despacho 105'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 105\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Mesa de Oficina\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);"}
{"prompt":"Oculta todas las categorías de anotación en la vista activa.","completion":"using (Transaction t = new Transaction(doc, \"Hide Annotation Categories\"))\n{\n    t.Start();\n    Categories categories = doc.Settings.Categories;\n    View activeView = doc.ActiveView;\n\n    if (activeView != null)\n    {\n        foreach(Category cat in categories)\n        {\n            if(cat.CategoryType == CategoryType.Annotation && cat.get_AllowsVisibilityControl(activeView))\n            {\n                 activeView.SetCategoryHidden(cat.Id, true);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Vincula un archivo DWG como referencia en la vista activa.","completion":"string filePath = \"C:\/CAD_Files\/Base_Plan.dwg\";\nDWGImportOptions options = new DWGImportOptions();\noptions.ColorMode = ImportColorMode.Preserved;\nElementId linkedFileId;\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    doc.Link(filePath, options, activeView, out linkedFileId);\n}"}
{"prompt":"Traza una región rellena con patrón diagonal.","completion":"using (Transaction t = new Transaction(doc, \"Draw Filled Region\"))\n{\n    t.Start();\n    View activeView = doc.ActiveView;\n    FillPatternElement fillPattern = new FilteredElementCollector(doc).OfClass(typeof(FillPatternElement)).Cast<FillPatternElement>().FirstOrDefault(p => !p.GetFillPattern().IsSolidFill);\n    if (activeView != null && fillPattern != null)\n    {\n        FilledRegionType filledRegionType = new FilteredElementCollector(doc, activeView.Id).OfClass(typeof(FilledRegionType)).FirstOrDefault() as FilledRegionType;\n        if (filledRegionType != null)\n        {\n            FilledRegionType newType = filledRegionType.Duplicate(\"Temp Diagonal Region\") as FilledRegionType;\n            if (newType != null)\n            {\n                newType.ForegroundPatternId = fillPattern.Id;\n                CurveLoop profile = new CurveLoop();\n                profile.Append(Line.CreateBound(new XYZ(0, 0, 0), new XYZ(5, 0, 0)));\n                profile.Append(Line.CreateBound(new XYZ(5, 0, 0), new XYZ(5, 5, 0)));\n                profile.Append(Line.CreateBound(new XYZ(5, 5, 0), new XYZ(0, 5, 0)));\n                profile.Append(Line.CreateBound(new XYZ(0, 5, 0), new XYZ(0, 0, 0)));\n                FilledRegion.Create(doc, newType.Id, activeView.Id, new List<CurveLoop> { profile });\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea una puerta de 0.9m de ancho y 2.1m de alto en el muro.","completion":"Wall hostWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nFamilySymbol originalSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (originalSymbol != null && hostWall != null)\n{\n    string newTypeName = \"Door 0.9m x 2.1m\";\n    FamilySymbol newSymbol = originalSymbol.Duplicate(newTypeName) as FamilySymbol;\n    if (newSymbol == null) return;\n\n    if (!newSymbol.IsActive)\n    {\n        newSymbol.Activate();\n    }\n\n    Parameter widthParam = newSymbol.get_Parameter(BuiltInParameter.FAMILY_WIDTH_PARAM);\n    Parameter heightParam = newSymbol.get_Parameter(BuiltInParameter.FAMILY_HEIGHT_PARAM);\n\n    if (widthParam != null && heightParam != null && !widthParam.IsReadOnly && !heightParam.IsReadOnly)\n    {\n        widthParam.Set(UnitUtils.ConvertToInternalUnits(0.9, UnitTypeId.Meters));\n        heightParam.Set(UnitUtils.ConvertToInternalUnits(2.1, UnitTypeId.Meters));\n    }\n\n    Level level = doc.GetElement(hostWall.LevelId) as Level;\n    LocationCurve locationCurve = hostWall.Location as LocationCurve;\n    if (level != null && locationCurve != null)\n    {\n        XYZ insertionPoint = locationCurve.Curve.Evaluate(0.5, true);\n        doc.Create.NewFamilyInstance(insertionPoint, newSymbol, hostWall, level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Obtén los IDs de todas las vistas 3D que empiezan con 'Coord' para exportación.","completion":"List<ElementId> viewsToExport = new FilteredElementCollector(doc).OfClass(typeof(View3D)).Cast<View3D>().Where(v => v.Name.StartsWith(\"Coord\") && !v.IsTemplate).Select(v => v.Id).ToList();\n"}
{"prompt":"Selecciona todos los muros del 'Nivel 1' y cambia su comentario a 'REVISAR AISLAMIENTO'.","completion":"Level level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\nif (level2 != null)\n{\n    List<Wall> wallsOnLevel2 = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Where(w => w.LevelId == level2.Id).Cast<Wall>().ToList();\n    foreach(Wall wall in wallsOnLevel2)\n    {\n        Parameter commentParam = wall.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n        if (commentParam != null && !commentParam.IsReadOnly)\n        {\n            commentParam.Set(\"REVISAR AISLAMIENTO\");\n        }\n    }\n}"}
{"prompt":"Place an instance of the 'Office Desk' family in the center of the 'Office 100' room.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Office 100\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Office Desk\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);"}
{"prompt":"Duplicate level 1 with a 3m offset and name it 'Mezzanine'.","completion":"string levelName = \"Mezzanine\";\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\n\nif (level1 != null)\n{\n    double newElevation = level1.ProjectElevation + UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, newElevation);\n    if (newLevel != null)\n    {\n        newLevel.Name = levelName;\n    }\n}"}
{"prompt":"Copia el nivel 1 con un desfase de 6m y llámalo 'Mezanine'.","completion":"string levelName = \"Mezanine\";\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\n\nif (level1 != null)\n{\n    double newElevation = level1.ProjectElevation + UnitUtils.ConvertToInternalUnits(6, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, newElevation);\n    if (newLevel != null)\n    {\n        newLevel.Name = levelName;\n    }\n}"}
{"prompt":"Copy level 6 with a 2m offset and name it 'Mezzanine'.","completion":"string levelName = \"Level 6\";\nLevel levelToCopy = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (levelToCopy != null)\n{\n    double offset = UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, levelToCopy.Elevation + offset);\n    newLevel.Name = \"Mezzanine\";\n}"}
{"prompt":"Actualiza el nivel de detalle de la vista activa a 'Medio'.","completion":"View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.DetailLevel = ViewDetailLevel.Medium;\n}"}
{"prompt":"Duplicate the 'Generic - 150mm' wall type and name it 'Interior - 15cm Plaster'.","completion":"string originalName = \"Generic - 150mm\";\nstring newName = \"Interior - 15cm Plaster\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif(originalType!=null)\n    originalType.Duplicate(newName);"}
{"prompt":"Duplica el tipo de muro 'Genérico - 150mm' y nómbralo 'Interior - 15cm Yeso'.","completion":"string originalName = \"Genérico - 150mm\";\nstring newName = \"Interior - 15cm Yeso\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif(originalType!=null)\n    originalType.Duplicate(newName);"}
{"prompt":"Reproduce el tipo de muro 'Genérico - 195mm' y nómbralo 'Interior - 15cm Yeso'.","completion":"string originalName = \"Genérico - 195mm\";\nstring newName = \"Interior - 15cm Yeso\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif (originalType != null)\n{\n    WallType newType = originalType.Duplicate(newName) as WallType;\n}"}
{"prompt":"Construct an assembly from the selected elements.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds != null && selectedIds.Count > 0)\n{\n    AssemblyInstance assemblyInstance = AssemblyInstance.Create(doc, selectedIds, new ElementId(BuiltInCategory.OST_Assemblies));\n    if (assemblyInstance != null)\n    {\n        assemblyInstance.Name = \"New Assembly\";\n    }\n}"}
{"prompt":"Recupera todas las habitaciones en el Nivel 'Losa 100'.","completion":"Level groundFloor = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Losa 100\") as Level;\nList<Element> roomsOnGround = new List<Element>();\n\nif (groundFloor != null)\n{\n    roomsOnGround = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Where(r => r.LevelId == groundFloor.Id).ToList();\n}"}
{"prompt":"Add the 'Level', 'Mark', and 'Volume' fields to the column schedule.","completion":"ViewSchedule schedule = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().FirstOrDefault(s => s.Name.Contains(\"Column\"));\nif (schedule != null)\n{\n    ScheduleDefinition def = schedule.Definition;\n    SchedulableField levelField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.FAMILY_LEVEL_PARAM);\n    if (levelField != null) def.AddField(levelField);\n    SchedulableField markField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.ALL_MODEL_MARK);\n    if (markField != null) def.AddField(markField);\n    SchedulableField volumeField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.HOST_VOLUME_COMPUTED);\n    if (volumeField != null) def.AddField(volumeField);\n}"}
{"prompt":"Update the type of a selected floor to 'Concrete 14cm'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a floor\");\n\nif (pickedRef != null)\n{\n    Floor floorToChange = doc.GetElement(pickedRef) as Floor;\n    FloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name == \"Concrete 14cm\");\n    \n    if (floorToChange != null && newType != null)\n    {\n        floorToChange.ChangeTypeId(newType.Id);\n    }\n}"}
{"prompt":"Generate a new room on Level 2 at point (13, 11).","completion":"string levelName = \"Level 2\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    UV point = new UV(13, 11);\n    Room newRoom = doc.Create.NewRoom(targetLevel, point);\n}"}
{"prompt":"Configure the sill height of all windows to 902mm.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits(902, UnitTypeId.Millimeters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Añade el prefijo 'ARQ-' a todas las tablas de planificación.","completion":"string prefix = \"ARQ-\";\nList<ViewSchedule> schedules = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().Where(v => !v.IsTemplate).ToList();\nforeach (ViewSchedule schedule in schedules)\n{\n    if (!schedule.Name.StartsWith(prefix))\n    {\n        schedule.Name = prefix + schedule.Name;\n    }\n}"}
{"prompt":"Build a wall 5 meters long and 3 meters high.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (level != null && wallType != null)\n{\n    Line line = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0, 0));\n    Wall.Create(doc, line, wallType.Id, level.Id, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0.0, false, false);\n}"}
{"prompt":"Build an electrical circuit connecting light fixtures to a panel.","completion":"using (Transaction t = new Transaction(doc, \"Create Electrical Circuit\"))\n{\n    t.Start();\n    FamilyInstance panel = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_ElectricalEquipment).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\n    List<ElementId> fixtureIds = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsNotElementType().ToElementIds().ToList();\n\n    if (panel != null && fixtureIds.Count > 0)\n    {\n        ElectricalSystem electricalSystem = ElectricalSystem.Create(doc, fixtureIds, ElectricalSystemType.PowerCircuit);\n        if(electricalSystem != null)\n        {\n            electricalSystem.SelectPanel(panel);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Update the detail level of the active view to 'Medium'.","completion":"View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.DetailLevel = ViewDetailLevel.Medium;\n}"}
{"prompt":"Shape a cable tray between two points.","completion":"CableTrayType trayType = new FilteredElementCollector(doc).OfClass(typeof(CableTrayType)).FirstOrDefault() as CableTrayType;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (trayType != null && level != null)\n{\n    \/\/ Create a default cable tray between two points as they are not specified\n    XYZ p1 = new XYZ(0, 10, 10);\n    XYZ p2 = new XYZ(20, 10, 10);\n    CableTray.Create(doc, trayType.Id, p1, p2, level.Id);\n}"}
{"prompt":"Rota un elemento seleccionado 91 grados sobre su eje Z.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un elemento para rotar\");\nElement elem = doc.GetElement(pickedRef.ElementId);\nLocationPoint lp = elem.Location as LocationPoint;\nLine axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\nElementTransformUtils.RotateElement(doc, elem.Id, axis, Math.PI \/ 91);"}
{"prompt":"Create a radial dimension for a curved wall.","completion":"using (Transaction t = new Transaction(doc, \"Create Radial Dimension\"))\n{\n    t.Start();\n    Wall curvedWall = new FilteredElementCollector(doc, doc.ActiveView.Id).OfClass(typeof(Wall)).Cast<Wall>().FirstOrDefault(w => w.Location is LocationCurve && (w.Location as LocationCurve).Curve is Arc);\n    View activeView = doc.ActiveView;\n\n    if (curvedWall != null && activeView != null)\n    {\n        LocationCurve locCurve = curvedWall.Location as LocationCurve;\n        if (locCurve != null)\n        {\n            Arc arc = locCurve.Curve as Arc;\n            if (arc != null)\n            {\n                ReferenceArray refArray = new ReferenceArray();\n                refArray.Append(arc.Reference);\n                doc.Create.NewDimension(activeView, Line.CreateBound(arc.Center, arc.GetEndPoint(0)), refArray);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Cambia el tipo de la ventana seleccionada al tipo 'Fija 115x60'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una ventana\");\nFamilySymbol newType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name == \"Fija 115x60\");\nif (pickedRef != null && newType != null)\n{\n    FamilyInstance window = doc.GetElement(pickedRef.ElementId) as FamilyInstance;\n    if (window != null)\n    {\n        window.Symbol = newType;\n    }\n}"}
{"prompt":"Create a view filter to hide demolished walls.","completion":"using (Transaction t = new Transaction(doc, \"Create Demolition Filter\"))\n{\n    t.Start();\n    Phase demolishedPhase = new FilteredElementCollector(doc).OfClass(typeof(Phase)).Cast<Phase>().FirstOrDefault(p => p.Name.Contains(\"Demolished\") || p.Name.Contains(\"Demolición\"));\n    View activeView = doc.ActiveView;\n\n    if (demolishedPhase != null && activeView != null)\n    {\n        ElementId paramId = new ElementId(BuiltInParameter.PHASE_DEMOLISHED);\n        FilterRule rule = ParameterFilterRuleFactory.CreateEqualsRule(paramId, demolishedPhase.Id);\n        ElementFilter filter = new ElementParameterFilter(rule);\n        ICollection<ElementId> categories = new List<ElementId>{ new ElementId(BuiltInCategory.OST_Walls) };\n        ParameterFilterElement pfe = ParameterFilterElement.Create(doc, \"Demolition Filter\", categories, filter);\n        \n        if (pfe != null)\n        {\n            activeView.AddFilter(pfe.Id);\n            activeView.SetFilterVisibility(pfe.Id, false);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create a grid of 5 horizontal and 5 vertical grids, spaced 6 meters apart.","completion":"double spacing = UnitUtils.ConvertToInternalUnits(6, UnitTypeId.Meters);\nint count = 5;\nfor (int i = 0; i < count; i++)\n{\n    Line line = Line.CreateBound(new XYZ(0, i * spacing, 0), new XYZ((count - 1) * spacing, i * spacing, 0));\n    Grid.Create(doc, line);\n}\nfor (int i = 0; i < count; i++)\n{\n    Line line = Line.CreateBound(new XYZ(i * spacing, 0, 0), new XYZ(i * spacing, (count - 1) * spacing, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Ajusta todas las ventanas para que tengan la altura del antepecho a 905mm.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits(905, UnitTypeId.Millimeters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Ubica una instancia de la familia 'Mesa de Oficina' en el centro de la habitación 'Despacho 100'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 100\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Mesa de Oficina\") as FamilySymbol;\nif(furnitureSymbol != null && !furnitureSymbol.IsActive) furnitureSymbol.Activate();\nif(room != null)\n{\n    LocationPoint roomCenter = room.Location as LocationPoint;\n    if(roomCenter != null && furnitureSymbol != null && room.Level != null)\n    {\n        doc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Create 10 architectural worksets.","completion":"List<string> worksetNames = new List<string> { \"TAD_ARQ_WALLS\", \"TAD_ARQ_FINISHES\", \"TAD_ARQ_CEILINGS\", \"TAD_ARQ_FLOORS\", \"TAD_ARQ_RAILINGS\", \"TAD_ARQ_WINDOWS\", \"TAD_ARQ_CARPENTRY\", \"TAD_ARQ_FURNITURE\", \"TAD_ARQ_PLUMBING\", \"TAD_ARQ_EXTERIOR\" };\nforeach(string name in worksetNames)\n{\n    Workset newWorkset = Workset.Create(doc, name);\n}"}
{"prompt":"Build a new level 'Level 8' at an elevation of 9 meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(9, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\nif (newLevel != null)\n{\n    try { newLevel.Name = \"Level 8\"; } catch {}\n}"}
{"prompt":"Assign the sill height of all windows to 899mm.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits(899, UnitTypeId.Millimeters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Given a wall, get its materials and their volumes.","completion":"UIDocument localUidoc = uidoc;\nReference pickedRef = localUidoc.Selection.PickObject(ObjectType.Element, \"Select a wall\");\n\nDictionary<string, double> materialVolumes = new Dictionary<string, double>();\nif (pickedRef != null)\n{\n    Wall wall = doc.GetElement(pickedRef) as Wall;\n    if (wall != null)\n    {\n        Parameter areaParam = wall.get_Parameter(BuiltInParameter.HOST_AREA_COMPUTED);\n        if (areaParam != null && areaParam.HasValue)\n        {\n            double wallArea = areaParam.AsDouble();\n            WallType wallType = wall.WallType;\n            if (wallType != null)\n            {\n                CompoundStructure cs = wallType.GetCompoundStructure();\n                if (cs != null)\n                {\n                    foreach(CompoundStructureLayer layer in cs.GetLayers())\n                    {\n                        Material material = doc.GetElement(layer.MaterialId) as Material;\n                        if(material != null)\n                        {\n                            double volume = layer.Width * wallArea;\n                            materialVolumes[material.Name] = volume;\n                        }\n                    }\n                }\n            }\n        }\n    }\n}"}
{"prompt":"Cambia un panel de vidrio de un muro cortina por un panel sólido.","completion":"using (Transaction t = new Transaction(doc, \"Change Curtain Panel\"))\n{\n    t.Start();\n    Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Cast<Wall>().FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain);\n    FamilySymbol solidPanelType = new FilteredElementCollector(doc).OfClass(typeof(FamilySymbol)).Cast<FamilySymbol>().FirstOrDefault(fs => fs.Family.FamilyCategory.Id.IntegerValue == (int)BuiltInCategory.OST_CurtainWallPanels && (fs.Name.Contains(\"Solid\") || fs.Name.Contains(\"Sólido\")));\n\n    if (curtainWall != null && solidPanelType != null)\n    {\n        CurtainGrid grid = curtainWall.CurtainGrid;\n        if (grid != null)\n        {\n            ElementId panelIdToChange = grid.GetPanelIds().FirstOrDefault();\n            if (panelIdToChange != ElementId.InvalidElementId)\n            {\n                Panel panelToChange = doc.GetElement(panelIdToChange) as Panel;\n                if (panelToChange != null) panelToChange.ChangeTypeId(solidPanelType.Id);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Ajusta el tipo de todos los muros seleccionados a 'Muro Exterior'.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nWallType targetWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Name == \"Muro Exterior\");\n\nif (selectedIds.Count > 0 && targetWallType != null)\n{\n    foreach(ElementId id in selectedIds)\n    {\n        Wall wall = doc.GetElement(id) as Wall;\n        if(wall != null) wall.ChangeTypeId(targetWallType.Id);\n    }\n}"}
{"prompt":"Mueve un elemento seleccionado a la posición (2,8).","completion":"ICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds.Any())\n{\n    foreach (ElementId id in selectedIds)\n    {\n        Element elem = doc.GetElement(id);\n        if (elem != null)\n        {\n            LocationPoint lp = elem.Location as LocationPoint;\n            if (lp != null)\n            {\n                XYZ newPosition = new XYZ(2, 8, lp.Point.Z);\n                lp.Point = newPosition;\n            }\n        }\n    }\n}"}
{"prompt":"Cambia el tipo de la ventana seleccionada al tipo 'Puerta Sencilla'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una ventana\");\nFamilySymbol newType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name == \"Puerta Sencilla\");\nif (pickedRef != null && newType != null)\n{\n    FamilyInstance window = doc.GetElement(pickedRef.ElementId) as FamilyInstance;\n    if (window != null)\n    {\n        window.Symbol = newType;\n    }\n}"}
{"prompt":"Hide all annotation categories in the active view.","completion":"using (Transaction t = new Transaction(doc, \"Hide Annotation Categories\"))\n{\n    t.Start();\n    Categories categories = doc.Settings.Categories;\n    View activeView = doc.ActiveView;\n\n    if (activeView != null)\n    {\n        foreach(Category cat in categories)\n        {\n            if(cat.CategoryType == CategoryType.Annotation && cat.get_AllowsVisibilityControl(activeView))\n            {\n                 activeView.SetCategoryHidden(cat.Id, true);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create a new pipe type with Copper material.","completion":"string newTypeName = \"Copper Pipe\";\nPipeType pipeTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(PipeType)).FirstOrDefault() as PipeType;\nMaterial copper = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name.Contains(\"Copper\")) as Material;\n\nif (pipeTypeToDuplicate != null && copper != null)\n{\n    PipeType newType = pipeTypeToDuplicate.Duplicate(newTypeName) as PipeType;\n    if (newType != null)\n    {\n        Parameter materialParam = newType.get_Parameter(BuiltInParameter.MATERIAL_ID_PARAM);\n        if (materialParam != null && !materialParam.IsReadOnly) materialParam.Set(copper.Id);\n    }\n}"}
{"prompt":"Genera un equipo eléctrico en X=1,Y=1.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol panelSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_ElectricalEquipment).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null && panelSymbol != null)\n{\n    if (!panelSymbol.IsActive)\n    {\n        panelSymbol.Activate();\n    }\n    XYZ point = new XYZ(1, 1, 0);\n    doc.Create.NewFamilyInstance(point, panelSymbol, level, StructuralType.NonStructural);\n}"}
{"prompt":"Join the geometry of an intersecting column and floor.","completion":"Element column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().FirstOrDefault();\nElement floor = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault();\n\nif (column != null && floor != null)\n{\n    JoinGeometryUtils.JoinGeometry(doc, column, floor);\n}"}
{"prompt":"Rotate a selected element 86 degrees around its Z-axis.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select an element to rotate\");\nElement elem = doc.GetElement(pickedRef.ElementId);\nLocationPoint lp = elem.Location as LocationPoint;\nLine axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\nElementTransformUtils.RotateElement(doc, elem.Id, axis, Math.PI \/ 86);"}
{"prompt":"Obtén una lista de los nombres de todos los materiales.","completion":"List<Material> materials = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().ToList();\nList<string> materialNames = new List<string>();\nforeach(Material m in materials)\n{\n    materialNames.Add(m.Name);\n}\n"}
{"prompt":"Find all walls that have no base level assigned.","completion":"ElementFilter unassociatedFilter = new ElementLevelFilter(ElementId.InvalidElementId);\nList<Element> unassignedWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(unassociatedFilter).ToList();"}
{"prompt":"Add a horizontal reference plane named 'Centerline A'.","completion":"using (Transaction t = new Transaction(doc, \"Add Reference Plane\"))\n{\n    t.Start();\n    string rpName = \"Centerline A\";\n    View activeView = doc.ActiveView;\n\n    if (activeView != null)\n    {\n        XYZ bubbleEnd = new XYZ(0, 10, 0);\n        XYZ freeEnd = new XYZ(10, 10, 0);\n        XYZ cutVec = XYZ.BasisZ;\n        ReferencePlane rp = doc.Create.NewReferencePlane(bubbleEnd, freeEnd, cutVec, activeView);\n        if (rp != null)\n        {\n            rp.Name = rpName;\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create a global length parameter named 'CorridorWidth' with a value of 1.3m.","completion":"string paramName = \"CorridorWidth\";\nGlobalParameter gp = GlobalParameter.Create(doc, paramName, SpecTypeId.Length);\n\nif (gp != null)\n{\n    gp.SetValue(new DoubleParameterValue(UnitUtils.ConvertToInternalUnits(1.3, UnitTypeId.Meters)));\n}"}
{"prompt":"Fetch the MEP space associated with the room 'Office 100'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Cast<Room>().FirstOrDefault(r => r.Name == \"Office 100\");\nList<Space> spaces = new List<Space>();\n\nif (room != null)\n{\n    spaces = new FilteredElementCollector(doc).OfClass(typeof(Space)).Cast<Space>().Where(s => s.Room != null && s.Room.Id == room.Id).ToList();\n}"}
{"prompt":"Actualiza el tipo de todas las ventanas de 'Fijo' a 'Abatible'.","completion":"FamilySymbol newType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name.Contains(\"Abatible\"));\nFamilySymbol oldType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name.Contains(\"Fijo\"));\n\nif (newType != null && oldType != null)\n{\n    List<FamilyInstance> windowsToChange = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().Where(fi => fi.Symbol.Id == oldType.Id).ToList();\n    foreach (FamilyInstance window in windowsToChange)\n    {\n        window.Symbol = newType;\n    }\n}"}
{"prompt":"Modela un plafón a 2.8 metros de altura en el Nivel 1.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\nCeilingType ceilingType = new FilteredElementCollector(doc).OfClass(typeof(CeilingType)).FirstOrDefault() as CeilingType;\nif (ceilingType != null && level != null)\n{\n    CurveLoop profile = new CurveLoop();\n    profile.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(10,0,0)));\n    profile.Append(Line.CreateBound(new XYZ(10,0,0), new XYZ(10,10,0)));\n    profile.Append(Line.CreateBound(new XYZ(10,10,0), new XYZ(0,10,0)));\n    profile.Append(Line.CreateBound(new XYZ(0,10,0), new XYZ(0,0,0)));\n    Ceiling ceiling = Ceiling.Create(doc, new List<CurveLoop>{profile}, ceilingType.Id, level.Id);\n    if (ceiling != null)\n    {\n        Parameter heightParam = ceiling.get_Parameter(BuiltInParameter.CEILING_HEIGHTABOVELEVEL_PARAM);\n        if (heightParam != null && !heightParam.IsReadOnly) heightParam.Set(UnitUtils.ConvertToInternalUnits(2.8, UnitTypeId.Meters));\n    }\n}"}
{"prompt":"Assign the 'Comments' parameter for all doors on Level 5 to 'Fire Rating - 93 min'.","completion":"string levelName = \"Level 5\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(targetLevel.Id);\n    FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WherePasses(levelFilter);\n    foreach (Element door in collector)\n    {\n        Parameter commentsParam = door.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n        if (commentsParam != null && !commentsParam.IsReadOnly) { commentsParam.Set(\"Fire Rating - 93 min\"); }\n    }\n}"}
{"prompt":"Build a 'Roof Terrace' level at 13m.","completion":"string levelName = \"Roof Terrace\";\ndouble elev = UnitUtils.ConvertToInternalUnits(13, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elev);\nnewLevel.Name = levelName;\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Build a pipe with a 150mm diameter.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nPipeType pipeType = new FilteredElementCollector(doc).OfClass(typeof(PipeType)).FirstOrDefault() as PipeType;\nPipingSystemType systemType = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).FirstOrDefault() as PipingSystemType;\n\nif (level != null && pipeType != null && systemType != null)\n{\n    \/\/ Create a default 10ft long pipe as the prompt is not specific\n    XYZ p1 = new XYZ(0, 0, 0);\n    XYZ p2 = new XYZ(10, 0, 0);\n    Pipe pipe = Pipe.Create(doc, systemType.Id, pipeType.Id, level.Id, p1, p2);\n\n    if (pipe != null)\n    {\n        Parameter diameterParam = pipe.get_Parameter(BuiltInParameter.RBS_PIPE_DIAMETER_PARAM);\n        if (diameterParam != null && !diameterParam.IsReadOnly)\n        {\n            diameterParam.Set(UnitUtils.ConvertToInternalUnits(150, UnitTypeId.Millimeters));\n        }\n    }\n}"}
{"prompt":"Coloca una instancia de la familia 'Ventana Fija 124x60' en el centro de la habitación 'Despacho 102'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 124\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Ventana Fija 102x60\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);"}
{"prompt":"Set the sill height of all windows to 5 meter.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Spin a selected element 93 degrees around its Z-axis.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select an element to rotate\");\nElement elem = doc.GetElement(pickedRef.ElementId);\nLocationPoint lp = elem.Location as LocationPoint;\nLine axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\nElementTransformUtils.RotateElement(doc, elem.Id, axis, Math.PI \/ 93);"}
{"prompt":"Move the project base point 100 meters to the north.","completion":"using (Transaction t = new Transaction(doc, \"Move Project Base Point\"))\n{\n    t.Start();\n    BasePoint projectBasePoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(bp => !bp.IsShared);\n\n    if (projectBasePoint != null)\n    {\n        XYZ translation = new XYZ(0, 100 \/ 0.3048, 0);\n        ElementTransformUtils.MoveElement(doc, projectBasePoint.Id, translation);\n    }\n    t.Commit();\n}"}
{"prompt":"Cambia el estilo visual de la vista activa a 'Línea Oculta'.","completion":"View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.DisplayStyle = DisplayStyle.HLR;\n}"}
{"prompt":"Export the current 3D view to NWC for Navisworks.","completion":"View3D view3d = doc.ActiveView as View3D;\n\nif (view3d != null)\n{\n    string folderPath = \"C:\/RevitExports\/\";\n    string fileName = view3d.Name + \".nwc\";\n    NavisworksExportOptions options = new NavisworksExportOptions();\n    options.ExportScope = NavisworksExportScope.View;\n    options.ViewId = view3d.Id;\n    doc.Export(folderPath, fileName, options);\n}"}
{"prompt":"Place an instance of the 'Office Desk' family in the center of the 'Office 102' room.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Office 102\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Office Desk\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);"}
{"prompt":"Selecciona todos los muros con una resistencia al fuego de 90 minutos.","completion":"ElementId fireRatingParamId = new ElementId(BuiltInParameter.FIRE_RATING);\nParameterValueProvider pvp = new ParameterValueProvider(fireRatingParamId);\nFilterStringRuleEvaluator evaluator = new FilterStringEquals();\nFilterRule rule = new FilterStringRule(pvp, evaluator, \"90 min\");\nElementParameterFilter filter = new ElementParameterFilter(rule);\nICollection<ElementId> wallsToSelect = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(filter).ToElementIds();\nif (wallsToSelect.Count > 0)\n{\n    new UIDocument(doc).Selection.SetElementIds(wallsToSelect);\n}"}
{"prompt":"Crea una nueva revisión y aplícala a la hoja activa.","completion":"Revision rev = Revision.Create(doc);\nViewSheet sheet = doc.ActiveView as ViewSheet;\n\nif (rev != null && sheet != null)\n{\n    rev.Description = \"Emitido para Construcción\";\n    rev.RevisionDate = DateTime.Now.ToString(\"yyyy-MM-dd\");\n    rev.IssuedBy = \"Departamento BIM\";\n    \n    ICollection<ElementId> revisions = sheet.GetAdditionalRevisionIds();\n    revisions.Add(rev.Id);\n    sheet.SetAdditionalRevisionIds(revisions);\n}"}
{"prompt":"Construct a new level 'Level 1' at an elevation of 15 meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(15, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Level 1\";\n}"}
{"prompt":"Crea un nuevo tipo de muro de 27cm llamado 'Muro Estructural 29cm'.","completion":"WallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif(wallTypeToDuplicate != null)\n{\n    WallType newWallType = null;\n    try { newWallType = wallTypeToDuplicate.Duplicate(\"Muro Estructural 29cm\") as WallType; } catch {}\n    if(newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if(cs != null && cs.GetLayers().Any())\n        {\n            int coreLayerIndex = cs.GetFirstCoreLayerIndex();\n            if(coreLayerIndex != -1) \n            {\n                cs.SetLayerFunction(coreLayerIndex, MaterialFunctionAssignment.Structure);\n                cs.SetLayerWidth(coreLayerIndex, UnitUtils.ConvertToInternalUnits(27, UnitTypeId.Centimeters));\n                newWallType.SetCompoundStructure(cs);\n            }\n        }\n    }\n}"}
{"prompt":"Construct an electrical conduit with a 1-inch diameter.","completion":"using (Transaction t = new Transaction(doc, \"Create Conduit\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    ElementId conduitTypeId = new FilteredElementCollector(doc).OfClass(typeof(ConduitType)).FirstElementId();\n\n    if (level != null && conduitTypeId != null && conduitTypeId != ElementId.InvalidElementId)\n    {\n        XYZ start = new XYZ(0, 0, 3 \/ 0.3048);\n        XYZ end = new XYZ(5 \/ 0.3048, 0, 3 \/ 0.3048);\n        Conduit conduit = Conduit.Create(doc, conduitTypeId, start, end, level.Id);\n\n        if (conduit != null)\n        {\n            Parameter diameterParam = conduit.get_Parameter(BuiltInParameter.RBS_CONDUIT_DIAMETER_PARAM);\n            if (diameterParam != null && !diameterParam.IsReadOnly)\n            {\n                diameterParam.Set(1.0\/12.0);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea un tipo de muro 'Muro-Doble' de 30cm y luego crea un muro de ese tipo.","completion":"using (Transaction t = new Transaction(doc, \"Create Wall Type and Wall\"))\n{\n    t.Start();\n    string newTypeName = \"Muro-Doble\";\n    WallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n    WallType newWallType = null;\n    if (wallTypeToDuplicate != null)\n    {\n        newWallType = wallTypeToDuplicate.Duplicate(newTypeName) as WallType;\n        if (newWallType != null)\n        {\n            CompoundStructure cs = newWallType.GetCompoundStructure();\n            if (cs != null && cs.LayerCount > 0)\n            {\n                cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), 0.3 \/ 0.3048);\n                newWallType.SetCompoundStructure(cs);\n            }\n        }\n    }\n    if (newWallType != null)\n    {\n        Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n        Line wallCurve = Line.CreateBound(XYZ.Zero, new XYZ(10 \/ 0.3048, 0, 0));\n        double height = 3 \/ 0.3048;\n        if (level != null)\n        {\n            Wall.Create(doc, wallCurve, newWallType.Id, level.Id, height, 0, false, false);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Rotate the given element 45 degrees about its center.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select an element to rotate\");\n\nif (pickedRef != null)\n{\n    Element elem = doc.GetElement(pickedRef.ElementId);\n    if (elem != null)\n    {\n        LocationPoint lp = elem.Location as LocationPoint;\n        if (lp != null)\n        {\n            Line axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\n            double angle = 45 * Math.PI \/ 180.0;\n            ElementTransformUtils.RotateElement(doc, elem.Id, axis, angle);\n        }\n    }\n}"}
{"prompt":"Cambia el nombre de todas las tablas que contienen 'Puertas' por 'Listado de Puertas'.","completion":"List<ViewSchedule> schedules = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().Where(vs => vs.Name.Contains(\"Puertas\")).ToList();\nforeach(ViewSchedule schedule in schedules)\n{\n    schedule.Name = schedule.Name.Replace(\"Puertas\", \"Listado de Puertas\");\n}"}
{"prompt":"Carga la familia desde la ruta \"C:\\Librerias\\Puerta Principal.rfa\".","completion":"string familyPath = @\"C:\\Librerias\\Puerta Principal.rfa\";\nFamily loadedFamily = null;\ndoc.LoadFamily(familyPath, out loadedFamily);"}
{"prompt":"Reproduce el nivel 1 con un desfase de 8m y llámalo 'Mezanine'.","completion":"string levelName = \"Mezanine\";\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\n\nif (level1 != null)\n{\n    double newElevation = level1.ProjectElevation + UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, newElevation);\n    if (newLevel != null)\n    {\n        newLevel.Name = levelName;\n    }\n}"}
{"prompt":"Get the total area of 'Exterior - Brick on CMU' walls.","completion":"WallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == \"Exterior - Brick on CMU\") as WallType;\ndouble totalArea = 0.0;\n\nif (wallType != null)\n{\n    FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType();\n    IList<Wall> walls = collector.Cast<Wall>().Where(w => w.GetTypeId().Equals(wallType.Id)).ToList();\n\n    foreach (Wall wall in walls)\n    {\n        Parameter areaParam = wall.get_Parameter(BuiltInParameter.HOST_AREA_COMPUTED);\n        if (areaParam != null) totalArea += areaParam.AsDouble();\n    }\n}\ndouble totalAreaFt2 = UnitUtils.ConvertFromInternalUnits(totalArea, UnitTypeId.SquareFeet);"}
{"prompt":"Shape a ceiling at a height of 2.8 meters on Level 1.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nCeilingType ceilingType = new FilteredElementCollector(doc).OfClass(typeof(CeilingType)).FirstOrDefault() as CeilingType;\nif (ceilingType != null && level != null)\n{\n    CurveLoop profile = new CurveLoop();\n    profile.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(30,0,0)));\n    profile.Append(Line.CreateBound(new XYZ(30,0,0), new XYZ(30,30,0)));\n    profile.Append(Line.CreateBound(new XYZ(30,30,0), new XYZ(0,30,0)));\n    profile.Append(Line.CreateBound(new XYZ(0,30,0), new XYZ(0,0,0)));\n    Ceiling ceiling = Ceiling.Create(doc, new List<CurveLoop>{profile}, ceilingType.Id, level.Id);\n    if (ceiling != null)\n    {\n        Parameter heightParam = ceiling.get_Parameter(BuiltInParameter.CEILING_HEIGHTABOVELEVEL_PARAM);\n        if (heightParam != null && !heightParam.IsReadOnly) heightParam.Set(UnitUtils.ConvertToInternalUnits(2.8, UnitTypeId.Meters));\n    }\n}"}
{"prompt":"Coloca una instancia de la familia 'Mesa de Oficina' en el centro de la habitación 'Despacho 104'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 104\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Mesa de Oficina\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);"}
{"prompt":"Añade refuerzo a una columna.","completion":"RebarBarType barType = new FilteredElementCollector(doc).OfClass(typeof(RebarBarType)).FirstOrDefault() as RebarBarType;\nRebarShape shape = new FilteredElementCollector(doc).OfClass(typeof(RebarShape)).FirstOrDefault() as RebarShape;\nFamilyInstance column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\n\nif (barType != null && shape != null && column != null)\n{\n    Rebar.CreateFromRebarShape(doc, shape, barType, column, column.GetTransform().Origin, XYZ.BasisX, XYZ.BasisY);\n}"}
{"prompt":"Cambia el tipo de todos los muros seleccionados a 'Muro Exterior'.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nWallType targetWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Name == \"Muro Exterior\");\nif(targetWallType != null)\n{\n    foreach(ElementId id in selectedIds)\n    {\n        Wall wall = doc.GetElement(id) as Wall;\n        if(wall != null)\n        {\n            wall.ChangeTypeId(targetWallType.Id);\n        }\n    }\n}"}
{"prompt":"Put an instance of the 'Office Desk' family in the center of the 'Office 105' room.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Office 105\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Office Desk\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);"}
{"prompt":"Find the structural column type named \"300 x 450mm\" and place it at X=-8, Y=12.","completion":"string columnTypeName = \"300 x 450mm\";\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(s => s.Name == columnTypeName);\n\nif (level != null && columnSymbol != null)\n{\n    if (!columnSymbol.IsActive)\n    {\n        columnSymbol.Activate();\n    }\n    doc.Create.NewFamilyInstance(new XYZ(-8, 12, 0), columnSymbol, level, StructuralType.Column);\n}"}
{"prompt":"Crea un nivel intermedio llamado 'Mezzanine' a mitad de camino entre el Nivel 1 y el Nivel 2.","completion":"string newLevelName = \"Mezzanine\";\nLevel lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Nivel 1\");\nLevel lvl2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Nivel 2\");\nif (lvl1 != null && lvl2 != null)\n{\ndouble midElevation = (lvl1.ProjectElevation + lvl2.ProjectElevation) \/ 2.0;\nLevel newLevel = Level.Create(doc, midElevation);\n    if(newLevel != null)\n    {\nnewLevel.Name = newLevelName;\n    }\n}"}
{"prompt":"Build a new Level named 'Level 1' at an elevation of 13 meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(13, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Level 1\";\n}"}
{"prompt":"Añade refuerzo a una columna.","completion":"RebarBarType barType = new FilteredElementCollector(doc).OfClass(typeof(RebarBarType)).FirstOrDefault() as RebarBarType;\nRebarShape shape = new FilteredElementCollector(doc).OfClass(typeof(RebarShape)).FirstOrDefault() as RebarShape;\nFamilyInstance column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\n\nif (barType != null && shape != null && column != null)\n{\n    Rebar.CreateFromRebarShape(doc, shape, barType, column, column.GetTransform().Origin, XYZ.BasisX, XYZ.BasisY);\n}"}
{"prompt":"Crea una nueva tabla de planificación para ventanas que incluya Marca de Tipo, Ancho y Alto.","completion":"string scheduleName = \"Tabla de Ventanas\";\nViewSchedule schedule = ViewSchedule.CreateSchedule(doc, new ElementId(BuiltInCategory.OST_Windows));\n\nif (schedule != null)\n{\n    schedule.Name = scheduleName;\n    ScheduleDefinition def = schedule.Definition;\n    if (def != null)\n    {\n        SchedulableField typeMarkField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.ALL_MODEL_TYPE_MARK);\n        SchedulableField widthField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.FAMILY_WIDTH_PARAM);\n        SchedulableField heightField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.FAMILY_HEIGHT_PARAM);\n        \n        if (typeMarkField != null) def.AddField(typeMarkField);\n        if (widthField != null) def.AddField(widthField);\n        if (heightField != null) def.AddField(heightField);\n    }\n}"}
{"prompt":"Reproduce el tipo de muro 'Genérico - 191mm' y nómbralo 'Interior - 15cm Yeso'.","completion":"string originalName = \"Genérico - 191mm\";\nstring newName = \"Interior - 15cm Yeso\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif(originalType!=null)\n    originalType.Duplicate(newName);"}
{"prompt":"Find all doors on Level 2 that belong to the 'Single-Flush' family.","completion":"Level level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 2\");\nList<Element> doors = new List<Element>();\n\nif (level2 != null)\n{\n    ElementCategoryFilter catFilter = new ElementCategoryFilter(BuiltInCategory.OST_Doors);\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level2.Id);\n    FilterableValueProvider provider = new ParameterValueProvider(new ElementId(BuiltInParameter.ELEM_FAMILY_PARAM));\n    FilterStringRuleEvaluator evaluator = new FilterStringEquals();\n    FilterRule famNameRule = new FilterStringRule(provider, evaluator, \"Single-Flush\");\n    ElementParameterFilter famFilter = new ElementParameterFilter(famNameRule);\n    LogicalAndFilter andFilter = new LogicalAndFilter(new List<ElementFilter> { catFilter, levelFilter, famFilter });\n    doors = new FilteredElementCollector(doc).WherePasses(andFilter).ToList();\n}"}
{"prompt":"Build a floor plan view for 'Level 5'.","completion":"string levelName = \"Level 5\";\nLevel level3 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.FloorPlan);\n\nif (level3 != null && vft != null)\n{\n    ViewPlan viewPlan = ViewPlan.Create(doc, vft.Id, level3.Id);\n}"}
{"prompt":"Find out who the owner of a selected element is.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select an element\");\n\nWorksharingTooltipInfo info = null;\nif (pickedRef != null)\n{\n    info = WorksharingUtils.GetWorksharingTooltipInfo(doc, pickedRef.ElementId);\n}\n"}
{"prompt":"Retrieve the 'Walls' schedule and export its data to CSV.","completion":"ViewSchedule schedule = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().FirstOrDefault(s=>s.Name==\"Walls\");\n\nif (schedule != null)\n{\n    string folderPath = \"C:\/RevitExports\/\";\n    ViewScheduleExportOptions options = new ViewScheduleExportOptions() { FieldDelimiter = \",\" };\n    schedule.Export(folderPath, \"Walls.csv\", options);\n}"}
{"prompt":"Configure the 'Mark' parameter of all selected walls to 'W-EXT-01'.","completion":"using (Transaction t = new Transaction(doc, \"Set Wall Mark\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    ICollection<ElementId> selectedIds = localUidoc.Selection.GetElementIds();\n\n    if (selectedIds != null && selectedIds.Count > 0)\n    {\n        foreach(ElementId id in selectedIds)\n        {\n            Element elem = doc.GetElement(id);\n            if(elem is Wall)\n            {\n                Parameter p = elem.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n                if (p != null && !p.IsReadOnly)\n                {\n                    p.Set(\"W-EXT-01\");\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea una vista de plano de plafón reflejado para el Nivel 1.","completion":"string levelName = \"Nivel 1\";\nstring viewName = \"Plano de Plafón Nivel 1\";\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.CeilingPlan);\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\n\nif (vft != null && level1 != null)\n{\n    ViewPlan rcp = ViewPlan.Create(doc, vft.Id, level1.Id);\n    if (rcp != null)\n    {\n        rcp.Name = viewName;\n    }\n}"}
{"prompt":"Ajusta la escala de la vista activa a 1:50.","completion":"View activeView = doc.ActiveView;\nif (activeView != null)\n{\n    activeView.Scale = 50;\n}"}
{"prompt":"Create a new window schedule that includes Type Mark, Width, and Height.","completion":"string scheduleName = \"Window Schedule\";\nViewSchedule schedule = ViewSchedule.CreateSchedule(doc, new ElementId(BuiltInCategory.OST_Windows));\n\nif (schedule != null)\n{\n    schedule.Name = scheduleName;\n    ScheduleDefinition def = schedule.Definition;\n    if (def != null)\n    {\n        SchedulableField typeMarkField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.ALL_MODEL_TYPE_MARK);\n        SchedulableField widthField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.FAMILY_WIDTH_PARAM);\n        SchedulableField heightField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.FAMILY_HEIGHT_PARAM);\n        \n        if (typeMarkField != null) def.AddField(typeMarkField);\n        if (widthField != null) def.AddField(widthField);\n        if (heightField != null) def.AddField(heightField);\n    }\n}"}
{"prompt":"Crea una puerta de 0.9m de ancho y 2.1m de alto en el muro.","completion":"Wall hostWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nFamilySymbol originalSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (originalSymbol != null && hostWall != null)\n{\n    string newTypeName = \"Door 0.9m x 2.1m\";\n    FamilySymbol newSymbol = originalSymbol.Duplicate(newTypeName) as FamilySymbol;\n    if (newSymbol == null) return;\n\n    if (!newSymbol.IsActive)\n    {\n        newSymbol.Activate();\n    }\n\n    Parameter widthParam = newSymbol.get_Parameter(BuiltInParameter.FAMILY_WIDTH_PARAM);\n    Parameter heightParam = newSymbol.get_Parameter(BuiltInParameter.FAMILY_HEIGHT_PARAM);\n\n    if (widthParam != null && heightParam != null && !widthParam.IsReadOnly && !heightParam.IsReadOnly)\n    {\n        widthParam.Set(UnitUtils.ConvertToInternalUnits(0.9, UnitTypeId.Meters));\n        heightParam.Set(UnitUtils.ConvertToInternalUnits(2.1, UnitTypeId.Meters));\n    }\n\n    Level level = doc.GetElement(hostWall.LevelId) as Level;\n    LocationCurve locationCurve = hostWall.Location as LocationCurve;\n    if (level != null && locationCurve != null)\n    {\n        XYZ insertionPoint = locationCurve.Curve.Evaluate(0.5, true);\n        doc.Create.NewFamilyInstance(insertionPoint, newSymbol, hostWall, level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Generate a section view named 'Longitudinal Section'.","completion":"ViewFamilyType sectionType = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.Section);\nif (sectionType != null)\n{\n    BoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\n    sectionBox.Min = new XYZ(-30, -3, 0);\n    sectionBox.Max = new XYZ(30, 3, 30);\n    Transform transform = Transform.Identity;\n    sectionBox.Transform = transform;\n    ViewSection sectionView = ViewSection.CreateSection(doc, sectionType.Id, sectionBox);\n    if (sectionView != null)\n    {\n        try { sectionView.Name = \"Longitudinal Section\"; } catch {}\n    }\n}"}
{"prompt":"Retrieve the MEP space associated with the room 'Office 100'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Cast<Room>().FirstOrDefault(r => r.Name == \"Office 100\");\nList<Space> spaces = new List<Space>();\n\nif (room != null)\n{\n    spaces = new FilteredElementCollector(doc).OfClass(typeof(Space)).Cast<Space>().Where(s => s.Room != null && s.Room.Id == room.Id).ToList();\n}"}
{"prompt":"Crea una rejilla de 5 ejes horizontales y 5 verticales, espaciados 6 metros.","completion":"double spacing = UnitUtils.ConvertToInternalUnits(6, UnitTypeId.Meters);\nint count = 5;\nfor (int i = 0; i < count; i++)\n{\n    Line line = Line.CreateBound(new XYZ(0, i * spacing, 0), new XYZ((count - 1) * spacing, i * spacing, 0));\n    Grid.Create(doc, line);\n}\nfor (int i = 0; i < count; i++)\n{\n    Line line = Line.CreateBound(new XYZ(i * spacing, 0, 0), new XYZ(i * spacing, (count - 1) * spacing, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Obtain all subcategories from the Walls category.","completion":"Category wallCat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Walls);\nCategoryNameMap subcategories = wallCat.SubCategories;"}
{"prompt":"Generate a 5x5 column grid with 8-meter spacing.","completion":"FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (columnSymbol != null && level != null)\n{\n    if (!columnSymbol.IsActive)\n    {\n        columnSymbol.Activate();\n    }\n    double spacing = UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters);\n    for (int i = 0; i < 5; i++)\n    {\n        for (int j = 0; j < 5; j++)\n        {\n            doc.Create.NewFamilyInstance(new XYZ(i * spacing, j * spacing, 0), columnSymbol, level, StructuralType.Column);\n        }\n    }\n}"}
{"prompt":"Find all doors on Level 1 that belong to the 'Single-Flush' family.","completion":"string levelName = \"Level 1\";\nstring familyName = \"Single-Flush\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WherePasses(new ElementLevelFilter(targetLevel.Id));\n    List<ElementId> doorIds = new List<ElementId>();\n    foreach (Element door in collector)\n    {\n        FamilyInstance fi = door as FamilyInstance;\n        if (fi != null && fi.Symbol.Family.Name == familyName)\n        {\n            doorIds.Add(door.Id);\n        }\n    }\n    uidoc.Selection.SetElementIds(doorIds);\n}"}
{"prompt":"Create a new wall type 'Generic Wall 300mm' with a thickness of 30cm.","completion":"using (Transaction t = new Transaction(doc, \"Create Wall Type\"))\n{\n    t.Start();\n    string newTypeName = \"Generic Wall 300mm\";\n    WallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\n    if (oldWallType != null)\n    {\n        WallType newWallType = oldWallType.Duplicate(newTypeName) as WallType;\n        if (newWallType != null)\n        {\n            CompoundStructure cs = newWallType.GetCompoundStructure();\n            if (cs != null && cs.LayerCount > 0)\n            {\n                int coreLayerIndex = cs.GetFirstCoreLayerIndex();\n                if (coreLayerIndex >= 0 && coreLayerIndex < cs.LayerCount)\n                {\n                    cs.SetLayerWidth(coreLayerIndex, 300 \/ 304.8);\n                    newWallType.SetCompoundStructure(cs);\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Copy the 'Level 6' view as a dependent view.","completion":"ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v => v.Name == \"Level 6\") as ViewPlan;\n\nif (viewToDuplicate != null)\n{\n    ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n}"}
{"prompt":"Crea una viga estructural entre (0,0,3) y (5,0,3) en el Nivel 2.","completion":"FamilySymbol beamType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (beamType != null && level != null)\n{\n    if(!beamType.IsActive) beamType.Activate();\n    XYZ start = new XYZ(0, 0, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters));\n    XYZ end = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters));\n    Line beamCurve = Line.CreateBound(start, end);\n    doc.Create.NewFamilyInstance(beamCurve, beamType, level, StructuralType.Beam);\n}"}
{"prompt":"Build a new room on Level 2 at point (11, 11).","completion":"string levelName = \"Level 2\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    Phase defaultPhase = doc.Phases.get_Item(doc.Phases.Size - 1);\n    UV point = new UV(11, 11);\n    Room newRoom = doc.Create.NewRoom(targetLevel, point);\n}"}
{"prompt":"Crea una vista de sección entre los puntos (0,0,0) y (10,10,0).","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.Section);\n\nif (vft != null)\n{\n    XYZ p1 = new XYZ(0,0,0);\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),0);\n    XYZ midPoint = (p1 + p2) \/ 2;\n    XYZ direction = (p2 - p1).Normalize();\n    XYZ up = XYZ.BasisZ;\n    XYZ viewdir = up.CrossProduct(direction);\n    \n    BoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\n    Transform t = Transform.Identity;\n    t.Origin = midPoint;\nt.BasisX = direction;\nt.BasisY = up;\nt.BasisZ = viewdir;\nsectionBox.Transform = t;\nsectionBox.Min = new XYZ(UnitUtils.ConvertToInternalUnits(-p1.DistanceTo(p2)\/2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(-10, UnitTypeId.Meters), 0);\nsectionBox.Max = new XYZ(UnitUtils.ConvertToInternalUnits(p1.DistanceTo(p2)\/2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(20, UnitTypeId.Meters));\n    \n    ViewSection.CreateSection(doc, vft.Id, sectionBox);\n}"}
{"prompt":"Mueve el punto base del proyecto 100 metros hacia el norte.","completion":"using (Transaction t = new Transaction(doc, \"Move Project Base Point\"))\n{\n    t.Start();\n    BasePoint projectBasePoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(bp => !bp.IsShared);\n\n    if (projectBasePoint != null)\n    {\n        XYZ translation = new XYZ(0, 100 \/ 0.3048, 0);\n        ElementTransformUtils.MoveElement(doc, projectBasePoint.Id, translation);\n    }\n    t.Commit();\n}"}
{"prompt":"Set the 'Comments' parameter for all doors on Level 1 to 'Fire Rating - 90 min'.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\n\nif (level1 != null)\n{\n    List<FamilyInstance> doorsOnLevel1 = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsNotElementType().Cast<FamilyInstance>().Where(fi => fi.LevelId == level1.Id).ToList();\n    foreach(FamilyInstance door in doorsOnLevel1)\n    {\n        Parameter commentsParam = door.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n        if (commentsParam != null && !commentsParam.IsReadOnly) commentsParam.Set(\"Fire Rating - 90 min\");\n    }\n}"}
{"prompt":"Inserta las vistas 'Nivel 1' y 'Planta Nivel 2' en el plano 'A-101'.","completion":"ViewSheet sheet = new FilteredElementCollector(doc).OfClass(typeof(ViewSheet)).Cast<ViewSheet>().FirstOrDefault(s => s.SheetNumber == \"A-101\");\nView view1 = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().FirstOrDefault(v => v.Name == \"Nivel 1\");\nView view2 = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().FirstOrDefault(v => v.Name == \"Planta Nivel 2\");\nif (sheet != null && view1 != null && view2 != null)\n{\n    XYZ insertPoint1 = new XYZ(1.0, 1.0, 0);\n    Viewport.Create(doc, sheet.Id, view1.Id, insertPoint1);\n    XYZ insertPoint2 = new XYZ(1.0, 2.0, 0);\n    Viewport.Create(doc, sheet.Id, view2.Id, insertPoint2);\n}"}
{"prompt":"Coloca una cota de elevación en el Nivel 1.","completion":"using (Transaction t = new Transaction(doc, \"Place Spot Elevation\"))\n{\n    t.Start();\n    Level lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel 1\");\n    View activeView = doc.ActiveView;\n\n    if (lvl1 != null && activeView != null)\n    {\n        Reference levelRef = new Reference(lvl1);\n        XYZ origin = new XYZ(5\/0.3048, 5\/0.3048, lvl1.Elevation);\n        XYZ leaderEnd = origin + new XYZ(2\/0.3048, 2\/0.3048, 0);\n        doc.Create.NewSpotElevation(activeView, levelRef, origin, origin, leaderEnd, origin, true);\n    }\n    t.Commit();\n}"}
{"prompt":"Find all doors on Level 7 that belong to the 'Single-Flush' family.","completion":"string levelName = \"Level 7\";\nstring familyName = \"Single-Flush\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WherePasses(new ElementLevelFilter(targetLevel.Id));\n    List<ElementId> doorIds = new List<ElementId>();\n    foreach (Element door in collector)\n    {\n        FamilyInstance fi = door as FamilyInstance;\n        if (fi != null && fi.Symbol.Family.Name == familyName)\n        {\n            doorIds.Add(door.Id);\n        }\n    }\n    uidoc.Selection.SetElementIds(doorIds);\n}"}
{"prompt":"Crea vigas entre las columnas alineadas horizontalmente.","completion":"FamilySymbol beamSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nList<FamilyInstance> columns = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().Cast<FamilyInstance>().OrderBy(c => c.GetTransform().Origin.Y).ThenBy(c => c.GetTransform().Origin.X).ToList();\n\nif (beamSymbol != null && level != null && columns.Count >= 2)\n{\n    for(int i=0; i < columns.Count - 1; i++)\n    {\n        LocationPoint p1 = columns[i].Location as LocationPoint;\n        LocationPoint p2 = columns[i+1].Location as LocationPoint;\n        if (p1 != null && p2 != null && Math.Abs(p1.Point.Y - p2.Point.Y) < 0.01)\n        {\n            Line line = Line.CreateBound(p1.Point, p2.Point);\n            doc.Create.NewFamilyInstance(line, beamSymbol, level, StructuralType.Beam);\n        }\n    }\n}"}
{"prompt":"Erase all unused wall types in the project.","completion":"ICollection<ElementId> allWallTypes = new FilteredElementCollector(doc).OfClass(typeof(WallType)).ToElementIds();\nICollection<ElementId> usedWallTypes = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Select(w => w.GetTypeId()).Distinct().ToList();\nList<ElementId> unusedWallTypes = allWallTypes.Except(usedWallTypes).ToList();\nif (unusedWallTypes.Any())\n{\n    doc.Delete(unusedWallTypes);\n}"}
{"prompt":"Reproduce el nivel 6 con un desfase de 1m y llámalo 'Mezanine'.","completion":"string levelName = \"Nivel 6\";\nLevel levelToCopy = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (levelToCopy != null)\n{\n    double offset = UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, levelToCopy.Elevation + offset);\n    newLevel.Name = \"Mezanine\";\n}"}
{"prompt":"Crea un nivel intermedio llamado 'Mezzanine' a mitad de camino entre el Nivel 1 y el Nivel 2.","completion":"string newLevelName = \"Mezzanine\";\nLevel lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Nivel 1\");\nLevel lvl2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Nivel 2\");\nif (lvl1 != null && lvl2 != null)\n{\ndouble midElevation = (lvl1.ProjectElevation + lvl2.ProjectElevation) \/ 2.0;\nLevel newLevel = Level.Create(doc, midElevation);\n    if(newLevel != null)\n    {\nnewLevel.Name = newLevelName;\n    }\n}"}
{"prompt":"Conecta dos bandejas de cables con un codo.","completion":"List<CableTray> trays = new FilteredElementCollector(doc).OfClass(typeof(CableTray)).Cast<CableTray>().ToList();\n\nif (trays.Count >= 2)\n{\n    Connector c1 = trays[0].ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n    Connector c2 = trays[1].ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n    \n    if (c1 != null && c2 != null)\n    {\n        doc.Create.NewUnionFitting(c1, c2);\n    }\n}"}
{"prompt":"Copy the 'Generic - 147mm' wall type and name it 'Interior - 20cm Plaster'.","completion":"string originalName = \"Generic - 147mm\";\nstring newName = \"Interior - 20cm Plaster\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif(originalType!=null)\n    originalType.Duplicate(newName);"}
{"prompt":"Ajusta todas las ventanas para que tengan la altura del antepecho a 901mm.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits(901, UnitTypeId.Millimeters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Ajusta el tipo de la ventana seleccionada al tipo 'Ventana Fija 125x60'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una ventana\");\nFamilySymbol newType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name == \"Ventana Fija 125x60\");\nif (pickedRef != null && newType != null)\n{\n    FamilyInstance window = doc.GetElement(pickedRef.ElementId) as FamilyInstance;\n    if (window != null)\n    {\n        window.Symbol = newType;\n    }\n}"}
{"prompt":"Create a shaft opening that passes through from Level 1 to Level 3.","completion":"using (Transaction t = new Transaction(doc, \"Create Shaft Opening\"))\n{\n    t.Start();\n    Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 1\");\n    Level topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 3\");\n\n    if (bottomLevel != null && topLevel != null)\n    {\n        XYZ p1 = new XYZ(5 \/ 0.3048, 5 \/ 0.3048,0);\n        XYZ p2 = new XYZ(8 \/ 0.3048, 5 \/ 0.3048,0);\n        XYZ p3 = new XYZ(8 \/ 0.3048, 8 \/ 0.3048,0);\n        XYZ p4 = new XYZ(5 \/ 0.3048, 8 \/ 0.3048,0);\n        CurveArray profile = new CurveArray();\n        profile.Append(Line.CreateBound(p1,p2));\n        profile.Append(Line.CreateBound(p2,p3));\n        profile.Append(Line.CreateBound(p3,p4));\n        profile.Append(Line.CreateBound(p4,p1));\n        doc.Create.NewOpening(bottomLevel, topLevel, profile);\n    }\n    t.Commit();\n}"}
{"prompt":"Place a spot elevation on a given face and view point.","completion":"using (Transaction t = new Transaction(doc, \"Place Spot Elevation\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference faceRef = localUidoc.Selection.PickObject(ObjectType.Face, \"Select the top face of the floor\");\n\n    View activeView = doc.ActiveView;\n\n    if (faceRef != null && activeView != null)\n    {\n        XYZ pointOnFace = faceRef.GlobalPoint;\n        XYZ leaderEnd = pointOnFace + new XYZ(1 \/ 0.3048, 1 \/ 0.3048, 0);\n        doc.Create.NewSpotElevation(activeView, faceRef, pointOnFace, pointOnFace, leaderEnd, pointOnFace, true);\n    }\n    t.Commit();\n}"}
{"prompt":"Crea un nuevo tipo de puerta llamado 'Puerta RF-90' y establece su resistencia al fuego a '90 min'.","completion":"using (Transaction t = new Transaction(doc, \"Create Door Type\"))\n{\n    t.Start();\n    string newTypeName = \"Puerta RF-90\";\n    FamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n    if (doorTypeToDuplicate != null)\n    {\n        FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\n        if (newDoorType != null)\n        {\n            Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n            if(fireRatingParam != null && !fireRatingParam.IsReadOnly)\n            {\n                fireRatingParam.Set(\"90 min\");\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Model a ceiling at a height of 2.8 meters on Level 1.","completion":"CeilingType ceilingType = new FilteredElementCollector(doc).OfClass(typeof(CeilingType)).FirstOrDefault() as CeilingType;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\n\nif (ceilingType != null && level != null)\n{\n    CurveLoop profile = new CurveLoop();\n    profile.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),0,0)));\n    profile.Append(Line.CreateBound(new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),0,0), new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),0)));\n    profile.Append(Line.CreateBound(new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),0), new XYZ(0,UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),0)));\n    profile.Append(Line.CreateBound(new XYZ(0,UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),0), new XYZ(0,0,0)));\n\n    Ceiling ceiling = Ceiling.Create(doc, new List<CurveLoop>{profile}, ceilingType.Id, level.Id);\n    if (ceiling != null)\n    {\n        Parameter heightParam = ceiling.get_Parameter(BuiltInParameter.CEILING_HEIGHTABOVELEVEL_PARAM);\n        if (heightParam != null && !heightParam.IsReadOnly) heightParam.Set(UnitUtils.ConvertToInternalUnits(2.8, UnitTypeId.Meters));\n    }\n}"}
{"prompt":"Crea un conducto eléctrico de 1 pulgada de diámetro.","completion":"using (Transaction t = new Transaction(doc, \"Create Conduit\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    ElementId conduitTypeId = new FilteredElementCollector(doc).OfClass(typeof(ConduitType)).FirstElementId();\n\n    if (level != null && conduitTypeId != null && conduitTypeId != ElementId.InvalidElementId)\n    {\n        XYZ start = new XYZ(0, 0, 3 \/ 0.3048);\n        XYZ end = new XYZ(5 \/ 0.3048, 0, 3 \/ 0.3048);\n        Conduit conduit = Conduit.Create(doc, conduitTypeId, start, end, level.Id);\n\n        if (conduit != null)\n        {\n            Parameter diameterParam = conduit.get_Parameter(BuiltInParameter.RBS_CONDUIT_DIAMETER_PARAM);\n            if (diameterParam != null && !diameterParam.IsReadOnly)\n            {\n                diameterParam.Set(1.0\/12.0);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Position an instance of the 'Office Desk' family in the center of the 'Office 101' room.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Office 101\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Office Desk\") as FamilySymbol;\nif(furnitureSymbol != null && !furnitureSymbol.IsActive) furnitureSymbol.Activate();\nif(room != null)\n{\n    LocationPoint roomCenter = room.Location as LocationPoint;\n    if(roomCenter != null && furnitureSymbol != null && room.Level != null)\n    {\n        doc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Copia la vista 'Losa 98' como una vista dependiente.","completion":"ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v => v.Name == \"Losa 98\") as ViewPlan;\n\nif (viewToDuplicate != null)\n{\n    ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n}"}
{"prompt":"Ubica una instancia de la familia 'M_Chair-Breuer' en el centro de la habitación 'Despacho 98'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 98\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"M_Chair-Breuer\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);"}
{"prompt":"Incorpora un punto de referencia en las coordenadas (4,2,2) dentro del editor de familias.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(4,2,2));"}
{"prompt":"Generate a new Level named 'Level 4' at an elevation of 12 meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(12, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Level 4\";\n}"}
{"prompt":"Sitúa una instancia de la familia 'Mesa de Oficina' en el centro de la habitación 'Despacho 105'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 105\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Mesa de Oficina\") as FamilySymbol;\nif(furnitureSymbol != null && !furnitureSymbol.IsActive) furnitureSymbol.Activate();\nif(room != null)\n{\n    LocationPoint roomCenter = room.Location as LocationPoint;\n    if(roomCenter != null && furnitureSymbol != null && room.Level != null)\n    {\n        doc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Sitúa todos los elementos seleccionados en el workset 'Interiores'.","completion":"using (Transaction t = new Transaction(doc, \"Assign to Workset\"))\n{\n    t.Start();\n    if(doc.IsWorkshared)\n    {\n        UIDocument localUidoc = uidoc;\n        ICollection<ElementId> selectedIds = localUidoc.Selection.GetElementIds();\n        \n        Workset workset = new FilteredWorksetCollector(doc).OfKind(WorksetKind.UserWorkset).FirstOrDefault(ws => ws.Name == \"Interiores\");\n        if(workset == null) workset = Workset.Create(doc, \"Interiores\");\n\n        if (selectedIds != null && selectedIds.Count > 0 && workset != null)\n        {\n            foreach(ElementId id in selectedIds)\n            {\n                Element elem = doc.GetElement(id);\n                Parameter wsparam = elem.get_Parameter(BuiltInParameter.ELEM_PARTITION_PARAM);\n                if(wsparam != null && !wsparam.IsReadOnly) wsparam.Set(workset.Id.IntegerValue);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Insert a window 1m wide and 1.2m high into a wall.","completion":"FamilySymbol originalSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nWall hostWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\n\nif (originalSymbol != null && hostWall != null)\n{\n    string newTypeName = \"Window 1.0m x 1.2m\";\n    FamilySymbol newSymbol = originalSymbol.Duplicate(newTypeName) as FamilySymbol;\n    if (newSymbol == null) return;\n\n    if (!newSymbol.IsActive)\n    {\n        newSymbol.Activate();\n    }\n\n    Parameter widthParam = newSymbol.get_Parameter(BuiltInParameter.WINDOW_WIDTH);\n    Parameter heightParam = newSymbol.get_Parameter(BuiltInParameter.WINDOW_HEIGHT);\n\n    if (widthParam != null && heightParam != null && !widthParam.IsReadOnly && !heightParam.IsReadOnly)\n    {\n        widthParam.Set(UnitUtils.ConvertToInternalUnits(1.0, UnitTypeId.Meters));\n        heightParam.Set(UnitUtils.ConvertToInternalUnits(1.2, UnitTypeId.Meters));\n    }\n\n    Level level = doc.GetElement(hostWall.LevelId) as Level;\n    LocationCurve locationCurve = hostWall.Location as LocationCurve;\n    if (level != null && locationCurve != null)\n    {\n        XYZ insertionPoint = locationCurve.Curve.Evaluate(0.5, true);\n        doc.Create.NewFamilyInstance(insertionPoint, newSymbol, hostWall, level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Agrega un punto al Path of Travel seleccionado.","completion":"\/\/ PathOfTravel related methods like GetPath and Update are likely inaccessible in this environment.\n\/\/ The following code is a placeholder to show the intent.\n\/*\nusing (Transaction t = new Transaction(doc, \"Update Path of Travel\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference pickedRef = localUidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un Path of Travel\");\n\n    if (pickedRef != null)\n    {\n        PathOfTravel pot = doc.GetElement(pickedRef) as PathOfTravel;\n        if (pot != null)\n        {\n            IList<XYZ> points = pot.GetPath();\n            if (points != null && points.Count >= 2)\n            {\n                XYZ midPoint = (points[0] + points[1]) \/ 2;\n                points.Insert(1, midPoint); \n                pot.Update(points);\n            }\n        }\n    }\n    t.Commit();\n}\n*\/"}
{"prompt":"Build a new wall type 'Generic Wall 295mm' with a thickness of 26cm.","completion":"string newTypeName = \"Generic Wall 295mm\";\nWallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif (oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(newTypeName) as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(26, UnitTypeId.Centimeters));\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n}"}
{"prompt":"Position a 6-meter truss between two points.","completion":"using (Transaction t = new Transaction(doc, \"Create Truss\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    FamilySymbol trussSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Family.Name.Contains(\"Truss\"));\n\n    if (level != null && trussSymbol != null)\n    {\n        if (!trussSymbol.IsActive) { trussSymbol.Activate(); }\n        Line trussLine = Line.CreateBound(new XYZ(0, 10, 0), new XYZ(6 \/ 0.3048, 10, 0));\n        doc.Create.NewFamilyInstance(trussLine, trussSymbol, level, StructuralType.NonStructural);\n    }\n    t.Commit();\n}"}
{"prompt":"Set the 'Comments' parameter for all doors on Level 1 to 'Fire Rating - 90 min'.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\n\nif (level1 != null)\n{\n    List<FamilyInstance> doorsOnLevel1 = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsNotElementType().Cast<FamilyInstance>().Where(fi => fi.LevelId == level1.Id).ToList();\n    foreach(FamilyInstance door in doorsOnLevel1)\n    {\n        Parameter commentsParam = door.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n        if (commentsParam != null && !commentsParam.IsReadOnly) commentsParam.Set(\"Fire Rating - 90 min\");\n    }\n}"}
{"prompt":"Generate an electrical panel at X=1,Y=1.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol panelSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_ElectricalEquipment).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null && panelSymbol != null)\n{\n    if (!panelSymbol.IsActive)\n    {\n        panelSymbol.Activate();\n    }\n    XYZ point = new XYZ(1, 1, 0);\n    doc.Create.NewFamilyInstance(point, panelSymbol, level, StructuralType.NonStructural);\n}"}
{"prompt":"Vira la columna seleccionada 45 grados.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una columna para rotar\");\nif (pickedRef != null)\n{\n    Element elem = doc.GetElement(pickedRef.ElementId);\n    LocationPoint lp = elem.Location as LocationPoint;\n    if (lp != null)\n    {\n        Line axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\n        double angle = 45 * Math.PI \/ 180.0;\n        ElementTransformUtils.RotateElement(doc, elem.Id, axis, angle);\n    }\n}"}
{"prompt":"Fija (pin) todos los vínculos de Revit en el proyecto.","completion":"List<RevitLinkInstance> links = new FilteredElementCollector(doc).OfClass(typeof(RevitLinkInstance)).Cast<RevitLinkInstance>().ToList();\nforeach (RevitLinkInstance link in links)\n{\n    if (!link.Pinned)\n    {\n        link.Pinned = true;\n    }\n}"}
{"prompt":"Crea 10 worksets de arquitectura.","completion":"List<string> worksetNames = new List<string> { \"TAD_ARQ_MAM\", \"TAD_ARQ_ACA\", \"TAD_ARQ_PLA\", \"TAD_ARQ_PSO\", \"TAD_ARQ_HRE\", \"TAD_ARQ_ALU\", \"TAD_ARQ_CAR\", \"TAD_ARQ_MOB\", \"TAD_ARQ_PLO\", \"TAD_ARQ_EXT\" };\nforeach(string name in worksetNames)\n{\n    Workset newWorkset = Workset.Create(doc, name);\n}"}
{"prompt":"Modifica el tipo de una losa seleccionada a 'Concreto 16cm'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una losa\");\n\nif (pickedRef != null)\n{\n    Floor floorToChange = doc.GetElement(pickedRef) as Floor;\n    FloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name == \"Concreto 16cm\");\n    \n    if (floorToChange != null && newType != null)\n    {\n        floorToChange.ChangeTypeId(newType.Id);\n    }\n}"}
{"prompt":"Sitúa un pilar estructural en (10,5), asegurándote de que el tipo de familia esté activo.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (level != null && columnSymbol != null)\n{\n    if (!columnSymbol.IsActive)\n    {\n        columnSymbol.Activate();\n    }\n    XYZ point = new XYZ(10, 5, 0);\n    doc.Create.NewFamilyInstance(point, columnSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n}"}
{"prompt":"Selecciona todos los muros del 'Nivel 3' y cambia su comentario a 'REVISAR AISLAMIENTO'.","completion":"string levelName = \"Nivel 3\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(targetLevel.Id);\n    FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(levelFilter);\n    foreach (Element wall in collector)\n    {\n        Parameter commentsParam = wall.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n        if (commentsParam != null && !commentsParam.IsReadOnly) { commentsParam.Set(\"REVISAR AISLAMIENTO\"); }\n    }\n}"}
{"prompt":"Build a new Level named 'Level 4' at an elevation of 12 meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(12, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Level 4\";\n}"}
{"prompt":"Construct a structural beam between (2,1,7) and (1,1,1) on Level 2","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 2\") as Level;\nFamilySymbol beamType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (beamType != null && level != null)\n{\n    if(!beamType.IsActive) beamType.Activate();\n    XYZ start = new XYZ(2, 1, 7);\n    XYZ end = new XYZ(1, 1, 1);\n    if (start.IsAlmostEqualTo(end)) return;\n    Line beamCurve = Line.CreateBound(start, end);\n    doc.Create.NewFamilyInstance(beamCurve, beamType, level, Autodesk.Revit.DB.Structure.StructuralType.Beam);\n}"}
{"prompt":"Define the sill height of all windows to 6 meter.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits(6, UnitTypeId.Meters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Dibuja una región rellena con patrón diagonal.","completion":"using (Transaction t = new Transaction(doc, \"Draw Filled Region\"))\n{\n    t.Start();\n    View activeView = doc.ActiveView;\n    FillPatternElement fillPattern = new FilteredElementCollector(doc).OfClass(typeof(FillPatternElement)).Cast<FillPatternElement>().FirstOrDefault(p => !p.GetFillPattern().IsSolidFill);\n\n    if (activeView != null && fillPattern != null)\n    {\n        FilledRegionType filledRegionType = new FilteredElementCollector(doc, activeView.Id).OfClass(typeof(FilledRegionType)).FirstOrDefault() as FilledRegionType;\n        if (filledRegionType != null)\n        {\n            FilledRegionType newType = filledRegionType.Duplicate(\"Temp Diagonal Region\") as FilledRegionType;\n            if (newType != null)\n            {\n                newType.ForegroundPatternId = fillPattern.Id;\n                XYZ p1 = new XYZ(0,0,0);\n                XYZ p2 = new XYZ(5 \/ 0.3048,0,0);\n                XYZ p3 = new XYZ(5 \/ 0.3048,5 \/ 0.3048,0);\n                XYZ p4 = new XYZ(0,5 \/ 0.3048,0);\n                CurveLoop profile = new CurveLoop();\n                profile.Append(Line.CreateBound(p1,p2));\n                profile.Append(Line.CreateBound(p2,p3));\n                profile.Append(Line.CreateBound(p3,p4));\n                profile.Append(Line.CreateBound(p4,p1));\n                FilledRegion.Create(doc, newType.Id, activeView.Id, new List<CurveLoop>{profile});\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Define the 'Mark' parameter of all selected walls to 'W-EXT-6'.","completion":"using (Transaction t = new Transaction(doc, \"Set Wall Mark\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    ICollection<ElementId> selectedIds = localUidoc.Selection.GetElementIds();\n\n    if (selectedIds != null && selectedIds.Count > 6)\n    {\n        foreach(ElementId id in selectedIds)\n        {\n            Element elem = doc.GetElement(id);\n            if(elem is Wall)\n            {\n                Parameter p = elem.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n                if (p != null && !p.IsReadOnly)\n                {\n                    p.Set(\"W-EXT-01\");\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Construct a new level named 'Mezzanine' at 8.1 meters elevation.","completion":"string levelName = \"Mezzanine\";\ndouble elevation = UnitUtils.ConvertToInternalUnits(8.1, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Calculate the total length of all Supply Air ducts.","completion":"List<Duct> ducts = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_DuctCurves).WhereElementIsNotElementType().Cast<Duct>().Where(d => d.get_Parameter(BuiltInParameter.RBS_SYSTEM_CLASSIFICATION_PARAM).AsString() == \"SupplyAir\").ToList();\ndouble totalLength = 0.0;\nforeach (Duct d in ducts)\n{\n    totalLength += d.get_Parameter(BuiltInParameter.CURVE_ELEM_LENGTH).AsDouble();\n}"}
{"prompt":"Generate a new door type named 'FR-90 Door' and set its fire rating to '90 min'.","completion":"string newTypeName = \"FR-90 Door\";\nFamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (doorTypeToDuplicate != null)\n{\n    FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\n    if (newDoorType != null)\n    {\n        Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n        if (fireRatingParam != null && !fireRatingParam.IsReadOnly) fireRatingParam.Set(\"90 min\");\n    }\n}"}
{"prompt":"Crea un filtro de vista para ocultar muros demolidos.","completion":"using (Transaction t = new Transaction(doc, \"Create Demolition Filter\"))\n{\n    t.Start();\n    Phase demolishedPhase = new FilteredElementCollector(doc).OfClass(typeof(Phase)).Cast<Phase>().FirstOrDefault(p => p.Name.Contains(\"Demolished\") || p.Name.Contains(\"Demolición\"));\n    View activeView = doc.ActiveView;\n\n    if (demolishedPhase != null && activeView != null)\n    {\n        ElementId paramId = new ElementId(BuiltInParameter.PHASE_DEMOLISHED);\n        FilterRule rule = ParameterFilterRuleFactory.CreateEqualsRule(paramId, demolishedPhase.Id);\n        ElementFilter filter = new ElementParameterFilter(rule);\n        ICollection<ElementId> categories = new List<ElementId>{ new ElementId(BuiltInCategory.OST_Walls) };\n        ParameterFilterElement pfe = ParameterFilterElement.Create(doc, \"Filtro Demolición\", categories, filter);\n        \n        if (pfe != null)\n        {\n            activeView.AddFilter(pfe.Id);\n            activeView.SetFilterVisibility(pfe.Id, false);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Insert an instance of the 'Office Desk' family in the center of the 'Office 98' room.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Office 98\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Office Desk\") as FamilySymbol;\nif(furnitureSymbol != null && !furnitureSymbol.IsActive) furnitureSymbol.Activate();\nif(room != null)\n{\n    LocationPoint roomCenter = room.Location as LocationPoint;\n    if(roomCenter != null && furnitureSymbol != null && room.Level != null)\n    {\n        doc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Change the type of a selected floor to 'Concrete 15cm'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a floor\");\n\nif (pickedRef != null)\n{\n    Floor floorToChange = doc.GetElement(pickedRef) as Floor;\n    FloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name == \"Concrete 15cm\");\n    \n    if (floorToChange != null && newType != null)\n    {\n        floorToChange.ChangeTypeId(newType.Id);\n    }\n}"}
{"prompt":"Get a list of all annotation families.","completion":"List<Family> annotationFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.CategoryType == CategoryType.Annotation).ToList();\n"}
{"prompt":"Generate a structural beam between (1,1,1) and (5,1,8) on Level 3","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 3\") as Level;\nFamilySymbol beamType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (beamType != null && level != null)\n{\n    if(!beamType.IsActive) beamType.Activate();\n    XYZ start = new XYZ(1, 1, 1);\n    XYZ end = new XYZ(5, 1, 8);\n    if (start.IsAlmostEqualTo(end)) return;\n    Line beamCurve = Line.CreateBound(start, end);\n    doc.Create.NewFamilyInstance(beamCurve, beamType, level, Autodesk.Revit.DB.Structure.StructuralType.Beam);\n}"}
{"prompt":"Etiqueta todas las habitaciones con su área.","completion":"using (Transaction t = new Transaction(doc, \"Tag All Rooms\"))\n{\n    t.Start();\n    View activeView = doc.ActiveView;\n\n    if (activeView != null)\n    {\n        List<Room> rooms = new FilteredElementCollector(doc, activeView.Id).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>().ToList();\n        foreach(Room room in rooms)\n        {\n            LocationPoint locPoint = room.Location as LocationPoint;\n            if(locPoint != null)\n            {\n                doc.Create.NewRoomTag(new LinkElementId(room.Id), new UV(locPoint.Point.X, locPoint.Point.Y), activeView.Id);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea un tipo de muro 'Muro-Doble' de 30cm y luego crea un muro de ese tipo.","completion":"using (Transaction t = new Transaction(doc, \"Create Wall Type and Wall\"))\n{\n    t.Start();\n    string newTypeName = \"Muro-Doble\";\n    WallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n    WallType newWallType = null;\n    if (wallTypeToDuplicate != null)\n    {\n        newWallType = wallTypeToDuplicate.Duplicate(newTypeName) as WallType;\n        if (newWallType != null)\n        {\n            CompoundStructure cs = newWallType.GetCompoundStructure();\n            if (cs != null && cs.LayerCount > 0)\n            {\n                cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), 0.3 \/ 0.3048);\n                newWallType.SetCompoundStructure(cs);\n            }\n        }\n    }\n    if (newWallType != null)\n    {\n        Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n        Line wallCurve = Line.CreateBound(XYZ.Zero, new XYZ(10 \/ 0.3048, 0, 0));\n        double height = 3 \/ 0.3048;\n        if (level != null)\n        {\n            Wall.Create(doc, wallCurve, newWallType.Id, level.Id, height, 0, false, false);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Quita el prefijo 'IMPORT_' de todos los materiales.","completion":"string prefixToRemove = \"IMPORT_\";\nIList<Material> materials = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().ToList();\n\nif (materials.Any())\n{\n    HashSet<string> existingNames = new HashSet<string>(materials.Select(m => m.Name));\n    foreach (Material mat in materials)\n    {\n        if (mat.Name.StartsWith(prefixToRemove))\n        {\n            existingNames.Remove(mat.Name);\n            string newName = mat.Name.Substring(prefixToRemove.Length);\n            string finalName = newName;\n            int i = 1;\n            while (existingNames.Contains(finalName))\n            {\n                finalName = $\"{newName}_{i++}\";\n            }\n            mat.Name = finalName;\n            existingNames.Add(finalName);\n        }\n    }\n}"}
{"prompt":"Set the sill height of all windows to 901mm.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits(901, UnitTypeId.Millimeters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Incorpora un punto de referencia en las coordenadas (1,1,5) dentro del editor de familias.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(1,1,5));"}
{"prompt":"Duplica el nivel 1 con un desfase de 7m y llámalo 'Mezanine'.","completion":"string levelName = \"Mezanine\";\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\n\nif (level1 != null)\n{\n    double newElevation = level1.ProjectElevation + UnitUtils.ConvertToInternalUnits(7, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, newElevation);\n    if (newLevel != null)\n    {\n        newLevel.Name = levelName;\n    }\n}"}
{"prompt":"Obtén la longitud total de todos los muros del proyecto.","completion":"double totalLength = 0.0;\nList<Wall> walls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Cast<Wall>().ToList();\nforeach (Wall wall in walls)\n{\n    Parameter lengthParam = wall.get_Parameter(BuiltInParameter.CURVE_ELEM_LENGTH);\n    if (lengthParam != null && lengthParam.HasValue)\n    {\n        totalLength += lengthParam.AsDouble();\n    }\n}"}
{"prompt":"Build a global length parameter named 'CorridorWidth' with a value of 1.4m.","completion":"string paramName = \"CorridorWidth\";\nGlobalParameter gp = GlobalParameter.Create(doc, paramName, SpecTypeId.Length);\n\nif (gp != null)\n{\n    gp.SetValue(new DoubleParameterValue(UnitUtils.ConvertToInternalUnits(1.4, UnitTypeId.Meters)));\n}"}
{"prompt":"Actualiza el tipo de la ventana seleccionada al tipo 'Ventana Fija 122x60'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una ventana\");\nFamilySymbol newType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name == \"Ventana Fija 122x60\");\nif (pickedRef != null && newType != null)\n{\n    FamilyInstance window = doc.GetElement(pickedRef.ElementId) as FamilyInstance;\n    if (window != null)\n    {\n        window.Symbol = newType;\n    }\n}"}
{"prompt":"Create 5 worksets for engineering disciplines.","completion":"List<string> worksetNames = new List<string> { \"MEP_HVAC\", \"MEP_Plumbing\", \"MEP_Electrical\", \"STRUCT_Framing\", \"STRUCT_Foundations\" };\nforeach(string name in worksetNames)\n{\n    Workset newWorkset = Workset.Create(doc, name);\n}"}
{"prompt":"Crea un nuevo tipo de muro de 25cm llamado 'Muro Estructural 25cm'.","completion":"string newTypeName = \"Muro Estructural 25cm\";\nWallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(newTypeName) as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(25, UnitTypeId.Centimeters));\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n}"}
{"prompt":"Agrupa una tabla de planificación de habitaciones por Nivel.","completion":"using (Transaction t = new Transaction(doc, \"Group Schedule\"))\n{\n    t.Start();\n    ViewSchedule schedule = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().FirstOrDefault(vs => vs.Definition.CategoryId.IntegerValue == (int)BuiltInCategory.OST_Rooms);\n\n    if (schedule != null)\n    {\n        ScheduleDefinition def = schedule.Definition;\n        if (def != null)\n        {\n            SchedulableField schedulableField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.ROOM_LEVEL_ID);\n            if (schedulableField != null)\n            {\n                ScheduleField field = def.AddField(schedulableField);\n                ScheduleSortGroupField sortGroupField = new ScheduleSortGroupField(field.FieldId);\n                sortGroupField.ShowHeader = true;\n                def.AddSortGroupField(sortGroupField);\n                def.IsItemized = false;\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Show me a list of all plumbing fixture types.","completion":"FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_PlumbingFixtures).WhereElementIsElementType();\nList<string> fixtureTypeNames = collector.Select(e => e.Name).ToList();"}
{"prompt":"Configure the sill height of all windows to 905mm.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits(905, UnitTypeId.Millimeters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Vira un elemento seleccionado 87 grados sobre su eje Z.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un elemento para rotar\");\nElement elem = doc.GetElement(pickedRef.ElementId);\nLocationPoint lp = elem.Location as LocationPoint;\nLine axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\nElementTransformUtils.RotateElement(doc, elem.Id, axis, Math.PI \/ 87);"}
{"prompt":"Select all walls on 'Level 4' and change their comment to 'REVIEW INSULATION'.","completion":"string levelName = \"Level 4\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(targetLevel.Id);\n    FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(levelFilter);\n    foreach (Element wall in collector)\n    {\n        Parameter commentsParam = wall.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n        if (commentsParam != null && !commentsParam.IsReadOnly) { commentsParam.Set(\"REVIEW INSULATION\"); }\n    }\n}"}
{"prompt":"Generate a rectangular floor of 10x8 meters.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\n\nif (level != null && floorType != null)\n{\n    double width = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\n    double length = UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters);\n    CurveLoop loop = new CurveLoop();\n    loop.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(width,0,0)));\n    loop.Append(Line.CreateBound(new XYZ(width,0,0), new XYZ(width,length,0)));\n    loop.Append(Line.CreateBound(new XYZ(width,length,0), new XYZ(0,length,0)));\n    loop.Append(Line.CreateBound(new XYZ(0,length,0), new XYZ(0,0,0)));\n    Floor.Create(doc, new List<CurveLoop> { loop }, floorType.Id, level.Id);\n}"}
{"prompt":"Configure the sill height of all windows to 4 meter.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits(4, UnitTypeId.Meters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Plot a 300x200 millimeter rectangular ventilation duct.","completion":"using (Transaction t = new Transaction(doc, \"Create Duct\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    DuctType ductType = new FilteredElementCollector(doc).OfClass(typeof(DuctType)).Cast<DuctType>().FirstOrDefault(d => d.Shape == ConnectorProfileType.Rectangular);\n    MEPSystemType systemType = new FilteredElementCollector(doc).OfClass(typeof(MEPSystemType)).Cast<MEPSystemType>().FirstOrDefault(s => s.SystemClassification == MEPSystemClassification.SupplyAir);\n\n    if (level != null && ductType != null && systemType != null)\n    {\n        XYZ p1 = new XYZ(0, 0, 3 \/ 0.3048);\n        XYZ p2 = new XYZ(10 \/ 0.3048, 0, 3 \/ 0.3048);\n        Duct duct = Duct.Create(doc, systemType.Id, ductType.Id, level.Id, p1, p2);\n\n        if (duct != null)\n        {\n            Parameter widthParam = duct.get_Parameter(BuiltInParameter.RBS_CURVE_WIDTH_PARAM);\n            Parameter heightParam = duct.get_Parameter(BuiltInParameter.RBS_CURVE_HEIGHT_PARAM);\n            if (widthParam != null && !widthParam.IsReadOnly) widthParam.Set(300 \/ 304.8);\n            if (heightParam != null && !heightParam.IsReadOnly) heightParam.Set(200 \/ 304.8);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Erase all detail lines in the active view.","completion":"using (Transaction t = new Transaction(doc, \"Delete Detail Lines\"))\n{\n    t.Start();\n    if (doc.ActiveView != null)\n    {\n        ICollection<ElementId> detailLines = new FilteredElementCollector(doc, doc.ActiveView.Id).OfClass(typeof(DetailCurve)).ToElementIds();\n        if (detailLines.Count > 0)\n        {\n            doc.Delete(detailLines);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Construct a 'Roof Terrace' level at 11m.","completion":"string levelName = \"Roof Terrace\";\ndouble elev = UnitUtils.ConvertToInternalUnits(11, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elev);\nnewLevel.Name = levelName;\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Crea una abertura rectangular en un suelo.","completion":"using (Transaction t = new Transaction(doc, \"Create Opening\"))\n{\n    t.Start();\n    Floor floor = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault() as Floor;\n\n    if (floor != null)\n    {\n        XYZ p1 = new XYZ(1 \/ 0.3048, 1 \/ 0.3048, 0);\n        XYZ p2 = new XYZ(3 \/ 0.3048, 1 \/ 0.3048, 0);\n        XYZ p3 = new XYZ(3 \/ 0.3048, 3 \/ 0.3048, 0);\n        XYZ p4 = new XYZ(1 \/ 0.3048, 3 \/ 0.3048, 0);\n        CurveArray profile = new CurveArray();\n        profile.Append(Line.CreateBound(p1, p2));\n        profile.Append(Line.CreateBound(p2, p3));\n        profile.Append(Line.CreateBound(p3, p4));\n        profile.Append(Line.CreateBound(p4, p1));\n        doc.Create.NewOpening(floor, profile, true);\n    }\n    t.Commit();\n}"}
{"prompt":"Create a new 5mm text type in green color.","completion":"using (Transaction t = new Transaction(doc, \"Create Green Text Type\"))\n{\n    t.Start();\n    string newTypeName = \"5mm Green\";\n    TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\n    if (defaultType != null)\n    {\n        TextNoteType newType = defaultType.Duplicate(newTypeName) as TextNoteType;\n        if (newType != null)\n        {\n            Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n            if (textSizeParam != null && !textSizeParam.IsReadOnly)\n            {\n                textSizeParam.Set(5 \/ 304.8);\n            }\n            Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n            if (lineColorParam != null && !lineColorParam.IsReadOnly)\n            {\n                 lineColorParam.Set(65280);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Replicate level 5 with a 1m offset and name it 'Mezzanine'.","completion":"string levelName = \"Level 5\";\nLevel levelToCopy = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (levelToCopy != null)\n{\n    double offset = UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, levelToCopy.Elevation + offset);\n    newLevel.Name = \"Mezzanine\";\n}"}
{"prompt":"Compute the total length of all Supply Air ducts.","completion":"List<Duct> ducts = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_DuctCurves).WhereElementIsNotElementType().Cast<Duct>().Where(d => d.get_Parameter(BuiltInParameter.RBS_SYSTEM_CLASSIFICATION_PARAM).AsString() == \"SupplyAir\").ToList();\ndouble totalLength = 0.0;\nforeach (Duct d in ducts)\n{\n    totalLength += d.get_Parameter(BuiltInParameter.CURVE_ELEM_LENGTH).AsDouble();\n}"}
{"prompt":"Crea una nueva vista de alzado mirando al sur.","completion":"using (Transaction t = new Transaction(doc, \"Create South Elevation\"))\n{\n    t.Start();\n    ViewFamilyType elevationVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(vft => vft.ViewFamily == ViewFamily.Elevation);\n    View activeView = doc.ActiveView;\n\n    if (elevationVFT != null && activeView != null)\n    {\n        ElevationMarker marker = ElevationMarker.CreateElevationMarker(doc, elevationVFT.Id, new XYZ(0, -20 \/ 0.3048, 0), 100);\n        \n        if (marker != null)\n        {\n            View aev = marker.CreateElevation(doc, activeView.Id, 0);\n            if (aev != null)\n            {\n                aev.Name = \"Alzado Sur\";\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create a beam system on a selected floor slab.","completion":"\/\/ This is a complex operation that requires multiple steps and\/or user interaction and is not supported by the agent."}
{"prompt":"Append the 'Level', 'Mark', and 'Volume' fields to the column schedule.","completion":"ViewSchedule schedule = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().FirstOrDefault(s => s.Name.Contains(\"Column\"));\nif (schedule != null)\n{\n    ScheduleDefinition def = schedule.Definition;\n    SchedulableField levelField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.FAMILY_LEVEL_PARAM);\n    if (levelField != null) def.AddField(levelField);\n    SchedulableField markField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.ALL_MODEL_MARK);\n    if (markField != null) def.AddField(markField);\n    SchedulableField volumeField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.HOST_VOLUME_COMPUTED);\n    if (volumeField != null) def.AddField(volumeField);\n}"}
{"prompt":"Vira el elemento dado 45 grados alrededor de su centro.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un elemento para rotar\");\n\nif (pickedRef != null)\n{\n    Element elem = doc.GetElement(pickedRef.ElementId);\n    if (elem != null)\n    {\n        LocationPoint lp = elem.Location as LocationPoint;\n        if (lp != null)\n        {\n            Line axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\n            double angle = 45 * Math.PI \/ 180.0;\n            ElementTransformUtils.RotateElement(doc, elem.Id, axis, angle);\n        }\n    }\n}"}
{"prompt":"Ajusta el nombre de la vista activa a 'Vista de Trabajo'.","completion":"string newName = \"Vista de Trabajo\";\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.Name = newName;\n}"}
{"prompt":"Establece el parámetro 'Comentarios' de todas las puertas del Nivel 4 a 'Clasificación Fuego - 86 min'.","completion":"string levelName = \"Nivel 4\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(targetLevel.Id);\n    FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WherePasses(levelFilter);\n    foreach (Element door in collector)\n    {\n        Parameter commentsParam = door.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n        if (commentsParam != null && !commentsParam.IsReadOnly) { commentsParam.Set(\"Clasificación Fuego - 86 min\"); }\n    }\n}"}
{"prompt":"Create a new elevation view looking south.","completion":"string viewName = \"South Elevation (New)\";\nViewFamilyType elevationVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(vft => vft.ViewFamily == ViewFamily.Elevation);\nElevationMarker marker = ElevationMarker.CreateElevationMarker(doc, elevationVFT.Id, new XYZ(0, -20, 0), 100);\nView aev = marker.CreateElevation(doc, doc.ActiveView.Id, 0);\naev.Name = viewName;"}
{"prompt":"Create a floor with a circular hole in the center.","completion":"using (Transaction t = new Transaction(doc, \"Create Floor with Hole\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    FloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\n\n    if (level != null && floorType != null)\n    {\n        XYZ p1 = new XYZ(-10 \/ 0.3048, -10 \/ 0.3048, 0);\n        XYZ p2 = new XYZ(10 \/ 0.3048, -10 \/ 0.3048, 0);\n        XYZ p3 = new XYZ(10 \/ 0.3048, 10 \/ 0.3048, 0);\n        XYZ p4 = new XYZ(-10 \/ 0.3048, 10 \/ 0.3048, 0);\n        CurveLoop outerLoop = new CurveLoop();\n        outerLoop.Append(Line.CreateBound(p1, p2));\n        outerLoop.Append(Line.CreateBound(p2, p3));\n        outerLoop.Append(Line.CreateBound(p3, p4));\n        outerLoop.Append(Line.CreateBound(p4, p1));\n\n        XYZ center = XYZ.Zero;\n        double radius = 2 \/ 0.3048;\n        CurveLoop innerLoop = new CurveLoop();\n        innerLoop.Append(Arc.Create(center - XYZ.BasisX * radius, center + XYZ.BasisX * radius, center + XYZ.BasisY * radius));\n        innerLoop.Append(Arc.Create(center + XYZ.BasisX * radius, center - XYZ.BasisX * radius, center - XYZ.BasisY * radius));\n\n        Floor.Create(doc, new List<CurveLoop> { outerLoop, innerLoop }, floorType.Id, level.Id);\n    }\n    t.Commit();\n}"}
{"prompt":"Adjust the detail level of the current view to 'Coarse'.","completion":"View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.DetailLevel = ViewDetailLevel.Coarse;\n}"}
{"prompt":"Construct a new wall type 'Generic Wall 300mm' with a thickness of 30cm.","completion":"WallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif(oldWallType != null)\n{\n    WallType newWallType = null;\n    try { newWallType = oldWallType.Duplicate(\"Generic Wall 300mm\") as WallType; } catch {}\n    if(newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if(cs != null && cs.GetLayers().Any())\n        {\n            int coreLayerIndex = cs.GetFirstCoreLayerIndex();\n            if(coreLayerIndex != -1)\n            {\n                cs.SetLayerWidth(coreLayerIndex, UnitUtils.ConvertToInternalUnits(30, UnitTypeId.Centimeters));\n                newWallType.SetCompoundStructure(cs);\n            }\n        }\n    }\n}"}
{"prompt":"Copia el nivel 2 con un desfase de 1m y llámalo 'Mezanine'.","completion":"string levelName = \"Nivel 2\";\nLevel levelToCopy = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (levelToCopy != null)\n{\n    double offset = UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, levelToCopy.Elevation + offset);\n    newLevel.Name = \"Mezanine\";\n}"}
{"prompt":"Crea una nueva cota de nivel llamada 'Nivel 1' a una elevación de 7 metros.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(7, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\nif (newLevel != null)\n{\n    newLevel.Name = \"Nivel 1\";\n}"}
{"prompt":"Generate a stair between Level 1 and Level 2","completion":"\/\/ This is a complex operation that requires multiple steps and\/or user interaction and is not supported by the agent."}
{"prompt":"Cambia el nivel de detalle de la vista actual a 'Bajo'.","completion":"View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.DetailLevel = ViewDetailLevel.Coarse;\n}"}
{"prompt":"Encuentra el muro con la marca 'M-01' y cambia su comentario a 'Muro de carga principal'.","completion":"string markValue = \"M-01\";\nElementId markParamId = new ElementId(BuiltInParameter.ALL_MODEL_MARK);\nParameterValueProvider pvp = new ParameterValueProvider(markParamId);\nFilterStringRuleEvaluator evaluator = new FilterStringEquals();\nFilterRule rule = new FilterStringRule(pvp, evaluator, markValue);\nElementParameterFilter filter = new ElementParameterFilter(rule);\nWall wall = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(filter).FirstOrDefault() as Wall;\nif (wall != null)\n{\n    Parameter commentParam = wall.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n    if (commentParam != null && !commentParam.IsReadOnly)\n    {\n        commentParam.Set(\"Muro de carga principal\");\n    }\n}"}
{"prompt":"Añade un punto de referencia en las coordenadas (1,2,3) dentro del editor de familias.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(1,2,3));"}
{"prompt":"Given a wall, find all pipes passing through it.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference wallRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a wall\");\n\nList<ElementId> intersectingPipes = new List<ElementId>();\nif (wallRef != null)\n{\n    Element wall = doc.GetElement(wallRef);\n    if (wall != null)\n    {\n        ElementIntersectsElementFilter filter = new ElementIntersectsElementFilter(wall);\n        intersectingPipes = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_PipeCurves).WherePasses(filter).ToElementIds().ToList();\n    }\n}\n"}
{"prompt":"Selecciona todos los muros con una resistencia al fuego de 91 minutos.","completion":"ElementId fireRatingParamId = new ElementId(BuiltInParameter.FIRE_RATING);\nParameterValueProvider pvp = new ParameterValueProvider(fireRatingParamId);\nFilterStringRuleEvaluator evaluator = new FilterStringEquals();\nFilterRule rule = new FilterStringRule(pvp, evaluator, \"991 min\");\nElementParameterFilter filter = new ElementParameterFilter(rule);\nICollection<ElementId> wallsToSelect = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(filter).ToElementIds();\nif (wallsToSelect.Count > 0)\n{\n    new UIDocument(doc).Selection.SetElementIds(wallsToSelect);\n}"}
{"prompt":"Place an instance of the 'Office Desk' family in the center of the 'Office 104' room.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Office 104\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Office Desk\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);"}
{"prompt":"Create a new wall type 'Generic Wall 292mm' with a thickness of 30cm.","completion":"string newTypeName = \"Generic Wall 292mm\";\nWallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif (oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(newTypeName) as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(30, UnitTypeId.Centimeters));\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n}"}
{"prompt":"Change a glass panel in a curtain wall to a solid panel.","completion":"using (Transaction t = new Transaction(doc, \"Change Curtain Panel\"))\n{\n    t.Start();\n    Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Cast<Wall>().FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain);\n    FamilySymbol solidPanelType = new FilteredElementCollector(doc).OfClass(typeof(FamilySymbol)).Cast<FamilySymbol>().FirstOrDefault(fs => fs.Family.FamilyCategory.Id.IntegerValue == (int)BuiltInCategory.OST_CurtainWallPanels && fs.Name.Contains(\"Solid\"));\n\n    if (curtainWall != null && solidPanelType != null)\n    {\n        CurtainGrid grid = curtainWall.CurtainGrid;\n        if (grid != null)\n        {\n            ElementId panelIdToChange = grid.GetPanelIds().FirstOrDefault();\n            if (panelIdToChange != ElementId.InvalidElementId)\n            {\n                Panel panelToChange = doc.GetElement(panelIdToChange) as Panel;\n                if (panelToChange != null) panelToChange.ChangeTypeId(solidPanelType.Id);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea una vista de sección entre los puntos (0,0,0) y (10,10,0).","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.Section);\n\nif (vft != null)\n{\n    XYZ p1 = new XYZ(0,0,0);\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),0);\n    XYZ midPoint = (p1 + p2) \/ 2;\n    XYZ direction = (p2 - p1).Normalize();\n    XYZ up = XYZ.BasisZ;\n    XYZ viewdir = up.CrossProduct(direction);\n    \n    BoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\n    Transform t = Transform.Identity;\n    t.Origin = midPoint;\nt.BasisX = direction;\nt.BasisY = up;\nt.BasisZ = viewdir;\nsectionBox.Transform = t;\nsectionBox.Min = new XYZ(UnitUtils.ConvertToInternalUnits(-p1.DistanceTo(p2)\/2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(-10, UnitTypeId.Meters), 0);\nsectionBox.Max = new XYZ(UnitUtils.ConvertToInternalUnits(p1.DistanceTo(p2)\/2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(20, UnitTypeId.Meters));\n    \n    ViewSection.CreateSection(doc, vft.Id, sectionBox);\n}"}
{"prompt":"Get all rooms on the 'Ground Floor' Level.","completion":"Level groundFloor = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Ground Floor\") as Level;\nList<Element> roomsOnGround = new List<Element>();\n\nif (groundFloor != null)\n{\n    roomsOnGround = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Where(r => r.LevelId == groundFloor.Id).ToList();\n}"}
{"prompt":"Coloca un rociador en las coordenadas (1,1,3).","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol sprinklerSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Sprinklers).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (level != null && sprinklerSymbol != null)\n{\n    if (!sprinklerSymbol.IsActive) sprinklerSymbol.Activate();\n    XYZ placementPoint = new XYZ(UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters));\n    doc.Create.NewFamilyInstance(placementPoint, sprinklerSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n}"}
{"prompt":"Model a railing on an existing staircase.","completion":"RailingType railingType = new FilteredElementCollector(doc).OfClass(typeof(RailingType)).FirstOrDefault() as RailingType;\nStairs stairs = new FilteredElementCollector(doc).OfClass(typeof(Stairs)).FirstOrDefault() as Stairs;\n\nif (railingType != null && stairs != null)\n{\n    Railing.Create(doc, stairs.Id, railingType.Id, RailingPlacementPosition.Treads);\n}"}
{"prompt":"Position a camera in the active view.","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(f => f.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft != null)\n{\n    View3D cameraView = View3D.CreatePerspective(doc, vft.Id);\n    if (cameraView != null)\n    {\n        cameraView.Name = \"New Camera View\";\n        \/\/ Default position as it is not specified in prompt\n        XYZ eyePos = new XYZ(30, -30, 20);\n        XYZ upDir = XYZ.BasisZ;\n        XYZ forwardDir = new XYZ(-1, 1, -0.5);\n        ViewOrientation3D orientation = new ViewOrientation3D(eyePos, upDir, forwardDir);\n        cameraView.SetOrientation(orientation);\n    }\n}"}
{"prompt":"Assign the 'Steel' material to the first layer of a wall type.","completion":"using (Transaction t = new Transaction(doc, \"Assign Material\"))\n{\n    t.Start();\n    WallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.GetCompoundStructure() != null);\n    Material steel = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m => m.Name.Contains(\"Steel\"));\n\n    if (wallType != null && steel != null)\n    {\n        CompoundStructure cs = wallType.GetCompoundStructure();\n        if (cs != null && cs.LayerCount > 0)\n        {\n            cs.SetMaterialId(0, steel.Id);\n            wallType.SetCompoundStructure(cs);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Duplicate the 'Basic Wall' type and rename it.","completion":"string typeToDuplicate = \"Basic Wall\";\nstring newTypeName = \"Basic Wall Copy\";\nWallType wt = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(w=>w.Name==typeToDuplicate);\n\nif (wt != null)\n{\n    WallType newWt = wt.Duplicate(newTypeName) as WallType;\n}"}
{"prompt":"Rellena el parámetro de material de todos los muros con 'Concreto'.","completion":"Material concreteMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name.Contains(\"Concreto\")) as Material;\nif(concreteMaterial != null)\n{\n    var walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>().ToList();\n    foreach(Wall w in walls)\n    {\n        Parameter materialParam = w.get_Parameter(BuiltInParameter.STRUCTURAL_MATERIAL_PARAM);\n        if(materialParam != null && !materialParam.IsReadOnly) materialParam.Set(concreteMaterial.Id);\n    }\n}"}
{"prompt":"Crea una nota de texto con un texto, una ubicación y un elemento de destino dados.","completion":"using (Transaction t = new Transaction(doc, \"Create Text Note\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference targetRef = localUidoc.Selection.PickObject(ObjectType.Element, \"Selecciona el elemento a anotar\");\n    XYZ textLocation = localUidoc.Selection.PickPoint(\"Elige la ubicación del texto\");\n\n    View activeView = doc.ActiveView;\n    ElementId defaultTypeId = doc.GetDefaultElementTypeId(ElementTypeGroup.TextNoteType);\n\n    if (targetRef != null && textLocation != null && activeView != null && defaultTypeId != ElementId.InvalidElementId)\n    {\n        TextNoteOptions opts = new TextNoteOptions(defaultTypeId);\n        TextNote note = TextNote.Create(doc, activeView.Id, textLocation, \"REVISAR CLASH\", opts);\n        if (note != null)\n        {\n            Leader leader = note.AddLeader(TextNoteLeaderTypes.TNLT_STRAIGHT_L);\n            leader.End = targetRef.GlobalPoint;\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Hide all walls shorter than 2 meters.","completion":"double lengthThreshold = UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\nList<Wall> walls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Cast<Wall>().ToList();\nList<ElementId> shortWallIds = new List<ElementId>();\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    foreach(Wall wall in walls)\n    {\n        Parameter lengthParam = wall.get_Parameter(BuiltInParameter.CURVE_ELEM_LENGTH);\n        if(lengthParam != null && lengthParam.HasValue && lengthParam.AsDouble() < lengthThreshold)\n        {\n            shortWallIds.Add(wall.Id);\n        }\n    }\n    if (shortWallIds.Count > 0)\n    {\n        activeView.HideElements(shortWallIds);\n    }\n}"}
{"prompt":"Add a tag to the column closest to the origin.","completion":"using (Transaction t = new Transaction(doc, \"Tag Column\"))\n{\n    t.Start();\n    View activeView = doc.ActiveView;\n    FamilyInstance column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().Cast<FamilyInstance>().OrderBy(c => {\n        LocationPoint lp = c.Location as LocationPoint;\n        return lp != null ? lp.Point.DistanceTo(XYZ.Zero) : double.MaxValue;\n    }).FirstOrDefault();\n\n    if (activeView != null && column != null)\n    {\n        LocationPoint loc = column.Location as LocationPoint;\n        if (loc != null)\n        {\n            IndependentTag.Create(doc, activeView.Id, new Reference(column), true, TagMode.TM_ADDBY_CATEGORY, TagOrientation.Horizontal, loc.Point);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Ubica una cámara en la vista activa.","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(f => f.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft != null)\n{\n    View3D cameraView = View3D.CreatePerspective(doc, vft.Id);\n    if (cameraView != null)\n    {\n        cameraView.Name = \"Nueva Vista de Cámara\";\n        \/\/ Default position as it is not specified in prompt\n        XYZ eyePos = new XYZ(30, -30, 20);\n        XYZ upDir = XYZ.BasisZ;\n        XYZ forwardDir = new XYZ(-1, 1, -0.5);\n        ViewOrientation3D orientation = new ViewOrientation3D(eyePos, upDir, forwardDir);\n        cameraView.SetOrientation(orientation);\n    }\n}"}
{"prompt":"Coloca una cota de elevación en una cara y un punto de vista dados.","completion":"using (Transaction t = new Transaction(doc, \"Place Spot Elevation\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference faceRef = localUidoc.Selection.PickObject(ObjectType.Face, \"Selecciona la cara superior del suelo\");\n\n    View activeView = doc.ActiveView;\n\n    if (faceRef != null && activeView != null)\n    {\n        XYZ pointOnFace = faceRef.GlobalPoint;\n        XYZ leaderEnd = pointOnFace + new XYZ(1 \/ 0.3048, 1 \/ 0.3048, 0);\n        doc.Create.NewSpotElevation(activeView, faceRef, pointOnFace, pointOnFace, leaderEnd, pointOnFace, true);\n    }\n    t.Commit();\n}"}
{"prompt":"Crea 4 ejes en sentido vertical separados 10 metros.","completion":"double separation = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\nfor(int i=0; i<4; i++)\n{\n    Line line = Line.CreateBound(new XYZ(i * separation, 0, 0), new XYZ(i * separation, 40, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Ajusta el nivel de detalle de la vista activa a 'Medio'.","completion":"View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.DetailLevel = ViewDetailLevel.Medium;\n}"}
{"prompt":"Añade un punto de referencia en las coordenadas (1,1,3) dentro del editor de familias.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(1,1,3));"}
{"prompt":"Position an instance of the 'Office Desk' family in the center of the 'Office 103' room.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Office 103\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Office Desk\") as FamilySymbol;\nif(furnitureSymbol != null && !furnitureSymbol.IsActive) furnitureSymbol.Activate();\nif(room != null)\n{\n    LocationPoint roomCenter = room.Location as LocationPoint;\n    if(roomCenter != null && furnitureSymbol != null && room.Level != null)\n    {\n        doc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Añade los campos 'Nivel', 'Marca' y 'Volumen' a la tabla de pilares.","completion":"ViewSchedule schedule = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().FirstOrDefault(s => s.Name.Contains(\"Pilares\") || s.Name.Contains(\"Column\"));\nif (schedule != null)\n{\n    ScheduleDefinition def = schedule.Definition;\n    SchedulableField levelField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.FAMILY_LEVEL_PARAM);\n    if (levelField != null) def.AddField(levelField);\n    SchedulableField markField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.ALL_MODEL_MARK);\n    if (markField != null) def.AddField(markField);\n    SchedulableField volumeField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.HOST_VOLUME_COMPUTED);\n    if (volumeField != null) def.AddField(volumeField);\n}"}
{"prompt":"Coloca pilares en todos los cruces de la rejilla.","completion":"FamilySymbol colSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nList<Grid> grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().ToList();\n\nif (colSymbol != null && level != null && grids.Count >= 2)\n{\n    for (int i = 0; i < grids.Count; i++)\n    {\n        for (int j = i + 1; j < grids.Count; j++)\n        {\n            IntersectionResultArray results = null;\n            grids[i].Curve.Intersect(grids[j].Curve, out results);\n            if(results != null)\n            {\n                 foreach (IntersectionResult ir in results)\n                 {\n                     doc.Create.NewFamilyInstance(ir.XYZPoint, colSymbol, level, StructuralType.Column);\n                 }\n            }\n        }\n    }\n}"}
{"prompt":"Dibuja una pared de 5m de largo por 3m de altura.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (level != null && wallType != null)\n{\n    Line line = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0, 0));\n    Wall.Create(doc, line, wallType.Id, level.Id, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0.0, false, false);\n}"}
{"prompt":"Add a tag to the column closest to the origin.","completion":"using (Transaction t = new Transaction(doc, \"Tag Column\"))\n{\n    t.Start();\n    View activeView = doc.ActiveView;\n    FamilyInstance column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().Cast<FamilyInstance>().OrderBy(c => {\n        LocationPoint lp = c.Location as LocationPoint;\n        return lp != null ? lp.Point.DistanceTo(XYZ.Zero) : double.MaxValue;\n    }).FirstOrDefault();\n\n    if (activeView != null && column != null)\n    {\n        LocationPoint loc = column.Location as LocationPoint;\n        if (loc != null)\n        {\n            IndependentTag.Create(doc, activeView.Id, new Reference(column), true, TagMode.TM_ADDBY_CATEGORY, TagOrientation.Horizontal, loc.Point);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create a floor plan view for 'Level 4'.","completion":"string levelName = \"Level 4\";\nLevel level3 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.FloorPlan);\n\nif (level3 != null && vft != null)\n{\n    ViewPlan viewPlan = ViewPlan.Create(doc, vft.Id, level3.Id);\n}"}
{"prompt":"Create an in-place family for a custom reception desk using an extrusion.","completion":""}
{"prompt":"Append a reference point at coordinates (1,4,8) inside the family editor.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(1,4,8));"}
{"prompt":"Copy level 4 with a 1m offset and name it 'Mezzanine'.","completion":"string levelName = \"Level 4\";\nLevel levelToCopy = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (levelToCopy != null)\n{\n    double offset = UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, levelToCopy.Elevation + offset);\n    newLevel.Name = \"Mezzanine\";\n}"}
{"prompt":"Ubica un rociador en las coordenadas (10,1,1).","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol sprinklerSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Sprinklers).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (level != null && sprinklerSymbol != null)\n{\n    if (!sprinklerSymbol.IsActive) sprinklerSymbol.Activate();\n    XYZ placementPoint = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters));\n    doc.Create.NewFamilyInstance(placementPoint, sprinklerSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n}"}
{"prompt":"Crea una apertura rectangular de 1x1 metros en el centro del suelo seleccionado.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un suelo\");\nif (pickedRef != null)\n{\n    Floor floor = doc.GetElement(pickedRef.ElementId) as Floor;\n    if (floor != null)\n    {\n        BoundingBoxXYZ bbox = floor.get_BoundingBox(null);\n        XYZ center = (bbox.Min + bbox.Max) \/ 2.0;\n        double size = UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters);\n        XYZ p1 = new XYZ(center.X - size\/2, center.Y - size\/2, 0);\n        XYZ p2 = new XYZ(center.X + size\/2, center.Y - size\/2, 0);\n        XYZ p3 = new XYZ(center.X + size\/2, center.Y + size\/2, 0);\n        XYZ p4 = new XYZ(center.X - size\/2, center.Y + size\/2, 0);\n        CurveArray profile = new CurveArray();\n        profile.Append(Line.CreateBound(p1, p2));\n        profile.Append(Line.CreateBound(p2, p3));\n        profile.Append(Line.CreateBound(p3, p4));\n        profile.Append(Line.CreateBound(p4, p1));\n        doc.Create.NewOpening(floor, profile, false);\n    }\n}"}
{"prompt":"Añade un nivel llamado 'Nivel Azotea' a 15.5 metros.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(15.5, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Nivel Azotea\";\n}"}
{"prompt":"Adjust the view's crop region to a rectangle from (0,0) to (20,20).","completion":"using (Transaction t = new Transaction(doc, \"Adjust Crop Region\"))\n{\n    t.Start();\n    View view = doc.ActiveView;\n\n    if (view != null && view.CropBoxActive)\n    {\n        BoundingBoxXYZ cropBox = view.CropBox;\n        if (cropBox != null)\n        {\n            XYZ minPoint = new XYZ(0, 0, cropBox.Min.Z);\n            XYZ maxPoint = new XYZ(20 \/ 0.3048, 20 \/ 0.3048, cropBox.Max.Z);\n            cropBox.Min = minPoint;\n            cropBox.Max = maxPoint;\n            view.CropBox = cropBox;\n            view.CropBoxVisible = true;\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Get all rooms on Level 3","completion":"string levelName = \"Level 3\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(targetLevel.Id);\n    FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WherePasses(levelFilter);\n    uidoc.Selection.SetElementIds(collector.ToElementIds());\n}"}
{"prompt":"Create a new material named 'Reflective Glass' and assign it a base color.","completion":"string materialName = \"Reflective Glass\";\nElementId materialId = Material.Create(doc, materialName);\n\nif (materialId != ElementId.InvalidElementId)\n{\n    Material material = doc.GetElement(materialId) as Material;\n    if (material != null)\n    {\n        material.Color = new Color(210, 230, 240); \/\/ A light bluish color for glass\n        material.Transparency = 80;\n    }\n}"}
{"prompt":"Place an instance of the 'Office Desk' family in the center of the 'Office 98' room.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Office 98\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Office Desk\") as FamilySymbol;\nif(furnitureSymbol != null && !furnitureSymbol.IsActive) furnitureSymbol.Activate();\nif(room != null)\n{\n    LocationPoint roomCenter = room.Location as LocationPoint;\n    if(roomCenter != null && furnitureSymbol != null && room.Level != null)\n    {\n        doc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Add a reference point at coordinates (1,2,3) inside the family editor.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(1,2,3));"}
{"prompt":"Permite al usuario seleccionar un muro y obtén su ElementId.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un muro\");\nElementId selectedWallId = ElementId.InvalidElementId;\nif (pickedRef != null)\n{\n    selectedWallId = pickedRef.ElementId;\n}"}
{"prompt":"Activa todos los FamilySymbol del proyecto.","completion":"List<FamilySymbol> symbols = new FilteredElementCollector(doc).OfClass(typeof(FamilySymbol)).Cast<FamilySymbol>().ToList();\nforeach (FamilySymbol sym in symbols)\n{\n    if (!sym.IsActive)\n    {\n        sym.Activate();\n    }\n}"}
{"prompt":"Crea un nuevo nivel llamado 'Planta Sótano' a una elevación de -4.5 metros.","completion":"double elevationInternal = UnitUtils.ConvertToInternalUnits(-4.5, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevationInternal);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Planta Sótano\";\n}"}
{"prompt":"Recupera todas las habitaciones en el Nivel 'Losa 98'.","completion":"Level groundFloor = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Losa 98\") as Level;\nList<Element> roomsOnGround = new List<Element>();\n\nif (groundFloor != null)\n{\n    roomsOnGround = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Where(r => r.LevelId == groundFloor.Id).ToList();\n}"}
{"prompt":"Configure the 'Comments' parameter for all doors on Level 1 to 'Fire Rating - 89 min'.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\n\nif (level1 != null)\n{\n    List<FamilyInstance> doorsOnLevel1 = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsNotElementType().Cast<FamilyInstance>().Where(fi => fi.LevelId == level1.Id).ToList();\n    foreach(FamilyInstance door in doorsOnLevel1)\n    {\n        Parameter commentsParam = door.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n        if (commentsParam != null && !commentsParam.IsReadOnly) commentsParam.Set(\"Fire Rating - 89 min\");\n    }\n}"}
{"prompt":"Copia todos los elementos del Nivel 1 al Nivel 2.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\nLevel level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 2\") as Level;\n\nif (level1 != null && level2 != null)\n{\n    ICollection<ElementId> elementsToCopy = new FilteredElementCollector(doc, level1.Id).WhereElementIsNotElementType().ToElementIds();\n    double elevationDiff = level2.ProjectElevation - level1.ProjectElevation;\n    XYZ translation = new XYZ(0, 0, elevationDiff);\n    if (elementsToCopy.Count > 0)\n    {\n        ElementTransformUtils.CopyElements(doc, elementsToCopy, translation);\n    }\n}"}
{"prompt":"Crea un nuevo tipo de texto de 5mm de color verde.","completion":"using (Transaction t = new Transaction(doc, \"Create Green Text Type\"))\n{\n    t.Start();\n    string newTypeName = \"5mm Verde\";\n    TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\n    if (defaultType != null)\n    {\n        TextNoteType newType = defaultType.Duplicate(newTypeName) as TextNoteType;\n        if (newType != null)\n        {\n            Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n            if (textSizeParam != null && !textSizeParam.IsReadOnly)\n            {\n                textSizeParam.Set(5 \/ 304.8);\n            }\n            Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n            if (lineColorParam != null && !lineColorParam.IsReadOnly)\n            {\n                 lineColorParam.Set(65280);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea un muro de 5 metros de largo y 3 metros de alto.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (level != null && wallType != null)\n{\n    Line line = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0, 0));\n    Wall.Create(doc, line, wallType.Id, level.Id, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0.0, false, false);\n}"}
{"prompt":"Copia todos los muros del Nivel 1 al Nivel 2.","completion":"using (Transaction t = new Transaction(doc, \"Copy Walls\"))\n{\n    t.Start();\n    Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel 1\");\n    Level level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel 2\");\n\n    if (level1 != null && level2 != null)\n    {\n        ICollection<ElementId> wallsToCopy = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Where(e => (e as Wall) != null && (e as Wall).LevelId.Equals(level1.Id)).Select(e => e.Id).ToList();\n        double elevationDiff = level2.ProjectElevation - level1.ProjectElevation;\n        XYZ translation = new XYZ(0, 0, elevationDiff);\n        if (wallsToCopy.Count > 0)\n        {\n            ElementTransformUtils.CopyElements(doc, wallsToCopy, translation);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Selecciona todos los muros con una resistencia al fuego de 90 minutos.","completion":"ElementId fireRatingParamId = new ElementId(BuiltInParameter.FIRE_RATING);\nParameterValueProvider pvp = new ParameterValueProvider(fireRatingParamId);\nFilterStringRuleEvaluator evaluator = new FilterStringEquals();\nFilterRule rule = new FilterStringRule(pvp, evaluator, \"90 min\");\nElementParameterFilter filter = new ElementParameterFilter(rule);\nICollection<ElementId> wallsToSelect = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(filter).ToElementIds();\nif (wallsToSelect.Count > 0)\n{\n    new UIDocument(doc).Selection.SetElementIds(wallsToSelect);\n}"}
{"prompt":"Create a filled region with a 'Concrete' pattern.","completion":"using (Transaction t = new Transaction(doc, \"Create Filled Region\"))\n{\n    t.Start();\n    FilledRegionType regionType = new FilteredElementCollector(doc).OfClass(typeof(FilledRegionType)).Cast<FilledRegionType>().FirstOrDefault(frt => frt.Name.Contains(\"Concrete\"));\n    View activeView = doc.ActiveView;\n\n    if (regionType != null && activeView != null)\n    {\n        XYZ p1 = new XYZ(0,0,0);\n        XYZ p2 = new XYZ(5 \/ 0.3048, 0,0);\n        XYZ p3 = new XYZ(5 \/ 0.3048, 5 \/ 0.3048,0);\n        XYZ p4 = new XYZ(0, 5 \/ 0.3048,0);\n        CurveLoop profile = new CurveLoop();\n        profile.Append(Line.CreateBound(p1,p2));\n        profile.Append(Line.CreateBound(p2,p3));\n        profile.Append(Line.CreateBound(p3,p4));\n        profile.Append(Line.CreateBound(p4,p1));\n        FilledRegion.Create(doc, regionType.Id, activeView.Id, new List<CurveLoop>{profile});\n    }\n    t.Commit();\n}"}
{"prompt":"Configure the 'Comments' parameter for all doors on Level 3 to 'Fire Rating - 95 min'.","completion":"string levelName = \"Level 3\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(targetLevel.Id);\n    FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WherePasses(levelFilter);\n    foreach (Element door in collector)\n    {\n        Parameter commentsParam = door.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n        if (commentsParam != null && !commentsParam.IsReadOnly) { commentsParam.Set(\"Fire Rating - 95 min\"); }\n    }\n}"}
{"prompt":"Incorpora refuerzo a una columna.","completion":"RebarBarType barType = new FilteredElementCollector(doc).OfClass(typeof(RebarBarType)).FirstOrDefault() as RebarBarType;\nRebarShape shape = new FilteredElementCollector(doc).OfClass(typeof(RebarShape)).FirstOrDefault() as RebarShape;\nFamilyInstance column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\n\nif (barType != null && shape != null && column != null)\n{\n    Rebar.CreateFromRebarShape(doc, shape, barType, column, column.GetTransform().Origin, XYZ.BasisX, XYZ.BasisY);\n}"}
{"prompt":"Clone the 'Generic - 147mm' wall type and name it 'Interior - 16cm Plaster'.","completion":"string originalName = \"Generic - 147mm\";\nstring newName = \"Interior - 16cm Plaster\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif(originalType!=null)\n    originalType.Duplicate(newName);"}
{"prompt":"Construct a stair between Level 4 and Level 1","completion":"\/\/ This is a complex operation that requires multiple steps and\/or user interaction and is not supported by the agent."}
{"prompt":"Crea un nivel 'Roof Terrace' a 14m.","completion":"string levelName = \"Roof Terrace\";\ndouble elev = UnitUtils.ConvertToInternalUnits(14, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elev);\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Find the host of a face-based light fixture.","completion":"FamilyInstance lightFixture = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsNotElementType().Cast<FamilyInstance>().FirstOrDefault(fi => fi.HostFace != null);\n\nElement host = null;\nif (lightFixture != null)\n{\n    Reference hostFaceRef = lightFixture.HostFace;\n    if (hostFaceRef != null)\n    {\n        host = doc.GetElement(hostFaceRef.ElementId);\n    }\n}"}
{"prompt":"Copy the 'Generic - 132mm' wall type and name it 'Interior - 15cm Plaster'.","completion":"string originalName = \"Generic - 132mm\";\nstring newName = \"Interior - 15cm Plaster\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif (originalType != null)\n{\n    WallType newType = originalType.Duplicate(newName) as WallType;\n}"}
{"prompt":"Crea un techo por contorno en el 'Nivel de Cubierta'.","completion":"using (Transaction t = new Transaction(doc, \"Create Roof\"))\n{\n    t.Start();\n    Level roofLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel de Cubierta\");\n    RoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n\n    if (roofLevel != null && roofType != null)\n    {\n        CurveArray roofProfile = new CurveArray();\n        roofProfile.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(20 \/ 0.3048,0,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(20 \/ 0.3048,0,0), new XYZ(20 \/ 0.3048,30 \/ 0.3048,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(20 \/ 0.3048,30 \/ 0.3048,0), new XYZ(0,30 \/ 0.3048,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(0,30 \/ 0.3048,0), new XYZ(0,0,0)));\n        ModelCurveArray mapping = new ModelCurveArray();\n        doc.Create.NewFootPrintRoof(roofProfile, roofLevel, roofType, out mapping);\n    }\n    t.Commit();\n}"}
{"prompt":"Build a new revision and apply it to the active sheet.","completion":"Revision rev = Revision.Create(doc);\nViewSheet sheet = doc.ActiveView as ViewSheet;\n\nif (rev != null && sheet != null)\n{\n    rev.Description = \"Issued for Construction\";\n    rev.RevisionDate = DateTime.Now.ToString(\"yyyy-MM-dd\");\n    rev.IssuedBy = \"BIM Department\";\n    \n    ICollection<ElementId> revisions = sheet.GetAdditionalRevisionIds();\n    revisions.Add(rev.Id);\n    sheet.SetAdditionalRevisionIds(revisions);\n}"}
{"prompt":"Crea una vista de planta para el 'Nivel 2'.","completion":"string levelName = \"Nivel 2\";\nLevel level3 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.FloorPlan);\n\nif (level3 != null && vft != null)\n{\n    ViewPlan viewPlan = ViewPlan.Create(doc, vft.Id, level3.Id);\n}"}
{"prompt":"Generate a stair between Level 1 and Level 2.","completion":"\/\/ This is a complex operation that requires multiple steps and\/or user interaction and is not supported by the agent."}
{"prompt":"Incorpora un nivel llamado 'Nivel Azotea' a 15.1 metros.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(15.1, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Nivel Azotea\";\n}"}
{"prompt":"Unjoin the geometry of two given elements.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference ref1 = uidoc.Selection.PickObject(ObjectType.Element, \"Select the first element\");\nReference ref2 = uidoc.Selection.PickObject(ObjectType.Element, \"Select the second element\");\n\nif (ref1 != null && ref2 != null)\n{\n    Element e1 = doc.GetElement(ref1.ElementId);\n    Element e2 = doc.GetElement(ref2.ElementId);\n    if (e1 != null && e2 != null)\n    {\n        JoinGeometryUtils.UnjoinGeometry(doc, e1, e2);\n    }\n}"}
{"prompt":"Create a structural beam between (2,1,6) and (9,4,1) on Level 2","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 2\") as Level;\nFamilySymbol beamType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (beamType != null && level != null)\n{\n    if(!beamType.IsActive) beamType.Activate();\n    XYZ start = new XYZ(2, 1, 6);\n    XYZ end = new XYZ(9, 4, 1);\n    if (start.IsAlmostEqualTo(end)) return;\n    Line beamCurve = Line.CreateBound(start, end);\n    doc.Create.NewFamilyInstance(beamCurve, beamType, level, Autodesk.Revit.DB.Structure.StructuralType.Beam);\n}"}
{"prompt":"Create a new level 'Level 6' at an elevation of 8 meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Level 6\";\n}"}
{"prompt":"Agrega un punto de referencia en las coordenadas (1,1,8) dentro del editor de familias.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(1,1,8));"}
{"prompt":"Configure the 'Comments' parameter for all doors on Level 1 to 'Fire Rating - 85 min'.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\n\nif (level1 != null)\n{\n    List<FamilyInstance> doorsOnLevel1 = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsNotElementType().Cast<FamilyInstance>().Where(fi => fi.LevelId == level1.Id).ToList();\n    foreach(FamilyInstance door in doorsOnLevel1)\n    {\n        Parameter commentsParam = door.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n        if (commentsParam != null && !commentsParam.IsReadOnly) commentsParam.Set(\"Fire Rating - 85 min\");\n    }\n}"}
{"prompt":"Model a railing on an existing staircase.","completion":"RailingType railingType = new FilteredElementCollector(doc).OfClass(typeof(RailingType)).FirstOrDefault() as RailingType;\nStairs stairs = new FilteredElementCollector(doc).OfClass(typeof(Stairs)).FirstOrDefault() as Stairs;\n\nif (railingType != null && stairs != null)\n{\n    Railing.Create(doc, stairs.Id, railingType.Id, RailingPlacementPosition.Treads);\n}"}
{"prompt":"Copia el nivel 2 con un desfase de 4m y llámalo 'Mezanine'.","completion":"string levelName = \"Nivel 2\";\nLevel levelToCopy = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (levelToCopy != null)\n{\n    double offset = UnitUtils.ConvertToInternalUnits(4, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, levelToCopy.Elevation + offset);\n    newLevel.Name = \"Mezanine\";\n}"}
{"prompt":"Construct a new Level named 'Level 3' at an elevation of 14 meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(14, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\nif (newLevel != null)\n{\n    try { newLevel.Name = \"Level 3\"; } catch {}\n}"}
{"prompt":"Modela un equipo eléctrico en X=1,Y=1.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol panelSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_ElectricalEquipment).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null && panelSymbol != null)\n{\n    if (!panelSymbol.IsActive)\n    {\n        panelSymbol.Activate();\n    }\n    XYZ point = new XYZ(1, 1, 0);\n    doc.Create.NewFamilyInstance(point, panelSymbol, level, StructuralType.NonStructural);\n}"}
{"prompt":"Crea un grupo a partir de la selección actual y muévelo 10 metros a la derecha.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds != null && selectedIds.Count > 0)\n{\n    Group group = doc.Create.NewGroup(selectedIds);\n    if (group != null)\n    {\n        XYZ translation = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), 0, 0);\n        ElementTransformUtils.MoveElement(doc, group.Id, translation);\n    }\n}"}
{"prompt":"Clona la vista 'Nivel 5' como una vista dependiente.","completion":"ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v => v.Name == \"Nivel 5\") as ViewPlan;\n\nif (viewToDuplicate != null)\n{\n    ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n}"}
{"prompt":"Load the 'Table.rfa' family and place it at (12,2,0) on Level 1","completion":"string levelName = \"Level 1\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nstring familyName = \"Table\";\nFamilySymbol symbol = new FilteredElementCollector(doc).OfClass(typeof(FamilySymbol)).Cast<FamilySymbol>().FirstOrDefault(fs => fs.Family.Name == familyName);\nif (symbol != null && targetLevel != null)\n{\n    if (!symbol.IsActive) { symbol.Activate(); doc.Regenerate(); }\n    XYZ location = new XYZ(12, 2, 0);\n    doc.Create.NewFamilyInstance(location, symbol, targetLevel, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n}"}
{"prompt":"Get the system type of a selected pipe.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a pipe\");\n\nPipingSystemType systemType = null;\nif (pickedRef != null)\n{\n    Pipe pipe = doc.GetElement(pickedRef.ElementId) as Pipe;\n    if (pipe != null)\n    {\n        Parameter systemTypeParam = pipe.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM);\n        if (systemTypeParam != null && systemTypeParam.HasValue)\n        {\n            systemType = doc.GetElement(systemTypeParam.AsElementId()) as PipingSystemType;\n        }\n    }\n}\n"}
{"prompt":"Crea una apertura de hueco vertical (shaft) desde el nivel base hasta el nivel más alto.","completion":"using (Transaction t = new Transaction(doc, \"Create Shaft\"))\n{\n    t.Start();\n    Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderBy(l => l.ProjectElevation).FirstOrDefault();\n    Level topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderByDescending(l => l.ProjectElevation).FirstOrDefault();\n\n    if (bottomLevel != null && topLevel != null)\n    {\n        XYZ p1 = new XYZ(2 \/ 0.3048, 2 \/ 0.3048,0);\n        XYZ p2 = new XYZ(5 \/ 0.3048, 2 \/ 0.3048,0);\n        XYZ p3 = new XYZ(5 \/ 0.3048, 5 \/ 0.3048,0);\n        XYZ p4 = new XYZ(2 \/ 0.3048, 5 \/ 0.3048,0);\n        CurveArray profile = new CurveArray();\n        profile.Append(Line.CreateBound(p1,p2));\n        profile.Append(Line.CreateBound(p2,p3));\n        profile.Append(Line.CreateBound(p3,p4));\n        profile.Append(Line.CreateBound(p4,p1));\n        doc.Create.NewOpening(bottomLevel, topLevel, profile);\n    }\n    t.Commit();\n}"}
{"prompt":"Replicate the 'Level 2' plan view and make it a view template.","completion":"using (Transaction t = new Transaction(doc, \"Create View Template\"))\n{\n    t.Start();\n    ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().FirstOrDefault(v => v.Name == \"Level 2\");\n    string templateName = \"Level 2 Template\";\n\n    if (viewToDuplicate != null)\n    {\n        ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n        View newView = doc.GetElement(newViewId) as View;\n        if (newView != null)\n        {\n           \/\/ In older APIs, direct conversion to a template may not be available.\n           \/\/ A common workaround is to set the IsTemplate property if available and writable, \n           \/\/ which is not the case here. This is left as a comment for conceptual understanding.\n           \/\/ newView.IsTemplate = true;\n            newView.Name = templateName;\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Append a reference point at coordinates (1,4,3) inside the family editor.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(1,4,3));"}
{"prompt":"Crea un nuevo tipo de muro 'Muro Genérico 300mm' con un grosor de 30cm.","completion":"string newTypeName = \"Muro Genérico 300mm\";\nWallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif (oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(newTypeName) as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(30, UnitTypeId.Centimeters));\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n}"}
{"prompt":"Crea un tipo de muro 'Muro-Doble' de 30cm y luego crea un muro de ese tipo.","completion":"using (Transaction t = new Transaction(doc, \"Create Wall Type and Wall\"))\n{\n    t.Start();\n    string newTypeName = \"Muro-Doble\";\n    WallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n    WallType newWallType = null;\n    if (wallTypeToDuplicate != null)\n    {\n        newWallType = wallTypeToDuplicate.Duplicate(newTypeName) as WallType;\n        if (newWallType != null)\n        {\n            CompoundStructure cs = newWallType.GetCompoundStructure();\n            if (cs != null && cs.LayerCount > 0)\n            {\n                cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), 0.3 \/ 0.3048);\n                newWallType.SetCompoundStructure(cs);\n            }\n        }\n    }\n    if (newWallType != null)\n    {\n        Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n        Line wallCurve = Line.CreateBound(XYZ.Zero, new XYZ(10 \/ 0.3048, 0, 0));\n        double height = 3 \/ 0.3048;\n        if (level != null)\n        {\n            Wall.Create(doc, wallCurve, newWallType.Id, level.Id, height, 0, false, false);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Dentro del editor de familias, crea un nuevo plano de referencia horizontal.","completion":"string rpName = \"Plano Horizontal\";\nXYZ start = new XYZ(UnitUtils.ConvertToInternalUnits(-5, UnitTypeId.Meters), 0, 0);\nXYZ end = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0, 0);\nXYZ normal = XYZ.BasisY;\n\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    ReferencePlane rp = doc.FamilyCreate.NewReferencePlane(start, end, normal, activeView);\n    if (rp != null)\n    {\n        rp.Name = rpName;\n    }\n}"}
{"prompt":"Inserta una instancia de la familia 'Mesa de Oficina' en el centro de la habitación 'Despacho 103'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 103\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Mesa de Oficina\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);"}
{"prompt":"Duplica el tipo de muro 'Genérico - 193mm' y nómbralo 'Interior - 15cm Yeso'.","completion":"string originalName = \"Genérico - 193mm\";\nstring newName = \"Interior - 15cm Yeso\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif (originalType != null)\n{\n    WallType newType = originalType.Duplicate(newName) as WallType;\n}"}
{"prompt":"Crea una vista de plano de plafón reflejado para el Nivel 1.","completion":"string levelName = \"Nivel 1\";\nstring viewName = \"Plano de Plafón Nivel 1\";\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.CeilingPlan);\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\n\nif (vft != null && level1 != null)\n{\n    ViewPlan rcp = ViewPlan.Create(doc, vft.Id, level1.Id);\n    if (rcp != null)\n    {\n        rcp.Name = viewName;\n    }\n}"}
{"prompt":"Modify the type of all 'Fixed' windows to 'Casement'.","completion":"FamilySymbol newType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name.Contains(\"Casement\"));\nFamilySymbol oldType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name.Contains(\"Fixed\"));\n\nif (newType != null && oldType != null)\n{\n    List<FamilyInstance> windowsToChange = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().Where(fi => fi.Symbol.Id == oldType.Id).ToList();\n    foreach (FamilyInstance window in windowsToChange)\n    {\n        window.Symbol = newType;\n    }\n}"}
{"prompt":"Turn a selected element 88 degrees around its Z-axis.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select an element to rotate\");\nElement elem = doc.GetElement(pickedRef.ElementId);\nLocationPoint lp = elem.Location as LocationPoint;\nLine axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\nElementTransformUtils.RotateElement(doc, elem.Id, axis, Math.PI \/ 88);"}
{"prompt":"Crea un DirectShape esférico con un radio de 5 metros.","completion":"using (Transaction t = new Transaction(doc, \"Create Sphere DirectShape\"))\n{\n    t.Start();\n    double radius = 5 \/ 0.3048;\n    List<GeometryObject> solids = new List<GeometryObject>();\n    Frame frame = new Frame(XYZ.Zero, XYZ.BasisX, XYZ.BasisY, XYZ.BasisZ);\n    Arc arc = Arc.Create(frame.Origin, radius, 0, Math.PI, frame.BasisX, frame.BasisY);\n    Line line = Line.CreateBound(arc.GetEndPoint(1), arc.GetEndPoint(0));\n    CurveLoop profile = CurveLoop.Create(new List<Curve> { arc, line });\n    Solid sphere = GeometryCreationUtilities.CreateRevolvedGeometry(frame, new List<CurveLoop> { profile }, 0, 2 * Math.PI);\n    solids.Add(sphere);\n    DirectShape ds = DirectShape.CreateElement(doc, new ElementId(BuiltInCategory.OST_GenericModel));\n\n    if (ds != null)\n    {\n        ds.SetShape(solids);\n        ds.Name = \"Esfera DirectShape\";\n    }\n    t.Commit();\n}"}
{"prompt":"Recupera la geometría sólida de un elemento seleccionado.","completion":"UIDocument localUidoc = uidoc;\nReference pickedRef = localUidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un elemento para obtener su geometría\");\nif(pickedRef != null)\n{\n    Element elem = doc.GetElement(pickedRef);\n    if(elem != null)\n    {\n        Options opt = new Options() { ComputeReferences = true, DetailLevel = ViewDetailLevel.Fine };\n        GeometryElement geoElem = elem.get_Geometry(opt);\n        if(geoElem != null)\n        {\n            List<Solid> solids = geoElem.OfType<Solid>().Where(s => s.Volume > 0).ToList();\n        }\n    }\n}"}
{"prompt":"Cambia el nombre de todas las vistas de planta para que empiecen con 'ARQ_'.","completion":"string prefix = \"ARQ_\";\nList<ViewPlan> planViews = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().Where(v => !v.IsTemplate).ToList();\nforeach(ViewPlan view in planViews)\n{\n    if(!view.Name.StartsWith(prefix))\n    {\n        view.Name = prefix + view.Name;\n    }\n}"}
{"prompt":"Create 5 worksets for engineering disciplines.","completion":"List<string> worksetNames = new List<string> { \"MEP_HVAC\", \"MEP_Plumbing\", \"MEP_Electrical\", \"STRUCT_Framing\", \"STRUCT_Foundations\" };\nforeach(string name in worksetNames)\n{\n    Workset newWorkset = Workset.Create(doc, name);\n}"}
{"prompt":"Build a global length parameter named 'CorridorWidth' with a value of 1.5m.","completion":"string paramName = \"CorridorWidth\";\nGlobalParameter gp = GlobalParameter.Create(doc, paramName, SpecTypeId.Length);\n\nif (gp != null)\n{\n    gp.SetValue(new DoubleParameterValue(UnitUtils.ConvertToInternalUnits(1.5, UnitTypeId.Meters)));\n}"}
{"prompt":"Modela un barandal en una escalera existente.","completion":"RailingType railingType = new FilteredElementCollector(doc).OfClass(typeof(RailingType)).FirstOrDefault() as RailingType;\nStairs stairs = new FilteredElementCollector(doc).OfClass(typeof(Stairs)).FirstOrDefault() as Stairs;\n\nif (railingType != null && stairs != null)\n{\n    Railing.Create(doc, stairs.Id, railingType.Id, RailingPlacementPosition.Treads);\n}"}
{"prompt":"Construct a global length parameter named 'CorridorWidth' with a value of 1.2m.","completion":"string paramName = \"CorridorWidth\";\nGlobalParameter gp = GlobalParameter.Create(doc, paramName, SpecTypeId.Length);\n\nif (gp != null)\n{\n    gp.SetValue(new DoubleParameterValue(UnitUtils.ConvertToInternalUnits(1.2, UnitTypeId.Meters)));\n}"}
{"prompt":"Build a spherical DirectShape with a 5-meter radius.","completion":"using (Transaction t = new Transaction(doc, \"Create Sphere DirectShape\"))\n{\n    t.Start();\n    double radius = 5 \/ 0.3048;\n    List<GeometryObject> solids = new List<GeometryObject>();\n    Frame frame = new Frame(XYZ.Zero, XYZ.BasisX, XYZ.BasisY, XYZ.BasisZ);\n    Arc arc = Arc.Create(frame.Origin, radius, 0, Math.PI, frame.BasisX, frame.BasisY);\n    Line line = Line.CreateBound(arc.GetEndPoint(1), arc.GetEndPoint(0));\n    CurveLoop profile = CurveLoop.Create(new List<Curve> { arc, line });\n    Solid sphere = GeometryCreationUtilities.CreateRevolvedGeometry(frame, new List<CurveLoop> { profile }, 0, 2 * Math.PI);\n    solids.Add(sphere);\n    DirectShape ds = DirectShape.CreateElement(doc, new ElementId(BuiltInCategory.OST_GenericModel));\n\n    if (ds != null)\n    {\n        ds.SetShape(solids);\n        ds.Name = \"Sphere DirectShape\";\n    }\n    t.Commit();\n}"}
{"prompt":"Coloca una etiqueta de material en una cara de muro.","completion":"using (Transaction t = new Transaction(doc, \"Place Material Tag\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference faceRef = localUidoc.Selection.PickObject(ObjectType.Face, \"Selecciona una cara para etiquetar\");\n    XYZ point = localUidoc.Selection.PickPoint(\"Selecciona la ubicación de la etiqueta\");\n    View activeView = doc.ActiveView;\n\n    if (faceRef != null && point != null && activeView != null)\n    {\n        IndependentTag.Create(doc, activeView.Id, faceRef, true, TagMode.TM_ADDBY_MATERIAL, TagOrientation.Horizontal, point);\n    }\n    t.Commit();\n}"}
{"prompt":"Coloca una cota de elevación en una cara y un punto de vista dados.","completion":"using (Transaction t = new Transaction(doc, \"Place Spot Elevation\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference faceRef = localUidoc.Selection.PickObject(ObjectType.Face, \"Selecciona la cara superior del suelo\");\n\n    View activeView = doc.ActiveView;\n\n    if (faceRef != null && activeView != null)\n    {\n        XYZ pointOnFace = faceRef.GlobalPoint;\n        XYZ leaderEnd = pointOnFace + new XYZ(1 \/ 0.3048, 1 \/ 0.3048, 0);\n        doc.Create.NewSpotElevation(activeView, faceRef, pointOnFace, pointOnFace, leaderEnd, pointOnFace, true);\n    }\n    t.Commit();\n}"}
{"prompt":"Set the 'Mark' parameter of all selected walls to 'W-EXT-4'.","completion":"using (Transaction t = new Transaction(doc, \"Set Wall Mark\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    ICollection<ElementId> selectedIds = localUidoc.Selection.GetElementIds();\n\n    if (selectedIds != null && selectedIds.Count > 4)\n    {\n        foreach(ElementId id in selectedIds)\n        {\n            Element elem = doc.GetElement(id);\n            if(elem is Wall)\n            {\n                Parameter markParam = elem.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n                if (markParam != null && !markParam.IsReadOnly) markParam.Set(\"W-EXT-01\");\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Encuentra un muro buscando el valor 'W-01' en su parámetro de Marca.","completion":"string markValue = \"W-01\";\nElementId markParamId = new ElementId(BuiltInParameter.ALL_MODEL_MARK);\nParameterValueProvider pvp = new ParameterValueProvider(markParamId);\nFilterStringRuleEvaluator evaluator = new FilterStringEquals();\nFilterRule rule = new FilterStringRule(pvp, evaluator, markValue);\nElementFilter filter = new ElementParameterFilter(rule);\nWall wall = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().WherePasses(filter).FirstOrDefault() as Wall;"}
{"prompt":"Representa un conducto de ventilación rectangular de 300x200 milímetros.","completion":"using (Transaction t = new Transaction(doc, \"Create Duct\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    DuctType ductType = new FilteredElementCollector(doc).OfClass(typeof(DuctType)).Cast<DuctType>().FirstOrDefault(d => d.Shape == ConnectorProfileType.Rectangular);\n    MEPSystemType systemType = new FilteredElementCollector(doc).OfClass(typeof(MEPSystemType)).Cast<MEPSystemType>().FirstOrDefault(s => s.SystemClassification == MEPSystemClassification.SupplyAir);\n\n    if (level != null && ductType != null && systemType != null)\n    {\n        XYZ p1 = new XYZ(0, 0, 3 \/ 0.3048);\n        XYZ p2 = new XYZ(10 \/ 0.3048, 0, 3 \/ 0.3048);\n        Duct duct = Duct.Create(doc, systemType.Id, ductType.Id, level.Id, p1, p2);\n\n        if (duct != null)\n        {\n            Parameter widthParam = duct.get_Parameter(BuiltInParameter.RBS_CURVE_WIDTH_PARAM);\n            Parameter heightParam = duct.get_Parameter(BuiltInParameter.RBS_CURVE_HEIGHT_PARAM);\n            if (widthParam != null && !widthParam.IsReadOnly) widthParam.Set(300 \/ 304.8);\n            if (heightParam != null && !heightParam.IsReadOnly) heightParam.Set(200 \/ 304.8);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create a new room on Level 4 at point (9, 12).","completion":"string levelName = \"Level 4\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    UV point = new UV(9, 12);\n    Room newRoom = doc.Create.NewRoom(targetLevel, point);\n}"}
{"prompt":"Obtén todas las habitaciones que están en el Nivel 3","completion":"string levelName = \"Nivel 3\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(targetLevel.Id);\n    FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WherePasses(levelFilter);\n    uidoc.Selection.SetElementIds(collector.ToElementIds());\n}"}
{"prompt":"Establece la visibilidad de la categoría 'Mobiliario' en falso en la vista activa.","completion":"Category furnitureCat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Furniture);\nif (furnitureCat != null && doc.ActiveView != null)\n{\n    doc.ActiveView.SetCategoryHidden(furnitureCat.Id, true);\n}"}
{"prompt":"Selecciona todos los muros del 'Nivel 4' y cambia su comentario a 'REVISAR AISLAMIENTO'.","completion":"Level level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 4\") as Level;\nif (level2 != null)\n{\n    List<Wall> wallsOnLevel2 = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Where(w => w.LevelId == level2.Id).Cast<Wall>().ToList();\n    foreach(Wall wall in wallsOnLevel2)\n    {\n        Parameter commentParam = wall.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n        if (commentParam != null && !commentParam.IsReadOnly)\n        {\n            commentParam.Set(\"REVISAR AISLAMIENTO\");\n        }\n    }\n}"}
{"prompt":"Build a new level named 'Mezzanine' at 8.0 meters elevation.","completion":"string levelName = \"Mezzanine\";\ndouble elevation = UnitUtils.ConvertToInternalUnits(8.0, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Assign the 'Mark' parameter of all selected walls to 'W-EXT-3'.","completion":"using (Transaction t = new Transaction(doc, \"Set Wall Mark\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    ICollection<ElementId> selectedIds = localUidoc.Selection.GetElementIds();\n\n    if (selectedIds != null && selectedIds.Count > 3)\n    {\n        foreach(ElementId id in selectedIds)\n        {\n            Element elem = doc.GetElement(id);\n            if(elem is Wall)\n            {\n                Parameter markParam = elem.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n                if (markParam != null && !markParam.IsReadOnly) markParam.Set(\"W-EXT-01\");\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Copia el nivel 1 con un desfase de 2m y llámalo 'Mezanine'.","completion":"string levelName = \"Mezanine\";\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\n\nif (level1 != null)\n{\n    double newElevation = level1.ProjectElevation + UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, newElevation);\n    if (newLevel != null)\n    {\n        newLevel.Name = levelName;\n    }\n}"}
{"prompt":"Generate a global length parameter named 'CorridorWidth' with a value of 1.7m.","completion":"string paramName = \"CorridorWidth\";\nGlobalParameter gp = GlobalParameter.Create(doc, paramName, SpecTypeId.Length);\n\nif (gp != null)\n{\n    gp.SetValue(new DoubleParameterValue(UnitUtils.ConvertToInternalUnits(1.7, UnitTypeId.Meters)));\n}"}
{"prompt":"Duplica la vista 'Nivel 5' como una vista dependiente.","completion":"ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v => v.Name == \"Nivel 5\") as ViewPlan;\n\nif (viewToDuplicate != null)\n{\n    ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n}"}
{"prompt":"Create a 'Roof Terrace' level at 15m.","completion":"string levelName = \"Roof Terrace\";\ndouble elev = UnitUtils.ConvertToInternalUnits(15, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elev);\nnewLevel.Name = levelName;\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Duplica el tipo de muro 'Genérico - 148mm' y nómbralo 'Interior - 13cm Yeso'.","completion":"string originalName = \"Genérico - 148mm\";\nstring newName = \"Interior - 13cm Yeso\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif (originalType != null)\n{\n    WallType newType = originalType.Duplicate(newName) as WallType;\n}"}
{"prompt":"Copy level 5 with a 6m offset and name it 'Mezzanine'.","completion":"string levelName = \"Level 5\";\nLevel levelToCopy = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (levelToCopy != null)\n{\n    double offset = UnitUtils.ConvertToInternalUnits(6, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, levelToCopy.Elevation + offset);\n    newLevel.Name = \"Mezzanine\";\n}"}
{"prompt":"Create a structural beam between (2,6,1) and (5,1,1) on Level 2","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 2\") as Level;\nFamilySymbol beamType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (beamType != null && level != null)\n{\n    if(!beamType.IsActive) beamType.Activate();\n    XYZ start = new XYZ(2, 6, 1);\n    XYZ end = new XYZ(5, 1, 1);\n    if (start.IsAlmostEqualTo(end)) return;\n    Line beamCurve = Line.CreateBound(start, end);\n    doc.Create.NewFamilyInstance(beamCurve, beamType, level, Autodesk.Revit.DB.Structure.StructuralType.Beam);\n}"}
{"prompt":"Voltea un elemento seleccionado 89 grados sobre su eje Z.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un elemento para rotar\");\nElement elem = doc.GetElement(pickedRef.ElementId);\nLocationPoint lp = elem.Location as LocationPoint;\nLine axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\nElementTransformUtils.RotateElement(doc, elem.Id, axis, Math.PI \/ 89);"}
{"prompt":"Copy the 'Generic - 148mm' wall type and name it 'Interior - 12cm Plaster'.","completion":"string originalName = \"Generic - 148mm\";\nstring newName = \"Interior - 12cm Plaster\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif (originalType != null)\n{\n    WallType newType = originalType.Duplicate(newName) as WallType;\n}"}
{"prompt":"Build an in-place family for a custom reception desk using an extrusion.","completion":""}
{"prompt":"Construct a 30cm 'Double-Wall' type and then create a wall of that type.","completion":"string newTypeName = \"Double-Wall\";\nWallType newWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == newTypeName) as WallType;\nif (newWallType == null)\n{\n    WallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n    if (wallTypeToDuplicate != null)\n    {\n        newWallType = wallTypeToDuplicate.Duplicate(newTypeName) as WallType;\n        if (newWallType != null)\n        {\n            CompoundStructure cs = newWallType.GetCompoundStructure();\n            if (cs != null)\n            {\n                cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(30, UnitTypeId.Centimeters));\n                newWallType.SetCompoundStructure(cs);\n            }\n        }\n    }\n}\n\nif (newWallType != null)\n{\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    if (level != null)\n    {\n        \/\/ Create a default 10ft long wall with a default 10ft height\n        Line wallCurve = Line.CreateBound(XYZ.Zero, new XYZ(10, 0, 0));\n        Wall.Create(doc, wallCurve, newWallType.Id, level.Id, 10.0, 0, false, false);\n    }\n}"}
{"prompt":"Cambia el estilo visual de la vista activa a 'Línea Oculta'.","completion":"View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.DisplayStyle = DisplayStyle.HLR;\n}"}
{"prompt":"Obtain the MEP space associated with the room 'Office 96'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Cast<Room>().FirstOrDefault(r => r.Name == \"Office 96\");\nList<Space> spaces = new List<Space>();\n\nif (room != null)\n{\n    spaces = new FilteredElementCollector(doc).OfClass(typeof(Space)).Cast<Space>().Where(s => s.Room != null && s.Room.Id == room.Id).ToList();\n}"}
{"prompt":"Apply the 'Architectural Template' view template to the active view.","completion":"View activeView = doc.ActiveView;\nView viewTemplate = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().FirstOrDefault(v => v.IsTemplate && v.Name == \"Architectural Template\");\n\nif (activeView != null && viewTemplate != null)\n{\n    activeView.ViewTemplateId = viewTemplate.Id;\n}"}
{"prompt":"Exporta todas las hojas de un conjunto a un único PDF.","completion":"ViewSheetSet sheetSet = new FilteredElementCollector(doc).OfClass(typeof(ViewSheetSet)).FirstOrDefault() as ViewSheetSet;\n\nif (sheetSet != null)\n{\n    string folderPath = \"C:\/RevitExports\/\";\n    PDFExportOptions options = new PDFExportOptions();\n    options.Combine = true;\n    options.FileName = sheetSet.Name;\n    List<ElementId> sheetIds = sheetSet.Views.Cast<ViewSheet>().Select(s => s.Id).ToList();\n    doc.Export(folderPath, sheetIds, options);\n}"}
{"prompt":"Duplicate level 5 with a 2m offset and name it 'Mezzanine'.","completion":"string levelName = \"Level 5\";\nLevel levelToCopy = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (levelToCopy != null)\n{\n    double offset = UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, levelToCopy.Elevation + offset);\n    newLevel.Name = \"Mezzanine\";\n}"}
{"prompt":"Link a DWG file as a reference in the active view.","completion":"string filePath = \"C:\/CAD_Files\/Base_Plan.dwg\";\nDWGImportOptions options = new DWGImportOptions();\noptions.ColorMode = ImportColorMode.Preserved;\nElementId linkedFileId;\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    doc.Link(filePath, options, activeView, out linkedFileId);\n}"}
{"prompt":"Crea vigas entre las columnas alineadas horizontalmente.","completion":"FamilySymbol beamSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nList<FamilyInstance> columns = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().Cast<FamilyInstance>().OrderBy(c => c.GetTransform().Origin.Y).ThenBy(c => c.GetTransform().Origin.X).ToList();\n\nif (beamSymbol != null && level != null && columns.Count >= 2)\n{\n    for(int i=0; i < columns.Count - 1; i++)\n    {\n        LocationPoint p1 = columns[i].Location as LocationPoint;\n        LocationPoint p2 = columns[i+1].Location as LocationPoint;\n        if (p1 != null && p2 != null && Math.Abs(p1.Point.Y - p2.Point.Y) < 0.01)\n        {\n            Line line = Line.CreateBound(p1.Point, p2.Point);\n            doc.Create.NewFamilyInstance(line, beamSymbol, level, StructuralType.Beam);\n        }\n    }\n}"}
{"prompt":"Delete all unused wall types in the project.","completion":"ICollection<ElementId> allWallTypes = new FilteredElementCollector(doc).OfClass(typeof(WallType)).ToElementIds();\nICollection<ElementId> usedWallTypes = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Select(w => w.GetTypeId()).Distinct().ToList();\nList<ElementId> unusedWallTypes = allWallTypes.Except(usedWallTypes).ToList();\ndoc.Delete(unusedWallTypes);"}
{"prompt":"Get the system type of a selected pipe.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a pipe\");\n\nPipingSystemType systemType = null;\nif (pickedRef != null)\n{\n    Pipe pipe = doc.GetElement(pickedRef.ElementId) as Pipe;\n    if (pipe != null)\n    {\n        Parameter systemTypeParam = pipe.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM);\n        if (systemTypeParam != null && systemTypeParam.HasValue)\n        {\n            systemType = doc.GetElement(systemTypeParam.AsElementId()) as PipingSystemType;\n        }\n    }\n}\n"}
{"prompt":"Assign the sill height of all windows to 904mm.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits(904, UnitTypeId.Millimeters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Generate an extrusion roof with an arc profile.","completion":"using (Transaction t = new Transaction(doc, \"Create Extrusion Roof\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    RoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n\n    if (level != null && roofType != null && doc.ActiveView != null)\n    {\n        CurveArray profile = new CurveArray();\n        profile.Append(Arc.Create(new XYZ(-10,0,0), new XYZ(10,0,0), new XYZ(0,5,0)));\n        Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisY, XYZ.Zero);\n        ReferencePlane refPlane = doc.Create.NewReferencePlane(plane.Origin, plane.Origin + XYZ.BasisX, plane.Normal, doc.ActiveView);\n        if(refPlane != null)\n            doc.Create.NewExtrusionRoof(profile, refPlane, level, roofType, 0, 20);\n    }\n    t.Commit();\n}"}
{"prompt":"Generate a new level 'Level 1' at an elevation of 17 meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(17, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Level 1\";\n}"}
{"prompt":"Temporarily isolate the Doors category in the active view.","completion":"ElementId doorCategoryId = new ElementId(BuiltInCategory.OST_Doors);\nICollection<ElementId> categoryIds = new List<ElementId> { doorCategoryId };\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.IsolateCategoriesTemporary(categoryIds);\n}"}
{"prompt":"Dibuja una pared de 5m de largo por 3m de altura.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (level != null && wallType != null)\n{\n    Line line = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0, 0));\n    Wall.Create(doc, line, wallType.Id, level.Id, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0.0, false, false);\n}"}
{"prompt":"Create a new wall type 'Generic Wall 295mm' with a thickness of 28cm.","completion":"string newTypeName = \"Generic Wall 295mm\";\nWallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif (oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(newTypeName) as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(28, UnitTypeId.Centimeters));\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n}"}
{"prompt":"Generate a new wall type 'Generic Wall 298mm' with a thickness of 35cm.","completion":"string newTypeName = \"Generic Wall 298mm\";\nWallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif (oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(newTypeName) as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(35, UnitTypeId.Centimeters));\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n}"}
{"prompt":"Attach a reference point at coordinates (1,5,1) inside the family editor.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(1,5,1));"}
{"prompt":"Find all walls taller than 3 meters.","completion":"double heightThreshold = UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\nElementId heightParamId = new ElementId(BuiltInParameter.WALL_USER_HEIGHT_PARAM);\nParameterValueProvider pvp = new ParameterValueProvider(heightParamId);\nFilterNumericRuleEvaluator evaluator = new FilterNumericGreater();\nFilterRule rule = new FilterDoubleRule(pvp, evaluator, heightThreshold, 1e-6);\nElementParameterFilter filter = new ElementParameterFilter(rule);\nList<ElementId> tallWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(filter).ToElementIds().ToList();"}
{"prompt":"Draw a 300x200 millimeter rectangular ventilation duct.","completion":"using (Transaction t = new Transaction(doc, \"Create Duct\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    DuctType ductType = new FilteredElementCollector(doc).OfClass(typeof(DuctType)).Cast<DuctType>().FirstOrDefault(d => d.Shape == ConnectorProfileType.Rectangular);\n    MEPSystemType systemType = new FilteredElementCollector(doc).OfClass(typeof(MEPSystemType)).Cast<MEPSystemType>().FirstOrDefault(s => s.SystemClassification == MEPSystemClassification.SupplyAir);\n\n    if (level != null && ductType != null && systemType != null)\n    {\n        XYZ p1 = new XYZ(0, 0, 3 \/ 0.3048);\n        XYZ p2 = new XYZ(10 \/ 0.3048, 0, 3 \/ 0.3048);\n        Duct duct = Duct.Create(doc, systemType.Id, ductType.Id, level.Id, p1, p2);\n\n        if (duct != null)\n        {\n            Parameter widthParam = duct.get_Parameter(BuiltInParameter.RBS_CURVE_WIDTH_PARAM);\n            Parameter heightParam = duct.get_Parameter(BuiltInParameter.RBS_CURVE_HEIGHT_PARAM);\n            if (widthParam != null && !widthParam.IsReadOnly) widthParam.Set(300 \/ 304.8);\n            if (heightParam != null && !heightParam.IsReadOnly) heightParam.Set(200 \/ 304.8);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Extrae el número total de advertencias en el proyecto.","completion":"int totalWarnings = doc.GetWarnings().Count;\n"}
{"prompt":"Crea una apertura de hueco (shaft) que atraviese desde el Nivel 1 al Nivel 3.","completion":"using (Transaction t = new Transaction(doc, \"Create Shaft Opening\"))\n{\n    t.Start();\n    Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel 1\");\n    Level topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel 3\");\n\n    if (bottomLevel != null && topLevel != null)\n    {\n        XYZ p1 = new XYZ(5 \/ 0.3048, 5 \/ 0.3048,0);\n        XYZ p2 = new XYZ(8 \/ 0.3048, 5 \/ 0.3048,0);\n        XYZ p3 = new XYZ(8 \/ 0.3048, 8 \/ 0.3048,0);\n        XYZ p4 = new XYZ(5 \/ 0.3048, 8 \/ 0.3048,0);\n        CurveArray profile = new CurveArray();\n        profile.Append(Line.CreateBound(p1,p2));\n        profile.Append(Line.CreateBound(p2,p3));\n        profile.Append(Line.CreateBound(p3,p4));\n        profile.Append(Line.CreateBound(p4,p1));\n        Opening shaft = doc.Create.NewOpening(bottomLevel, topLevel, profile);\n    }\n    t.Commit();\n}"}
{"prompt":"Change the type of a selected floor to 'Concrete 15cm'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a floor\");\n\nif (pickedRef != null)\n{\n    Floor floorToChange = doc.GetElement(pickedRef) as Floor;\n    FloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name == \"Concrete 15cm\");\n    \n    if (floorToChange != null && newType != null)\n    {\n        floorToChange.ChangeTypeId(newType.Id);\n    }\n}"}
{"prompt":"Añade un punto de referencia en las coordenadas (4,7,3) dentro del editor de familias.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(4,7,3));"}
{"prompt":"Voltea el norte del proyecto 30 grados en sentido horario.","completion":"using (Transaction t = new Transaction(doc, \"Rotate Project North\"))\n{\n    t.Start();\n    BasePoint projectBasePoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(bp => !bp.IsShared);\n\n    if (projectBasePoint != null)\n    {\n        double angleInDegrees = 30.0;\n        double angleInRadians = -(angleInDegrees * Math.PI \/ 180.0);\n        using (var bbox = projectBasePoint.get_BoundingBox(null))\n        {\n          if (bbox != null)\n          {\n            XYZ center = bbox.Min;\n            Line axis = Line.CreateBound(center, center + XYZ.BasisZ);\n            ElementTransformUtils.RotateElement(doc, projectBasePoint.Id, axis, angleInRadians);\n          }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Turn a selected element 91 degrees around its Z-axis.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select an element to rotate\");\nElement elem = doc.GetElement(pickedRef.ElementId);\nLocationPoint lp = elem.Location as LocationPoint;\nLine axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\nElementTransformUtils.RotateElement(doc, elem.Id, axis, Math.PI \/ 91);"}
{"prompt":"Inserta una nota de texto con 'Revisar' en la vista actual.","completion":"View activeView = doc.ActiveView;\nElementId defaultTypeId = doc.GetDefaultElementTypeId(ElementTypeGroup.TextNoteType);\n\nif (activeView != null && defaultTypeId != ElementId.InvalidElementId)\n{\n    XYZ position = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0);\n    TextNote.Create(doc, activeView.Id, position, \"Revisar\", defaultTypeId);\n}"}
{"prompt":"Obtain all rooms on Level 3","completion":"string levelName = \"Level 3\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(targetLevel.Id);\n    FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WherePasses(levelFilter);\n    uidoc.Selection.SetElementIds(collector.ToElementIds());\n}"}
{"prompt":"Mueve el punto base del proyecto 100 metros hacia el norte.","completion":"using (Transaction t = new Transaction(doc, \"Move Project Base Point\"))\n{\n    t.Start();\n    BasePoint projectBasePoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(bp => !bp.IsShared);\n\n    if (projectBasePoint != null)\n    {\n        XYZ translation = new XYZ(0, 100 \/ 0.3048, 0);\n        ElementTransformUtils.MoveElement(doc, projectBasePoint.Id, translation);\n    }\n    t.Commit();\n}"}
{"prompt":"Fetch the MEP space associated with the room 'Office 103'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Cast<Room>().FirstOrDefault(r => r.Name == \"Office 103\");\nList<Space> spaces = new List<Space>();\n\nif (room != null)\n{\n    spaces = new FilteredElementCollector(doc).OfClass(typeof(Space)).Cast<Space>().Where(s => s.Room != null && s.Room.Id == room.Id).ToList();\n}"}
{"prompt":"Obtén una lista de todas las familias y sus tipos.","completion":"List<string> familyAndTypeNames = new List<string>();\nList<Family> families = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().ToList();\nforeach (Family fam in families)\n{\n    familyAndTypeNames.Add($\"Familia: {fam.Name}\");\n    foreach (ElementId symbolId in fam.GetFamilySymbolIds())\n    {\n        FamilySymbol sym = doc.GetElement(symbolId) as FamilySymbol;\n        if (sym != null)\n        {\n            familyAndTypeNames.Add($\"\\tTipo: {sym.Name}\");\n        }\n    }\n}"}
{"prompt":"Crea un nuevo tipo de muro 'Muro Genérico 260mm' con un grosor de 26cm.","completion":"string newTypeName = \"Muro Genérico 260mm\";\nWallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif (oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(newTypeName) as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(26, UnitTypeId.Centimeters));\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n}"}
{"prompt":"Ubica pilares en todos los cruces de la rejilla.","completion":"FamilySymbol colSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nList<Grid> grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().ToList();\n\nif (colSymbol != null && level != null && grids.Count >= 2)\n{\n    for (int i = 0; i < grids.Count; i++)\n    {\n        for (int j = i + 1; j < grids.Count; j++)\n        {\n            IntersectionResultArray results = null;\n            grids[i].Curve.Intersect(grids[j].Curve, out results);\n            if(results != null)\n            {\n                 foreach (IntersectionResult ir in results)\n                 {\n                     doc.Create.NewFamilyInstance(ir.XYZPoint, colSymbol, level, StructuralType.Column);\n                 }\n            }\n        }\n    }\n}"}
{"prompt":"Establece el parámetro 'Comentarios' de todas las puertas del Nivel 2 a 'Clasificación Fuego - 87 min'.","completion":"string levelName = \"Nivel 2\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(targetLevel.Id);\n    FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WherePasses(levelFilter);\n    foreach (Element door in collector)\n    {\n        Parameter commentsParam = door.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n        if (commentsParam != null && !commentsParam.IsReadOnly) { commentsParam.Set(\"Clasificación Fuego - 87 min\"); }\n    }\n}"}
{"prompt":"Move the project base point 100 meters to the north.","completion":"using (Transaction t = new Transaction(doc, \"Move Project Base Point\"))\n{\n    t.Start();\n    BasePoint projectBasePoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(bp => !bp.IsShared);\n\n    if (projectBasePoint != null)\n    {\n        XYZ translation = new XYZ(0, 100 \/ 0.3048, 0);\n        ElementTransformUtils.MoveElement(doc, projectBasePoint.Id, translation);\n    }\n    t.Commit();\n}"}
{"prompt":"Set the 'Comments' parameter for all doors on Level 4 to 'Fire Rating - 87 min'.","completion":"string levelName = \"Level 4\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(targetLevel.Id);\n    FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WherePasses(levelFilter);\n    foreach (Element door in collector)\n    {\n        Parameter commentsParam = door.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n        if (commentsParam != null && !commentsParam.IsReadOnly) { commentsParam.Set(\"Fire Rating - 87 min\"); }\n    }\n}"}
{"prompt":"Recupera todas las habitaciones en el Nivel 'Losa 103'.","completion":"Level groundFloor = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Losa 103\") as Level;\nList<Element> roomsOnGround = new List<Element>();\n\nif (groundFloor != null)\n{\n    roomsOnGround = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Where(r => r.LevelId == groundFloor.Id).ToList();\n}"}
{"prompt":"Generate an in-place family for a custom reception desk using an extrusion.","completion":""}
{"prompt":"Select all walls on 'Level 2' and change their comment to 'REVIEW INSULATION'.","completion":"Level level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 2\") as Level;\nif (level2 != null)\n{\n    List<Wall> wallsOnLevel2 = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Where(w => w.LevelId == level2.Id).Cast<Wall>().ToList();\n    foreach(Wall wall in wallsOnLevel2)\n    {\n        Parameter commentParam = wall.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n        if (commentParam != null && !commentParam.IsReadOnly)\n        {\n            commentParam.Set(\"REVIEW INSULATION\");\n        }\n    }\n}"}
{"prompt":"Genera un equipo eléctrico en X=1,Y=1.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol panelSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_ElectricalEquipment).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif(level != null && panelSymbol != null)\n{\n    XYZ point = new XYZ(UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters), 0);\n    doc.Create.NewFamilyInstance(point, panelSymbol, level, StructuralType.NonStructural);\n}"}
{"prompt":"Crea un nuevo tipo de muro de 29cm llamado 'Interiores'.","completion":"string newTypeName = \"Interiores\";\nWallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif (oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(newTypeName) as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(29, UnitTypeId.Centimeters));\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n}"}
{"prompt":"Generate a new A2 sheet with the number 'A-201'.","completion":"string sheetNumber = \"A-201\";\nFamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (titleBlock != null)\n{\n    ViewSheet sheet = ViewSheet.Create(doc, titleBlock.Id);\n    if (sheet != null)\n    {\n        sheet.Name = \"Construction Details\";\n        sheet.SheetNumber = sheetNumber;\n    }\n}"}
{"prompt":"Remove the 'DWG_' prefix from all materials.","completion":"string prefixToRemove = \"DWG_\";\nIList<Material> materials = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().ToList();\n\nif (materials.Any())\n{\n    HashSet<string> existingNames = new HashSet<string>(materials.Select(m => m.Name));\n    foreach (Material mat in materials)\n    {\n        if (mat.Name.StartsWith(prefixToRemove))\n        {\n            existingNames.Remove(mat.Name);\n            string newName = mat.Name.Substring(prefixToRemove.Length);\n            string finalName = newName;\n            int i = 1;\n            while (existingNames.Contains(finalName))\n            {\n                finalName = $\"{newName}_{i++}\";\n            }\n            mat.Name = finalName;\n            existingNames.Add(finalName);\n        }\n    }\n}"}
{"prompt":"Build a new level 'Level 1' at an elevation of 17 meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(17, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\nif (newLevel != null)\n{\n    try { newLevel.Name = \"Level 1\"; } catch {}\n}"}
{"prompt":"Add the prefix 'ARCH-' to all material names.","completion":"string prefix = \"ARCH-\";\nIList<Material> materials = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().ToList();\n\nif (materials.Any())\n{\n    HashSet<string> existingNames = new HashSet<string>(materials.Select(m => m.Name));\n    foreach (Material mat in materials)\n    {\n        if (!mat.Name.StartsWith(prefix))\n        {\n            string newName = prefix + mat.Name;\n            string finalName = newName;\n            int i = 1;\n            while (existingNames.Contains(finalName))\n            {\n                finalName = $\"{newName}_{i++}\";\n            }\n            mat.Name = finalName;\n            existingNames.Add(finalName);\n        }\n    }\n}"}
{"prompt":"Modela un reporte con el área de todas las habitaciones del proyecto.","completion":"List<Room> rooms = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>().ToList();\nList<double> roomAreas = new List<double>();\nforeach (Room room in rooms)\n{\n    if (room != null && room.Area > 0)\n    {\n        roomAreas.Add(UnitUtils.ConvertFromInternalUnits(room.Area, UnitTypeId.SquareMeters));\n    }\n}\n\/\/ El orquestador puede ahora usar la lista 'roomAreas' para generar el reporte final."}
{"prompt":"Modifica el tipo de una losa seleccionada a 'Concreto 10cm'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una losa\");\n\nif (pickedRef != null)\n{\n    Floor floorToChange = doc.GetElement(pickedRef) as Floor;\n    FloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name == \"Concreto 10cm\");\n    \n    if (floorToChange != null && newType != null)\n    {\n        floorToChange.ChangeTypeId(newType.Id);\n    }\n}"}
{"prompt":"Position an instance of the 'Office Desk' family in the center of the 'Office 105' room.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Office 105\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Office Desk\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);"}
{"prompt":"Copia la vista 'Losa 103' como una vista dependiente.","completion":"ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v => v.Name == \"Losa 103\") as ViewPlan;\n\nif (viewToDuplicate != null)\n{\n    ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n}"}
{"prompt":"Create a section view named 'Longitudinal Section'.","completion":"ViewFamilyType sectionType = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.Section);\n\nif (sectionType != null)\n{\n    BoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\n    sectionBox.Min = new XYZ(UnitUtils.ConvertToInternalUnits(-10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(-1, UnitTypeId.Meters), 0);\n    sectionBox.Max = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters));\n    Transform transform = Transform.Identity;\n    sectionBox.Transform = transform;\n    ViewSection sectionView = ViewSection.CreateSection(doc, sectionType.Id, sectionBox);\n    \n    if (sectionView != null)\n    {\n        sectionView.Name = \"Longitudinal Section\";\n    }\n}"}
{"prompt":"Genera una cuadrícula de columnas 5x5 con separación de 8 metros.","completion":"FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (columnSymbol != null && level != null)\n{\n    if(!columnSymbol.IsActive) columnSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters);\n    for(int i=0; i<5; i++)\n    {\n        for(int j=0; j<5; j++)\n        {\n            doc.Create.NewFamilyInstance(new XYZ(i*spacing, j*spacing, 0), columnSymbol, level, StructuralType.Column);\n        }\n    }\n}"}
{"prompt":"Change the type of a selected floor to 'Concrete 10cm'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a floor\");\n\nif (pickedRef != null)\n{\n    Floor floorToChange = doc.GetElement(pickedRef) as Floor;\n    FloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name == \"Concrete 10cm\");\n    \n    if (floorToChange != null && newType != null)\n    {\n        floorToChange.ChangeTypeId(newType.Id);\n    }\n}"}
{"prompt":"Define un filtro de vista para ocultar las líneas de detalle.","completion":"string filterName = \"Ocultar Líneas de Detalle\";\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    ICollection<ElementId> catsToHide = new List<ElementId>{new ElementId(BuiltInCategory.OST_Lines)};\n    ElementFilter filter = new ElementCategoryFilter(new ElementId(BuiltInCategory.OST_Lines));\n    ParameterFilterElement pfe = ParameterFilterElement.Create(doc, filterName, catsToHide, filter);\n    \n    if (pfe != null)\n    {\n        activeView.AddFilter(pfe.Id);\n        activeView.SetFilterVisibility(pfe.Id, false);\n    }\n}"}
{"prompt":"Obtén una lista de los nombres de todos los materiales.","completion":"List<Material> materials = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().ToList();\nList<string> materialNames = new List<string>();\nforeach(Material m in materials)\n{\n    materialNames.Add(m.Name);\n}\n"}
{"prompt":"Copia el tipo de muro 'Genérico - 145mm' y nómbralo 'Interior - 16cm Yeso'.","completion":"string originalName = \"Genérico - 145mm\";\nstring newName = \"Interior - 16cm Yeso\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif(originalType!=null)\n    originalType.Duplicate(newName);"}
{"prompt":"Retrieve the solid geometry of a selected element.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select an element to get its geometry\");\n\nList<Solid> solids = new List<Solid>();\nif (pickedRef != null)\n{\n    Element elem = doc.GetElement(pickedRef);\n    if (elem != null)\n    {\n        Options opt = new Options() { ComputeReferences = true, DetailLevel = ViewDetailLevel.Fine };\n        GeometryElement geoElem = elem.get_Geometry(opt);\n        if (geoElem != null)\n        {\n            solids = geoElem.OfType<Solid>().Where(s => s.Volume > 0).ToList();\n        }\n    }\n}"}
{"prompt":"Fetch the MEP space associated with the room 'Office 102'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Cast<Room>().FirstOrDefault(r => r.Name == \"Office 102\");\nList<Space> spaces = new List<Space>();\n\nif (room != null)\n{\n    spaces = new FilteredElementCollector(doc).OfClass(typeof(Space)).Cast<Space>().Where(s => s.Room != null && s.Room.Id == room.Id).ToList();\n}"}
{"prompt":"Incorpora los campos 'Losa 100', 'Marca' y 'Volumen' a la tabla de pilares.","completion":"ViewSchedule schedule = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().FirstOrDefault(s => s.Name.Contains(\"Pilares\") || s.Name.Contains(\"Column\"));\nif (schedule != null)\n{\n    ScheduleDefinition def = schedule.Definition;\n    SchedulableField levelField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.FAMILY_LEVEL_PARAM);\n    if (levelField != null) def.AddField(levelField);\n    SchedulableField markField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.ALL_MODEL_MARK);\n    if (markField != null) def.AddField(markField);\n    SchedulableField volumeField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.HOST_VOLUME_COMPUTED);\n    if (volumeField != null) def.AddField(volumeField);\n}"}
{"prompt":"Crea vigas entre las columnas alineadas horizontalmente.","completion":"FamilySymbol beamSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nList<FamilyInstance> columns = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().Cast<FamilyInstance>().OrderBy(c => c.GetTransform().Origin.Y).ThenBy(c => c.GetTransform().Origin.X).ToList();\n\nif (beamSymbol != null && level != null && columns.Count >= 2)\n{\n    for(int i=0; i < columns.Count - 1; i++)\n    {\n        LocationPoint p1 = columns[i].Location as LocationPoint;\n        LocationPoint p2 = columns[i+1].Location as LocationPoint;\n        if (p1 != null && p2 != null && Math.Abs(p1.Point.Y - p2.Point.Y) < 0.01)\n        {\n            Line line = Line.CreateBound(p1.Point, p2.Point);\n            doc.Create.NewFamilyInstance(line, beamSymbol, level, StructuralType.Beam);\n        }\n    }\n}"}
{"prompt":"Construct a new wall type 'Generic Wall 300mm' with a thickness of 30cm.","completion":"WallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif(oldWallType != null)\n{\n    WallType newWallType = null;\n    try { newWallType = oldWallType.Duplicate(\"Generic Wall 300mm\") as WallType; } catch {}\n    if(newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if(cs != null && cs.GetLayers().Any())\n        {\n            int coreLayerIndex = cs.GetFirstCoreLayerIndex();\n            if(coreLayerIndex != -1)\n            {\n                cs.SetLayerWidth(coreLayerIndex, UnitUtils.ConvertToInternalUnits(30, UnitTypeId.Centimeters));\n                newWallType.SetCompoundStructure(cs);\n            }\n        }\n    }\n}"}
{"prompt":"Create a pipe with a 150mm diameter.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nPipeType pipeType = new FilteredElementCollector(doc).OfClass(typeof(PipeType)).FirstOrDefault() as PipeType;\nPipingSystemType systemType = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).FirstOrDefault() as PipingSystemType;\nif (level != null && pipeType != null && systemType != null)\n{\n    XYZ p1 = new XYZ(0,0,0);\n    XYZ p2 = new XYZ(5,0,0);\n    Pipe pipe = Pipe.Create(doc, systemType.Id, pipeType.Id, level.Id, p1, p2);\n    if (pipe != null)\n    {\n        Parameter diameterParam = pipe.get_Parameter(BuiltInParameter.RBS_PIPE_DIAMETER_PARAM);\n        if (diameterParam != null) {\n            diameterParam.Set(UnitUtils.ConvertToInternalUnits(150, UnitTypeId.Millimeters));\n        }\n    }\n}"}
{"prompt":"Create a global length parameter named 'CorridorWidth' with a value of 1.2m.","completion":"string paramName = \"CorridorWidth\";\nGlobalParameter gp = GlobalParameter.Create(doc, paramName, SpecTypeId.Length);\n\nif (gp != null)\n{\n    gp.SetValue(new DoubleParameterValue(UnitUtils.ConvertToInternalUnits(1.2, UnitTypeId.Meters)));\n}"}
{"prompt":"Encuentra todos los pilares estructurales en el Nivel 5 que sean de hormigón.","completion":"string levelName = \"Nivel 5\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().WherePasses(new ElementLevelFilter(targetLevel.Id));\n    List<ElementId> concreteColumnIds = new List<ElementId>();\n    foreach (Element column in collector)\n    {\n        Parameter materialParam = column.get_Parameter(BuiltInParameter.STRUCTURAL_MATERIAL_PARAM);\n        if (materialParam != null && materialParam.HasValue)\n        {\n            ElementId materialId = materialParam.AsElementId();\n            if (materialId != ElementId.InvalidElementId)\n            {\n                Material material = doc.GetElement(materialId) as Material;\n                if (material != null && material.Name.ToLower().Contains(\"hormigón\"))\n                {\n                    concreteColumnIds.Add(column.Id);\n                }\n            }\n        }\n    }\n    uidoc.Selection.SetElementIds(concreteColumnIds);\n}"}
{"prompt":"Generate a structural column at position X=10, Y=5.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null && columnSymbol != null)\n{\n    if (!columnSymbol.IsActive)\n    {\n        columnSymbol.Activate();\n    }\n    doc.Create.NewFamilyInstance(new XYZ(10, 5, 0), columnSymbol, level, StructuralType.Column);\n}"}
{"prompt":"Construct a new level named 'Mezzanine' at 7.9 meters elevation.","completion":"string levelName = \"Mezzanine\";\ndouble elevation = UnitUtils.ConvertToInternalUnits(7.9, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Duplicate the 'Generic - 146mm' wall type and name it 'Interior - 20cm Plaster'.","completion":"string originalName = \"Generic - 146mm\";\nstring newName = \"Interior - 20cm Plaster\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif (originalType != null)\n{\n    WallType newType = originalType.Duplicate(newName) as WallType;\n}"}
{"prompt":"Insert an instance of the 'Office Desk' family in the center of the 'Office 102' room.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Office 102\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Office Desk\") as FamilySymbol;\nif(furnitureSymbol != null && !furnitureSymbol.IsActive) furnitureSymbol.Activate();\nif(room != null)\n{\n    LocationPoint roomCenter = room.Location as LocationPoint;\n    if(roomCenter != null && furnitureSymbol != null && room.Level != null)\n    {\n        doc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Añade un punto de referencia en las coordenadas (1,7,1) dentro del editor de familias.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(1,7,1));"}
{"prompt":"Generate a 'Roof Terrace' level at 12m.","completion":"string levelName = \"Roof Terrace\";\ndouble elev = UnitUtils.ConvertToInternalUnits(12, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elev);\nnewLevel.Name = levelName;\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Rotate project north 30 degrees clockwise.","completion":"using (Transaction t = new Transaction(doc, \"Rotate Project North\"))\n{\n    t.Start();\n    BasePoint projectBasePoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(bp => !bp.IsShared);\n\n    if (projectBasePoint != null)\n    {\n        double angleInDegrees = 30.0;\n        double angleInRadians = -(angleInDegrees * Math.PI \/ 180.0);\n        using (var bbox = projectBasePoint.get_BoundingBox(null))\n        {\n          if (bbox != null)\n          {\n            XYZ center = bbox.Min;\n            Line axis = Line.CreateBound(center, center + XYZ.BasisZ);\n            ElementTransformUtils.RotateElement(doc, projectBasePoint.Id, axis, angleInRadians);\n          }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create a stair between Level 1 and Level 3","completion":"\/\/ This is a complex operation that requires multiple steps and\/or user interaction and is not supported by the agent."}
{"prompt":"Cambia el tipo de una losa seleccionada a 'Concreto 15cm'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una losa\");\n\nif (pickedRef != null)\n{\n    Floor floorToChange = doc.GetElement(pickedRef) as Floor;\n    FloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name == \"Concreto 15cm\");\n    \n    if (floorToChange != null && newType != null)\n    {\n        floorToChange.ChangeTypeId(newType.Id);\n    }\n}"}
{"prompt":"Create a 'Roof Terrace' level at 15m.","completion":"string levelName = \"Roof Terrace\";\ndouble elev = UnitUtils.ConvertToInternalUnits(15, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elev);\nnewLevel.Name = levelName;\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Aplica el estilo visual 'Rayos X' a la vista 3D activa.","completion":"View3D view3D = doc.ActiveView as View3D;\nif (view3D != null && !view3D.IsTemplate)\n{\n    view3D.DisplayStyle = DisplayStyle.Wireframe; \/\/ Simula el efecto 'Rayos X'\n}"}
{"prompt":"Copia el tipo de muro 'Genérico - 150mm' y nómbralo 'Interior - 15cm Yeso'.","completion":"string originalName = \"Genérico - 150mm\";\nstring newName = \"Interior - 15cm Yeso\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif (originalType != null)\n{\n    WallType newType = originalType.Duplicate(newName) as WallType;\n}"}
{"prompt":"Create an MEP space for each room on Level 1.","completion":"using (Transaction t = new Transaction(doc, \"Create MEP Spaces\"))\n{\n    t.Start();\n    Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 1\");\n\n    if (level1 != null)\n    {\n        List<Room> roomsOnLevel1 = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Where(e => (e as Room) != null && (e as Room).LevelId.Equals(level1.Id)).Cast<Room>().ToList();\n        foreach(Room room in roomsOnLevel1)\n        {\n           \/\/ The direct creation of MEP spaces from rooms might not be available in this specific API version.\n           \/\/ Placeholder comment for the intended logic.\n           \/\/ Space.Create(doc, room, null);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Obtain the MEP space associated with the room 'Office 105'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Cast<Room>().FirstOrDefault(r => r.Name == \"Office 105\");\nList<Space> spaces = new List<Space>();\n\nif (room != null)\n{\n    spaces = new FilteredElementCollector(doc).OfClass(typeof(Space)).Cast<Space>().Where(s => s.Room != null && s.Room.Id == room.Id).ToList();\n}"}
{"prompt":"Build a new level named 'Mezzanine' at 7.0 meters elevation.","completion":"string levelName = \"Mezzanine\";\ndouble elevation = UnitUtils.ConvertToInternalUnits(7.0, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Ubica la vista 'Nivel 1' en el centro de la hoja activa.","completion":"ViewPlan viewToPlace = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v => v.Name == \"Nivel 1\") as ViewPlan;\nViewSheet activeSheet = doc.ActiveView as ViewSheet;\n\nif (viewToPlace != null && activeSheet != null)\n{\n    BoundingBoxUV sheetBox = activeSheet.Outline;\n    XYZ centerPoint = new XYZ((sheetBox.Min.U + sheetBox.Max.U) \/ 2, (sheetBox.Min.V + sheetBox.Max.V) \/ 2, 0);\n    Viewport.Create(doc, activeSheet.Id, viewToPlace.Id, centerPoint);\n}"}
{"prompt":"Calcula la longitud total de todos los ductos de Suministro de Aire.","completion":"List<Duct> ducts = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_DuctCurves).WhereElementIsNotElementType().Cast<Duct>().Where(d => d.get_Parameter(BuiltInParameter.RBS_SYSTEM_CLASSIFICATION_PARAM).AsString() == \"SupplyAir\").ToList();\ndouble totalLength = 0.0;\nforeach (Duct d in ducts)\n{\n    totalLength += d.get_Parameter(BuiltInParameter.CURVE_ELEM_LENGTH).AsDouble();\n}"}
{"prompt":"Recarga el vínculo de Revit 'Estructura_LINK.rvt'.","completion":"RevitLinkType linkType = new FilteredElementCollector(doc).OfClass(typeof(RevitLinkType)).Cast<RevitLinkType>().FirstOrDefault(lt => lt.Name == \"Estructura_LINK.rvt\");\n\nif (linkType != null)\n{\n    linkType.Reload();\n}"}
{"prompt":"Construct a new A1 sheet using the first available title block.","completion":"FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (titleBlock != null)\n{\n    ViewSheet sheet = ViewSheet.Create(doc, titleBlock.Id);\n    if (sheet != null)\n    {\n        sheet.Name = \"A1 - New Sheet\";\n        sheet.SheetNumber = \"A1\";\n    }\n}"}
{"prompt":"Crea un muro en el Nivel 1 que vaya de (0,0,0) a (10,0,0) con una altura de 4 metros.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (level1 != null && wallType != null)\n{\n    XYZ p1 = new XYZ(0, 0, 0);\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), 0, 0);\n    Line wallCurve = Line.CreateBound(p1, p2);\n    double height = UnitUtils.ConvertToInternalUnits(4, UnitTypeId.Meters);\n    Wall.Create(doc, wallCurve, wallType.Id, level1.Id, height, 0.0, false, false);\n}"}
{"prompt":"Crea un nuevo tipo de muro de 29cm llamado 'Muro Estructural 22cm'.","completion":"string newTypeName = \"Muro Estructural 22cm\";\nWallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(newTypeName) as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(29, UnitTypeId.Centimeters));\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n}"}
{"prompt":"Actualiza el tipo de una losa seleccionada a 'Concreto 10cm'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una losa\");\n\nif (pickedRef != null)\n{\n    Floor floorToChange = doc.GetElement(pickedRef) as Floor;\n    FloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name == \"Concreto 10cm\");\n    \n    if (floorToChange != null && newType != null)\n    {\n        floorToChange.ChangeTypeId(newType.Id);\n    }\n}"}
{"prompt":"Gira un elemento seleccionado 93 grados sobre su eje Z.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un elemento para rotar\");\nElement elem = doc.GetElement(pickedRef.ElementId);\nLocationPoint lp = elem.Location as LocationPoint;\nLine axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\nElementTransformUtils.RotateElement(doc, elem.Id, axis, Math.PI \/ 93);"}
{"prompt":"Fija el elemento seleccionado para que no se mueva.","completion":"UIDocument uidoc = new UIDocument(doc);\nElementId selectedId = uidoc.Selection.GetElementIds().FirstOrDefault();\n\nif (selectedId != ElementId.InvalidElementId)\n{\n    Element elementToPin = doc.GetElement(selectedId);\n    if (elementToPin != null)\n    {\n        elementToPin.Pinned = true;\n    }\n}"}
{"prompt":"Build a new elevation view looking north.","completion":"using (Transaction t = new Transaction(doc, \"Create North Elevation\"))\n{\n    t.Start();\n    ViewFamilyType elevationVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(vft => vft.ViewFamily == ViewFamily.Elevation);\n    View activeView = doc.ActiveView;\n\n    if (elevationVFT != null && activeView != null)\n    {\n        ElevationMarker marker = ElevationMarker.CreateElevationMarker(doc, elevationVFT.Id, new XYZ(0, 20 \/ 0.3048, 0), 100);\n        \n        if (marker != null)\n        {\n            View aev = marker.CreateElevation(doc, activeView.Id, 2);\n            if (aev != null)\n            {\n                aev.Name = \"North Elevation\";\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Replicate level 4 with a 8m offset and name it 'Mezzanine'.","completion":"string levelName = \"Level 4\";\nLevel levelToCopy = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (levelToCopy != null)\n{\n    double offset = UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, levelToCopy.Elevation + offset);\n    newLevel.Name = \"Mezzanine\";\n}"}
{"prompt":"Set the sill height of all windows to 898mm.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits(898, UnitTypeId.Millimeters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Primero, crea un nuevo tipo de muro de 18cm llamado 'Muro Interior Acústico', y luego úsalo para crear un muro de 8m en el Nivel 1.","completion":"WallType newWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Name == \"Muro Interior Acústico\");\nif (newWallType == null)\n{\n    WallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n    if (wallTypeToDuplicate != null)\n    {\n        try { newWallType = wallTypeToDuplicate.Duplicate(\"Muro Interior Acústico\") as WallType; } catch {}\n        if (newWallType != null)\n        {\n            CompoundStructure cs = newWallType.GetCompoundStructure();\n            if (cs != null && cs.GetLayers().Any())\n            {\n                 int coreIndex = cs.GetFirstCoreLayerIndex();\n                 if(coreIndex != -1)\n                 {\n                     cs.SetLayerWidth(coreIndex, UnitUtils.ConvertToInternalUnits(18, UnitTypeId.Centimeters));\n                     newWallType.SetCompoundStructure(cs);\n                 }\n            }\n        }\n    }\n}\nif (newWallType != null)\n{\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\n    if (level != null)\n    {\n        Line wallCurve = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters), 0, 0));\n        double height = UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\n        Wall.Create(doc, wallCurve, newWallType.Id, level.Id, height, 0, false, false);\n    }\n}"}
{"prompt":"Generate a shaft opening that passes through from Level 1 to Level 3.","completion":"using (Transaction t = new Transaction(doc, \"Create Shaft Opening\"))\n{\n    t.Start();\n    Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 1\");\n    Level topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 3\");\n\n    if (bottomLevel != null && topLevel != null)\n    {\n        XYZ p1 = new XYZ(5 \/ 0.3048, 5 \/ 0.3048,0);\n        XYZ p2 = new XYZ(8 \/ 0.3048, 5 \/ 0.3048,0);\n        XYZ p3 = new XYZ(8 \/ 0.3048, 8 \/ 0.3048,0);\n        XYZ p4 = new XYZ(5 \/ 0.3048, 8 \/ 0.3048,0);\n        CurveArray profile = new CurveArray();\n        profile.Append(Line.CreateBound(p1,p2));\n        profile.Append(Line.CreateBound(p2,p3));\n        profile.Append(Line.CreateBound(p3,p4));\n        profile.Append(Line.CreateBound(p4,p1));\n        doc.Create.NewOpening(bottomLevel, topLevel, profile);\n    }\n    t.Commit();\n}"}
{"prompt":"Cambia la escala de la vista activa a 1:50.","completion":"View activeView = doc.ActiveView;\nif (activeView != null)\n{\n    activeView.Scale = 50;\n}"}
{"prompt":"Render a filled region with a diagonal pattern.","completion":"using (Transaction t = new Transaction(doc, \"Draw Filled Region\"))\n{\n    t.Start();\n    View activeView = doc.ActiveView;\n    FillPatternElement fillPattern = new FilteredElementCollector(doc).OfClass(typeof(FillPatternElement)).Cast<FillPatternElement>().FirstOrDefault(p => !p.GetFillPattern().IsSolidFill);\n\n    if (activeView != null && fillPattern != null)\n    {\n        FilledRegionType filledRegionType = new FilteredElementCollector(doc, activeView.Id).OfClass(typeof(FilledRegionType)).FirstOrDefault() as FilledRegionType;\n        if (filledRegionType != null)\n        {\n            FilledRegionType newType = filledRegionType.Duplicate(\"Temp Diagonal Region\") as FilledRegionType;\n            if (newType != null)\n            {\n                newType.ForegroundPatternId = fillPattern.Id;\n                XYZ p1 = new XYZ(0,0,0);\n                XYZ p2 = new XYZ(5 \/ 0.3048,0,0);\n                XYZ p3 = new XYZ(5 \/ 0.3048,5 \/ 0.3048,0);\n                XYZ p4 = new XYZ(0,5 \/ 0.3048,0);\n                CurveLoop profile = new CurveLoop();\n                profile.Append(Line.CreateBound(p1,p2));\n                profile.Append(Line.CreateBound(p2,p3));\n                profile.Append(Line.CreateBound(p3,p4));\n                profile.Append(Line.CreateBound(p4,p1));\n                FilledRegion.Create(doc, newType.Id, activeView.Id, new List<CurveLoop>{profile});\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Ubica una instancia de la familia 'Puerta Sencilla' en el centro de la habitación 'Despacho 105'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 105\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Puerta Sencilla\") as FamilySymbol;\nif(furnitureSymbol != null && !furnitureSymbol.IsActive) furnitureSymbol.Activate();\nif(room != null)\n{\n    LocationPoint roomCenter = room.Location as LocationPoint;\n    if(roomCenter != null && furnitureSymbol != null && room.Level != null)\n    {\n        doc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Ajusta todas las ventanas para que la altura del antepecho sea 1 metro.","completion":"using (Transaction t = new Transaction(doc, \"Set Sill Height\"))\n{\n    t.Start();\n    double sillHeight = 1 \/ 0.3048;\n    List<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\n    foreach(FamilyInstance window in windows)\n    {\n        Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n        if (sillHeightParam != null && !sillHeightParam.IsReadOnly)\n        {\n            sillHeightParam.Set(sillHeight);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create a Reflected Ceiling Plan view for Level 1.","completion":"string levelName = \"Level 1\";\nstring viewName = \"Level 1 Ceiling Plan\";\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.CeilingPlan);\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\n\nif (vft != null && level1 != null)\n{\n    ViewPlan rcp = ViewPlan.Create(doc, vft.Id, level1.Id);\n    if (rcp != null)\n    {\n        rcp.Name = viewName;\n    }\n}"}
{"prompt":"Recupera el espacio MEP asociado a la habitación 'Oficina 101'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Cast<Room>().FirstOrDefault(r => r.Name == \"Oficina 101\");\nList<Space> spaces = new List<Space>();\n\nif (room != null)\n{\n    spaces = new FilteredElementCollector(doc).OfClass(typeof(Space)).Cast<Space>().Where(s => s.Room != null && s.Room.Id == room.Id).ToList();\n}"}
{"prompt":"Voltea un elemento seleccionado 92 grados sobre su eje Z.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un elemento para rotar\");\nElement elem = doc.GetElement(pickedRef.ElementId);\nLocationPoint lp = elem.Location as LocationPoint;\nLine axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\nElementTransformUtils.RotateElement(doc, elem.Id, axis, Math.PI \/ 92);"}
{"prompt":"Establece la visibilidad de la categoría 'Mobiliario' en falso en la vista activa.","completion":"Category furnitureCat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Furniture);\nView activeView = doc.ActiveView;\n\nif (furnitureCat != null && activeView != null)\n{\n    activeView.SetCategoryHidden(furnitureCat.Id, true);\n}"}
{"prompt":"Build a shaft opening that passes through from Level 1 to Level 3.","completion":"using (Transaction t = new Transaction(doc, \"Create Shaft Opening\"))\n{\n    t.Start();\n    Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 1\");\n    Level topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 3\");\n\n    if (bottomLevel != null && topLevel != null)\n    {\n        XYZ p1 = new XYZ(5 \/ 0.3048, 5 \/ 0.3048,0);\n        XYZ p2 = new XYZ(8 \/ 0.3048, 5 \/ 0.3048,0);\n        XYZ p3 = new XYZ(8 \/ 0.3048, 8 \/ 0.3048,0);\n        XYZ p4 = new XYZ(5 \/ 0.3048, 8 \/ 0.3048,0);\n        CurveArray profile = new CurveArray();\n        profile.Append(Line.CreateBound(p1,p2));\n        profile.Append(Line.CreateBound(p2,p3));\n        profile.Append(Line.CreateBound(p3,p4));\n        profile.Append(Line.CreateBound(p4,p1));\n        doc.Create.NewOpening(bottomLevel, topLevel, profile);\n    }\n    t.Commit();\n}"}
{"prompt":"Set the 'Comments' parameter for all doors on Level 5 to 'Fire Rating - 86 min'.","completion":"string levelName = \"Level 5\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(targetLevel.Id);\n    FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WherePasses(levelFilter);\n    foreach (Element door in collector)\n    {\n        Parameter commentsParam = door.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n        if (commentsParam != null && !commentsParam.IsReadOnly) { commentsParam.Set(\"Fire Rating - 86 min\"); }\n    }\n}"}
{"prompt":"Position an instance of the 'Office Desk' family in the center of the 'Office 106' room.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Office 106\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Office Desk\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);"}
{"prompt":"Rotate a selected element 91 degrees around its Z-axis.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select an element to rotate\");\nElement elem = doc.GetElement(pickedRef.ElementId);\nLocationPoint lp = elem.Location as LocationPoint;\nLine axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\nElementTransformUtils.RotateElement(doc, elem.Id, axis, Math.PI \/ 91);"}
{"prompt":"Construct a radial dimension for a curved wall.","completion":"using (Transaction t = new Transaction(doc, \"Create Radial Dimension\"))\n{\n    t.Start();\n    Wall curvedWall = new FilteredElementCollector(doc, doc.ActiveView.Id).OfClass(typeof(Wall)).Cast<Wall>().FirstOrDefault(w => w.Location is LocationCurve && (w.Location as LocationCurve).Curve is Arc);\n    View activeView = doc.ActiveView;\n\n    if (curvedWall != null && activeView != null)\n    {\n        LocationCurve locCurve = curvedWall.Location as LocationCurve;\n        if (locCurve != null)\n        {\n            Arc arc = locCurve.Curve as Arc;\n            if (arc != null)\n            {\n                ReferenceArray refArray = new ReferenceArray();\n                refArray.Append(arc.Reference);\n                doc.Create.NewDimension(activeView, Line.CreateBound(arc.Center, arc.GetEndPoint(0)), refArray);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Añade un plano de referencia horizontal llamado 'Eje Central A'.","completion":"using (Transaction t = new Transaction(doc, \"Add Reference Plane\"))\n{\n    t.Start();\n    string rpName = \"Eje Central A\";\n    View activeView = doc.ActiveView;\n\n    if (activeView != null)\n    {\n        XYZ bubbleEnd = new XYZ(0, 10, 0);\n        XYZ freeEnd = new XYZ(10, 10, 0);\n        XYZ cutVec = XYZ.BasisZ;\n        ReferencePlane rp = doc.Create.NewReferencePlane(bubbleEnd, freeEnd, cutVec, activeView);\n        if (rp != null)\n        {\n            rp.Name = rpName;\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Build a floor plan view for 'Level 8'.","completion":"string levelName = \"Level 8\";\nLevel level3 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.FloorPlan);\n\nif (level3 != null && vft != null)\n{\n    ViewPlan viewPlan = ViewPlan.Create(doc, vft.Id, level3.Id);\n}"}
{"prompt":"Create a section view between points (0,0,0) and (10,10,0).","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.Section);\n\nif (vft != null)\n{\n    XYZ p1 = new XYZ(0,0,0);\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),0);\n    XYZ midPoint = (p1 + p2) \/ 2;\n    XYZ direction = (p2 - p1).Normalize();\n    XYZ up = XYZ.BasisZ;\n    XYZ viewdir = up.CrossProduct(direction);\n    \n    BoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\n    Transform t = Transform.Identity;\n    t.Origin = midPoint;\nt.BasisX = direction;\nt.BasisY = up;\nt.BasisZ = viewdir;\nsectionBox.Transform = t;\nsectionBox.Min = new XYZ(UnitUtils.ConvertToInternalUnits(-p1.DistanceTo(p2)\/2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(-10, UnitTypeId.Meters), 0);\nsectionBox.Max = new XYZ(UnitUtils.ConvertToInternalUnits(p1.DistanceTo(p2)\/2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(20, UnitTypeId.Meters));\n    \n    ViewSection.CreateSection(doc, vft.Id, sectionBox);\n}"}
{"prompt":"Crea un muro en Nivel 1 de (0,0,0) a (5,0,0) con 5m de alto.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (level1 != null && wallType != null)\n{\n    Line wallCurve = Line.CreateBound(new XYZ(0, 0, 0), new XYZ(5, 0, 0));\n    double height = UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters);\n    Wall.Create(doc, wallCurve, wallType.Id, level1.Id, height, 0.0, false, false);\n}"}
{"prompt":"Apply 20mm thermal insulation to all hot water pipes.","completion":"PipeInsulationType insulationType = new FilteredElementCollector(doc).OfClass(typeof(PipeInsulationType)).FirstOrDefault() as PipeInsulationType;\nPipingSystemType hotWaterSystem = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).Cast<PipingSystemType>().FirstOrDefault(s => s.Name.Contains(\"Hot Water\"));\n\nif (insulationType != null && hotWaterSystem != null)\n{\n    List<Pipe> pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast<Pipe>().Where(p => \n    {\n        Parameter systemParam = p.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM);\n        return systemParam != null && systemParam.HasValue && systemParam.AsElementId() == hotWaterSystem.Id;\n    }).ToList();\n    \n    foreach(Pipe p in pipes)\n    {\n        PipeInsulation.Create(doc, p.Id, insulationType.Id, UnitUtils.ConvertToInternalUnits(20, UnitTypeId.Millimeters));\n    }\n}"}
{"prompt":"Une la geometría de una columna y un suelo que se cruzan.","completion":"Element column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().FirstOrDefault();\nElement floor = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault();\nif (column != null && floor != null)\n{\n    JoinGeometryUtils.JoinGeometry(doc, column, floor);\n}"}
{"prompt":"Obtain the MEP space associated with the room 'Office 102'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Cast<Room>().FirstOrDefault(r => r.Name == \"Office 102\");\nList<Space> spaces = new List<Space>();\n\nif (room != null)\n{\n    spaces = new FilteredElementCollector(doc).OfClass(typeof(Space)).Cast<Space>().Where(s => s.Room != null && s.Room.Id == room.Id).ToList();\n}"}
{"prompt":"Replicate level 7 with a 3m offset and name it 'Mezzanine'.","completion":"string levelName = \"Level 7\";\nLevel levelToCopy = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (levelToCopy != null)\n{\n    double offset = UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, levelToCopy.Elevation + offset);\n    newLevel.Name = \"Mezzanine\";\n}"}
{"prompt":"Place an instance of the 'Office Desk' family in the center of the 'Office 106' room.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Office 106\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Office Desk\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);"}
{"prompt":"Coloca una cámara en la vista activa.","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(f => f.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft != null)\n{\n    View3D cameraView = View3D.CreatePerspective(doc, vft.Id);\n    if (cameraView != null)\n    {\n        cameraView.Name = \"Nueva Vista de Cámara\";\n        XYZ eyePos = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters));\n        XYZ upDir = XYZ.BasisZ;\n        XYZ forwardDir = XYZ.Zero - eyePos;\n        ViewOrientation3D orientation = new ViewOrientation3D(eyePos, upDir, forwardDir);\n        cameraView.SetOrientation(orientation);\n    }\n}"}
{"prompt":"Encuentra todas las puertas del Nivel 1 que sean de la familia 'M_Chair-Breuer'.","completion":"string levelName = \"Nivel 1\";\nstring familyName = \"M_Chair-Breuer\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WherePasses(new ElementLevelFilter(targetLevel.Id));\n    List<ElementId> doorIds = new List<ElementId>();\n    foreach (Element door in collector)\n    {\n        FamilyInstance fi = door as FamilyInstance;\n        if (fi != null && fi.Symbol.Family.Name == familyName)\n        {\n            doorIds.Add(door.Id);\n        }\n    }\n    uidoc.Selection.SetElementIds(doorIds);\n}"}
{"prompt":"Copia la vista 'Losa 102' como una vista dependiente.","completion":"ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v => v.Name == \"Losa 102\") as ViewPlan;\n\nif (viewToDuplicate != null)\n{\n    ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n}"}
{"prompt":"Configure the 'Mark' parameter of all selected walls to 'W-EXT-5'.","completion":"using (Transaction t = new Transaction(doc, \"Set Wall Mark\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    ICollection<ElementId> selectedIds = localUidoc.Selection.GetElementIds();\n\n    if (selectedIds != null && selectedIds.Count > 5)\n    {\n        foreach(ElementId id in selectedIds)\n        {\n            Element elem = doc.GetElement(id);\n            if(elem is Wall)\n            {\n                Parameter markParam = elem.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n                if (markParam != null && !markParam.IsReadOnly) markParam.Set(\"W-EXT-01\");\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Añade un nivel llamado 'Nivel Azotea' a 14.8 metros.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(14.8, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Nivel Azotea\";\n}"}
{"prompt":"Coloca una instancia de la familia 'Mesa de Oficina' en el centro de la habitación 'Despacho 97'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 97\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Mesa de Oficina\") as FamilySymbol;\nif(furnitureSymbol != null && !furnitureSymbol.IsActive) furnitureSymbol.Activate();\nif(room != null)\n{\n    LocationPoint roomCenter = room.Location as LocationPoint;\n    if(roomCenter != null && furnitureSymbol != null && room.Level != null)\n    {\n        doc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Cambia el estilo visual de la vista activa a 'Línea Oculta'.","completion":"View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.DisplayStyle = DisplayStyle.HLR;\n}"}
{"prompt":"Generate a 'Roof Terrace' level at 11m.","completion":"string levelName = \"Roof Terrace\";\ndouble elev = UnitUtils.ConvertToInternalUnits(11, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elev);\nnewLevel.Name = levelName;\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Modifica el tipo de una losa seleccionada a 'Concreto 13cm'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una losa\");\n\nif (pickedRef != null)\n{\n    Floor floorToChange = doc.GetElement(pickedRef) as Floor;\n    FloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name == \"Concreto 13cm\");\n    \n    if (floorToChange != null && newType != null)\n    {\n        floorToChange.ChangeTypeId(newType.Id);\n    }\n}"}
{"prompt":"Clone level 2 with a 1m offset and name it 'Mezzanine'.","completion":"string levelName = \"Level 2\";\nLevel levelToCopy = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (levelToCopy != null)\n{\n    double offset = UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, levelToCopy.Elevation + offset);\n    newLevel.Name = \"Mezzanine\";\n}"}
{"prompt":"Retrieve the IDs of all 3D views starting with 'Coord' for export.","completion":"List<ElementId> viewsToExport = new FilteredElementCollector(doc).OfClass(typeof(View3D)).Cast<View3D>().Where(v => v.Name.StartsWith(\"Coord\") && !v.IsTemplate).Select(v => v.Id).ToList();\n"}
{"prompt":"Count all windows and calculate their total glazed area.","completion":"int windowCount = 0;\ndouble totalGlazedArea = 0.0;\nFilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType();\n\nwindowCount = collector.GetElementCount();\n\nforeach (FamilyInstance window in collector)\n{\n    \/\/ Note: 'Glazed Area' is not a standard built-in parameter. This assumes a custom shared parameter exists.\n    \/\/ The orchestrator would need to handle cases where the parameter is not found.\n    Parameter areaParam = window.Symbol.LookupParameter(\"Glazed Area\"); \n    if (areaParam != null) totalGlazedArea += areaParam.AsDouble();\n}\ndouble totalGlazedAreaM2 = UnitUtils.ConvertFromInternalUnits(totalGlazedArea, UnitTypeId.SquareMeters);"}
{"prompt":"Get all walls on Level 1 that are structural.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nif (level1 != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level1.Id);\n    ElementCategoryFilter categoryFilter = new ElementCategoryFilter(BuiltInCategory.OST_Walls);\n    ParameterValueProvider pvp = new ParameterValueProvider(new ElementId(BuiltInParameter.WALL_STRUCTURAL_SIGNIFICANT));\n    FilterIntegerRule rule = new FilterIntegerRule(pvp, new FilterNumericEquals(), 1);\n    ElementParameterFilter structuralFilter = new ElementParameterFilter(rule);\n    LogicalAndFilter andFilter = new LogicalAndFilter(new List<ElementFilter> { levelFilter, categoryFilter, structuralFilter });\n    List<Element> structuralWalls = new FilteredElementCollector(doc).WherePasses(andFilter).ToList();\n}"}
{"prompt":"Extrae el espacio MEP asociado a la habitación 'Oficina 102'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Cast<Room>().FirstOrDefault(r => r.Name == \"Oficina 102\");\nList<Space> spaces = new List<Space>();\n\nif (room != null)\n{\n    spaces = new FilteredElementCollector(doc).OfClass(typeof(Space)).Cast<Space>().Where(s => s.Room != null && s.Room.Id == room.Id).ToList();\n}"}
{"prompt":"Clone level 4 with a 2m offset and name it 'Mezzanine'.","completion":"string levelName = \"Level 4\";\nLevel levelToCopy = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (levelToCopy != null)\n{\n    double offset = UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, levelToCopy.Elevation + offset);\n    newLevel.Name = \"Mezzanine\";\n}"}
{"prompt":"Inside the family editor, create a vertical reference plane named 'Center Axis'.","completion":"View activeView = doc.ActiveView;\nif (activeView != null && doc.IsFamilyDocument)\n{\n    XYZ start = new XYZ(0, -5, 0);\n    XYZ end = new XYZ(0, 5, 0);\n    XYZ normal = XYZ.BasisX;\n    ReferencePlane rp = doc.FamilyCreate.NewReferencePlane(start, end, normal, activeView);\n    if (rp != null)\n    {\n        try { rp.Name = \"Center Axis\"; } catch {}\n    }\n}"}
{"prompt":"Crea un muro cortina de 6 metros de ancho y 4 metros de alto.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nWallType cwType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Kind == WallKind.Curtain);\n\nif (level != null && cwType != null)\n{\n    Line baseLine = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits(6, UnitTypeId.Meters), 0, 0));\n    Wall.Create(doc, baseLine, cwType.Id, level.Id, UnitUtils.ConvertToInternalUnits(4.0, UnitTypeId.Meters), 0.0, false, false);\n}"}
{"prompt":"Crea una nueva vista 3D orientada desde el punto (10,10,10) mirando hacia el origen.","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v=>v.ViewFamily==ViewFamily.ThreeDimensional);\n\nif (vft != null)\n{\n    View3D view = View3D.CreateIsometric(doc, vft.Id);\n    if (view != null)\n    {\n        XYZ eyePos = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters));\n        XYZ upDir = XYZ.BasisZ;\n        XYZ forwardDir = XYZ.Zero - eyePos;\n        ViewOrientation3D vo = new ViewOrientation3D(eyePos, upDir, forwardDir);\n        view.SetOrientation(vo);\n        view.Name = \"Vista desde (10,10,10)\";\n    }\n}"}
{"prompt":"Add a horizontal grid line to a curtain wall at a height of 1.5 meters.","completion":"using (Transaction t = new Transaction(doc, \"Add Curtain Grid Line\"))\n{\n    t.Start();\n    Wall cw = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Cast<Wall>().FirstOrDefault(w => w.CurtainGrid != null);\n\n    if (cw != null)\n    {\n        CurtainGrid cg = cw.CurtainGrid;\n        if (cg != null)\n        {\n            LocationCurve locCurve = cw.Location as LocationCurve;\n            if(locCurve != null)\n            {\n                 XYZ startPoint = locCurve.Curve.GetEndPoint(0);\n                 XYZ endPoint = locCurve.Curve.GetEndPoint(1);\n                 XYZ midPoint = (startPoint + endPoint) \/ 2;\n                 XYZ gridLinePoint = new XYZ(midPoint.X, midPoint.Y, 1.5 \/ 0.3048);\n                 cg.AddGridLine(false, gridLinePoint, false);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Add a reference point at coordinates (4,1,7) inside the family editor.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(4,1,7));"}
{"prompt":"List all available window types in the project.","completion":"FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType();\nList<string> windowTypeNames = collector.Select(e => e.Name).ToList();"}
{"prompt":"Assign the 'Mark' parameter of all selected walls to 'W-EXT-01'.","completion":"using (Transaction t = new Transaction(doc, \"Set Wall Mark\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    ICollection<ElementId> selectedIds = localUidoc.Selection.GetElementIds();\n\n    if (selectedIds != null && selectedIds.Count > 0)\n    {\n        foreach(ElementId id in selectedIds)\n        {\n            Element elem = doc.GetElement(id);\n            if(elem is Wall)\n            {\n                Parameter markParam = elem.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n                if (markParam != null && !markParam.IsReadOnly) markParam.Set(\"W-EXT-01\");\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Define a view filter to hide detail lines.","completion":"string filterName = \"Hide Detail Lines\";\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    ICollection<ElementId> catsToHide = new List<ElementId>{new ElementId(BuiltInCategory.OST_Lines)};\n    ElementFilter filter = new ElementCategoryFilter(new ElementId(BuiltInCategory.OST_Lines));\n    ParameterFilterElement pfe = ParameterFilterElement.Create(doc, filterName, catsToHide, filter);\n    \n    if (pfe != null)\n    {\n        activeView.AddFilter(pfe.Id);\n        activeView.SetFilterVisibility(pfe.Id, false);\n    }\n}"}
{"prompt":"Ajusta todas las ventanas para que tengan la altura del antepecho a 897mm.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits(897, UnitTypeId.Millimeters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Create a new door type named 'FR-90 Door' and set its fire rating to '90 min'.","completion":"string newTypeName = \"FR-90 Door\";\nFamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (doorTypeToDuplicate != null)\n{\n    FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\n    if (newDoorType != null)\n    {\n        Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n        if (fireRatingParam != null && !fireRatingParam.IsReadOnly) fireRatingParam.Set(\"90 min\");\n    }\n}"}
{"prompt":"Copy the 'Generic - 142mm' wall type and name it 'Interior - 15cm Plaster'.","completion":"string originalName = \"Generic - 142mm\";\nstring newName = \"Interior - 15cm Plaster\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif(originalType!=null)\n    originalType.Duplicate(newName);"}
{"prompt":"Establece la visibilidad de la categoría 'Mobiliario' en falso en la vista activa.","completion":"Category furnitureCat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Furniture);\nif (furnitureCat != null && doc.ActiveView != null)\n{\n    doc.ActiveView.SetCategoryHidden(furnitureCat.Id, true);\n}"}
{"prompt":"Assign the 'Steel' material to the first layer of a wall type.","completion":"using (Transaction t = new Transaction(doc, \"Assign Material\"))\n{\n    t.Start();\n    WallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.GetCompoundStructure() != null);\n    Material steel = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m => m.Name.Contains(\"Steel\"));\n\n    if (wallType != null && steel != null)\n    {\n        CompoundStructure cs = wallType.GetCompoundStructure();\n        if (cs != null && cs.LayerCount > 0)\n        {\n            cs.SetMaterialId(0, steel.Id);\n            wallType.SetCompoundStructure(cs);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Coloca una instancia de la familia 'Mesa de Oficina' en el centro de la habitación 'Despacho 103'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 103\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Mesa de Oficina\") as FamilySymbol;\nif(furnitureSymbol != null && !furnitureSymbol.IsActive) furnitureSymbol.Activate();\nif(room != null)\n{\n    LocationPoint roomCenter = room.Location as LocationPoint;\n    if(roomCenter != null && furnitureSymbol != null && room.Level != null)\n    {\n        doc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Copia el tipo de muro 'Genérico - 204mm' y nómbralo 'Interior - 15cm Yeso'.","completion":"string originalName = \"Genérico - 204mm\";\nstring newName = \"Interior - 15cm Yeso\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif(originalType!=null)\n    originalType.Duplicate(newName);"}
{"prompt":"Build a stair between Level 1 and Level 3","completion":"\/\/ This is a complex operation that requires multiple steps and\/or user interaction and is not supported by the agent."}
{"prompt":"Copia el tipo de muro 'Genérico - 147mm' y nómbralo 'Interior - 17cm Yeso'.","completion":"string originalName = \"Genérico - 147mm\";\nstring newName = \"Interior - 17cm Yeso\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif (originalType != null)\n{\n    WallType newType = originalType.Duplicate(newName) as WallType;\n}"}
{"prompt":"Establece el parámetro 'Marca' de todos los muros seleccionados a 'M-EXT-2'.","completion":"using (Transaction t = new Transaction(doc, \"Set Wall Mark\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    ICollection<ElementId> selectedIds = localUidoc.Selection.GetElementIds();\n\n    if (selectedIds != null && selectedIds.Count > 2)\n    {\n        foreach(ElementId id in selectedIds)\n        {\n            Element elem = doc.GetElement(id);\n            if(elem is Wall)\n            {\n                Parameter markParam = elem.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n                if (markParam != null && !markParam.IsReadOnly) markParam.Set(\"M-EXT-01\");\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea un suelo con un contorno de 10 por 8 metros.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\n\nif (level != null && floorType != null)\n{\n    double width = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\n    double length = UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters);\n    XYZ p1 = new XYZ(0, 0, 0);\n    XYZ p2 = new XYZ(width, 0, 0);\n    XYZ p3 = new XYZ(width, length, 0);\n    XYZ p4 = new XYZ(0, length, 0);\n    CurveLoop loop = new CurveLoop();\n    loop.Append(Line.CreateBound(p1, p2));\n    loop.Append(Line.CreateBound(p2, p3));\n    loop.Append(Line.CreateBound(p3, p4));\n    loop.Append(Line.CreateBound(p4, p1));\n    Floor.Create(doc, new List<CurveLoop> { loop }, floorType.Id, level.Id);\n}"}
{"prompt":"Crea un nuevo material llamado 'Vidrio Reflectante' y asígnale un color base y una transparencia.","completion":"string materialName = \"Vidrio Reflectante\";\nElementId materialId = Material.Create(doc, materialName);\nif (materialId != ElementId.InvalidElementId)\n{\n    Material material = doc.GetElement(materialId) as Material;\n    if (material != null)\n    {\n        material.Color = new Color(210, 230, 240);\n        material.Transparency = 80;\n    }\n}"}
{"prompt":"Add a reference point at coordinates (1,1,1) inside the family editor.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(1,1,1));"}
{"prompt":"Assign the sill height of all windows to 898mm.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits(898, UnitTypeId.Millimeters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Agrega una línea de rejilla horizontal a un muro cortina a 1.5 metros de altura.","completion":"using (Transaction t = new Transaction(doc, \"Add Curtain Grid Line\"))\n{\n    t.Start();\n    Wall cw = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Cast<Wall>().FirstOrDefault(w => w.CurtainGrid != null);\n\n    if (cw != null)\n    {\n        CurtainGrid cg = cw.CurtainGrid;\n        if (cg != null)\n        {\n            LocationCurve locCurve = cw.Location as LocationCurve;\n            if(locCurve != null)\n            {\n                 XYZ startPoint = locCurve.Curve.GetEndPoint(0);\n                 XYZ endPoint = locCurve.Curve.GetEndPoint(1);\n                 XYZ midPoint = (startPoint + endPoint) \/ 2;\n                 XYZ gridLinePoint = new XYZ(midPoint.X, midPoint.Y, 1.5 \/ 0.3048);\n                 cg.AddGridLine(false, gridLinePoint, false);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Sitúa una instancia de la familia 'Mesa de Oficina' en el centro de la habitación 'Despacho 98'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 98\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Mesa de Oficina\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);"}
{"prompt":"Create a vertical shaft opening from the base level to the top level.","completion":"using (Transaction t = new Transaction(doc, \"Create Shaft\"))\n{\n    t.Start();\n    Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderBy(l => l.ProjectElevation).FirstOrDefault();\n    Level topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderByDescending(l => l.ProjectElevation).FirstOrDefault();\n\n    if (bottomLevel != null && topLevel != null)\n    {\n        XYZ p1 = new XYZ(2 \/ 0.3048, 2 \/ 0.3048,0);\n        XYZ p2 = new XYZ(5 \/ 0.3048, 2 \/ 0.3048,0);\n        XYZ p3 = new XYZ(5 \/ 0.3048, 5 \/ 0.3048,0);\n        XYZ p4 = new XYZ(2 \/ 0.3048, 5 \/ 0.3048,0);\n        CurveArray profile = new CurveArray();\n        profile.Append(Line.CreateBound(p1,p2));\n        profile.Append(Line.CreateBound(p2,p3));\n        profile.Append(Line.CreateBound(p3,p4));\n        profile.Append(Line.CreateBound(p4,p1));\n        doc.Create.NewOpening(bottomLevel, topLevel, profile);\n    }\n    t.Commit();\n}"}
{"prompt":"Reproduce el nivel 4 con un desfase de 7m y llámalo 'Mezanine'.","completion":"string levelName = \"Nivel 4\";\nLevel levelToCopy = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (levelToCopy != null)\n{\n    double offset = UnitUtils.ConvertToInternalUnits(7, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, levelToCopy.Elevation + offset);\n    newLevel.Name = \"Mezanine\";\n}"}
{"prompt":"Encuentra el tipo de columna estructural llamado \"301 x 451mm\" y colócalo en X=1, Y=11.2","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(s => s.Name == \"301 x 451mm\");\nif (level != null && columnSymbol != null)\n{\n    if (!columnSymbol.IsActive) { columnSymbol.Activate(); }\n    XYZ point = new XYZ(1, 11.2, 0);\n    doc.Create.NewFamilyInstance(point, columnSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n}"}
{"prompt":"Create an electrical circuit connecting light fixtures to a panel.","completion":"using (Transaction t = new Transaction(doc, \"Create Electrical Circuit\"))\n{\n    t.Start();\n    FamilyInstance panel = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_ElectricalEquipment).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\n    List<ElementId> fixtureIds = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsNotElementType().ToElementIds().ToList();\n\n    if (panel != null && fixtureIds.Count > 0)\n    {\n        ElectricalSystem electricalSystem = ElectricalSystem.Create(doc, fixtureIds, ElectricalSystemType.PowerCircuit);\n        if(electricalSystem != null)\n        {\n            electricalSystem.SelectPanel(panel);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Importa topografía georreferenciada desde un archivo LandXML.","completion":"\/\/ The Revit API in the provided context does not support direct LandXML import.\n\/\/ This functionality typically requires additional add-ins like the Site Designer, which are not available here.\n\/\/ As a placeholder, this code will show how to create a simple topography surface from a list of points.\nusing(Transaction t = new Transaction(doc, \"Create Topography\"))\n{\n    t.Start();\n    IList<XYZ> points = new List<XYZ>();\n    points.Add(new XYZ(0, 0, 0));\n    points.Add(new XYZ(50, 0, 5));\n    points.Add(new XYZ(0, 50, 10));\n    TopographySurface.Create(doc, points);\n    t.Commit();\n}"}
{"prompt":"Gira el elemento dado 45 grados alrededor de su centro.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un elemento para rotar\");\n\nif (pickedRef != null)\n{\n    Element elem = doc.GetElement(pickedRef.ElementId);\n    if (elem != null)\n    {\n        LocationPoint lp = elem.Location as LocationPoint;\n        if (lp != null)\n        {\n            Line axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\n            double angle = 45 * Math.PI \/ 180.0;\n            ElementTransformUtils.RotateElement(doc, elem.Id, axis, angle);\n        }\n    }\n}"}
{"prompt":"Establece el parámetro 'Comentarios' de todas las puertas del Nivel 1 a 'Clasificación Fuego - 86 min'.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\n\nif (level1 != null)\n{\n    List<FamilyInstance> doorsOnLevel1 = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsNotElementType().Cast<FamilyInstance>().Where(fi => fi.LevelId == level1.Id).ToList();\n    foreach(FamilyInstance door in doorsOnLevel1)\n    {\n        Parameter commentsParam = door.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n        if (commentsParam != null && !commentsParam.IsReadOnly) commentsParam.Set(\"Clasificación Fuego - 86 min\");\n    }\n}"}
{"prompt":"Crea una vista de planta para el 'Nivel 7'.","completion":"string levelName = \"Nivel 7\";\nLevel level3 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.FloorPlan);\n\nif (level3 != null && vft != null)\n{\n    ViewPlan viewPlan = ViewPlan.Create(doc, vft.Id, level3.Id);\n}"}
{"prompt":"Create a new Level named 'Level 3' at an elevation of 11 meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(11, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\nif (newLevel != null)\n{\n    try { newLevel.Name = \"Level 3\"; } catch {}\n}"}
{"prompt":"Exporta cada tabla de planificación a un archivo CSV individual.","completion":"string exportPath = \"C:\/RevitExports\/\";\nList<ViewSchedule> schedules = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().Where(vs => !vs.IsTemplate).ToList();\nViewScheduleExportOptions options = new ViewScheduleExportOptions();\noptions.FieldDelimiter = \",\";\nforeach(ViewSchedule schedule in schedules)\n{\n    schedule.Export(exportPath, schedule.Name + \".csv\", options);\n}"}
{"prompt":"Genera una tabla para puertas con los campos 'Marca de Tipo' y 'Costo'.","completion":"string scheduleName = \"Tabla de Puertas\";\nViewSchedule schedule = ViewSchedule.CreateSchedule(doc, new ElementId(BuiltInCategory.OST_Doors));\n\nif (schedule != null)\n{\n    schedule.Name = scheduleName;\n    ScheduleDefinition def = schedule.Definition;\n    if (def != null)\n    {\n        SchedulableField typeMarkField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.Value == (long)BuiltInParameter.ALL_MODEL_TYPE_MARK);\n        SchedulableField costField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.Value == (long)BuiltInParameter.ALL_MODEL_COST);\n        \n        if (typeMarkField != null) def.AddField(typeMarkField);\n        if (costField != null) def.AddField(costField);\n    }\n}"}
{"prompt":"Clona el tipo de muro 'Genérico - 172mm' y nómbralo 'Interior - 15cm Yeso'.","completion":"string originalName = \"Genérico - 172mm\";\nstring newName = \"Interior - 15cm Yeso\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif (originalType != null)\n{\n    WallType newType = originalType.Duplicate(newName) as WallType;\n}"}
{"prompt":"Encuentra todos los muros que no tienen nivel base asignado.","completion":"ElementFilter unassociatedFilter = new ElementLevelFilter(ElementId.InvalidElementId);\nList<Element> unassignedWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(unassociatedFilter).ToList();"}
{"prompt":"Put an instance of the 'Office Desk' family in the center of the 'Office 101' room.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Office 101\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Office Desk\") as FamilySymbol;\nif(furnitureSymbol != null && !furnitureSymbol.IsActive) furnitureSymbol.Activate();\nif(room != null)\n{\n    LocationPoint roomCenter = room.Location as LocationPoint;\n    if(roomCenter != null && furnitureSymbol != null && room.Level != null)\n    {\n        doc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Create 5 worksets for engineering disciplines.","completion":"List<string> worksetNames = new List<string> { \"MEP_HVAC\", \"MEP_Plumbing\", \"MEP_Electrical\", \"STRUCT_Framing\", \"STRUCT_Foundations\" };\nforeach(string name in worksetNames)\n{\n    Workset newWorkset = Workset.Create(doc, name);\n}"}
{"prompt":"Extrae todas las habitaciones en el Nivel 'Losa 104'.","completion":"Level groundFloor = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Losa 104\") as Level;\nList<Element> roomsOnGround = new List<Element>();\n\nif (groundFloor != null)\n{\n    roomsOnGround = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Where(r => r.LevelId == groundFloor.Id).ToList();\n}"}
{"prompt":"Get the IDs of all 3D views starting with 'Coord' for export.","completion":"List<ElementId> viewsToExport = new FilteredElementCollector(doc).OfClass(typeof(View3D)).Cast<View3D>().Where(v => v.Name.StartsWith(\"Coord\") && !v.IsTemplate).Select(v => v.Id).ToList();\n"}
{"prompt":"Crea una nueva habitación en el Nivel 2 en el punto (12, 9).","completion":"string levelName = \"Nivel 2\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    UV point = new UV(12, 9);\n    Room newRoom = doc.Create.NewRoom(targetLevel, point);\n}"}
{"prompt":"Extrae el espacio MEP asociado a la habitación 'Oficina 96'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Cast<Room>().FirstOrDefault(r => r.Name == \"Oficina 96\");\nList<Space> spaces = new List<Space>();\n\nif (room != null)\n{\n    spaces = new FilteredElementCollector(doc).OfClass(typeof(Space)).Cast<Space>().Where(s => s.Room != null && s.Room.Id == room.Id).ToList();\n}"}
{"prompt":"Añade el prefijo 'PLANTA-' a todas las vistas de plano.","completion":"string prefix = \"PLANTA-\";\nList<ViewPlan> planViews = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().Where(v => !v.IsTemplate).ToList();\nforeach(ViewPlan view in planViews)\n{\n    if (view != null)\n    {\n        view.Name = prefix + view.Name;\n    }\n}"}
{"prompt":"Crea un muro en Nivel 1 de (0,0,0) a (5,0,0) con 5m de alto.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (level1 != null && wallType != null)\n{\n    Line wallCurve = Line.CreateBound(new XYZ(0, 0, 0), new XYZ(5, 0, 0));\n    double height = UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters);\n    Wall.Create(doc, wallCurve, wallType.Id, level1.Id, height, 0.0, false, false);\n}"}
{"prompt":"Inserta los campos 'Nivel 2', 'Marca' y 'Volumen' a la tabla de pilares.","completion":"ViewSchedule schedule = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().FirstOrDefault(s => s.Name.Contains(\"Pilares\") || s.Name.Contains(\"Column\"));\nif (schedule != null)\n{\n    ScheduleDefinition def = schedule.Definition;\n    SchedulableField levelField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.FAMILY_LEVEL_PARAM);\n    if (levelField != null) def.AddField(levelField);\n    SchedulableField markField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.ALL_MODEL_MARK);\n    if (markField != null) def.AddField(markField);\n    SchedulableField volumeField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.HOST_VOLUME_COMPUTED);\n    if (volumeField != null) def.AddField(volumeField);\n}"}
{"prompt":"Place 'W12x26' columns at all grid intersections on 'Level 1'.","completion":"FamilySymbol columnType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(s => s.Name == \"W12x26\");\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\n\nFilteredElementCollector gridCollector = new FilteredElementCollector(doc).OfClass(typeof(Grid));\nIList<Grid> grids = gridCollector.Cast<Grid>().ToList();\n\nif (columnType != null && level != null && grids.Count > 1)\n{\n    if (!columnType.IsActive) columnType.Activate();\n\n    for (int i = 0; i < grids.Count; i++)\n    {\n        for (int j = i + 1; j < grids.Count; j++)\n        {\n            SetComparisonResult result = grids[i].Curve.Intersect(grids[j].Curve, out IntersectionResultArray results);\n            if (result == SetComparisonResult.Overlap && results != null && !results.IsEmpty)\n            {\n                XYZ intersectionPoint = results[0].XYZPoint;\n                doc.Create.NewFamilyInstance(intersectionPoint, columnType, level, StructuralType.Column);\n            }\n        }\n    }\n}"}
{"prompt":"Sitúa una instancia de la familia 'Ventana Fija 123x60' en el centro de la habitación 'Despacho 99'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 123\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Ventana Fija 99x60\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);"}
{"prompt":"Añade un punto de referencia en las coordenadas (1,1,4) dentro del editor de familias.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(1,1,4));"}
{"prompt":"Create a new wall type 'Generic Wall 300mm' with a thickness of 30cm.","completion":"using (Transaction t = new Transaction(doc, \"Create Wall Type\"))\n{\n    t.Start();\n    string newTypeName = \"Generic Wall 300mm\";\n    WallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\n    if (oldWallType != null)\n    {\n        WallType newWallType = oldWallType.Duplicate(newTypeName) as WallType;\n        if (newWallType != null)\n        {\n            CompoundStructure cs = newWallType.GetCompoundStructure();\n            if (cs != null && cs.LayerCount > 0)\n            {\n                int coreLayerIndex = cs.GetFirstCoreLayerIndex();\n                if (coreLayerIndex >= 0 && coreLayerIndex < cs.LayerCount)\n                {\n                    cs.SetLayerWidth(coreLayerIndex, 300 \/ 304.8);\n                    newWallType.SetCompoundStructure(cs);\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea un nuevo tipo de muro de 27cm llamado 'Muro Estructural 30cm'.","completion":"string newTypeName = \"Muro Estructural 30cm\";\nWallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(newTypeName) as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(27, UnitTypeId.Centimeters));\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n}"}
{"prompt":"Modifica el nombre de la vista activa a 'PLANTA PARA CLIENTE'.","completion":"string newName = \"PLANTA PARA CLIENTE\";\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.Name = newName;\n}"}
{"prompt":"Desune la geometría de dos elementos dados.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference ref1 = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona el primer elemento\");\nReference ref2 = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona el segundo elemento\");\n\nif (ref1 != null && ref2 != null)\n{\n    Element e1 = doc.GetElement(ref1.ElementId);\n    Element e2 = doc.GetElement(ref2.ElementId);\n    if (e1 != null && e2 != null)\n    {\n        JoinGeometryUtils.UnjoinGeometry(doc, e1, e2);\n    }\n}"}
{"prompt":"Acota la longitud de un muro seleccionado por el usuario.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference wallRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un muro para acotar\");\n\nif (wallRef != null)\n{\n    Wall wall = doc.GetElement(wallRef) as Wall;\n    View activeView = doc.ActiveView;\n\n    if (wall != null && activeView != null)\n    {\n        LocationCurve locCurve = wall.Location as LocationCurve;\n        if (locCurve != null)\n        {\n            Line wallLine = locCurve.Curve as Line;\n            if (wallLine != null)\n            {\n                ReferenceArray refs = new ReferenceArray();\n                refs.Append(wallLine.GetEndPointReference(0));\n                refs.Append(wallLine.GetEndPointReference(1));\n                XYZ pt1 = wallLine.GetEndPoint(0).Add(XYZ.BasisZ * 2);\n                XYZ pt2 = wallLine.GetEndPoint(1).Add(XYZ.BasisZ * 2);\n                Line dimLine = Line.CreateBound(pt1, pt2);\n                doc.Create.NewDimension(activeView, dimLine, refs);\n            }\n        }\n    }\n}"}
{"prompt":"Crea una nueva habitación en el Nivel 1 en el punto (10, 10).","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\n\nif (level1 != null)\n{\n    UV point = new UV(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters));\n    Room room = doc.Create.NewRoom(level1, point);\n}"}
{"prompt":"Insert an instance of the 'Office Desk' family in the center of the 'Office 103' room.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Office 103\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Office Desk\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);"}
{"prompt":"Create a 'Roof Terrace' level at 15m.","completion":"string levelName = \"Roof Terrace\";\ndouble elev = UnitUtils.ConvertToInternalUnits(15, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elev);\nnewLevel.Name = levelName;\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Encuentra el muro con la marca 'M-01' y cambia su comentario a 'Muro de carga principal'.","completion":"string markValue = \"M-01\";\nElementId markParamId = new ElementId(BuiltInParameter.ALL_MODEL_MARK);\nParameterValueProvider pvp = new ParameterValueProvider(markParamId);\nFilterStringRuleEvaluator evaluator = new FilterStringEquals();\nFilterRule rule = new FilterStringRule(pvp, evaluator, markValue);\nElementParameterFilter filter = new ElementParameterFilter(rule);\nWall wall = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(filter).FirstOrDefault() as Wall;\nif (wall != null)\n{\n    Parameter commentParam = wall.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n    if (commentParam != null && !commentParam.IsReadOnly)\n    {\n        commentParam.Set(\"Muro de carga principal\");\n    }\n}"}
{"prompt":"Crea una apertura de hueco vertical (shaft) desde el nivel base hasta el nivel más alto.","completion":"using (Transaction t = new Transaction(doc, \"Create Shaft\"))\n{\n    t.Start();\n    Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderBy(l => l.ProjectElevation).FirstOrDefault();\n    Level topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderByDescending(l => l.ProjectElevation).FirstOrDefault();\n\n    if (bottomLevel != null && topLevel != null)\n    {\n        XYZ p1 = new XYZ(2 \/ 0.3048, 2 \/ 0.3048,0);\n        XYZ p2 = new XYZ(5 \/ 0.3048, 2 \/ 0.3048,0);\n        XYZ p3 = new XYZ(5 \/ 0.3048, 5 \/ 0.3048,0);\n        XYZ p4 = new XYZ(2 \/ 0.3048, 5 \/ 0.3048,0);\n        CurveArray profile = new CurveArray();\n        profile.Append(Line.CreateBound(p1,p2));\n        profile.Append(Line.CreateBound(p2,p3));\n        profile.Append(Line.CreateBound(p3,p4));\n        profile.Append(Line.CreateBound(p4,p1));\n        doc.Create.NewOpening(bottomLevel, topLevel, profile);\n    }\n    t.Commit();\n}"}
{"prompt":"Generate columns at each grid intersection.","completion":"FamilySymbol colSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nList<Grid> grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().ToList();\n\nif (colSymbol != null && level != null && grids.Count >= 2)\n{\n    for (int i = 0; i < grids.Count; i++)\n    {\n        for (int j = i + 1; j < grids.Count; j++)\n        {\n            IntersectionResultArray results = null;\n            grids[i].Curve.Intersect(grids[j].Curve, out results);\n            if(results != null)\n            {\n                 foreach (IntersectionResult ir in results)\n                 {\n                     doc.Create.NewFamilyInstance(ir.XYZPoint, colSymbol, level, StructuralType.Column);\n                 }\n            }\n        }\n    }\n}"}
{"prompt":"Assign the 'Comments' parameter for all doors on Level 3 to 'Fire Rating - 93 min'.","completion":"string levelName = \"Level 3\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(targetLevel.Id);\n    FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WherePasses(levelFilter);\n    foreach (Element door in collector)\n    {\n        Parameter commentsParam = door.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n        if (commentsParam != null && !commentsParam.IsReadOnly) { commentsParam.Set(\"Fire Rating - 93 min\"); }\n    }\n}"}
{"prompt":"Extrae todas las habitaciones que están en el Nivel 3","completion":"string levelName = \"Nivel 3\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(targetLevel.Id);\n    FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WherePasses(levelFilter);\n    uidoc.Selection.SetElementIds(collector.ToElementIds());\n}"}
{"prompt":"Create tags for all windows shown on screen.","completion":"View activeView = doc.ActiveView;\nif (activeView == null) return;\n\nFilteredElementCollector collector = new FilteredElementCollector(doc, activeView.Id)\n    .OfCategory(BuiltInCategory.OST_Windows)\n    .WhereElementIsNotElementType();\n\nIList<Element> elementsToTag = collector.ToElements();\n\nif (elementsToTag.Any())\n{\n    foreach (Element elem in elementsToTag)\n    {\n        Reference elemRef = new Reference(elem);\n        BoundingBoxXYZ bbox = elem.get_BoundingBox(activeView);\n        if (bbox == null) continue;\n\n        XYZ tagLocation = (bbox.Min + bbox.Max) \/ 2.0;\n        IndependentTag.Create(doc, activeView.Id, elemRef, true, TagMode.TM_ADDBY_CATEGORY, TagOrientation.Horizontal, tagLocation);\n    }\n}"}
{"prompt":"Create a DirectShape with a 2x2x2 meter box shape.","completion":"TessellatedShapeBuilder builder = new TessellatedShapeBuilder();\nbuilder.OpenConnectedFaceSet(true);\ndouble size = UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\nXYZ p0=new XYZ(0,0,0); XYZ p1=new XYZ(size,0,0); XYZ p2=new XYZ(size,size,0); XYZ p3=new XYZ(0,size,0);\nXYZ p4=new XYZ(0,0,size); XYZ p5=new XYZ(size,0,size); XYZ p6=new XYZ(size,size,size); XYZ p7=new XYZ(0,size,size);\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p0,p1,p2,p3}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p7,p6,p5,p4}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p0,p4,p5,p1}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p1,p5,p6,p2}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p2,p6,p7,p3}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p3,p7,p4,p0}, ElementId.InvalidElementId));\nbuilder.CloseConnectedFaceSet();\nbuilder.Build();\nTessellatedShapeBuilderResult result = builder.GetBuildResult();\nDirectShape ds = DirectShape.CreateElement(doc, new ElementId(BuiltInCategory.OST_GenericModel));\n\nif (ds != null)\n{\n    ds.SetShape(result.GetGeometricalObjects());\n    ds.Name = \"DirectShape Box\";\n}"}
{"prompt":"Incorpora un punto de referencia en las coordenadas (4,2,1) dentro del editor de familias.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(4,2,1));"}
{"prompt":"Generate a global length parameter named 'CorridorWidth' with a value of 1.5m.","completion":"string paramName = \"CorridorWidth\";\nGlobalParameter gp = GlobalParameter.Create(doc, paramName, SpecTypeId.Length);\n\nif (gp != null)\n{\n    gp.SetValue(new DoubleParameterValue(UnitUtils.ConvertToInternalUnits(1.5, UnitTypeId.Meters)));\n}"}
{"prompt":"Crea una vista de planta para el 'Nivel 2'.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 2\") as Level;\nViewFamilyType viewFamilyType = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(vft => vft.ViewFamily == ViewFamily.FloorPlan);\n\nif (level != null && viewFamilyType != null)\n{\n    ViewPlan.Create(doc, viewFamilyType.Id, level.Id);\n}"}
{"prompt":"Crea un nuevo Nivel llamado 'Nivel 1' a una elevación de 14 metros.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(14, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\nif (newLevel != null)\n{\n    try { newLevel.Name = \"Nivel 1\"; } catch {}\n}"}
{"prompt":"Update the wall type of an existing wall to one containing 'Thermal Insulation'.","completion":"Wall wallToChange = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nWallType newType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(x => x.Name.Contains(\"Thermal Insulation\"));\n\nif (wallToChange != null && newType != null)\n{\n    wallToChange.ChangeTypeId(newType.Id);\n}"}
{"prompt":"Crea un parámetro global de longitud llamado 'AnchoCorredor' con valor de 0.5m.","completion":"string paramName = \"AnchoCorredor\";\nGlobalParameter gp = GlobalParameter.Create(doc, paramName, SpecTypeId.Length);\n\nif (gp != null)\n{\n    gp.SetValue(new DoubleParameterValue(UnitUtils.ConvertToInternalUnits(0.5, UnitTypeId.Meters)));\n}"}
{"prompt":"Attach a reference point at coordinates (1,5,7) inside the family editor.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(1,5,7));"}
{"prompt":"Attach the top of all walls to the nearest roof or floor above.","completion":"FilteredElementCollector wallCollector = new FilteredElementCollector(doc).OfClass(typeof(Wall));\n\nif (wallCollector.Any())\n{\n    foreach (Wall wall in wallCollector)\n    {\n        if (wall.get_Parameter(BuiltInParameter.WALL_HEIGHT_TYPE).AsElementId() != new ElementId(1000000 + (int)BuiltInParameter.WALL_USER_HEIGHT_PARAM))\n        {\n            wall.get_Parameter(BuiltInParameter.WALL_TOP_IS_ATTACHED).Set(1);\n        }\n    }\n}"}
{"prompt":"Append a point to the selected Path of Travel.","completion":"\/\/ PathOfTravel related methods are likely inaccessible in this environment.\n\/\/ The following code is a placeholder to show the intent.\n\/*\nusing (Transaction t = new Transaction(doc, \"Update Path of Travel\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference pickedRef = localUidoc.Selection.PickObject(ObjectType.Element, \"Select a Path of Travel\");\n\n    if (pickedRef != null)\n    {\n        PathOfTravel pot = doc.GetElement(pickedRef) as PathOfTravel;\n        if (pot != null)\n        {\n            IList<XYZ> points = pot.GetPath();\n            if (points != null && points.Count >= 2)\n            {\n                XYZ midPoint = (points[0] + points[1]) \/ 2;\n                points.Insert(1, midPoint);\n                pot.Update(points);\n            }\n        }\n    }\n    t.Commit();\n}\n*\/"}
{"prompt":"Establece el parámetro 'Comentarios' de todas las puertas del Nivel 1 a 'Clasificación Fuego - 89 min'.","completion":"using(Transaction t = new Transaction(doc, \"Set Door Comments\"))\n{\n    t.Start();\n    Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel 1\");\n    if(level1 != null)\n    {\n        List<FamilyInstance> doorsOnLevel1 = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsNotElementType().Cast<FamilyInstance>().Where(fi => fi.LevelId.Equals(level1.Id)).ToList();\n        foreach(FamilyInstance door in doorsOnLevel1)\n        {\n            Parameter commentsParam = door.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n            if(commentsParam != null && !commentsParam.IsReadOnly)\n            {\n                commentsParam.Set(\"Clasificación Fuego - 89 min\");\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Cambia el tipo de una losa seleccionada a 'Concreto 11cm'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una losa\");\n\nif (pickedRef != null)\n{\n    Floor floorToChange = doc.GetElement(pickedRef) as Floor;\n    FloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name == \"Concreto 11cm\");\n    \n    if (floorToChange != null && newType != null)\n    {\n        floorToChange.ChangeTypeId(newType.Id);\n    }\n}"}
{"prompt":"Construct an MEP space for each room on Level 5","completion":"string levelName = \"Level 5\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    FilteredElementCollector roomCollector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WherePasses(new ElementLevelFilter(targetLevel.Id));\n    foreach (Room room in roomCollector.ToElements().Cast<Room>())\n    {\n        if (room.Location != null)\n        {\n            LocationPoint locPoint = room.Location as LocationPoint;\n            if(locPoint != null)\n            {\n                UV point = new UV(locPoint.Point.X, locPoint.Point.Y);\n                doc.Create.NewSpace(targetLevel, point);\n            }\n        }\n    }\n}"}
{"prompt":"Retrieve all rooms on Level 3","completion":"string levelName = \"Level 3\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(targetLevel.Id);\n    FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WherePasses(levelFilter);\n    uidoc.Selection.SetElementIds(collector.ToElementIds());\n}"}
{"prompt":"Configure the 'Mark' parameter of all selected walls to 'W-EXT-1'.","completion":"using (Transaction t = new Transaction(doc, \"Set Wall Mark\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    ICollection<ElementId> selectedIds = localUidoc.Selection.GetElementIds();\n\n    if (selectedIds != null && selectedIds.Count > 1)\n    {\n        foreach(ElementId id in selectedIds)\n        {\n            Element elem = doc.GetElement(id);\n            if(elem is Wall)\n            {\n                Parameter p = elem.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n                if (p != null && !p.IsReadOnly)\n                {\n                    p.Set(\"W-EXT-01\");\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Construct a new Level named 'Level 1' at an elevation of 11 meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(11, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Level 1\";\n}"}
{"prompt":"Build a new A1 sheet and place the 'Ground Floor' view on it.","completion":"using (Transaction t = new Transaction(doc, \"Create Sheet\"))\n{\n    t.Start();\n    string sheetNumber = \"A-101\";\n    FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(tb => tb.Name.Contains(\"A1\"));\n    View viewToPlace = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<View>().FirstOrDefault(v => v.Name == \"Ground Floor\");\n\n    if (titleBlock != null && viewToPlace != null)\n    {\n        ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n        if (newSheet != null)\n        {\n            newSheet.Name = \"Architectural Plan - Ground Floor\";\n            newSheet.SheetNumber = sheetNumber;\n            BoundingBoxUV sheetBox = newSheet.Outline;\n            UV centerUv = (sheetBox.Min + sheetBox.Max) \/ 2;\n            XYZ centerPoint = new XYZ(centerUv.U, centerUv.V, 0);\n            Viewport.Create(doc, newSheet.Id, viewToPlace.Id, centerPoint);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Calculate the total area of 'Paint - White' applied to walls.","completion":"Material paintMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name == \"Paint - White\") as Material;\ndouble totalPaintArea = 0.0;\n\nif (paintMaterial != null)\n{\n    FilteredElementCollector wallCollector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType();\n    foreach (Element wall in wallCollector)\n    {\n        totalPaintArea += wall.GetMaterialArea(paintMaterial.Id, false);\n    }\n}\ndouble totalPaintAreaM2 = UnitUtils.ConvertFromInternalUnits(totalPaintArea, UnitTypeId.SquareMeters);"}
{"prompt":"Ubica un rociador en las coordenadas (7,8,7).","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol sprinklerSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Sprinklers).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (level != null && sprinklerSymbol != null)\n{\n    if (!sprinklerSymbol.IsActive) sprinklerSymbol.Activate();\n    XYZ placementPoint = new XYZ(UnitUtils.ConvertToInternalUnits(7, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(7, UnitTypeId.Meters));\n    doc.Create.NewFamilyInstance(placementPoint, sprinklerSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n}"}
{"prompt":"Agrega un nivel llamado 'Nivel Azotea' a 16.0 metros.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(16.0, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Nivel Azotea\";\n}"}
{"prompt":"Duplicate the 'Generic - 150mm' wall type and name it 'Interior - 15cm Plaster'.","completion":"string originalName = \"Generic - 150mm\";\nstring newName = \"Interior - 15cm Plaster\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif(originalType!=null)\n    originalType.Duplicate(newName);"}
{"prompt":"Insert a 6-meter truss between two points.","completion":"using (Transaction t = new Transaction(doc, \"Create Truss\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    FamilySymbol trussSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Family.Name.Contains(\"Truss\"));\n\n    if (level != null && trussSymbol != null)\n    {\n        if (!trussSymbol.IsActive) { trussSymbol.Activate(); }\n        Line trussLine = Line.CreateBound(new XYZ(0, 10, 0), new XYZ(6 \/ 0.3048, 10, 0));\n        doc.Create.NewFamilyInstance(trussLine, trussSymbol, level, StructuralType.NonStructural);\n    }\n    t.Commit();\n}"}
{"prompt":"Add a reference point at coordinates (1,6,2) inside the family editor.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(1,6,2));"}
{"prompt":"Crea una vista 3D orientada desde el sureste.","completion":"string viewName = \"Vista 3D Sureste\";\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft != null)\n{\n    View3D view3d = View3D.CreateIsometric(doc, vft.Id);\n    if (view3d != null)\n    {\n        XYZ eye = new XYZ(1, -1, 1);\n        XYZ up = new XYZ(0, 0, 1);\n        XYZ forward = new XYZ(-1, 1, -1);\n        view3d.SetOrientation(new ViewOrientation3D(eye, up, forward));\n        view3d.Name = viewName;\n    }\n}"}
{"prompt":"Crea un parámetro global de longitud llamado 'Area libre' con valor de 1.0m.","completion":"string paramName = \"Area libre\";\nGlobalParameter gp = GlobalParameter.Create(doc, paramName, SpecTypeId.Length);\n\nif (gp != null)\n{\n    gp.SetValue(new DoubleParameterValue(UnitUtils.ConvertToInternalUnits(1.0, UnitTypeId.Meters)));\n}"}
{"prompt":"Construct a 'Roof Terrace' level at 15m.","completion":"string levelName = \"Roof Terrace\";\ndouble elev = UnitUtils.ConvertToInternalUnits(15, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elev);\nnewLevel.Name = levelName;\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Obtén una lista de los nombres de todos los tipos de familia de la categoría 'Mobiliario'.","completion":"List<Element> furnitureTypes = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().ToList();\nList<string> typeNames = new List<string>();\nforeach(Element type in furnitureTypes)\n{\n    typeNames.Add(type.Name);\n}\n"}
{"prompt":"Temporarily isolate all furniture in the active view.","completion":"ICollection<ElementId> furnitureIds = new FilteredElementCollector(doc, doc.ActiveView.Id).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsNotElementType().ToElementIds();\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.IsolateElementsTemporary(furnitureIds);\n}"}
{"prompt":"Create a global length parameter named 'Width' with a value of 1.8m.","completion":"string paramName = \"Width\";\nGlobalParameter gp = GlobalParameter.Create(doc, paramName, SpecTypeId.Length);\n\nif (gp != null)\n{\n    gp.SetValue(new DoubleParameterValue(UnitUtils.ConvertToInternalUnits(1.8, UnitTypeId.Meters)));\n}"}
{"prompt":"Copia la vista 'Losa 97' como una vista dependiente.","completion":"ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v => v.Name == \"Losa 97\") as ViewPlan;\n\nif (viewToDuplicate != null)\n{\n    ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n}"}
{"prompt":"Inside the family editor, create a new horizontal reference plane.","completion":"if (doc.IsFamilyDocument)\n{\n    string rpName = \"Horizontal Plane\";\n    XYZ start = new XYZ(-5, 0, 0);\n    XYZ end = new XYZ(5, 0, 0);\n    XYZ normal = new XYZ(0, 0, 1);\n\n    View activeView = doc.ActiveView;\n    if (activeView != null)\n    {\n        ReferencePlane rp = doc.FamilyCreate.NewReferencePlane(start, end, normal, activeView);\n        if (rp != null)\n        {\n            rp.Name = rpName;\n        }\n    }\n}"}
{"prompt":"Rename all loaded families containing 'Metric' to 'Imperial'.","completion":"List<Family> familiesToRename = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.Name.Contains(\"Metric\")).ToList();\nforeach(Family fam in familiesToRename)\n{\n    fam.Name = fam.Name.Replace(\"Metric\", \"Imperial\");\n}"}
{"prompt":"Build a new Level named 'Level 8' at an elevation of 9 meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(9, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Level 8\";\n}"}
{"prompt":"Crea un techo por extrusión con una pendiente del 10%.","completion":"using (Transaction t = new Transaction(doc, \"Create Extrusion Roof\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    RoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n\n    if (level != null && roofType != null)\n    {\n        CurveArray profile = new CurveArray();\n        profile.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(10 \/ 0.3048, 0, 1 \/ 0.3048)));\n        \n        Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisY, XYZ.Zero);\n        ReferencePlane refPlane = doc.Create.NewReferencePlane(plane.Origin, plane.Origin + XYZ.BasisX, plane.Normal, doc.ActiveView);\n        \n        if (refPlane != null)\n        {\n            doc.Create.NewExtrusionRoof(profile, refPlane, level, roofType, 0, 10 \/ 0.3048);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create a new Level named 'Level 8' at an elevation of 11 meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(11, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\nif (newLevel != null)\n{\n    try { newLevel.Name = \"Level 8\"; } catch {}\n}"}
{"prompt":"Clona el nivel 8 con un desfase de 3m y llámalo 'Mezanine'.","completion":"string levelName = \"Nivel 8\";\nLevel levelToCopy = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (levelToCopy != null)\n{\n    double offset = UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, levelToCopy.Elevation + offset);\n    newLevel.Name = \"Mezanine\";\n}"}
{"prompt":"Build a new level 'Level 7' at an elevation of 9 meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(9, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Level 7\";\n}"}
{"prompt":"Clona el tipo de muro 'Genérico - 145mm' y nómbralo 'Interior - 11cm Yeso'.","completion":"string originalName = \"Genérico - 145mm\";\nstring newName = \"Interior - 11cm Yeso\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif(originalType!=null)\n    originalType.Duplicate(newName);"}
{"prompt":"Inside the family editor, create a vertical reference plane named 'Center Axis'.","completion":"if (doc.IsFamilyDocument)\n{\n    string rpName = \"Center Axis\";\n    XYZ start = new XYZ(0, -5, 0);\n    XYZ end = new XYZ(0, 5, 0);\n    XYZ normal = XYZ.BasisX;\n\n    View activeView = doc.ActiveView;\n    if (activeView != null)\n    {\n        ReferencePlane rp = doc.FamilyCreate.NewReferencePlane(start, end, normal, activeView);\n        if (rp != null)\n        {\n            rp.Name = rpName;\n        }\n    }\n}"}
{"prompt":"Modifica el parámetro 'Función' de todos los muros seleccionados a 'Interior'.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nif (selectedIds.Count > 0)\n{\n    foreach(ElementId id in selectedIds)\n    {\n        Wall wall = doc.GetElement(id) as Wall;\n        if (wall != null)\n        {\n            Parameter funcParam = wall.get_Parameter(BuiltInParameter.FUNCTION_PARAM);\n            if (funcParam != null && !funcParam.IsReadOnly)\n            {\n                funcParam.Set(1); \/\/ 1 corresponde a Interior\n            }\n        }\n    }\n}"}
{"prompt":"Define the sill height of all windows to 897mm.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits(897, UnitTypeId.Millimeters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Inserta refuerzo tipo estribo a la viga seleccionada.","completion":"\/\/ This is a complex operation that requires multiple steps and\/or user interaction and is not supported by the agent."}
{"prompt":"Build a new A2 sheet with the number 'A-201'.","completion":"string sheetNumber = \"A-201\";\nFamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (titleBlock != null)\n{\n    ViewSheet sheet = ViewSheet.Create(doc, titleBlock.Id);\n    if (sheet != null)\n    {\n        sheet.Name = \"Construction Details\";\n        sheet.SheetNumber = sheetNumber;\n    }\n}"}
{"prompt":"Coloca una ventana de 1x1.2 metros en la pared más cercana.","completion":"FamilySymbol originalSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nWall hostWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\n\nif (originalSymbol != null && hostWall != null)\n{\n    string newTypeName = \"Window 1.0m x 1.2m\";\n    FamilySymbol newSymbol = originalSymbol.Duplicate(newTypeName) as FamilySymbol;\n    if (newSymbol == null) return;\n\n    if (!newSymbol.IsActive)\n    {\n        newSymbol.Activate();\n    }\n\n    Parameter widthParam = newSymbol.get_Parameter(BuiltInParameter.WINDOW_WIDTH);\n    Parameter heightParam = newSymbol.get_Parameter(BuiltInParameter.WINDOW_HEIGHT);\n\n    if (widthParam != null && heightParam != null && !widthParam.IsReadOnly && !heightParam.IsReadOnly)\n    {\n        widthParam.Set(UnitUtils.ConvertToInternalUnits(1.0, UnitTypeId.Meters));\n        heightParam.Set(UnitUtils.ConvertToInternalUnits(1.2, UnitTypeId.Meters));\n    }\n\n    Level level = doc.GetElement(hostWall.LevelId) as Level;\n    LocationCurve locationCurve = hostWall.Location as LocationCurve;\n    if (level != null && locationCurve != null)\n    {\n        XYZ insertionPoint = locationCurve.Curve.Evaluate(0.5, true);\n        doc.Create.NewFamilyInstance(insertionPoint, newSymbol, hostWall, level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Create a spherical DirectShape with a 5-meter radius.","completion":"using (Transaction t = new Transaction(doc, \"Create Sphere DirectShape\"))\n{\n    t.Start();\n    double radius = 5 \/ 0.3048;\n    List<GeometryObject> solids = new List<GeometryObject>();\n    Frame frame = new Frame(XYZ.Zero, XYZ.BasisX, XYZ.BasisY, XYZ.BasisZ);\n    Arc arc = Arc.Create(frame.Origin, radius, 0, Math.PI, frame.BasisX, frame.BasisY);\n    Line line = Line.CreateBound(arc.GetEndPoint(1), arc.GetEndPoint(0));\n    CurveLoop profile = CurveLoop.Create(new List<Curve> { arc, line });\n    Solid sphere = GeometryCreationUtilities.CreateRevolvedGeometry(frame, new List<CurveLoop> { profile }, 0, 2 * Math.PI);\n    solids.Add(sphere);\n    DirectShape ds = DirectShape.CreateElement(doc, new ElementId(BuiltInCategory.OST_GenericModel));\n\n    if (ds != null)\n    {\n        ds.SetShape(solids);\n        ds.Name = \"Sphere DirectShape\";\n    }\n    t.Commit();\n}"}
{"prompt":"Rota un elemento seleccionado 86 grados sobre su eje Z.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un elemento para rotar\");\nElement elem = doc.GetElement(pickedRef.ElementId);\nLocationPoint lp = elem.Location as LocationPoint;\nLine axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\nElementTransformUtils.RotateElement(doc, elem.Id, axis, Math.PI \/ 86);"}
{"prompt":"Crea un nivel 'Roof Terrace' a 17m.","completion":"string levelName = \"Roof Terrace\";\ndouble elev = UnitUtils.ConvertToInternalUnits(17, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elev);\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Copy the active view and name it 'Working Copy'.","completion":"View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    ElementId newViewId = activeView.Duplicate(ViewDuplicateOption.Duplicate);\n    View newView = doc.GetElement(newViewId) as View;\n    if (newView != null)\n    {\n        newView.Name = \"Working Copy\";\n    }\n}"}
{"prompt":"Verifica si una tubería está conectada en ambos extremos.","completion":"Pipe pipe = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).FirstOrDefault() as Pipe;\nbool isFullyConnected = false;\n\nif (pipe != null)\n{\n    isFullyConnected = pipe.ConnectorManager.UnusedConnectors.IsEmpty;\n}\n"}
{"prompt":"Cambia el nombre de todas las familias cargadas que contengan 'Métrica' a 'Imperial'.","completion":"List<Family> familiesToRename = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.Name.Contains(\"Métrica\")).ToList();\nforeach(Family fam in familiesToRename)\n{\n    fam.Name = fam.Name.Replace(\"Métrica\", \"Imperial\");\n}"}
{"prompt":"Inserta una instancia de la familia 'Mesa de Oficina' en el centro de la habitación 'Despacho 101'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 101\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Mesa de Oficina\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);"}
{"prompt":"Coloca una ventana de 1x1.2 metros en la pared más cercana.","completion":"FamilySymbol originalSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nWall hostWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\n\nif (originalSymbol != null && hostWall != null)\n{\n    string newTypeName = \"Window 1.0m x 1.2m\";\n    FamilySymbol newSymbol = originalSymbol.Duplicate(newTypeName) as FamilySymbol;\n    if (newSymbol == null) return;\n\n    if (!newSymbol.IsActive)\n    {\n        newSymbol.Activate();\n    }\n\n    Parameter widthParam = newSymbol.get_Parameter(BuiltInParameter.WINDOW_WIDTH);\n    Parameter heightParam = newSymbol.get_Parameter(BuiltInParameter.WINDOW_HEIGHT);\n\n    if (widthParam != null && heightParam != null && !widthParam.IsReadOnly && !heightParam.IsReadOnly)\n    {\n        widthParam.Set(UnitUtils.ConvertToInternalUnits(1.0, UnitTypeId.Meters));\n        heightParam.Set(UnitUtils.ConvertToInternalUnits(1.2, UnitTypeId.Meters));\n    }\n\n    Level level = doc.GetElement(hostWall.LevelId) as Level;\n    LocationCurve locationCurve = hostWall.Location as LocationCurve;\n    if (level != null && locationCurve != null)\n    {\n        XYZ insertionPoint = locationCurve.Curve.Evaluate(0.5, true);\n        doc.Create.NewFamilyInstance(insertionPoint, newSymbol, hostWall, level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Create a filled region with a 'Concrete' pattern.","completion":"using (Transaction t = new Transaction(doc, \"Create Filled Region\"))\n{\n    t.Start();\n    FilledRegionType regionType = new FilteredElementCollector(doc).OfClass(typeof(FilledRegionType)).Cast<FilledRegionType>().FirstOrDefault(frt => frt.Name.Contains(\"Concrete\"));\n    View activeView = doc.ActiveView;\n\n    if (regionType != null && activeView != null)\n    {\n        XYZ p1 = new XYZ(0,0,0);\n        XYZ p2 = new XYZ(5 \/ 0.3048, 0,0);\n        XYZ p3 = new XYZ(5 \/ 0.3048, 5 \/ 0.3048,0);\n        XYZ p4 = new XYZ(0, 5 \/ 0.3048,0);\n        CurveLoop profile = new CurveLoop();\n        profile.Append(Line.CreateBound(p1,p2));\n        profile.Append(Line.CreateBound(p2,p3));\n        profile.Append(Line.CreateBound(p3,p4));\n        profile.Append(Line.CreateBound(p4,p1));\n        FilledRegion.Create(doc, regionType.Id, activeView.Id, new List<CurveLoop>{profile});\n    }\n    t.Commit();\n}"}
{"prompt":"Crea un nuevo material llamado 'Vidrio Reflectante' y asígnale un color base y una transparencia.","completion":"string materialName = \"Vidrio Reflectante\";\nElementId materialId = Material.Create(doc, materialName);\nif (materialId != ElementId.InvalidElementId)\n{\n    Material material = doc.GetElement(materialId) as Material;\n    if (material != null)\n    {\n        material.Color = new Color(210, 230, 240);\n        material.Transparency = 80;\n    }\n}"}
{"prompt":"Extrae todas las familias de puertas cargadas en el proyecto.","completion":"List<Family> doorFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.Id.IntegerValue == (int)BuiltInCategory.OST_Doors).ToList();"}
{"prompt":"Place lighting posts every 10m along a 100m path.","completion":"FamilySymbol lightSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsElementType().FirstOrDefault(s => s.Name.Contains(\"Post\") || s.Name.Contains(\"Pole\")) as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (lightSymbol != null && level != null)\n{\n    if (!lightSymbol.IsActive)\n    {\n        lightSymbol.Activate();\n    }\n    double spacing = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\n    double pathLength = UnitUtils.ConvertToInternalUnits(100, UnitTypeId.Meters);\n    int postCount = (int)(pathLength \/ spacing);\n    for (int i = 0; i <= postCount; i++)\n    {\n        XYZ point = new XYZ(i * spacing, 0, 0);\n        doc.Create.NewFamilyInstance(point, lightSymbol, level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Rellena el parámetro de material de todos los muros con 'Concreto'.","completion":"Material concreteMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name.Contains(\"Concreto\")) as Material;\nvar walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>().ToList();\n\nif (concreteMaterial != null)\n{\n    foreach(Wall w in walls)\n    {\n        Parameter materialParam = w.get_Parameter(BuiltInParameter.STRUCTURAL_MATERIAL_PARAM);\n        if(materialParam != null && !materialParam.IsReadOnly) materialParam.Set(concreteMaterial.Id);\n    }\n}"}
{"prompt":"Create a SketchPlane on Level 2.","completion":"using (Transaction t = new Transaction(doc, \"Create Sketch Plane\"))\n{\n    t.Start();\n    Level level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 2\");\n\n    if (level2 != null)\n    {\n        Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisZ, new XYZ(0, 0, level2.Elevation));\n        SketchPlane skp = SketchPlane.Create(doc, plane);\n    }\n    t.Commit();\n}"}
{"prompt":"Load the 'Table.rfa' family and place it at (4,8,1) on Level 3","completion":"string levelName = \"Level 3\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nstring familyName = \"Table\";\nFamilySymbol symbol = new FilteredElementCollector(doc).OfClass(typeof(FamilySymbol)).Cast<FamilySymbol>().FirstOrDefault(fs => fs.Family.Name == familyName);\nif (symbol != null && targetLevel != null)\n{\n    if (!symbol.IsActive) { symbol.Activate(); doc.Regenerate(); }\n    XYZ location = new XYZ(4, 8, 1);\n    doc.Create.NewFamilyInstance(location, symbol, targetLevel, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n}"}
{"prompt":"Crea columnas en cada intersección de ejes.","completion":"FamilySymbol colSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nList<Grid> grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().ToList();\n\nif (colSymbol != null && level != null && grids.Count >= 2)\n{\n    for (int i = 0; i < grids.Count; i++)\n    {\n        for (int j = i + 1; j < grids.Count; j++)\n        {\n            IntersectionResultArray results = null;\n            grids[i].Curve.Intersect(grids[j].Curve, out results);\n            if(results != null)\n            {\n                 foreach (IntersectionResult ir in results)\n                 {\n                     doc.Create.NewFamilyInstance(ir.XYZPoint, colSymbol, level, StructuralType.Column);\n                 }\n            }\n        }\n    }\n}"}
{"prompt":"Crea un espacio MEP para cada habitación en el Nivel 1.","completion":"using (Transaction t = new Transaction(doc, \"Create MEP Spaces\"))\n{\n    t.Start();\n    Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel 1\");\n\n    if (level1 != null)\n    {\n        List<Room> roomsOnLevel1 = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Where(e => (e as Room) != null && (e as Room).LevelId.Equals(level1.Id)).Cast<Room>().ToList();\n        foreach(Room room in roomsOnLevel1)\n        {\n           \/\/ The direct creation of MEP spaces from rooms might not be available in this specific API version.\n           \/\/ Placeholder comment for the intended logic.\n           \/\/ Space.Create(doc, room, null);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Apply a red color to all windows in the active view.","completion":"View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    OverrideGraphicSettings ogs = new OverrideGraphicSettings();\n    ogs.SetProjectionLineColor(new Color(255, 0, 0));\n    ICollection<ElementId> windows = new FilteredElementCollector(doc, activeView.Id).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().ToElementIds();\n    \n    foreach (ElementId windowId in windows)\n    {\n        activeView.SetElementOverrides(windowId, ogs);\n    }\n}"}
{"prompt":"Change the type of a selected floor to 'Concrete 16cm'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a floor\");\n\nif (pickedRef != null)\n{\n    Floor floorToChange = doc.GetElement(pickedRef) as Floor;\n    FloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name == \"Concrete 16cm\");\n    \n    if (floorToChange != null && newType != null)\n    {\n        floorToChange.ChangeTypeId(newType.Id);\n    }\n}"}
{"prompt":"Replicate the 'Generic - 149mm' wall type and name it 'Interior - 19cm Plaster'.","completion":"string originalName = \"Generic - 149mm\";\nstring newName = \"Interior - 19cm Plaster\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif (originalType != null)\n{\n    WallType newType = originalType.Duplicate(newName) as WallType;\n}"}
{"prompt":"Alinea las líneas de centro de dos muros seleccionados por el usuario.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference r1 = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona el primer muro (el que se moverá)\");\nReference r2 = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona el segundo muro (el de referencia)\");\n\nif (r1 != null && r2 != null)\n{\n    Wall w1 = doc.GetElement(r1) as Wall;\n    Wall w2 = doc.GetElement(r2) as Wall;\n    View activeView = doc.ActiveView;\n\n    if (w1 != null && w2 != null && activeView != null)\n    {\n        LocationCurve lc1 = w1.Location as LocationCurve;\n        LocationCurve lc2 = w2.Location as LocationCurve;\n        if (lc1 != null && lc2 != null)\n        {\n            doc.Create.NewAlignment(activeView, lc1.Curve.Reference, lc2.Curve.Reference);\n        }\n    }\n}"}
{"prompt":"Añade refuerzo a una columna.","completion":"RebarBarType barType = new FilteredElementCollector(doc).OfClass(typeof(RebarBarType)).FirstOrDefault() as RebarBarType;\nRebarShape shape = new FilteredElementCollector(doc).OfClass(typeof(RebarShape)).FirstOrDefault() as RebarShape;\nFamilyInstance column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\n\nif (barType != null && shape != null && column != null)\n{\n    Rebar.CreateFromRebarShape(doc, shape, barType, column, column.GetTransform().Origin, XYZ.BasisX, XYZ.BasisY);\n}"}
{"prompt":"Construct a new door type named 'FR-60 Door' and set the 'Fire Rating' parameter to '60 min'.","completion":"string newTypeName = \"FR-60 Door\";\nFamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (doorTypeToDuplicate != null)\n{\n    FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\n    if (newDoorType != null)\n    {\n        Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n        if (fireRatingParam != null && !fireRatingParam.IsReadOnly) fireRatingParam.Set(\"60 min\");\n    }\n}"}
{"prompt":"Agrega un nivel llamado 'Nivel Azotea' a 16.1 metros.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(16.1, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Nivel Azotea\";\n}"}
{"prompt":"Inserta un codo de 90 grados entre dos tuberías.","completion":"using (Transaction t = new Transaction(doc, \"Add Elbow\"))\n{\n    t.Start();\n    List<Pipe> pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast<Pipe>().Where(p => p.ConnectorManager != null && p.ConnectorManager.UnusedConnectors.Size > 0).Take(2).ToList();\n\n    if (pipes.Count >= 2)\n    {\n        Connector c1 = pipes[0].ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n        Connector c2 = pipes[1].ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n        \n        if (c1 != null && c2 != null)\n        {\n            doc.Create.NewElbowFitting(c1, c2);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Cambia el nivel de detalle de la vista activa a 'Medio'.","completion":"View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.DetailLevel = ViewDetailLevel.Medium;\n}"}
{"prompt":"Clear all unused wall types in the project.","completion":"ICollection<ElementId> allWallTypes = new FilteredElementCollector(doc).OfClass(typeof(WallType)).ToElementIds();\nICollection<ElementId> usedWallTypes = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Select(w => w.GetTypeId()).Distinct().ToList();\nList<ElementId> unusedWallTypes = allWallTypes.Except(usedWallTypes).ToList();\nif (unusedWallTypes.Any())\n{\n    doc.Delete(unusedWallTypes);\n}"}
{"prompt":"Inserta una cota de elevación en una cara y un punto de vista dados.","completion":"using (Transaction t = new Transaction(doc, \"Place Spot Elevation\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference faceRef = localUidoc.Selection.PickObject(ObjectType.Face, \"Selecciona la cara superior del suelo\");\n\n    View activeView = doc.ActiveView;\n\n    if (faceRef != null && activeView != null)\n    {\n        XYZ pointOnFace = faceRef.GlobalPoint;\n        XYZ leaderEnd = pointOnFace + new XYZ(1 \/ 0.3048, 1 \/ 0.3048, 0);\n        doc.Create.NewSpotElevation(activeView, faceRef, pointOnFace, pointOnFace, leaderEnd, pointOnFace, true);\n    }\n    t.Commit();\n}"}
{"prompt":"Sitúa una instancia de la familia 'Ventana Fija 123x60' en el centro de la habitación 'Despacho 105'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 123\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Ventana Fija 105x60\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);"}
{"prompt":"Add the 'Level', 'Mark', and 'Volume' fields to the column schedule.","completion":"ViewSchedule schedule = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().FirstOrDefault(s => s.Name.Contains(\"Column\"));\nif (schedule != null)\n{\n    ScheduleDefinition def = schedule.Definition;\n    SchedulableField levelField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.FAMILY_LEVEL_PARAM);\n    if (levelField != null) def.AddField(levelField);\n    SchedulableField markField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.ALL_MODEL_MARK);\n    if (markField != null) def.AddField(markField);\n    SchedulableField volumeField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.HOST_VOLUME_COMPUTED);\n    if (volumeField != null) def.AddField(volumeField);\n}"}
{"prompt":"Sitúa una instancia de la familia 'Ventana Fija 120x60' en el centro de la habitación 'Despacho 101'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 101\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Ventana Fija 120x60\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);"}
{"prompt":"Crea un nuevo tipo de muro de 23cm llamado 'Interiores'.","completion":"string newTypeName = \"Interiores\";\nWallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif (oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(newTypeName) as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(23, UnitTypeId.Centimeters));\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n}"}
{"prompt":"Coloca una etiqueta de material en una cara de muro.","completion":"using (Transaction t = new Transaction(doc, \"Place Material Tag\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference faceRef = localUidoc.Selection.PickObject(ObjectType.Face, \"Selecciona una cara para etiquetar\");\n    XYZ point = localUidoc.Selection.PickPoint(\"Selecciona la ubicación de la etiqueta\");\n    View activeView = doc.ActiveView;\n\n    if (faceRef != null && point != null && activeView != null)\n    {\n        IndependentTag.Create(doc, activeView.Id, faceRef, true, TagMode.TM_ADDBY_MATERIAL, TagOrientation.Horizontal, point);\n    }\n    t.Commit();\n}"}
{"prompt":"Crea un nuevo Nivel llamado 'Nivel 1' a una elevación de 7 metros.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(7, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\nif (newLevel != null)\n{\n    try { newLevel.Name = \"Nivel 1\"; } catch {}\n}"}
{"prompt":"Crea un nuevo tipo de puerta llamado 'Puerta RF-90' y establece su resistencia al fuego a '90 min'.","completion":"using (Transaction t = new Transaction(doc, \"Create Door Type\"))\n{\n    t.Start();\n    string newTypeName = \"Puerta RF-90\";\n    FamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n    if (doorTypeToDuplicate != null)\n    {\n        FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\n        if (newDoorType != null)\n        {\n            Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n            if(fireRatingParam != null && !fireRatingParam.IsReadOnly)\n            {\n                fireRatingParam.Set(\"90 min\");\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create a group from the current selection and move it 10 meters to the right.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds != null && selectedIds.Count > 0)\n{\n    Group group = doc.Create.NewGroup(selectedIds);\n    if (group != null)\n    {\n        XYZ translation = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), 0, 0);\n        ElementTransformUtils.MoveElement(doc, group.Id, translation);\n    }\n}"}
{"prompt":"Encuentra todas las puertas del Nivel 1 que sean de la familia 'Puerta Sencilla'.","completion":"string levelName = \"Nivel 1\";\nstring familyName = \"Puerta Sencilla\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WherePasses(new ElementLevelFilter(targetLevel.Id));\n    List<ElementId> doorIds = new List<ElementId>();\n    foreach (Element door in collector)\n    {\n        FamilyInstance fi = door as FamilyInstance;\n        if (fi != null && fi.Symbol.Family.Name == familyName)\n        {\n            doorIds.Add(door.Id);\n        }\n    }\n    uidoc.Selection.SetElementIds(doorIds);\n}"}
{"prompt":"Inserta una cámara en la vista activa.","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(f => f.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft != null)\n{\n    View3D cameraView = View3D.CreatePerspective(doc, vft.Id);\n    if (cameraView != null)\n    {\n        cameraView.Name = \"Nueva Vista de Cámara\";\n        \/\/ Default position as it is not specified in prompt\n        XYZ eyePos = new XYZ(30, -30, 20);\n        XYZ upDir = XYZ.BasisZ;\n        XYZ forwardDir = new XYZ(-1, 1, -0.5);\n        ViewOrientation3D orientation = new ViewOrientation3D(eyePos, upDir, forwardDir);\n        cameraView.SetOrientation(orientation);\n    }\n}"}
{"prompt":"Clona el nivel 2 con un desfase de 4m y llámalo 'Mezanine'.","completion":"string levelName = \"Nivel 2\";\nLevel levelToCopy = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (levelToCopy != null)\n{\n    double offset = UnitUtils.ConvertToInternalUnits(4, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, levelToCopy.Elevation + offset);\n    newLevel.Name = \"Mezanine\";\n}"}
{"prompt":"Añade refuerzo tipo estribo a la viga seleccionada.","completion":"\/\/ This is a complex operation that requires multiple steps and\/or user interaction and is not supported by the agent."}
{"prompt":"Duplica el nivel 5 con un desfase de 4m y llámalo 'Mezanine'.","completion":"string levelName = \"Nivel 5\";\nLevel levelToCopy = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (levelToCopy != null)\n{\n    double offset = UnitUtils.ConvertToInternalUnits(4, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, levelToCopy.Elevation + offset);\n    newLevel.Name = \"Mezanine\";\n}"}
{"prompt":"Copia la vista 'Nivel 5' como una vista dependiente.","completion":"ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v => v.Name == \"Nivel 5\") as ViewPlan;\n\nif (viewToDuplicate != null)\n{\n    ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n}"}
{"prompt":"Dibuja una región rellena con patrón diagonal.","completion":"using (Transaction t = new Transaction(doc, \"Draw Filled Region\"))\n{\n    t.Start();\n    View activeView = doc.ActiveView;\n    FillPatternElement fillPattern = new FilteredElementCollector(doc).OfClass(typeof(FillPatternElement)).Cast<FillPatternElement>().FirstOrDefault(p => !p.GetFillPattern().IsSolidFill);\n\n    if (activeView != null && fillPattern != null)\n    {\n        FilledRegionType filledRegionType = new FilteredElementCollector(doc, activeView.Id).OfClass(typeof(FilledRegionType)).FirstOrDefault() as FilledRegionType;\n        if (filledRegionType != null)\n        {\n            FilledRegionType newType = filledRegionType.Duplicate(\"Temp Diagonal Region\") as FilledRegionType;\n            if (newType != null)\n            {\n                newType.ForegroundPatternId = fillPattern.Id;\n                XYZ p1 = new XYZ(0,0,0);\n                XYZ p2 = new XYZ(5 \/ 0.3048,0,0);\n                XYZ p3 = new XYZ(5 \/ 0.3048,5 \/ 0.3048,0);\n                XYZ p4 = new XYZ(0,5 \/ 0.3048,0);\n                CurveLoop profile = new CurveLoop();\n                profile.Append(Line.CreateBound(p1,p2));\n                profile.Append(Line.CreateBound(p2,p3));\n                profile.Append(Line.CreateBound(p3,p4));\n                profile.Append(Line.CreateBound(p4,p1));\n                FilledRegion.Create(doc, newType.Id, activeView.Id, new List<CurveLoop>{profile});\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Set the sill height of all windows to 900mm.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits(900, UnitTypeId.Millimeters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Generate a 'Roof Terrace' level at 17m.","completion":"string levelName = \"Roof Terrace\";\ndouble elev = UnitUtils.ConvertToInternalUnits(17, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elev);\nnewLevel.Name = levelName;\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Create a new linear dimension type with blue text and 2mm size.","completion":"using (Transaction t = new Transaction(doc, \"Create Dimension Type\"))\n{\n    t.Start();\n    string newTypeName = \"Blue Dimension 2mm\";\n    DimensionType linearDimType = new FilteredElementCollector(doc).OfClass(typeof(DimensionType)).Cast<DimensionType>().FirstOrDefault(dt => dt.StyleType == DimensionStyleType.Linear);\n\n    if (linearDimType != null)\n    {\n        DimensionType newDimType = linearDimType.Duplicate(newTypeName) as DimensionType;\n        if (newDimType != null)\n        {\n            Parameter colorParam = newDimType.get_Parameter(BuiltInParameter.LINE_COLOR);\n            if (colorParam != null && !colorParam.IsReadOnly) colorParam.Set(255);\n            Parameter textSizeParam = newDimType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n            if (textSizeParam != null && !textSizeParam.IsReadOnly) textSizeParam.Set(2 \/ 304.8);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea vigas entre las columnas alineadas horizontalmente.","completion":"FamilySymbol beamSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nList<FamilyInstance> columns = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().Cast<FamilyInstance>().OrderBy(c => c.GetTransform().Origin.Y).ThenBy(c => c.GetTransform().Origin.X).ToList();\n\nif (beamSymbol != null && level != null && columns.Count >= 2)\n{\n    for(int i=0; i < columns.Count - 1; i++)\n    {\n        LocationPoint p1 = columns[i].Location as LocationPoint;\n        LocationPoint p2 = columns[i+1].Location as LocationPoint;\n        if (p1 != null && p2 != null && Math.Abs(p1.Point.Y - p2.Point.Y) < 0.01)\n        {\n            Line line = Line.CreateBound(p1.Point, p2.Point);\n            doc.Create.NewFamilyInstance(line, beamSymbol, level, StructuralType.Beam);\n        }\n    }\n}"}
{"prompt":"Include a horizontal grid line to a curtain wall at a height of 1.5 meters.","completion":"using (Transaction t = new Transaction(doc, \"Add Curtain Grid Line\"))\n{\n    t.Start();\n    Wall cw = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Cast<Wall>().FirstOrDefault(w => w.CurtainGrid != null);\n\n    if (cw != null)\n    {\n        CurtainGrid cg = cw.CurtainGrid;\n        if (cg != null)\n        {\n            LocationCurve locCurve = cw.Location as LocationCurve;\n            if(locCurve != null)\n            {\n                 XYZ startPoint = locCurve.Curve.GetEndPoint(0);\n                 XYZ endPoint = locCurve.Curve.GetEndPoint(1);\n                 XYZ midPoint = (startPoint + endPoint) \/ 2;\n                 XYZ gridLinePoint = new XYZ(midPoint.X, midPoint.Y, 1.5 \/ 0.3048);\n                 cg.AddGridLine(false, gridLinePoint, false);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Add a reference point at coordinates (1,2,3) inside the family editor.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(1,2,3));"}
{"prompt":"Crea un nuevo tipo de puerta llamado 'Puerta RF-90' y establece su resistencia al fuego a '90 min'.","completion":"using (Transaction t = new Transaction(doc, \"Create Door Type\"))\n{\n    t.Start();\n    string newTypeName = \"Puerta RF-90\";\n    FamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n    if (doorTypeToDuplicate != null)\n    {\n        FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\n        if (newDoorType != null)\n        {\n            Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n            if(fireRatingParam != null && !fireRatingParam.IsReadOnly)\n            {\n                fireRatingParam.Set(\"90 min\");\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Copy all elements from Level 1 to Level 2.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nLevel level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 2\") as Level;\n\nif (level1 != null && level2 != null)\n{\n    ICollection<ElementId> elementsToCopy = new FilteredElementCollector(doc, level1.Id).WhereElementIsNotElementType().ToElementIds();\n    double elevationDiff = level2.ProjectElevation - level1.ProjectElevation;\n    XYZ translation = new XYZ(0, 0, elevationDiff);\n    if (elementsToCopy.Count > 0)\n    {\n        ElementTransformUtils.CopyElements(doc, elementsToCopy, translation);\n    }\n}"}
{"prompt":"Añade el prefijo 'PLANTA-' a todas las vistas de plano.","completion":"string prefix = \"PLANTA-\";\nList<ViewPlan> planViews = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().Where(v => !v.IsTemplate).ToList();\nforeach(ViewPlan view in planViews)\n{\n    if(!view.Name.StartsWith(prefix))\n    {\n        view.Name = prefix + view.Name;\n    }\n}"}
{"prompt":"Create 10 architectural worksets.","completion":"List<string> worksetNames = new List<string> { \"TAD_ARQ_WALLS\", \"TAD_ARQ_FINISHES\", \"TAD_ARQ_CEILINGS\", \"TAD_ARQ_FLOORS\", \"TAD_ARQ_RAILINGS\", \"TAD_ARQ_WINDOWS\", \"TAD_ARQ_CARPENTRY\", \"TAD_ARQ_FURNITURE\", \"TAD_ARQ_PLUMBING\", \"TAD_ARQ_EXTERIOR\" };\nforeach(string name in worksetNames)\n{\n    Workset.Create(doc, name);\n}"}
{"prompt":"Establece el parámetro 'Marca' de todos los muros seleccionados a 'M-EXT-6'.","completion":"using (Transaction t = new Transaction(doc, \"Set Wall Mark\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    ICollection<ElementId> selectedIds = localUidoc.Selection.GetElementIds();\n\n    if (selectedIds != null && selectedIds.Count > 6)\n    {\n        foreach(ElementId id in selectedIds)\n        {\n            Element elem = doc.GetElement(id);\n            if(elem is Wall)\n            {\n                Parameter p = elem.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n                if (p != null && !p.IsReadOnly) \n                {\n                    p.Set(\"M-EXT-01\");\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create an MEP space for each room on Level 1.","completion":"using (Transaction t = new Transaction(doc, \"Create MEP Spaces\"))\n{\n    t.Start();\n    Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 1\");\n\n    if (level1 != null)\n    {\n        List<Room> roomsOnLevel1 = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Where(e => (e as Room) != null && (e as Room).LevelId.Equals(level1.Id)).Cast<Room>().ToList();\n        foreach(Room room in roomsOnLevel1)\n        {\n           \/\/ The direct creation of MEP spaces from rooms might not be available in this specific API version.\n           \/\/ Placeholder comment for the intended logic.\n           \/\/ Space.Create(doc, room, null);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Mueve un elemento seleccionado a la posición (1,2).","completion":"ICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds.Any())\n{\n    foreach (ElementId id in selectedIds)\n    {\n        Element elem = doc.GetElement(id);\n        if (elem != null)\n        {\n            LocationPoint lp = elem.Location as LocationPoint;\n            if (lp != null)\n            {\n                XYZ newPosition = new XYZ(1, 2, lp.Point.Z);\n                lp.Point = newPosition;\n            }\n        }\n    }\n}"}
{"prompt":"Change the family name of a selected door to 'New_Door'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a door\");\n\nif (pickedRef != null)\n{\n    FamilyInstance door = doc.GetElement(pickedRef.ElementId) as FamilyInstance;\n    if (door != null && door.Symbol != null)\n    {\n        Family family = door.Symbol.Family;\n        if (family != null)\n        {\n            family.Name = \"New_Door\";\n        }\n    }\n}"}
{"prompt":"Fetch all subcategories from the Walls category.","completion":"Category wallCat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Walls);\nCategoryNameMap subcategories = wallCat.SubCategories;"}
{"prompt":"Crea un nuevo material llamado 'Vidrio Reflectante' y asígnale un color base y una transparencia.","completion":"string materialName = \"Vidrio Reflectante\";\nElementId materialId = Material.Create(doc, materialName);\nif (materialId != ElementId.InvalidElementId)\n{\n    Material material = doc.GetElement(materialId) as Material;\n    if (material != null)\n    {\n        material.Color = new Color(210, 230, 240);\n        material.Transparency = 80;\n    }\n}"}
{"prompt":"Encuentra todos los pilares estructurales en el Nivel 7 que sean de hormigón.","completion":"string levelName = \"Nivel 7\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().WherePasses(new ElementLevelFilter(targetLevel.Id));\n    List<ElementId> concreteColumnIds = new List<ElementId>();\n    foreach (Element column in collector)\n    {\n        Parameter materialParam = column.get_Parameter(BuiltInParameter.STRUCTURAL_MATERIAL_PARAM);\n        if (materialParam != null && materialParam.HasValue)\n        {\n            ElementId materialId = materialParam.AsElementId();\n            if (materialId != ElementId.InvalidElementId)\n            {\n                Material material = doc.GetElement(materialId) as Material;\n                if (material != null && material.Name.ToLower().Contains(\"hormigón\"))\n                {\n                    concreteColumnIds.Add(column.Id);\n                }\n            }\n        }\n    }\n    uidoc.Selection.SetElementIds(concreteColumnIds);\n}"}
{"prompt":"Generate a DirectShape with a 2x2x2 meter box shape.","completion":"TessellatedShapeBuilder builder = new TessellatedShapeBuilder();\nbuilder.OpenConnectedFaceSet(true);\ndouble size = UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\nXYZ p0=new XYZ(0,0,0); XYZ p1=new XYZ(size,0,0); XYZ p2=new XYZ(size,size,0); XYZ p3=new XYZ(0,size,0);\nXYZ p4=new XYZ(0,0,size); XYZ p5=new XYZ(size,0,size); XYZ p6=new XYZ(size,size,size); XYZ p7=new XYZ(0,size,size);\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p0,p1,p2,p3}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p7,p6,p5,p4}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p0,p4,p5,p1}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p1,p5,p6,p2}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p2,p6,p7,p3}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p3,p7,p4,p0}, ElementId.InvalidElementId));\nbuilder.CloseConnectedFaceSet();\nbuilder.Build();\nTessellatedShapeBuilderResult result = builder.GetBuildResult();\nDirectShape ds = DirectShape.CreateElement(doc, new ElementId(BuiltInCategory.OST_GenericModel));\n\nif (ds != null)\n{\n    ds.SetShape(result.GetGeometricalObjects());\n    ds.Name = \"DirectShape Box\";\n}"}
{"prompt":"Crea una nueva cota de nivel llamada 'Nivel 6' a una elevación de 8 metros.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Nivel 6\";\n}"}
{"prompt":"Create a text note with a leader pointing to a given element and location.","completion":"using (Transaction t = new Transaction(doc, \"Create Text Note\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference target = localUidoc.Selection.PickObject(ObjectType.Element, \"Select an element to annotate\");\n    XYZ textLocation = localUidoc.Selection.PickPoint(\"Choose the text location\");\n\n    View activeView = doc.ActiveView;\n    ElementId defaultTypeId = doc.GetDefaultElementTypeId(ElementTypeGroup.TextNoteType);\n\n    if (target != null && textLocation != null && activeView != null && defaultTypeId != ElementId.InvalidElementId)\n    {\n        TextNoteOptions opts = new TextNoteOptions(defaultTypeId);\n        opts.HorizontalAlignment = HorizontalTextAlignment.Left;\n        TextNote note = TextNote.Create(doc, activeView.Id, textLocation, \"Review this element\", opts);\n        if (note != null)\n        {\n            Leader leader = note.AddLeader(TextNoteLeaderTypes.TNLT_STRAIGHT_L);\n            leader.End = target.GlobalPoint;\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Añade una línea de rejilla vertical a la mitad de un muro cortina.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Cast<Wall>().FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain);\nif (curtainWall != null)\n{\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    if (grid != null)\n    {\n        grid.AddGridLine(true, new XYZ(0,0,0), false);\n    }\n}"}
{"prompt":"Actualiza el tipo de una losa seleccionada a 'Concreto 16cm'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una losa\");\n\nif (pickedRef != null)\n{\n    Floor floorToChange = doc.GetElement(pickedRef) as Floor;\n    FloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name == \"Concreto 16cm\");\n    \n    if (floorToChange != null && newType != null)\n    {\n        floorToChange.ChangeTypeId(newType.Id);\n    }\n}"}
{"prompt":"Clone the 'Generic - 146mm' wall type and name it 'Interior - 19cm Plaster'.","completion":"string originalName = \"Generic - 146mm\";\nstring newName = \"Interior - 19cm Plaster\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif (originalType != null)\n{\n    WallType newType = originalType.Duplicate(newName) as WallType;\n}"}
{"prompt":"Ubica una instancia de la familia 'M_Chair-Breuer' en el centro de la habitación 'Despacho 102'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 102\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"M_Chair-Breuer\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);"}
{"prompt":"Dentro del editor de familias, crea un nuevo plano de referencia horizontal.","completion":"View activeView = doc.ActiveView;\nif (activeView != null && doc.IsFamilyDocument)\n{\n    XYZ bubbleEnd = new XYZ(-5, 0, 0);\n    XYZ freeEnd = new XYZ(5, 0, 0);\n    XYZ cutVec = XYZ.BasisZ;\n    ReferencePlane rp = doc.FamilyCreate.NewReferencePlane(bubbleEnd, freeEnd, cutVec, activeView);\n    if (rp != null)\n    {\n        try { rp.Name = \"Plano Horizontal\"; } catch {}\n    }\n}"}
{"prompt":"Crea un nivel 'Roof Terrace' a 15m.","completion":"string levelName = \"Roof Terrace\";\ndouble elev = UnitUtils.ConvertToInternalUnits(15, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elev);\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Agrega un punto al Path of Travel seleccionado.","completion":"\/\/ PathOfTravel related methods are likely inaccessible in this environment.\n\/\/ The following code is a placeholder to show the intent.\n\/*\nusing (Transaction t = new Transaction(doc, \"Update Path of Travel\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference pickedRef = localUidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un Path of Travel\");\n\n    if (pickedRef != null)\n    {\n        PathOfTravel pot = doc.GetElement(pickedRef) as PathOfTravel;\n        if (pot != null)\n        {\n            IList<XYZ> points = pot.GetPath();\n            if (points != null && points.Count >= 2)\n            {\n                XYZ midPoint = (points[0] + points[1]) \/ 2;\n                points.Insert(1, midPoint); \n                pot.Update(points);\n            }\n        }\n    }\n    t.Commit();\n}\n*\/"}
{"prompt":"Crea un pilar del tipo 'Hormigón-Rectangular 30x60' en cada intersección de la rejilla.","completion":"using (Transaction t = new Transaction(doc, \"Create Columns at Grids\"))\n{\n    t.Start();\n    FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(s => s.Name == \"Hormigón-Rectangular 30x60\");\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderBy(l => l.Elevation).FirstOrDefault();\n    List<Grid> grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().ToList();\n    if (columnSymbol != null && level != null)\n    {\n        if (!columnSymbol.IsActive) columnSymbol.Activate();\n        for (int i = 0; i < grids.Count; i++)\n        {\n            for (int j = i + 1; j < grids.Count; j++)\n            {\n                IntersectionResultArray results;\n                if(grids[i].Curve.Intersect(grids[j].Curve, out results) == SetComparisonResult.Overlap)\n                {\n                    if (results != null && !results.IsEmpty)\n                    {\n                        foreach (IntersectionResult ir in results)\n                        {\n                            doc.Create.NewFamilyInstance(ir.XYZPoint, columnSymbol, level, StructuralType.Column);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Encuentra todas las puertas del Nivel 3 que sean de la familia 'M_Chair-Breuer'.","completion":"string levelName = \"Nivel 3\";\nstring familyName = \"M_Chair-Breuer\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WherePasses(new ElementLevelFilter(targetLevel.Id));\n    List<ElementId> doorIds = new List<ElementId>();\n    foreach (Element door in collector)\n    {\n        FamilyInstance fi = door as FamilyInstance;\n        if (fi != null && fi.Symbol.Family.Name == familyName)\n        {\n            doorIds.Add(door.Id);\n        }\n    }\n    uidoc.Selection.SetElementIds(doorIds);\n}"}
{"prompt":"Cambia el tipo de una losa seleccionada a 'Concreto 14cm'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una losa\");\n\nif (pickedRef != null)\n{\n    Floor floorToChange = doc.GetElement(pickedRef) as Floor;\n    FloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name == \"Concreto 14cm\");\n    \n    if (floorToChange != null && newType != null)\n    {\n        floorToChange.ChangeTypeId(newType.Id);\n    }\n}"}
{"prompt":"Cambia el nombre de la vista activa a 'Vista de Trabajo'.","completion":"string newName = \"Vista de Trabajo\";\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.Name = newName;\n}"}
{"prompt":"Get a list of all plan views in the project.","completion":"List<ViewPlan> planViews = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().Where(v => !v.IsTemplate).ToList();"}
{"prompt":"Clone the 'Generic - 150mm' wall type and name it 'Interior - 15cm Plaster'.","completion":"string originalName = \"Generic - 150mm\";\nstring newName = \"Interior - 15cm Plaster\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif (originalType != null)\n{\n    WallType newType = originalType.Duplicate(newName) as WallType;\n}"}
{"prompt":"Coloca una instancia de la familia 'Mesa de Oficina' en el centro de la habitación 'Despacho 101'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 101\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Mesa de Oficina\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);"}
{"prompt":"Create a new door type named 'FR-60 Door' and set the 'Fire Rating' parameter to '60 min'.","completion":"string newTypeName = \"FR-60 Door\";\nFamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (doorTypeToDuplicate != null)\n{\n    FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\n    if (newDoorType != null)\n    {\n        Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n        if (fireRatingParam != null && !fireRatingParam.IsReadOnly) fireRatingParam.Set(\"60 min\");\n    }\n}"}
{"prompt":"Modifica el nombre de todas las vistas de planta para que empiecen con 'ARQ_'.","completion":"string prefix = \"ARQ_\";\nList<ViewPlan> planViews = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().Where(v => !v.IsTemplate).ToList();\nforeach(ViewPlan view in planViews)\n{\n    if(!view.Name.StartsWith(prefix))\n    {\n        view.Name = prefix + view.Name;\n    }\n}"}
{"prompt":"Cambia el nivel de detalle de la vista actual a 'Plano de Fontanería'.","completion":"View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.DetailLevel = ViewDetailLevel.Coarse;\n}"}
{"prompt":"Construct a global length parameter named 'CorridorWidth' with a value of 0.6m.","completion":"string paramName = \"CorridorWidth\";\nGlobalParameter gp = GlobalParameter.Create(doc, paramName, SpecTypeId.Length);\n\nif (gp != null)\n{\n    gp.SetValue(new DoubleParameterValue(UnitUtils.ConvertToInternalUnits(0.6, UnitTypeId.Meters)));\n}"}
{"prompt":"Agrega un punto de referencia en las coordenadas (1,1,3) dentro del editor de familias.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(1,1,3));"}
{"prompt":"Define the 'Mark' parameter of all selected walls to 'W-EXT-2'.","completion":"using (Transaction t = new Transaction(doc, \"Set Wall Mark\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    ICollection<ElementId> selectedIds = localUidoc.Selection.GetElementIds();\n\n    if (selectedIds != null && selectedIds.Count > 2)\n    {\n        foreach(ElementId id in selectedIds)\n        {\n            Element elem = doc.GetElement(id);\n            if(elem is Wall)\n            {\n                Parameter p = elem.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n                if (p != null && !p.IsReadOnly)\n                {\n                    p.Set(\"W-EXT-01\");\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Build columns at each grid intersection.","completion":"FamilySymbol colSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nList<Grid> grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().ToList();\n\nif (colSymbol != null && level != null && grids.Count >= 2)\n{\n    for (int i = 0; i < grids.Count; i++)\n    {\n        for (int j = i + 1; j < grids.Count; j++)\n        {\n            IntersectionResultArray results = null;\n            grids[i].Curve.Intersect(grids[j].Curve, out results);\n            if(results != null)\n            {\n                 foreach (IntersectionResult ir in results)\n                 {\n                     doc.Create.NewFamilyInstance(ir.XYZPoint, colSymbol, level, StructuralType.Column);\n                 }\n            }\n        }\n    }\n}"}
{"prompt":"Create a new level named 'Mezzanine' at 6.8 meters elevation.","completion":"string levelName = \"Mezzanine\";\ndouble elevation = UnitUtils.ConvertToInternalUnits(6.8, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Generate an electrical conduit with a 1-inch diameter.","completion":"using (Transaction t = new Transaction(doc, \"Create Conduit\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    ElementId conduitTypeId = new FilteredElementCollector(doc).OfClass(typeof(ConduitType)).FirstElementId();\n\n    if (level != null && conduitTypeId != null && conduitTypeId != ElementId.InvalidElementId)\n    {\n        XYZ start = new XYZ(0, 0, 3 \/ 0.3048);\n        XYZ end = new XYZ(5 \/ 0.3048, 0, 3 \/ 0.3048);\n        Conduit conduit = Conduit.Create(doc, conduitTypeId, start, end, level.Id);\n\n        if (conduit != null)\n        {\n            Parameter diameterParam = conduit.get_Parameter(BuiltInParameter.RBS_CONDUIT_DIAMETER_PARAM);\n            if (diameterParam != null && !diameterParam.IsReadOnly)\n            {\n                diameterParam.Set(1.0 \/ 12.0);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Modela un reporte con el área de todas las habitaciones del proyecto.","completion":"List<Room> rooms = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>().ToList();"}
{"prompt":"Plasma una región rellena con patrón diagonal.","completion":"using (Transaction t = new Transaction(doc, \"Draw Filled Region\"))\n{\n    t.Start();\n    View activeView = doc.ActiveView;\n    FillPatternElement fillPattern = new FilteredElementCollector(doc).OfClass(typeof(FillPatternElement)).Cast<FillPatternElement>().FirstOrDefault(p => !p.GetFillPattern().IsSolidFill);\n    if (activeView != null && fillPattern != null)\n    {\n        FilledRegionType filledRegionType = new FilteredElementCollector(doc, activeView.Id).OfClass(typeof(FilledRegionType)).FirstOrDefault() as FilledRegionType;\n        if (filledRegionType != null)\n        {\n            FilledRegionType newType = filledRegionType.Duplicate(\"Temp Diagonal Region\") as FilledRegionType;\n            if (newType != null)\n            {\n                newType.ForegroundPatternId = fillPattern.Id;\n                CurveLoop profile = new CurveLoop();\n                profile.Append(Line.CreateBound(new XYZ(0, 0, 0), new XYZ(5, 0, 0)));\n                profile.Append(Line.CreateBound(new XYZ(5, 0, 0), new XYZ(5, 5, 0)));\n                profile.Append(Line.CreateBound(new XYZ(5, 5, 0), new XYZ(0, 5, 0)));\n                profile.Append(Line.CreateBound(new XYZ(0, 5, 0), new XYZ(0, 0, 0)));\n                FilledRegion.Create(doc, newType.Id, activeView.Id, new List<CurveLoop> { profile });\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea un espacio MEP para cada habitación en el Nivel 1.","completion":"using (Transaction t = new Transaction(doc, \"Create MEP Spaces\"))\n{\n    t.Start();\n    Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel 1\");\n\n    if (level1 != null)\n    {\n        List<Room> roomsOnLevel1 = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Where(e => (e as Room) != null && (e as Room).LevelId.Equals(level1.Id)).Cast<Room>().ToList();\n        foreach(Room room in roomsOnLevel1)\n        {\n           \/\/ The direct creation of MEP spaces from rooms might not be available in this specific API version.\n           \/\/ Placeholder comment for the intended logic.\n           \/\/ Space.Create(doc, room, null);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Incorpora una línea de rejilla vertical a la mitad de un muro cortina.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Cast<Wall>().FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain);\nif (curtainWall != null)\n{\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    if (grid != null)\n    {\n        grid.AddGridLine(true, new XYZ(0,0,0), false);\n    }\n}"}
{"prompt":"Replicate level 4 with a 5m offset and name it 'Mezzanine'.","completion":"string levelName = \"Level 4\";\nLevel levelToCopy = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (levelToCopy != null)\n{\n    double offset = UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, levelToCopy.Elevation + offset);\n    newLevel.Name = \"Mezzanine\";\n}"}
{"prompt":"Generate a wall on Level 1 from (0,0,0) to (10,0,0) with a height of 4 meters.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (level1 != null && wallType != null)\n{\n    XYZ p1 = new XYZ(0, 0, 0);\n    XYZ p2 = new XYZ(10, 0, 0);\n    Line wallCurve = Line.CreateBound(p1, p2);\n    double height = UnitUtils.ConvertToInternalUnits(4, UnitTypeId.Meters);\n    Wall.Create(doc, wallCurve, wallType.Id, level1.Id, height, 0.0, false, false);\n}"}
{"prompt":"Create a group from the current selection and move it 10 meters to the right.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds != null && selectedIds.Count > 0)\n{\n    Group group = doc.Create.NewGroup(selectedIds);\n    if (group != null)\n    {\n        XYZ translation = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), 0, 0);\n        ElementTransformUtils.MoveElement(doc, group.Id, translation);\n    }\n}"}
{"prompt":"Crea una nueva cota de nivel llamada 'Nivel 1' a una elevación de 17 metros.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(17, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Nivel 1\";\n}"}
{"prompt":"Retrieve a list of all annotation families.","completion":"List<Family> annotationFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.CategoryType == CategoryType.Annotation).ToList();\n"}
{"prompt":"Encuentra el tipo de columna estructural llamado \"300 x 450mm\" y colócalo en X=-8, Y=12.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(s => s.Name == \"300 x 450mm\");\nif (level != null && columnSymbol != null)\n{\n    if (!columnSymbol.IsActive) { columnSymbol.Activate(); }\n    XYZ point = new XYZ(-8, 12, 0);\n    doc.Create.NewFamilyInstance(point, columnSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n}"}
{"prompt":"Agrega un punto de referencia en las coordenadas (1,1,1) dentro del editor de familias.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(1,1,1));"}
{"prompt":"Crea una nueva tabla de planificación para ventanas que incluya Marca de Tipo, Ancho y Alto.","completion":"string scheduleName = \"Tabla de Ventanas\";\nViewSchedule schedule = ViewSchedule.CreateSchedule(doc, new ElementId(BuiltInCategory.OST_Windows));\n\nif (schedule != null)\n{\n    schedule.Name = scheduleName;\n    ScheduleDefinition def = schedule.Definition;\n    if (def != null)\n    {\n        SchedulableField typeMarkField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.ALL_MODEL_TYPE_MARK);\n        SchedulableField widthField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.FAMILY_WIDTH_PARAM);\n        SchedulableField heightField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.FAMILY_HEIGHT_PARAM);\n        \n        if (typeMarkField != null) def.AddField(typeMarkField);\n        if (widthField != null) def.AddField(widthField);\n        if (heightField != null) def.AddField(heightField);\n    }\n}"}
{"prompt":"Create a topography surface from a list of 4 points.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nElementId toposolidTypeId = Toposolid.GetDefaultToposolidType(doc);\n\nif (level != null && toposolidTypeId != ElementId.InvalidElementId)\n{\n    \/\/ Create a default set of points as none were specified in the prompt\n    IList<XYZ> points = new List<XYZ>\n    {\n        new XYZ(0, 0, 0),\n        new XYZ(50, 0, 2),\n        new XYZ(0, 50, 5),\n        new XYZ(50, 50, 3)\n    };\n    Toposolid.Create(doc, points, toposolidTypeId, level.Id);\n}"}
{"prompt":"Create a new A3 sheet and place a legend on it.","completion":"using (Transaction t = new Transaction(doc, \"Create Sheet with Legend\"))\n{\n    t.Start();\n    FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(tb => tb.Name.Contains(\"A3\"));\n    View legendView = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().FirstOrDefault(v => v.ViewType == ViewType.Legend);\n\n    if (titleBlock != null && legendView != null)\n    {\n        ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n        if (newSheet != null)\n        {\n            BoundingBoxUV sheetBox = newSheet.Outline;\n            UV centerUv = (sheetBox.Min + sheetBox.Max) \/ 2.0;\n            XYZ centerPoint = new XYZ(centerUv.U, centerUv.V, 0);\n            Viewport.Create(doc, newSheet.Id, legendView.Id, centerPoint);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Agrega un punto de referencia en las coordenadas (4,1,2) dentro del editor de familias.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(4,1,2));"}
{"prompt":"Crea una nueva cota de nivel llamada 'Nivel 1' a una elevación de 11 metros.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(11, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Nivel 1\";\n}"}
{"prompt":"Crea un nuevo tipo de muro de 23cm llamado 'Muro Estructural 28cm'.","completion":"string newTypeName = \"Muro Estructural 28cm\";\nWallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif (oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(newTypeName) as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(23, UnitTypeId.Centimeters));\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n}"}
{"prompt":"Crea una nueva hoja A1 usando el primer cajetín disponible.","completion":"FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (titleBlock != null)\n{\n    ViewSheet sheet = ViewSheet.Create(doc, titleBlock.Id);\n    if (sheet != null)\n    {\n        sheet.Name = \"A1 - Nueva Hoja\";\n        sheet.SheetNumber = \"A1\";\n    }\n}"}
{"prompt":"Recupera todas las habitaciones en el Nivel 'Planta Baja'.","completion":"Level groundFloor = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Planta Baja\") as Level;\nList<Element> roomsOnGround = new List<Element>();\n\nif (groundFloor != null)\n{\n    roomsOnGround = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Where(r => r.LevelId == groundFloor.Id).ToList();\n}"}
{"prompt":"Place an instance of the 'Office Desk' family in the center of the 'Office 97' room.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Office 97\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Office Desk\") as FamilySymbol;\nif(furnitureSymbol != null && !furnitureSymbol.IsActive) furnitureSymbol.Activate();\nif(room != null)\n{\n    LocationPoint roomCenter = room.Location as LocationPoint;\n    if(roomCenter != null && furnitureSymbol != null && room.Level != null)\n    {\n        doc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Create a text note with a leader pointing to a given element and location.","completion":"using (Transaction t = new Transaction(doc, \"Create Text Note\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference target = localUidoc.Selection.PickObject(ObjectType.Element, \"Select an element to annotate\");\n    XYZ textLocation = localUidoc.Selection.PickPoint(\"Choose the text location\");\n\n    View activeView = doc.ActiveView;\n    ElementId defaultTypeId = doc.GetDefaultElementTypeId(ElementTypeGroup.TextNoteType);\n\n    if (target != null && textLocation != null && activeView != null && defaultTypeId != ElementId.InvalidElementId)\n    {\n        TextNoteOptions opts = new TextNoteOptions(defaultTypeId);\n        opts.HorizontalAlignment = HorizontalTextAlignment.Left;\n        TextNote note = TextNote.Create(doc, activeView.Id, textLocation, \"Review this element\", opts);\n        if (note != null)\n        {\n            Leader leader = note.AddLeader(TextNoteLeaderTypes.TNLT_STRAIGHT_L);\n            leader.End = target.GlobalPoint;\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"What are the ceiling types in this model?","completion":"FilteredElementCollector collector = new FilteredElementCollector(doc).OfClass(typeof(CeilingType));\nList<string> ceilingTypeNames = collector.Select(e => e.Name).ToList();"}
{"prompt":"Crea una apertura de hueco vertical (shaft) desde el nivel base hasta el nivel más alto.","completion":"using (Transaction t = new Transaction(doc, \"Create Shaft\"))\n{\n    t.Start();\n    Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderBy(l => l.ProjectElevation).FirstOrDefault();\n    Level topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderByDescending(l => l.ProjectElevation).FirstOrDefault();\n\n    if (bottomLevel != null && topLevel != null)\n    {\n        XYZ p1 = new XYZ(2 \/ 0.3048, 2 \/ 0.3048,0);\n        XYZ p2 = new XYZ(5 \/ 0.3048, 2 \/ 0.3048,0);\n        XYZ p3 = new XYZ(5 \/ 0.3048, 5 \/ 0.3048,0);\n        XYZ p4 = new XYZ(2 \/ 0.3048, 5 \/ 0.3048,0);\n        CurveArray profile = new CurveArray();\n        profile.Append(Line.CreateBound(p1,p2));\n        profile.Append(Line.CreateBound(p2,p3));\n        profile.Append(Line.CreateBound(p3,p4));\n        profile.Append(Line.CreateBound(p4,p1));\n        doc.Create.NewOpening(bottomLevel, topLevel, profile);\n    }\n    t.Commit();\n}"}
{"prompt":"Update the type of a selected floor to 'Concrete 16cm'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a floor\");\n\nif (pickedRef != null)\n{\n    Floor floorToChange = doc.GetElement(pickedRef) as Floor;\n    FloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name == \"Concrete 16cm\");\n    \n    if (floorToChange != null && newType != null)\n    {\n        floorToChange.ChangeTypeId(newType.Id);\n    }\n}"}
{"prompt":"Add a reference point at coordinates (1,5,6) inside the family editor.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(1,5,6));"}
{"prompt":"Ajusta el tipo de una losa por uno que contenga 'Vidrio Templado'.","completion":"Floor floorToChange = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault() as Floor;\nFloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name.Contains(\"Vidrio Templado\") || ft.Name.Contains(\"Concrete\"));\n\nif (floorToChange != null && newType != null)\n{\n    floorToChange.ChangeTypeId(newType.Id);\n}"}
{"prompt":"Abre una familia, añade un parámetro de tipo 'Código de Material' y guárdala.","completion":""}
{"prompt":"Construct a new room on Level 1 at point (14, 13).","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\n\nif (level1 != null)\n{\n    UV point = new UV(14, 13);\n    Room room = doc.Create.NewRoom(level1, point);\n}"}
{"prompt":"Construct an MEP space for each room on Level 1","completion":"string levelName = \"Level 1\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    FilteredElementCollector roomCollector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WherePasses(new ElementLevelFilter(targetLevel.Id));\n    foreach (Room room in roomCollector.ToElements().Cast<Room>())\n    {\n        if (room.Location != null)\n        {\n            LocationPoint locPoint = room.Location as LocationPoint;\n            if(locPoint != null)\n            {\n                UV point = new UV(locPoint.Point.X, locPoint.Point.Y);\n                doc.Create.NewSpace(targetLevel, point);\n            }\n        }\n    }\n}"}
{"prompt":"Establece el parámetro 'Marca' de todos los muros seleccionados a 'M-EXT-01'.","completion":"using (Transaction t = new Transaction(doc, \"Set Wall Mark\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    ICollection<ElementId> selectedIds = localUidoc.Selection.GetElementIds();\n\n    if (selectedIds != null && selectedIds.Count > 0)\n    {\n        foreach(ElementId id in selectedIds)\n        {\n            Element elem = doc.GetElement(id);\n            if(elem is Wall)\n            {\n                Parameter markParam = elem.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n                if (markParam != null && !markParam.IsReadOnly) markParam.Set(\"M-EXT-01\");\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Generate a detail group with the selected detail items.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds != null && selectedIds.Count > 0)\n{\n    List<ElementId> detailIds = new List<ElementId>();\n    foreach(ElementId id in selectedIds)\n    {\n        Element elem = doc.GetElement(id);\n        if (elem != null && elem.Category != null && elem.Category.CategoryType == CategoryType.Annotation)\n        {\n            detailIds.Add(id);\n        }\n    }\n\n    if (detailIds.Count > 0)\n    {\n        Group group = doc.Create.NewGroup(detailIds);\n        if (group != null)\n        {\n            group.Name = \"Typical Detail 1\";\n        }\n    }\n}"}
{"prompt":"Crea un workset llamado 'Fachada'.","completion":"string wsName = \"Fachada\";\nWorkset newWorkset = Workset.Create(doc, wsName);\n"}
{"prompt":"Append a reference point at coordinates (6,1,4) inside the family editor.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(6,1,4));"}
{"prompt":"Replicate the 'Generic - 149mm' wall type and name it 'Interior - 10cm Plaster'.","completion":"string originalName = \"Generic - 149mm\";\nstring newName = \"Interior - 10cm Plaster\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif (originalType != null)\n{\n    WallType newType = originalType.Duplicate(newName) as WallType;\n}"}
{"prompt":"Create a new level 'Level 5' at an elevation of 10 meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\nif (newLevel != null)\n{\n    try { newLevel.Name = \"Level 5\"; } catch {}\n}"}
{"prompt":"Get the system type of a selected pipe.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a pipe\");\n\nPipingSystemType systemType = null;\nif (pickedRef != null)\n{\n    Pipe pipe = doc.GetElement(pickedRef.ElementId) as Pipe;\n    if (pipe != null)\n    {\n        Parameter systemTypeParam = pipe.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM);\n        if (systemTypeParam != null && systemTypeParam.HasValue)\n        {\n            systemType = doc.GetElement(systemTypeParam.AsElementId()) as PipingSystemType;\n        }\n    }\n}\n"}
{"prompt":"Get the MEP space associated with the room 'Office 101'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Cast<Room>().FirstOrDefault(r => r.Name == \"Office 101\");\nList<Space> spaces = new List<Space>();\n\nif (room != null)\n{\n    spaces = new FilteredElementCollector(doc).OfClass(typeof(Space)).Cast<Space>().Where(s => s.Room != null && s.Room.Id == room.Id).ToList();\n}"}
{"prompt":"Crea un nivel 'Roof Terrace' a 12m.","completion":"string levelName = \"Roof Terrace\";\ndouble elev = UnitUtils.ConvertToInternalUnits(12, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elev);\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Crea un nuevo tipo de muro 'Muro Genérico 280mm' con un grosor de 28cm.","completion":"string newTypeName = \"Muro Genérico 280mm\";\nWallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif (oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(newTypeName) as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(28, UnitTypeId.Centimeters));\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n}"}
{"prompt":"Duplica el tipo de muro 'Genérico - 173mm' y nómbralo 'Interior - 15cm Yeso'.","completion":"string originalName = \"Genérico - 173mm\";\nstring newName = \"Interior - 15cm Yeso\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif (originalType != null)\n{\n    WallType newType = originalType.Duplicate(newName) as WallType;\n}"}
{"prompt":"Build a Path of Travel between points (1,1) and (10,10) in the plan view.","completion":"\/\/ PathOfTravel.Create is likely inaccessible in this environment.\n\/\/ A comment is left as a placeholder for the intended functionality.\n\/*\nusing (Transaction t = new Transaction(doc, \"Create Path of Travel\"))\n{\n    t.Start();\n    ViewPlan viewPlan = doc.ActiveView as ViewPlan;\n\n    if (viewPlan != null && viewPlan.ViewType == ViewType.FloorPlan)\n    {\n        ElementId levelId = viewPlan.get_Parameter(BuiltInParameter.PLAN_VIEW_LEVEL).AsElementId();\n        Level level = doc.GetElement(levelId) as Level;\n        if (level != null)\n        {\n            XYZ startPoint = new XYZ(1 \/ 0.3048, 1 \/ 0.3048, level.Elevation);\n            XYZ endPoint = new XYZ(10 \/ 0.3048, 10 \/ 0.3048, level.Elevation);\n            \/\/ PathOfTravel.Create(viewPlan, startPoint, endPoint);\n        }\n    }\n    t.Commit();\n}\n*\/"}
{"prompt":"Attach a reference point at coordinates (6,1,1) inside the family editor.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(6,1,1));"}
{"prompt":"Build a new Level named 'Level 1' at an elevation of 14 meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(14, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Level 1\";\n}"}
{"prompt":"Ajusta todas las ventanas para que tengan la altura del antepecho a 900mm.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits(900, UnitTypeId.Millimeters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Crea una región rellena con un patrón de 'Concreto'.","completion":"using (Transaction t = new Transaction(doc, \"Create Filled Region\"))\n{\n    t.Start();\n    FilledRegionType regionType = new FilteredElementCollector(doc).OfClass(typeof(FilledRegionType)).Cast<FilledRegionType>().FirstOrDefault(frt => frt.Name.Contains(\"Concrete\") || frt.Name.Contains(\"Concreto\"));\n    View activeView = doc.ActiveView;\n\n    if (regionType != null && activeView != null)\n    {\n        XYZ p1 = new XYZ(0,0,0);\n        XYZ p2 = new XYZ(5 \/ 0.3048, 0,0);\n        XYZ p3 = new XYZ(5 \/ 0.3048, 5 \/ 0.3048,0);\n        XYZ p4 = new XYZ(0, 5 \/ 0.3048,0);\n        CurveLoop profile = new CurveLoop();\n        profile.Append(Line.CreateBound(p1,p2));\n        profile.Append(Line.CreateBound(p2,p3));\n        profile.Append(Line.CreateBound(p3,p4));\n        profile.Append(Line.CreateBound(p4,p1));\n        FilledRegion.Create(doc, regionType.Id, activeView.Id, new List<CurveLoop>{profile});\n    }\n    t.Commit();\n}"}
{"prompt":"Crea un nuevo tipo de muro de 22cm llamado 'Muro Estructural 27cm'.","completion":"string newTypeName = \"Muro Estructural 27cm\";\nWallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif (oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(newTypeName) as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(22, UnitTypeId.Centimeters));\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n}"}
{"prompt":"Clona el tipo de muro 'Genérico - 147mm' y nómbralo 'Interior - 17cm Yeso'.","completion":"string originalName = \"Genérico - 147mm\";\nstring newName = \"Interior - 17cm Yeso\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif (originalType != null)\n{\n    WallType newType = originalType.Duplicate(newName) as WallType;\n}"}
{"prompt":"Coloca una instancia de la familia 'Ventana Fija 118x60' en el centro de la habitación 'Despacho 96'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 118\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Ventana Fija 96x60\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);"}
{"prompt":"Crea una vista de sección entre los puntos (0,0,0) y (10,10,0).","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.Section);\n\nif (vft != null)\n{\n    XYZ p1 = new XYZ(0,0,0);\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),0);\n    XYZ midPoint = (p1 + p2) \/ 2;\n    XYZ direction = (p2 - p1).Normalize();\n    XYZ up = XYZ.BasisZ;\n    XYZ viewdir = up.CrossProduct(direction);\n    \n    BoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\n    Transform t = Transform.Identity;\n    t.Origin = midPoint;\nt.BasisX = direction;\nt.BasisY = up;\nt.BasisZ = viewdir;\nsectionBox.Transform = t;\nsectionBox.Min = new XYZ(UnitUtils.ConvertToInternalUnits(-p1.DistanceTo(p2)\/2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(-10, UnitTypeId.Meters), 0);\nsectionBox.Max = new XYZ(UnitUtils.ConvertToInternalUnits(p1.DistanceTo(p2)\/2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(20, UnitTypeId.Meters));\n    \n    ViewSection.CreateSection(doc, vft.Id, sectionBox);\n}"}
{"prompt":"Añade un punto de referencia en las coordenadas (1,2,3) dentro del editor de familias.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(1,2,3));"}
{"prompt":"Modela un equipo eléctrico en X=1,Y=1.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol panelSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_ElectricalEquipment).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (level != null && panelSymbol != null)\n{\n    if (!panelSymbol.IsActive)\n    {\n        panelSymbol.Activate();\n    }\n    XYZ point = new XYZ(1, 1, 0);\n    doc.Create.NewFamilyInstance(point, panelSymbol, level, StructuralType.NonStructural);\n}"}
{"prompt":"Add the 'Level', 'Mark', and 'Volume' fields to the column schedule.","completion":"ViewSchedule schedule = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().FirstOrDefault(s => s.Name.Contains(\"Column\"));\nif (schedule != null)\n{\n    ScheduleDefinition def = schedule.Definition;\n    SchedulableField levelField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.FAMILY_LEVEL_PARAM);\n    if (levelField != null) def.AddField(levelField);\n    SchedulableField markField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.ALL_MODEL_MARK);\n    if (markField != null) def.AddField(markField);\n    SchedulableField volumeField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.HOST_VOLUME_COMPUTED);\n    if (volumeField != null) def.AddField(volumeField);\n}"}
{"prompt":"Create a new A1 sheet and place the 'Ground Floor' view on it.","completion":"using (Transaction t = new Transaction(doc, \"Create Sheet\"))\n{\n    t.Start();\n    string sheetNumber = \"A-101\";\n    FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(tb => tb.Name.Contains(\"A1\"));\n    View viewToPlace = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<View>().FirstOrDefault(v => v.Name == \"Ground Floor\");\n\n    if (titleBlock != null && viewToPlace != null)\n    {\n        ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n        if (newSheet != null)\n        {\n            newSheet.Name = \"Architectural Plan - Ground Floor\";\n            newSheet.SheetNumber = sheetNumber;\n            BoundingBoxUV sheetBox = newSheet.Outline;\n            UV centerUv = (sheetBox.Min + sheetBox.Max) \/ 2;\n            XYZ centerPoint = new XYZ(centerUv.U, centerUv.V, 0);\n            Viewport.Create(doc, newSheet.Id, viewToPlace.Id, centerPoint);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Replace the prefix 'OLD-' with 'NEW-' for all materials.","completion":"string prefixToRemove = \"OLD-\";\nstring prefixToAdd = \"NEW-\";\nIList<Material> materials = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().ToList();\n\nif (materials.Any())\n{\n    HashSet<string> existingNames = new HashSet<string>(materials.Select(m => m.Name));\n    foreach (Material mat in materials)\n    {\n        if (mat.Name.StartsWith(prefixToRemove))\n        {\n            existingNames.Remove(mat.Name);\n            string baseName = mat.Name.Substring(prefixToRemove.Length);\n            string newName = prefixToAdd + baseName;\n            string finalName = newName;\n            int i = 1;\n            while (existingNames.Contains(finalName))\n            {\n                finalName =$\"{newName}_{i++}\";\n            }\n            mat.Name = finalName;\n            existingNames.Add(finalName);\n        }\n    }\n}"}
{"prompt":"Copy the 'Level 1' view as a dependent view.","completion":"ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v => v.Name == \"Level 1\") as ViewPlan;\n\nif (viewToDuplicate != null)\n{\n    ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n}"}
{"prompt":"Clona el nivel 1 con un desfase de 5m y llámalo 'Mezanine'.","completion":"string levelName = \"Mezanine\";\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\n\nif (level1 != null)\n{\n    double newElevation = level1.ProjectElevation + UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, newElevation);\n    if (newLevel != null)\n    {\n        newLevel.Name = levelName;\n    }\n}"}
{"prompt":"Crea etiquetas para todas las ventanas que se muestran en pantalla.","completion":"View activeView = doc.ActiveView;\nif (activeView == null) return;\n\nFilteredElementCollector collector = new FilteredElementCollector(doc, activeView.Id)\n    .OfCategory(BuiltInCategory.OST_Windows)\n    .WhereElementIsNotElementType();\n\nIList<Element> elementsToTag = collector.ToElements();\n\nif (elementsToTag.Any())\n{\n    foreach (Element elem in elementsToTag)\n    {\n        Reference elemRef = new Reference(elem);\n        BoundingBoxXYZ bbox = elem.get_BoundingBox(activeView);\n        if (bbox == null) continue;\n\n        XYZ tagLocation = (bbox.Min + bbox.Max) \/ 2.0;\n        IndependentTag.Create(doc, activeView.Id, elemRef, true, TagMode.TM_ADDBY_CATEGORY, TagOrientation.Horizontal, tagLocation);\n    }\n}"}
{"prompt":"Inserta una instancia de la familia 'Mesa de Oficina' en el centro de la habitación 'Despacho 105'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 105\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Mesa de Oficina\") as FamilySymbol;\nif(furnitureSymbol != null && !furnitureSymbol.IsActive) furnitureSymbol.Activate();\nif(room != null)\n{\n    LocationPoint roomCenter = room.Location as LocationPoint;\n    if(roomCenter != null && furnitureSymbol != null && room.Level != null)\n    {\n        doc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Modifica el tipo de la ventana seleccionada al tipo 'Fija 118x60'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una ventana\");\nFamilySymbol newType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name == \"Fija 118x60\");\nif (pickedRef != null && newType != null)\n{\n    FamilyInstance window = doc.GetElement(pickedRef.ElementId) as FamilyInstance;\n    if (window != null)\n    {\n        window.Symbol = newType;\n    }\n}"}
{"prompt":"Encuentra el tipo de columna estructural llamado \"305 x 449mm\" y colócalo en X=1, Y=11.2","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(s => s.Name == \"305 x 449mm\");\nif (level != null && columnSymbol != null)\n{\n    if (!columnSymbol.IsActive) { columnSymbol.Activate(); }\n    XYZ point = new XYZ(1, 11.2, 0);\n    doc.Create.NewFamilyInstance(point, columnSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n}"}
{"prompt":"Duplica el nivel 2 con un desfase de 1m y llámalo 'Mezanine'.","completion":"string levelName = \"Nivel 2\";\nLevel levelToCopy = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (levelToCopy != null)\n{\n    double offset = UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, levelToCopy.Elevation + offset);\n    newLevel.Name = \"Mezanine\";\n}"}
{"prompt":"Crea un espacio MEP para cada habitación en el Nivel 5","completion":"string levelName = \"Nivel 5\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    FilteredElementCollector roomCollector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WherePasses(new ElementLevelFilter(targetLevel.Id));\n    foreach (Room room in roomCollector.ToElements().Cast<Room>())\n    {\n        LocationPoint locPoint = room.Location as LocationPoint;\n        if (locPoint != null)\n        {\n            UV point = new UV(locPoint.Point.X, locPoint.Point.Y);\n            doc.Create.NewSpace(targetLevel, point);\n        }\n    }\n}"}
{"prompt":"Build a new Level named 'Level 6' at an elevation of 15 meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(15, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Level 6\";\n}"}
{"prompt":"Place all selected elements on the 'Facade' workset.","completion":"using (Transaction t = new Transaction(doc, \"Assign to Workset\"))\n{\n    t.Start();\n    if(doc.IsWorkshared)\n    {\n        UIDocument localUidoc = uidoc;\n        ICollection<ElementId> selectedIds = localUidoc.Selection.GetElementIds();\n        \n        Workset workset = new FilteredWorksetCollector(doc).OfKind(WorksetKind.UserWorkset).FirstOrDefault(ws => ws.Name == \"Facade\");\n        if(workset == null) workset = Workset.Create(doc, \"Facade\");\n\n        if (selectedIds != null && selectedIds.Count > 0 && workset != null)\n        {\n            foreach(ElementId id in selectedIds)\n            {\n                Element elem = doc.GetElement(id);\n                Parameter wsparam = elem.get_Parameter(BuiltInParameter.ELEM_PARTITION_PARAM);\n                if(wsparam != null && !wsparam.IsReadOnly) wsparam.Set(workset.Id.IntegerValue);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Apply 29mm thermal insulation to all hot water pipes.","completion":"PipeInsulationType insulationType = new FilteredElementCollector(doc).OfClass(typeof(PipeInsulationType)).FirstOrDefault() as PipeInsulationType;\nPipingSystemType hotWaterSystem = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).Cast<PipingSystemType>().FirstOrDefault(s => s.Name.Contains(\"Hot Water\"));\n\nif (insulationType != null && hotWaterSystem != null)\n{\n    List<Pipe> pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast<Pipe>().Where(p => \n    {\n        Parameter systemParam = p.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM);\n        return systemParam != null && systemParam.HasValue && systemParam.AsElementId() == hotWaterSystem.Id;\n    }).ToList();\n    \n    foreach(Pipe p in pipes)\n    {\n        PipeInsulation.Create(doc, p.Id, insulationType.Id, UnitUtils.ConvertToInternalUnits(29, UnitTypeId.Millimeters));\n    }\n}"}
{"prompt":"Create a 'Roof Terrace' level at 14m.","completion":"string levelName = \"Roof Terrace\";\ndouble elev = UnitUtils.ConvertToInternalUnits(14, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elev);\nnewLevel.Name = levelName;\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Encuentra todos los muros que no tienen nivel base asignado.","completion":"ElementFilter unassociatedFilter = new ElementLevelFilter(ElementId.InvalidElementId);\nList<Element> unassignedWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(unassociatedFilter).ToList();"}
{"prompt":"Inserta un punto de referencia en las coordenadas (1,1,1) dentro del editor de familias.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(1,1,1));"}
{"prompt":"Ajusta todas las ventanas para que la altura del antepecho sea 6 metro.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits(6, UnitTypeId.Meters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Crea un nuevo nivel 'Nivel 1' a una elevación de 11 metros.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(11, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Nivel 1\";\n}"}
{"prompt":"Cambia el tipo de la ventana seleccionada al tipo 'Fija 118x60'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una ventana\");\nFamilySymbol newType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name == \"Fija 118x60\");\nif (pickedRef != null && newType != null)\n{\n    FamilyInstance window = doc.GetElement(pickedRef.ElementId) as FamilyInstance;\n    if (window != null)\n    {\n        window.Symbol = newType;\n    }\n}"}
{"prompt":"Incorpora un punto de referencia en las coordenadas (6,6,1) dentro del editor de familias.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(6,6,1));"}
{"prompt":"Construct a DirectShape with a 2x2x2 meter box shape.","completion":"TessellatedShapeBuilder builder = new TessellatedShapeBuilder();\nbuilder.OpenConnectedFaceSet(true);\ndouble size = UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\nXYZ p0=new XYZ(0,0,0); XYZ p1=new XYZ(size,0,0); XYZ p2=new XYZ(size,size,0); XYZ p3=new XYZ(0,size,0);\nXYZ p4=new XYZ(0,0,size); XYZ p5=new XYZ(size,0,size); XYZ p6=new XYZ(size,size,size); XYZ p7=new XYZ(0,size,size);\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p0,p1,p2,p3}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p7,p6,p5,p4}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p0,p4,p5,p1}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p1,p5,p6,p2}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p2,p6,p7,p3}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p3,p7,p4,p0}, ElementId.InvalidElementId));\nbuilder.CloseConnectedFaceSet();\nbuilder.Build();\nTessellatedShapeBuilderResult result = builder.GetBuildResult();\nDirectShape ds = DirectShape.CreateElement(doc, new ElementId(BuiltInCategory.OST_GenericModel));\n\nif (ds != null)\n{\n    ds.SetShape(result.GetGeometricalObjects());\n    ds.Name = \"DirectShape Box\";\n}"}
{"prompt":"Add a reference point at coordinates (5,2,6) inside the family editor.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(5,2,6));"}
{"prompt":"Añade un punto de referencia en las coordenadas (5,6,6) dentro del editor de familias.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(5,6,6));"}
{"prompt":"Duplicate level 1 with a 3m offset and name it 'Mezzanine'.","completion":"string levelName = \"Mezzanine\";\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\n\nif (level1 != null)\n{\n    double newElevation = level1.ProjectElevation + UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, newElevation);\n    if (newLevel != null)\n    {\n        newLevel.Name = levelName;\n    }\n}"}
{"prompt":"Sitúa una instancia de la familia 'Mesa de Oficina' en el centro de la habitación 'Despacho 99'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 99\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Mesa de Oficina\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);"}
{"prompt":"Dibuja un conducto de ventilación rectangular de 300x200 milímetros.","completion":"using (Transaction t = new Transaction(doc, \"Create Duct\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    DuctType ductType = new FilteredElementCollector(doc).OfClass(typeof(DuctType)).Cast<DuctType>().FirstOrDefault(d => d.Shape == ConnectorProfileType.Rectangular);\n    MEPSystemType systemType = new FilteredElementCollector(doc).OfClass(typeof(MEPSystemType)).Cast<MEPSystemType>().FirstOrDefault(s => s.SystemClassification == MEPSystemClassification.SupplyAir);\n\n    if (level != null && ductType != null && systemType != null)\n    {\n        XYZ p1 = new XYZ(0, 0, 3 \/ 0.3048);\n        XYZ p2 = new XYZ(10 \/ 0.3048, 0, 3 \/ 0.3048);\n        Duct duct = Duct.Create(doc, systemType.Id, ductType.Id, level.Id, p1, p2);\n\n        if (duct != null)\n        {\n            Parameter widthParam = duct.get_Parameter(BuiltInParameter.RBS_CURVE_WIDTH_PARAM);\n            Parameter heightParam = duct.get_Parameter(BuiltInParameter.RBS_CURVE_HEIGHT_PARAM);\n            if (widthParam != null && !widthParam.IsReadOnly) widthParam.Set(300 \/ 304.8);\n            if (heightParam != null && !heightParam.IsReadOnly) heightParam.Set(200 \/ 304.8);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Find all walls taller than 4 meters.","completion":"double heightThreshold = UnitUtils.ConvertToInternalUnits(4, UnitTypeId.Meters);\nParameterValueProvider pvp = new ParameterValueProvider(new ElementId(BuiltInParameter.WALL_USER_HEIGHT_PARAM));\nFilterRule rule = new FilterDoubleRule(pvp, new FilterNumericGreater(), heightThreshold, 1e-6);\nList<Element> tallWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(new ElementParameterFilter(rule)).ToList();"}
{"prompt":"Crea 5 worksets para las disciplinas de ingeniería.","completion":"List<string> worksetNames = new List<string> { \"MEP_HVAC\", \"MEP_Plumbing\", \"MEP_Electrical\", \"STRUCT_Framing\", \"STRUCT_Foundations\" };\nforeach(string name in worksetNames)\n{\n    Workset newWorkset = Workset.Create(doc, name);\n}"}
{"prompt":"Draw a 300x200 millimeter rectangular ventilation duct.","completion":"using (Transaction t = new Transaction(doc, \"Create Duct\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    DuctType ductType = new FilteredElementCollector(doc).OfClass(typeof(DuctType)).Cast<DuctType>().FirstOrDefault(d => d.Shape == ConnectorProfileType.Rectangular);\n    MEPSystemType systemType = new FilteredElementCollector(doc).OfClass(typeof(MEPSystemType)).Cast<MEPSystemType>().FirstOrDefault(s => s.SystemClassification == MEPSystemClassification.SupplyAir);\n\n    if (level != null && ductType != null && systemType != null)\n    {\n        XYZ p1 = new XYZ(0, 0, 3 \/ 0.3048);\n        XYZ p2 = new XYZ(10 \/ 0.3048, 0, 3 \/ 0.3048);\n        Duct duct = Duct.Create(doc, systemType.Id, ductType.Id, level.Id, p1, p2);\n\n        if (duct != null)\n        {\n            Parameter widthParam = duct.get_Parameter(BuiltInParameter.RBS_CURVE_WIDTH_PARAM);\n            Parameter heightParam = duct.get_Parameter(BuiltInParameter.RBS_CURVE_HEIGHT_PARAM);\n            if (widthParam != null && !widthParam.IsReadOnly) widthParam.Set(300 \/ 304.8);\n            if (heightParam != null && !heightParam.IsReadOnly) heightParam.Set(200 \/ 304.8);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea un SketchPlane en el Nivel 2.","completion":"using (Transaction t = new Transaction(doc, \"Create Sketch Plane\"))\n{\n    t.Start();\n    Level level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel 2\");\n\n    if (level2 != null)\n    {\n        Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisZ, new XYZ(0, 0, level2.Elevation));\n        SketchPlane skp = SketchPlane.Create(doc, plane);\n    }\n    t.Commit();\n}"}
{"prompt":"Copia el tipo de muro 'Genérico - 149mm' y nómbralo 'Interior - 10cm Yeso'.","completion":"string originalName = \"Genérico - 149mm\";\nstring newName = \"Interior - 10cm Yeso\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif(originalType!=null)\n    originalType.Duplicate(newName);"}
{"prompt":"Get the coordinates of the project base point and the survey point.","completion":"BasePoint surveyPoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(p => p.IsShared);\nBasePoint projectBasePoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(p => !p.IsShared);\n\nXYZ surveyCoords = null;\nif (surveyPoint != null) surveyCoords = surveyPoint.get_BoundingBox(null).Min;\n\nXYZ projectCoords = null;\nif (projectBasePoint != null) projectCoords = projectBasePoint.get_BoundingBox(null).Min;"}
{"prompt":"Generate a new level 'Level 1' at an elevation of 7 meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(7, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Level 1\";\n}"}
{"prompt":"Build a new Level named 'Level 1' at an elevation of 15 meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(15, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\nif (newLevel != null)\n{\n    try { newLevel.Name = \"Level 1\"; } catch {}\n}"}
{"prompt":"Añade un punto de referencia en las coordenadas (1,5,1) dentro del editor de familias.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(1,5,1));"}
{"prompt":"Append a reference point at coordinates (1,2,5) inside the family editor.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(1,2,5));"}
{"prompt":"Carga la familia 'Mesa.rfa' y colócala en (1,7,1) en el Nivel 1","completion":"string familyPath = \"C:\/Rutas\/Comunes\/Mesa.rfa\";\nFamily deskFamily = null;\nbool familyLoaded = doc.LoadFamily(familyPath, out deskFamily);\n\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\n\nif (familyLoaded && deskFamily != null && level1 != null)\n{\n    FamilySymbol deskSymbol = doc.GetElement(deskFamily.GetFamilySymbolIds().FirstOrDefault()) as FamilySymbol;\n    if (deskSymbol != null)\n    {\n        if (!deskSymbol.IsActive) deskSymbol.Activate();\n        XYZ point = new XYZ(UnitUtils.ConvertToInternalUnits(7, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters), 0.6);\n        doc.Create.NewFamilyInstance(point, deskSymbol, level1, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Construct a text note with a leader pointing to a given element and location.","completion":"using (Transaction t = new Transaction(doc, \"Create Text Note\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference target = localUidoc.Selection.PickObject(ObjectType.Element, \"Select an element to annotate\");\n    XYZ textLocation = localUidoc.Selection.PickPoint(\"Choose the text location\");\n\n    View activeView = doc.ActiveView;\n    ElementId defaultTypeId = doc.GetDefaultElementTypeId(ElementTypeGroup.TextNoteType);\n\n    if (target != null && textLocation != null && activeView != null && defaultTypeId != ElementId.InvalidElementId)\n    {\n        TextNoteOptions opts = new TextNoteOptions(defaultTypeId);\n        opts.HorizontalAlignment = HorizontalTextAlignment.Left;\n        TextNote note = TextNote.Create(doc, activeView.Id, textLocation, \"Review this element\", opts);\n        if (note != null)\n        {\n            Leader leader = note.AddLeader(TextNoteLeaderTypes.TNLT_STRAIGHT_L);\n            leader.End = target.GlobalPoint;\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Hide all annotation categories in the active view.","completion":"using (Transaction t = new Transaction(doc, \"Hide Annotation Categories\"))\n{\n    t.Start();\n    Categories categories = doc.Settings.Categories;\n    View activeView = doc.ActiveView;\n\n    if (activeView != null)\n    {\n        foreach(Category cat in categories)\n        {\n            if(cat.CategoryType == CategoryType.Annotation && cat.get_AllowsVisibilityControl(activeView))\n            {\n                 activeView.SetCategoryHidden(cat.Id, true);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Pivot a selected element 90 degrees around its Z-axis.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select an element to rotate\");\nElement elem = doc.GetElement(pickedRef.ElementId);\nLocationPoint lp = elem.Location as LocationPoint;\nLine axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\nElementTransformUtils.RotateElement(doc, elem.Id, axis, Math.PI \/ 2.0);"}
{"prompt":"Find all views that do not have an assigned view template.","completion":"List<View> viewsWithoutTemplate = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().Where(v => v.CanBePrinted && !v.IsTemplate && v.ViewTemplateId == ElementId.InvalidElementId).ToList();"}
{"prompt":"Actualiza el tipo de todos los muros seleccionados a 'Muro Exterior'.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nWallType targetWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Name == \"Muro Exterior\");\nif(targetWallType != null)\n{\n    foreach(ElementId id in selectedIds)\n    {\n        Wall wall = doc.GetElement(id) as Wall;\n        if(wall != null)\n        {\n            wall.ChangeTypeId(targetWallType.Id);\n        }\n    }\n}"}
{"prompt":"Calcula el volumen total de concreto de todas las zapatas de cimentación.","completion":"double totalVolume = 0.0;\nList<FamilyInstance> footings = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFoundation).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach (FamilyInstance footing in footings)\n{\n    Parameter volumeParam = footing.get_Parameter(BuiltInParameter.HOST_VOLUME_COMPUTED);\n    if (volumeParam != null && volumeParam.HasValue)\n    {\n        totalVolume += volumeParam.AsDouble();\n    }\n}\n\/\/ El volumen está en pies cúbicos. El orquestador puede convertirlo a metros cúbicos."}
{"prompt":"Crea un nuevo tipo de tubería llamado 'Tubería de Acero' con material 'Concreto'.","completion":"string newTypeName = \"Tubería de Acero\";\nPipeType pipeTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(PipeType)).FirstOrDefault() as PipeType;\nMaterial steel = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name == \"Concreto\") as Material;\n\nif (pipeTypeToDuplicate != null && steel != null)\n{\n    PipeType newType = pipeTypeToDuplicate.Duplicate(newTypeName) as PipeType;\n    if (newType != null)\n    {\n        Parameter materialParam = newType.get_Parameter(BuiltInParameter.MATERIAL_ID_PARAM);\n        if (materialParam != null && !materialParam.IsReadOnly) materialParam.Set(steel.Id);\n    }\n}"}
{"prompt":"Obtén la geometría sólida de un elemento seleccionado.","completion":"UIDocument localUidoc = uidoc;\nReference pickedRef = localUidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un elemento para obtener su geometría\");\nif(pickedRef != null)\n{\n    Element elem = doc.GetElement(pickedRef);\n    if(elem != null)\n    {\n        Options opt = new Options() { ComputeReferences = true, DetailLevel = ViewDetailLevel.Fine };\n        GeometryElement geoElem = elem.get_Geometry(opt);\n        if(geoElem != null)\n        {\n            List<Solid> solids = geoElem.OfType<Solid>().Where(s => s.Volume > 0).ToList();\n        }\n    }\n}"}
{"prompt":"Replicate the 'Level 2' plan view and make it a view template.","completion":"using (Transaction t = new Transaction(doc, \"Create View Template\"))\n{\n    t.Start();\n    ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().FirstOrDefault(v => v.Name == \"Level 2\");\n    string templateName = \"Level 2 Template\";\n\n    if (viewToDuplicate != null)\n    {\n        ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n        View newView = doc.GetElement(newViewId) as View;\n        if (newView != null)\n        {\n           \/\/ Direct conversion to a template may not be available in older APIs.\n           \/\/ A common workaround is to set the IsTemplate property if available and writable, \n           \/\/ which is not the case here. This is left as a comment for conceptual understanding.\n           \/\/ newView.IsTemplate = true;\n            newView.Name = templateName;\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea un parámetro global de longitud llamado 'Distancia entre objetos' con valor de 0.9m.","completion":"string paramName = \"Distancia entre objetos\";\nGlobalParameter gp = GlobalParameter.Create(doc, paramName, SpecTypeId.Length);\n\nif (gp != null)\n{\n    gp.SetValue(new DoubleParameterValue(UnitUtils.ConvertToInternalUnits(0.9, UnitTypeId.Meters)));\n}"}
{"prompt":"Define the 'Comments' parameter for all doors on Level 6 to 'Fire Rating - 95 min'.","completion":"string levelName = \"Level 6\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(targetLevel.Id);\n    FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WherePasses(levelFilter);\n    foreach (Element door in collector)\n    {\n        Parameter commentsParam = door.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n        if (commentsParam != null && !commentsParam.IsReadOnly) { commentsParam.Set(\"Fire Rating - 95 min\"); }\n    }\n}"}
{"prompt":"Inserta postes de iluminación cada 10m en un camino de 100m.","completion":"FamilySymbol lightSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsElementType().FirstOrDefault(s => s.Name.Contains(\"Post\") || s.Name.Contains(\"Pole\")) as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (lightSymbol != null && level != null)\n{\n    if (!lightSymbol.IsActive)\n    {\n        lightSymbol.Activate();\n    }\n    double spacing = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\n    double pathLength = UnitUtils.ConvertToInternalUnits(100, UnitTypeId.Meters);\n    int postCount = (int)(pathLength \/ spacing);\n    for (int i = 0; i <= postCount; i++)\n    {\n        XYZ point = new XYZ(i * spacing, 0, 0);\n        doc.Create.NewFamilyInstance(point, lightSymbol, level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Apply 22mm thermal insulation to all hot water pipes.","completion":"PipeInsulationType insulationType = new FilteredElementCollector(doc).OfClass(typeof(PipeInsulationType)).FirstOrDefault() as PipeInsulationType;\nPipingSystemType hotWaterSystem = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).Cast<PipingSystemType>().FirstOrDefault(s => s.Name.Contains(\"Hot Water\"));\n\nif (insulationType != null && hotWaterSystem != null)\n{\n    List<Pipe> pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast<Pipe>().Where(p => \n    {\n        Parameter systemParam = p.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM);\n        return systemParam != null && systemParam.HasValue && systemParam.AsElementId() == hotWaterSystem.Id;\n    }).ToList();\n    \n    foreach(Pipe p in pipes)\n    {\n        PipeInsulation.Create(doc, p.Id, insulationType.Id, UnitUtils.ConvertToInternalUnits(22, UnitTypeId.Millimeters));\n    }\n}"}
{"prompt":"Create a stair between Level 1 and Level 2.","completion":"Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 1\");\nLevel topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 2\");\n\nif (bottomLevel != null && topLevel != null)\n{\n    \/\/ TODO: Stairs.Create(doc, bottomLevel.Id, topLevel.Id); is not a valid Revit API call.\n    \/\/ Stairs creation requires using the StairsEditScope class.\n}"}
{"prompt":"Ajusta el tipo de la ventana seleccionada al tipo 'Fija 117x60'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una ventana\");\nFamilySymbol newType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name == \"Fija 117x60\");\nif (pickedRef != null && newType != null)\n{\n    FamilyInstance window = doc.GetElement(pickedRef.ElementId) as FamilyInstance;\n    if (window != null)\n    {\n        window.Symbol = newType;\n    }\n}"}
{"prompt":"Encuentra el tipo de columna estructural llamado \"303 x 448mm\" y colócalo en X=1, Y=11.4","completion":"string columnTypeName = \"303 x 448mm\";\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(s => s.Name == columnTypeName);\n\nif (level != null && columnSymbol != null)\n{\n    if (!columnSymbol.IsActive)\n    {\n        columnSymbol.Activate();\n    }\n    doc.Create.NewFamilyInstance(new XYZ(1, 11.4, 0), columnSymbol, level, StructuralType.Column);\n}"}
{"prompt":"Selecciona todos los muros con una resistencia al fuego de 90 minutos.","completion":"ElementId fireRatingParamId = new ElementId(BuiltInParameter.FIRE_RATING);\nParameterValueProvider pvp = new ParameterValueProvider(fireRatingParamId);\nFilterStringRuleEvaluator evaluator = new FilterStringEquals();\nFilterRule rule = new FilterStringRule(pvp, evaluator, \"90 min\");\nElementParameterFilter filter = new ElementParameterFilter(rule);\nICollection<ElementId> wallsToSelect = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(filter).ToElementIds();\nif (wallsToSelect.Count > 0)\n{\n    new UIDocument(doc).Selection.SetElementIds(wallsToSelect);\n}"}
{"prompt":"Ubica una instancia de la familia 'Puerta Sencilla' en el centro de la habitación 'Despacho 103'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 103\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Puerta Sencilla\") as FamilySymbol;\nif(furnitureSymbol != null && !furnitureSymbol.IsActive) furnitureSymbol.Activate();\nif(room != null)\n{\n    LocationPoint roomCenter = room.Location as LocationPoint;\n    if(roomCenter != null && furnitureSymbol != null && room.Level != null)\n    {\n        doc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Recupera todas las habitaciones en el Nivel 'Losa 99'.","completion":"Level groundFloor = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Losa 99\") as Level;\nList<Element> roomsOnGround = new List<Element>();\n\nif (groundFloor != null)\n{\n    roomsOnGround = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Where(r => r.LevelId == groundFloor.Id).ToList();\n}"}
{"prompt":"Insert an instance of the 'Office Desk' family in the center of the 'Office 106' room.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Office 106\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Office Desk\") as FamilySymbol;\nif(furnitureSymbol != null && !furnitureSymbol.IsActive) furnitureSymbol.Activate();\nif(room != null)\n{\n    LocationPoint roomCenter = room.Location as LocationPoint;\n    if(roomCenter != null && furnitureSymbol != null && room.Level != null)\n    {\n        doc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Crea un nuevo nivel llamado 'Mezzanine' a 7.9 metros de elevación.","completion":"string levelName = \"Mezzanine\";\ndouble elevation = UnitUtils.ConvertToInternalUnits(7.9, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Clone level 1 with a 3m offset and name it 'Mezzanine'.","completion":"string levelName = \"Mezzanine\";\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\n\nif (level1 != null)\n{\n    double newElevation = level1.ProjectElevation + UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, newElevation);\n    if (newLevel != null)\n    {\n        newLevel.Name = levelName;\n    }\n}"}
{"prompt":"Duplica la vista 'Nivel 4' como una vista dependiente.","completion":"ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v => v.Name == \"Nivel 4\") as ViewPlan;\n\nif (viewToDuplicate != null)\n{\n    ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n}"}
{"prompt":"Crea una rejilla de 5 ejes horizontales y 5 verticales, espaciados 6 metros.","completion":"double spacing = UnitUtils.ConvertToInternalUnits(6, UnitTypeId.Meters);\nint count = 5;\nfor (int i = 0; i < count; i++)\n{\n    Line line = Line.CreateBound(new XYZ(0, i * spacing, 0), new XYZ((count - 1) * spacing, i * spacing, 0));\n    Grid.Create(doc, line);\n}\nfor (int i = 0; i < count; i++)\n{\n    Line line = Line.CreateBound(new XYZ(i * spacing, 0, 0), new XYZ(i * spacing, (count - 1) * spacing, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Generate a new level 'Level 1' at an elevation of 15 meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(15, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Level 1\";\n}"}
{"prompt":"Coloca una instancia de la familia 'Ventana Fija 125x60' en el centro de la habitación 'Despacho 106'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 125\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Ventana Fija 106x60\") as FamilySymbol;\nif(furnitureSymbol != null && !furnitureSymbol.IsActive) furnitureSymbol.Activate();\nif(room != null)\n{\n    LocationPoint roomCenter = room.Location as LocationPoint;\n    if(roomCenter != null && furnitureSymbol != null && room.Level != null)\n    {\n        doc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Construct a new 5mm text type in green color.","completion":"using (Transaction t = new Transaction(doc, \"Create Green Text Type\"))\n{\n    t.Start();\n    string newTypeName = \"5mm Green\";\n    TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\n    TextNoteType newType = null;\n    if (defaultType != null)\n    {\n        newType = defaultType.Duplicate(newTypeName) as TextNoteType;\n        if (newType != null)\n        {\n            Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n            if (textSizeParam != null && !textSizeParam.IsReadOnly)\n            {\n                textSizeParam.Set(5 \/ 304.8);\n            }\n            Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n            if (lineColorParam != null && !lineColorParam.IsReadOnly)\n            {\n                 lineColorParam.Set(65280);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea un nuevo tipo de puerta llamado 'Puerta RF-90' y establece su resistencia al fuego a '90 min'.","completion":"using (Transaction t = new Transaction(doc, \"Create Door Type\"))\n{\n    t.Start();\n    string newTypeName = \"Puerta RF-90\";\n    FamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n    if (doorTypeToDuplicate != null)\n    {\n        FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\n        if (newDoorType != null)\n        {\n            Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n            if(fireRatingParam != null && !fireRatingParam.IsReadOnly)\n            {\n                fireRatingParam.Set(\"90 min\");\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Hide all annotation categories in the active view.","completion":"using (Transaction t = new Transaction(doc, \"Hide Annotation Categories\"))\n{\n    t.Start();\n    Categories categories = doc.Settings.Categories;\n    View activeView = doc.ActiveView;\n\n    if (activeView != null)\n    {\n        foreach(Category cat in categories)\n        {\n            if(cat.CategoryType == CategoryType.Annotation && cat.get_AllowsVisibilityControl(activeView))\n            {\n                 activeView.SetCategoryHidden(cat.Id, true);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Get the MEP space associated with the room 'Office 103'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Cast<Room>().FirstOrDefault(r => r.Name == \"Office 103\");\nList<Space> spaces = new List<Space>();\n\nif (room != null)\n{\n    spaces = new FilteredElementCollector(doc).OfClass(typeof(Space)).Cast<Space>().Where(s => s.Room != null && s.Room.Id == room.Id).ToList();\n}"}
{"prompt":"Create a Reflected Ceiling Plan view for Level 1.","completion":"string levelName = \"Level 1\";\nstring viewName = \"Level 1 Ceiling Plan\";\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.CeilingPlan);\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\n\nif (vft != null && level1 != null)\n{\n    ViewPlan rcp = ViewPlan.Create(doc, vft.Id, level1.Id);\n    if (rcp != null)\n    {\n        rcp.Name = viewName;\n    }\n}"}
{"prompt":"Generate an MEP space for each room on Level 1","completion":"string levelName = \"Level 1\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    FilteredElementCollector roomCollector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WherePasses(new ElementLevelFilter(targetLevel.Id));\n    foreach (Room room in roomCollector.ToElements().Cast<Room>())\n    {\n        LocationPoint locPoint = room.Location as LocationPoint;\n        if (locPoint != null)\n        {\n            UV point = new UV(locPoint.Point.X, locPoint.Point.Y);\n            doc.Create.NewSpace(targetLevel, point);\n        }\n    }\n}"}
{"prompt":"Estima el volumen total de hormigón de todas las zapatas de cimentación.","completion":"double totalVolume = 0.0;\nList<FamilyInstance> footings = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFoundation).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach (FamilyInstance footing in footings)\n{\n    Parameter volumeParam = footing.get_Parameter(BuiltInParameter.HOST_VOLUME_COMPUTED);\n    if (volumeParam != null && volumeParam.HasValue)\n    {\n        totalVolume += volumeParam.AsDouble();\n    }\n}\n\/\/ El volumen está en pies cúbicos. El orquestador puede convertirlo a metros cúbicos."}
{"prompt":"Crea un codo en T entre dos tuberías que se intersecan.","completion":"\/\/ No se proporciona código para esta función específica debido a la necesidad de selección interactiva y manejo de casos complejos.\n\/\/ Este escenario involucra la selección de elementos específicos y el uso de métodos de creación que dependen de la geometría existente."}
{"prompt":"Get a list of all annotation families.","completion":"List<Family> annotationFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.CategoryType == CategoryType.Annotation).ToList();\n"}
{"prompt":"Get all subcategories from the Doors category.","completion":"Category doorCat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Doors);\nCategoryNameMap subcategories = doorCat.SubCategories;"}
{"prompt":"Aplica aislamiento térmico de 25mm a todas las tuberías de agua caliente.","completion":"PipeInsulationType insulationType = new FilteredElementCollector(doc).OfClass(typeof(PipeInsulationType)).FirstOrDefault() as PipeInsulationType;\nPipingSystemType hotWaterSystem = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).Cast<PipingSystemType>().FirstOrDefault(s => s.Name.Contains(\"Hot Water\") || s.Name.Contains(\"Agua Caliente\"));\n\nif (insulationType != null && hotWaterSystem != null)\n{\n    List<Pipe> pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast<Pipe>().Where(p => \n    {\n        Parameter systemParam = p.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM);\n        return systemParam != null && systemParam.HasValue && systemParam.AsElementId() == hotWaterSystem.Id;\n    }).ToList();\n    \n    foreach(Pipe p in pipes)\n    {\n        PipeInsulation.Create(doc, p.Id, insulationType.Id, UnitUtils.ConvertToInternalUnits(25, UnitTypeId.Millimeters));\n    }\n}"}
{"prompt":"Create a new door type named 'FR-60 Door' and set the 'Fire Rating' parameter to '60 min'.","completion":"string newTypeName = \"FR-60 Door\";\nFamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (doorTypeToDuplicate != null)\n{\n    FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\n    if (newDoorType != null)\n    {\n        Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n        if (fireRatingParam != null && !fireRatingParam.IsReadOnly) fireRatingParam.Set(\"60 min\");\n    }\n}"}
{"prompt":"Ubica una instancia de la familia 'Mesa de Oficina' en el centro de la habitación 'Despacho 103'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 103\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Mesa de Oficina\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);"}
{"prompt":"Incorpora un punto de referencia en las coordenadas (1,2,3) dentro del editor de familias.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(1,2,3));"}
{"prompt":"Delete all unused wall types in the project.","completion":"ICollection<ElementId> allWallTypes = new FilteredElementCollector(doc).OfClass(typeof(WallType)).ToElementIds();\nICollection<ElementId> usedWallTypes = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Select(w => w.GetTypeId()).Distinct().ToList();\nList<ElementId> unusedWallTypes = allWallTypes.Except(usedWallTypes).ToList();\ndoc.Delete(unusedWallTypes);"}
{"prompt":"Coloca una cota de elevación en una cara y un punto de vista dados.","completion":"using (Transaction t = new Transaction(doc, \"Place Spot Elevation\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference faceRef = localUidoc.Selection.PickObject(ObjectType.Face, \"Selecciona la cara superior del suelo\");\n\n    View activeView = doc.ActiveView;\n\n    if (faceRef != null && activeView != null)\n    {\n        XYZ pointOnFace = faceRef.GlobalPoint;\n        XYZ leaderEnd = pointOnFace + new XYZ(1 \/ 0.3048, 1 \/ 0.3048, 0);\n        doc.Create.NewSpotElevation(activeView, faceRef, pointOnFace, pointOnFace, leaderEnd, pointOnFace, true);\n    }\n    t.Commit();\n}"}
{"prompt":"Build a global length parameter named 'CorridorWidth' with a value of 1.3m.","completion":"string paramName = \"CorridorWidth\";\nGlobalParameter gp = GlobalParameter.Create(doc, paramName, SpecTypeId.Length);\n\nif (gp != null)\n{\n    gp.SetValue(new DoubleParameterValue(UnitUtils.ConvertToInternalUnits(1.3, UnitTypeId.Meters)));\n}"}
{"prompt":"Cambia el nombre de todas las familias cargadas que contengan 'Métrica' a 'Imperial'.","completion":"List<Family> familiesToRename = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.Name.Contains(\"Métrica\")).ToList();\nforeach(Family fam in familiesToRename)\n{\n    fam.Name = fam.Name.Replace(\"Métrica\", \"Imperial\");\n}"}
{"prompt":"Elimina todos los tipos de muro no utilizados en el proyecto.","completion":"ICollection<ElementId> allWallTypes = new FilteredElementCollector(doc).OfClass(typeof(WallType)).ToElementIds();\nICollection<ElementId> usedWallTypes = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Select(w => w.GetTypeId()).Distinct().ToList();\nList<ElementId> unusedWallTypes = allWallTypes.Except(usedWallTypes).ToList();\nif (unusedWallTypes.Any())\n{\n    doc.Delete(unusedWallTypes);\n}"}
{"prompt":"Obtén el elemento anfitrión de la primera ventana que encuentres.","completion":"FamilyInstance windowInstance = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\nif (windowInstance != null)\n{\n    Element hostElement = windowInstance.Host;\n}"}
{"prompt":"Generate a new door type named 'FR-60 Door' and set the 'Fire Rating' parameter to '60 min'.","completion":"string newTypeName = \"FR-60 Door\";\nFamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (doorTypeToDuplicate != null)\n{\n    FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\n    if (newDoorType != null)\n    {\n        Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n        if (fireRatingParam != null && !fireRatingParam.IsReadOnly) fireRatingParam.Set(\"60 min\");\n    }\n}"}
{"prompt":"Add a horizontal reference plane named 'Centerline A'.","completion":"using (Transaction t = new Transaction(doc, \"Add Reference Plane\"))\n{\n    t.Start();\n    string rpName = \"Centerline A\";\n    View activeView = doc.ActiveView;\n\n    if (activeView != null)\n    {\n        XYZ bubbleEnd = new XYZ(0, 10, 0);\n        XYZ freeEnd = new XYZ(10, 10, 0);\n        XYZ cutVec = XYZ.BasisZ;\n        ReferencePlane rp = doc.Create.NewReferencePlane(bubbleEnd, freeEnd, cutVec, activeView);\n        if (rp != null)\n        {\n            rp.Name = rpName;\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Actualiza el tipo de la ventana seleccionada al tipo 'Fija 122x60'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una ventana\");\nFamilySymbol newType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name == \"Fija 122x60\");\nif (pickedRef != null && newType != null)\n{\n    FamilyInstance window = doc.GetElement(pickedRef.ElementId) as FamilyInstance;\n    if (window != null)\n    {\n        window.Symbol = newType;\n    }\n}"}
{"prompt":"Render a 300x200 millimeter rectangular ventilation duct.","completion":"using (Transaction t = new Transaction(doc, \"Create Duct\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    DuctType ductType = new FilteredElementCollector(doc).OfClass(typeof(DuctType)).Cast<DuctType>().FirstOrDefault(d => d.Shape == ConnectorProfileType.Rectangular);\n    MEPSystemType systemType = new FilteredElementCollector(doc).OfClass(typeof(MEPSystemType)).Cast<MEPSystemType>().FirstOrDefault(s => s.SystemClassification == MEPSystemClassification.SupplyAir);\n\n    if (level != null && ductType != null && systemType != null)\n    {\n        XYZ p1 = new XYZ(0, 0, 3 \/ 0.3048);\n        XYZ p2 = new XYZ(10 \/ 0.3048, 0, 3 \/ 0.3048);\n        Duct duct = Duct.Create(doc, systemType.Id, ductType.Id, level.Id, p1, p2);\n\n        if (duct != null)\n        {\n            Parameter widthParam = duct.get_Parameter(BuiltInParameter.RBS_CURVE_WIDTH_PARAM);\n            Parameter heightParam = duct.get_Parameter(BuiltInParameter.RBS_CURVE_HEIGHT_PARAM);\n            if (widthParam != null && !widthParam.IsReadOnly) widthParam.Set(300 \/ 304.8);\n            if (heightParam != null && !heightParam.IsReadOnly) heightParam.Set(200 \/ 304.8);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Modifica el tipo de muro de un muro existente a uno que contenga 'Aislamiento Térmico'.","completion":"Wall wallToChange = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nWallType newType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(x => x.Name.Contains(\"Aislamiento Térmico\") || x.Name.Contains(\"Insulation\"));\n\nif (wallToChange != null && newType != null)\n{\n    wallToChange.ChangeTypeId(newType.Id);\n}"}
{"prompt":"Export the current model to an NWC file.","completion":"string folderPath = \"C:\/exports\/\";\nstring fileName = doc.Title + \".nwc\";\nNavisworksExportOptions options = new NavisworksExportOptions();\noptions.ExportScope = NavisworksExportScope.Model;\ndoc.Export(folderPath, fileName, options);"}
{"prompt":"Obtain all rooms on Level 3","completion":"string levelName = \"Level 3\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(targetLevel.Id);\n    FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WherePasses(levelFilter);\n    uidoc.Selection.SetElementIds(collector.ToElementIds());\n}"}
{"prompt":"Inside the family editor, create a vertical reference plane named 'Center Axis'.","completion":"string rpName = \"Center Axis\";\nXYZ start = new XYZ(0, UnitUtils.ConvertToInternalUnits(-5, UnitTypeId.Meters), 0);\nXYZ end = new XYZ(0, UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0);\nXYZ normal = XYZ.BasisX;\n\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    ReferencePlane rp = doc.FamilyCreate.NewReferencePlane(start, end, normal, activeView);\n    if (rp != null)\n    {\n        rp.Name = rpName;\n    }\n}"}
{"prompt":"Set the Mark for the selected doors to 'D-101'.","completion":"ICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nif (selectedIds.Any())\n{\n    string mark = \"D-101\";\n    foreach (ElementId id in selectedIds)\n    {\n        Element elem = doc.GetElement(id);\n        if (elem != null && elem.Category.Id.IntegerValue == (int)BuiltInCategory.OST_Doors)\n        {\n            Parameter markParam = elem.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n            if (markParam != null && !markParam.IsReadOnly)\n            {\n                markParam.Set(mark);\n            }\n        }\n    }\n}"}
{"prompt":"Ajusta el tipo de la ventana seleccionada al tipo 'Fija 125x60'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una ventana\");\nFamilySymbol newType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name == \"Fija 125x60\");\nif (pickedRef != null && newType != null)\n{\n    FamilyInstance window = doc.GetElement(pickedRef.ElementId) as FamilyInstance;\n    if (window != null)\n    {\n        window.Symbol = newType;\n    }\n}"}
{"prompt":"Crea un nuevo tipo de muro de 21cm llamado 'Muro Estructural 28cm'.","completion":"string newTypeName = \"Muro Estructural 28cm\";\nWallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(newTypeName) as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(21, UnitTypeId.Centimeters));\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n}"}
{"prompt":"Voltea un elemento seleccionado 87 grados sobre su eje Z.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un elemento para rotar\");\nElement elem = doc.GetElement(pickedRef.ElementId);\nLocationPoint lp = elem.Location as LocationPoint;\nLine axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\nElementTransformUtils.RotateElement(doc, elem.Id, axis, Math.PI \/ 87);"}
{"prompt":"Duplicate the 'Generic - 193mm' wall type and name it 'Interior - 15cm Plaster'.","completion":"string originalName = \"Generic - 193mm\";\nstring newName = \"Interior - 15cm Plaster\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif (originalType != null)\n{\n    WallType newType = originalType.Duplicate(newName) as WallType;\n}"}
{"prompt":"Actualiza un panel de vidrio de un muro cortina por un panel sólido.","completion":"using (Transaction t = new Transaction(doc, \"Change Curtain Panel\"))\n{\n    t.Start();\n    Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Cast<Wall>().FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain);\n    FamilySymbol solidPanelType = new FilteredElementCollector(doc).OfClass(typeof(FamilySymbol)).Cast<FamilySymbol>().FirstOrDefault(fs => fs.Family.FamilyCategory.Id.IntegerValue == (int)BuiltInCategory.OST_CurtainWallPanels && (fs.Name.Contains(\"Solid\") || fs.Name.Contains(\"Sólido\")));\n\n    if (curtainWall != null && solidPanelType != null)\n    {\n        CurtainGrid grid = curtainWall.CurtainGrid;\n        if (grid != null)\n        {\n            ElementId panelIdToChange = grid.GetPanelIds().FirstOrDefault();\n            if (panelIdToChange != ElementId.InvalidElementId)\n            {\n                Panel panelToChange = doc.GetElement(panelIdToChange) as Panel;\n                if (panelToChange != null) panelToChange.ChangeTypeId(solidPanelType.Id);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Obtén la longitud total de todos los muros del proyecto.","completion":"double totalLength = 0.0;\nList<Wall> walls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Cast<Wall>().ToList();\nforeach (Wall wall in walls)\n{\n    Parameter lengthParam = wall.get_Parameter(BuiltInParameter.CURVE_ELEM_LENGTH);\n    if (lengthParam != null && lengthParam.HasValue)\n    {\n        totalLength += lengthParam.AsDouble();\n    }\n}"}
{"prompt":"Inserta una instancia de la familia 'Puerta Sencilla' en el centro de la habitación 'Despacho 100'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 100\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Puerta Sencilla\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);"}
{"prompt":"Asigna el material 'Acero' a la primera capa de un tipo de muro.","completion":"using (Transaction t = new Transaction(doc, \"Assign Material\"))\n{\n    t.Start();\n    WallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.GetCompoundStructure() != null);\n    Material steel = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m => m.Name.Contains(\"Steel\") || m.Name.Contains(\"Acero\"));\n\n    if (wallType != null && steel != null)\n    {\n        CompoundStructure cs = wallType.GetCompoundStructure();\n        if (cs != null && cs.LayerCount > 0)\n        {\n            cs.SetMaterialId(0, steel.Id);\n            wallType.SetCompoundStructure(cs);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create a new A3 sheet and place a legend on it.","completion":"using (Transaction t = new Transaction(doc, \"Create Sheet with Legend\"))\n{\n    t.Start();\n    FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(tb => tb.Name.Contains(\"A3\"));\n    View legendView = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().FirstOrDefault(v => v.ViewType == ViewType.Legend);\n\n    if (titleBlock != null && legendView != null)\n    {\n        ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n        if (newSheet != null)\n        {\n            BoundingBoxUV sheetBox = newSheet.Outline;\n            UV centerUv = (sheetBox.Min + sheetBox.Max) \/ 2.0;\n            XYZ centerPoint = new XYZ(centerUv.U, centerUv.V, 0);\n            Viewport.Create(doc, newSheet.Id, legendView.Id, centerPoint);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Retrieve all rooms on the 'Ground Floor' Level.","completion":"Level groundFloor = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Ground Floor\") as Level;\nList<Element> roomsOnGround = new List<Element>();\n\nif (groundFloor != null)\n{\n    roomsOnGround = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Where(r => r.LevelId == groundFloor.Id).ToList();\n}"}
{"prompt":"Selecciona todos los muros del 'Nivel 2' y cambia su comentario a 'REVISAR AISLAMIENTO'.","completion":"Level level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 2\") as Level;\nif (level2 != null)\n{\n    List<Wall> wallsOnLevel2 = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Where(w => w.LevelId == level2.Id).Cast<Wall>().ToList();\n    foreach(Wall wall in wallsOnLevel2)\n    {\n        Parameter commentParam = wall.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n        if (commentParam != null && !commentParam.IsReadOnly)\n        {\n            commentParam.Set(\"REVISAR AISLAMIENTO\");\n        }\n    }\n}"}
{"prompt":"Construct a new room on Level 1 at point (11, 7).","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nif (level1 != null)\n{\n    UV point = new UV(11, 7);\n    Room room = doc.Create.NewRoom(level1, point);\n}"}
{"prompt":"Cambia el tipo de la ventana seleccionada al tipo 'Fija 116x60'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una ventana\");\nFamilySymbol newType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name == \"Fija 116x60\");\nif (pickedRef != null && newType != null)\n{\n    FamilyInstance window = doc.GetElement(pickedRef.ElementId) as FamilyInstance;\n    if (window != null)\n    {\n        window.Symbol = newType;\n    }\n}"}
{"prompt":"Elimina todas las líneas de detalle en la vista activa.","completion":"View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    ICollection<ElementId> detailLines = new FilteredElementCollector(doc, activeView.Id).OfClass(typeof(DetailLine)).ToElementIds();\n    if (detailLines.Count > 0)\n    {\n        doc.Delete(detailLines);\n    }\n}"}
{"prompt":"Inserta una instancia de la familia 'Puerta Sencilla' en el centro de la habitación 'Despacho 105'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 105\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Puerta Sencilla\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);"}
{"prompt":"Get all walls on Level 1 that are structural.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nif (level1 != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level1.Id);\n    ElementCategoryFilter categoryFilter = new ElementCategoryFilter(BuiltInCategory.OST_Walls);\n    ParameterValueProvider pvp = new ParameterValueProvider(new ElementId(BuiltInParameter.WALL_STRUCTURAL_SIGNIFICANT));\n    FilterIntegerRule rule = new FilterIntegerRule(pvp, new FilterNumericEquals(), 1);\n    ElementParameterFilter structuralFilter = new ElementParameterFilter(rule);\n    LogicalAndFilter andFilter = new LogicalAndFilter(new List<ElementFilter> { levelFilter, categoryFilter, structuralFilter });\n    List<Element> structuralWalls = new FilteredElementCollector(doc).WherePasses(andFilter).ToList();\n}"}
{"prompt":"Obtain the solid geometry of a selected element.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select an element to get its geometry\");\n\nList<Solid> solids = new List<Solid>();\nif (pickedRef != null)\n{\n    Element elem = doc.GetElement(pickedRef);\n    if (elem != null)\n    {\n        Options opt = new Options() { ComputeReferences = true, DetailLevel = ViewDetailLevel.Fine };\n        GeometryElement geoElem = elem.get_Geometry(opt);\n        if (geoElem != null)\n        {\n            solids = geoElem.OfType<Solid>().Where(s => s.Volume > 0).ToList();\n        }\n    }\n}"}
{"prompt":"Build a 'Roof Terrace' level at 18m.","completion":"string levelName = \"Roof Terrace\";\ndouble elev = UnitUtils.ConvertToInternalUnits(18, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elev);\nnewLevel.Name = levelName;\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Construct a new wall type 'Generic Wall 280mm' with a thickness of 28cm.","completion":"string newTypeName = \"Generic Wall 280mm\";\nWallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif (oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(newTypeName) as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(28, UnitTypeId.Centimeters));\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n}"}
{"prompt":"Calculate the total length of all Supply Air ducts.","completion":"List<Duct> ducts = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_DuctCurves).WhereElementIsNotElementType().Cast<Duct>().Where(d => d.get_Parameter(BuiltInParameter.RBS_SYSTEM_CLASSIFICATION_PARAM).AsString() == \"SupplyAir\").ToList();\ndouble totalLength = 0.0;\nforeach (Duct d in ducts)\n{\n    totalLength += d.get_Parameter(BuiltInParameter.CURVE_ELEM_LENGTH).AsDouble();\n}"}
{"prompt":"Rename all loaded families containing 'Metric' to 'Imperial'.","completion":"List<Family> familiesToRename = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.Name.Contains(\"Metric\")).ToList();\nforeach(Family fam in familiesToRename)\n{\n    fam.Name = fam.Name.Replace(\"Metric\", \"Imperial\");\n}"}
{"prompt":"Delete the selected elements.","completion":"ICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nif (selectedIds.Any())\n{\n    doc.Delete(selectedIds);\n}"}
{"prompt":"Conecta dos tuberías con un codo.","completion":"List<Pipe> pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast<Pipe>().ToList();\nif (pipes.Count >= 2)\n{\n    Connector c1 = pipes[0].ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n    Connector c2 = pipes[1].ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n    if (c1 != null && c2 != null)\n    {\n        doc.Create.NewElbowFitting(c1, c2);\n    }\n}"}
{"prompt":"Crea un nuevo tipo de muro de 21cm llamado 'Muro Estructural 29cm'.","completion":"string newTypeName = \"Muro Estructural 29cm\";\nWallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(newTypeName) as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(21, UnitTypeId.Centimeters));\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n}"}
{"prompt":"Crea un nuevo nivel 'Nivel 7' a una elevación de 7 metros.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(7, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Nivel 7\";\n}"}
{"prompt":"Generate a global length parameter named 'Separation' with a value of 1.2m.","completion":"string paramName = \"Separation\";\nGlobalParameter gp = GlobalParameter.Create(doc, paramName, SpecTypeId.Length);\n\nif (gp != null)\n{\n    gp.SetValue(new DoubleParameterValue(UnitUtils.ConvertToInternalUnits(1.2, UnitTypeId.Meters)));\n}"}
{"prompt":"Link a DWG file as a reference in the active view.","completion":"string filePath = \"C:\/CAD_Files\/Base_Plan.dwg\";\nDWGImportOptions options = new DWGImportOptions();\noptions.ColorMode = ImportColorMode.Preserved;\nElementId linkedFileId;\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    doc.Link(filePath, options, activeView, out linkedFileId);\n}"}
{"prompt":"Move a selected element to position (5,5).","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select an element to move\");\n\nif (pickedRef != null)\n{\n    Element elem = doc.GetElement(pickedRef);\n    if (elem != null)\n    {\n        LocationPoint lp = elem.Location as LocationPoint;\n        if (lp != null)\n        {\n            XYZ newPosition = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), lp.Point.Z);\n            lp.Point = newPosition;\n        }\n    }\n}"}
{"prompt":"Get a list of all annotation families.","completion":"List<Family> annotationFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.CategoryType == CategoryType.Annotation).ToList();\n"}
{"prompt":"Gira un elemento seleccionado 94 grados sobre su eje Z.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un elemento para rotar\");\nElement elem = doc.GetElement(pickedRef.ElementId);\nLocationPoint lp = elem.Location as LocationPoint;\nLine axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\nElementTransformUtils.RotateElement(doc, elem.Id, axis, Math.PI \/ 94);"}
{"prompt":"Ubica una instancia de la familia 'Puerta Sencilla' en el centro de la habitación 'Despacho 97'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 97\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Puerta Sencilla\") as FamilySymbol;\nif(furnitureSymbol != null && !furnitureSymbol.IsActive) furnitureSymbol.Activate();\nif(room != null)\n{\n    LocationPoint roomCenter = room.Location as LocationPoint;\n    if(roomCenter != null && furnitureSymbol != null && room.Level != null)\n    {\n        doc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Create a 'Generic - 200mm' wall on 'Level 1' from (0,0) to (10,5).","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == \"Generic - 200mm\") as WallType;\n\nif (level != null && wallType != null)\n{\n    XYZ startPoint = new XYZ(0, 0, 0);\n    XYZ endPoint = new XYZ(10, 5, 0);\n    Line wallCurve = Line.CreateBound(startPoint, endPoint);\n    \/\/ Use a default height of 10ft as it's not specified in the prompt\n    double height = 10.0;\n    Wall.Create(doc, wallCurve, wallType.Id, level.Id, height, 0, false, false);\n}"}
{"prompt":"Rename all plan views to start with 'ARCH_'.","completion":"string prefix = \"ARCH_\";\nList<ViewPlan> planViews = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().Where(v => !v.IsTemplate).ToList();\nforeach(ViewPlan view in planViews)\n{\n    if(!view.Name.StartsWith(prefix))\n    {\n        view.Name = prefix + view.Name;\n    }\n}"}
{"prompt":"Generate a filled region with a 'Concrete' pattern.","completion":"using (Transaction t = new Transaction(doc, \"Create Filled Region\"))\n{\n    t.Start();\n    FilledRegionType regionType = new FilteredElementCollector(doc).OfClass(typeof(FilledRegionType)).Cast<FilledRegionType>().FirstOrDefault(frt => frt.Name.Contains(\"Concrete\"));\n    View activeView = doc.ActiveView;\n\n    if (regionType != null && activeView != null)\n    {\n        XYZ p1 = new XYZ(0,0,0);\n        XYZ p2 = new XYZ(5 \/ 0.3048, 0,0);\n        XYZ p3 = new XYZ(5 \/ 0.3048, 5 \/ 0.3048,0);\n        XYZ p4 = new XYZ(0, 5 \/ 0.3048,0);\n        CurveLoop profile = new CurveLoop();\n        profile.Append(Line.CreateBound(p1,p2));\n        profile.Append(Line.CreateBound(p2,p3));\n        profile.Append(Line.CreateBound(p3,p4));\n        profile.Append(Line.CreateBound(p4,p1));\n        FilledRegion.Create(doc, regionType.Id, activeView.Id, new List<CurveLoop>{profile});\n    }\n    t.Commit();\n}"}
{"prompt":"Duplica el tipo de muro 'Genérico - 150mm' y nómbralo 'Interior - 15cm Yeso'.","completion":"string originalName = \"Genérico - 150mm\";\nstring newName = \"Interior - 15cm Yeso\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif (originalType != null)\n{\n    WallType newType = originalType.Duplicate(newName) as WallType;\n}"}
{"prompt":"Crea una copia de la vista activa y nómbrala 'Copia de Trabajo'.","completion":"View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    ElementId newViewId = activeView.Duplicate(ViewDuplicateOption.Duplicate);\n    View newView = doc.GetElement(newViewId) as View;\n    if (newView != null)\n    {\n        newView.Name = \"Copia de Trabajo\";\n    }\n}"}
{"prompt":"Generate a 30cm 'Double-Wall' type and then create a wall of that type.","completion":"using (Transaction t = new Transaction(doc, \"Create Wall Type and Wall\"))\n{\n    t.Start();\n    string newTypeName = \"Double-Wall\";\n    WallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n    WallType newWallType = null;\n    if (wallTypeToDuplicate != null)\n    {\n        newWallType = wallTypeToDuplicate.Duplicate(newTypeName) as WallType;\n        if (newWallType != null)\n        {\n            CompoundStructure cs = newWallType.GetCompoundStructure();\n            if (cs != null && cs.LayerCount > 0)\n            {\n                cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), 0.3 \/ 0.3048);\n                newWallType.SetCompoundStructure(cs);\n            }\n        }\n    }\n    if (newWallType != null)\n    {\n        Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n        Line wallCurve = Line.CreateBound(XYZ.Zero, new XYZ(10 \/ 0.3048, 0, 0));\n        double height = 3 \/ 0.3048;\n        if (level != null)\n        {\n            Wall.Create(doc, wallCurve, newWallType.Id, level.Id, height, 0, false, false);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Extrae el tipo de sistema de una tubería seleccionada.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una tubería\");\n\nPipingSystemType systemType = null;\nif (pickedRef != null)\n{\n    Pipe pipe = doc.GetElement(pickedRef.ElementId) as Pipe;\n    if (pipe != null)\n    {\n        Parameter systemTypeParam = pipe.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM);\n        if (systemTypeParam != null && systemTypeParam.HasValue)\n        {\n            systemType = doc.GetElement(systemTypeParam.AsElementId()) as PipingSystemType;\n        }\n    }\n}\n"}
{"prompt":"Ajusta todas las ventanas para que tengan la altura del antepecho a 900mm.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits(900, UnitTypeId.Millimeters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Crea una vista de planta para el 'Nivel 8'.","completion":"string levelName = \"Nivel 8\";\nLevel level3 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.FloorPlan);\n\nif (level3 != null && vft != null)\n{\n    ViewPlan viewPlan = ViewPlan.Create(doc, vft.Id, level3.Id);\n}"}
{"prompt":"Define the 'Mark' parameter of all selected walls to 'W-EXT-1'.","completion":"using (Transaction t = new Transaction(doc, \"Set Wall Mark\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    ICollection<ElementId> selectedIds = localUidoc.Selection.GetElementIds();\n\n    if (selectedIds != null && selectedIds.Count > 1)\n    {\n        foreach(ElementId id in selectedIds)\n        {\n            Element elem = doc.GetElement(id);\n            if(elem is Wall)\n            {\n                Parameter p = elem.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n                if (p != null && !p.IsReadOnly)\n                {\n                    p.Set(\"W-EXT-01\");\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Coloca un rociador en las coordenadas (5,5,3).","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol sprinklerSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Sprinklers).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (level != null && sprinklerSymbol != null)\n{\n    if (!sprinklerSymbol.IsActive) sprinklerSymbol.Activate();\n    XYZ placementPoint = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters));\n    doc.Create.NewFamilyInstance(placementPoint, sprinklerSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n}"}
{"prompt":"Generate a global length parameter named 'CorridorWidth' with a value of 0.4m.","completion":"string paramName = \"CorridorWidth\";\nGlobalParameter gp = GlobalParameter.Create(doc, paramName, SpecTypeId.Length);\n\nif (gp != null)\n{\n    gp.SetValue(new DoubleParameterValue(UnitUtils.ConvertToInternalUnits(0.4, UnitTypeId.Meters)));\n}"}
{"prompt":"Get all walls on Level 1 that are structural.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nif (level1 != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level1.Id);\n    ElementCategoryFilter categoryFilter = new ElementCategoryFilter(BuiltInCategory.OST_Walls);\n    ParameterValueProvider pvp = new ParameterValueProvider(new ElementId(BuiltInParameter.WALL_STRUCTURAL_SIGNIFICANT));\n    FilterIntegerRule rule = new FilterIntegerRule(pvp, new FilterNumericEquals(), 1);\n    ElementParameterFilter structuralFilter = new ElementParameterFilter(rule);\n    LogicalAndFilter andFilter = new LogicalAndFilter(new List<ElementFilter> { levelFilter, categoryFilter, structuralFilter });\n    List<Element> structuralWalls = new FilteredElementCollector(doc).WherePasses(andFilter).ToList();\n}"}
{"prompt":"Inserta un nivel llamado 'Nivel Azotea' a 15.1 metros.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(15.1, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Nivel Azotea\";\n}"}
{"prompt":"Exporta el modelo a NWC en la carpeta @\"C:\\Users\\enriq\\OneDrive\\Escritorio\\TAD\"","completion":"string folderPath = @\"C:\\Users\\enriq\\OneDrive\\Escritorio\\TAD\";\nstring fileName = doc.Title + \".nwc\";\nNavisworksExportOptions options = new NavisworksExportOptions();\noptions.ExportScope = NavisworksExportScope.Model;\ndoc.Export(folderPath, fileName, options);"}
{"prompt":"Rotate a selected element 94 degrees around its Z-axis.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select an element to rotate\");\nElement elem = doc.GetElement(pickedRef.ElementId);\nLocationPoint lp = elem.Location as LocationPoint;\nLine axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\nElementTransformUtils.RotateElement(doc, elem.Id, axis, Math.PI \/ 94);"}
{"prompt":"Clone the 'Generic - 147mm' wall type and name it 'Interior - 13cm Plaster'.","completion":"string originalName = \"Generic - 147mm\";\nstring newName = \"Interior - 13cm Plaster\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif (originalType != null)\n{\n    WallType newType = originalType.Duplicate(newName) as WallType;\n}"}
{"prompt":"Set the 'Comments' parameter for all doors on Level 1 to 'Fire Rating - 85 min'.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\n\nif (level1 != null)\n{\n    List<FamilyInstance> doorsOnLevel1 = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsNotElementType().Cast<FamilyInstance>().Where(fi => fi.LevelId == level1.Id).ToList();\n    foreach(FamilyInstance door in doorsOnLevel1)\n    {\n        Parameter commentsParam = door.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n        if (commentsParam != null && !commentsParam.IsReadOnly) commentsParam.Set(\"Fire Rating - 85 min\");\n    }\n}"}
{"prompt":"Retrieve the MEP space associated with the room 'Office 96'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Cast<Room>().FirstOrDefault(r => r.Name == \"Office 96\");\nList<Space> spaces = new List<Space>();\n\nif (room != null)\n{\n    spaces = new FilteredElementCollector(doc).OfClass(typeof(Space)).Cast<Space>().Where(s => s.Room != null && s.Room.Id == room.Id).ToList();\n}"}
{"prompt":"Oculta todos los muros que sean más cortos de 2 metros.","completion":"double lengthThreshold = UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\nList<Wall> walls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Cast<Wall>().ToList();\nList<ElementId> shortWallIds = new List<ElementId>();\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    foreach(Wall wall in walls)\n    {\n        Parameter lengthParam = wall.get_Parameter(BuiltInParameter.CURVE_ELEM_LENGTH);\n        if(lengthParam != null && lengthParam.HasValue && lengthParam.AsDouble() < lengthThreshold)\n        {\n            shortWallIds.Add(wall.Id);\n        }\n    }\n    if (shortWallIds.Count > 0)\n    {\n        activeView.HideElements(shortWallIds);\n    }\n}"}
{"prompt":"Modifica el tipo de todos los muros seleccionados a 'Muro Exterior'.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nWallType targetWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Name == \"Muro Exterior\");\nif(targetWallType != null)\n{\n    foreach(ElementId id in selectedIds)\n    {\n        Wall wall = doc.GetElement(id) as Wall;\n        if(wall != null)\n        {\n            wall.ChangeTypeId(targetWallType.Id);\n        }\n    }\n}"}
{"prompt":"Modifica el nombre de todas las familias cargadas que contengan 'Métrica' a 'Imperial'.","completion":"List<Family> familiesToRename = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.Name.Contains(\"Métrica\")).ToList();\nforeach(Family fam in familiesToRename)\n{\n    fam.Name = fam.Name.Replace(\"Métrica\", \"Imperial\");\n}"}
{"prompt":"Crea una nueva habitación en el Nivel 1 en el punto (13, 11).","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\n\nif (level1 != null)\n{\n    UV point = new UV(13, 11);\n    Room room = doc.Create.NewRoom(level1, point);\n}"}
{"prompt":"Place an instance of the 'Office Desk' family in the center of the 'Office 106' room.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Office 106\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Office Desk\") as FamilySymbol;\nif(furnitureSymbol != null && !furnitureSymbol.IsActive) furnitureSymbol.Activate();\nif(room != null)\n{\n    LocationPoint roomCenter = room.Location as LocationPoint;\n    if(roomCenter != null && furnitureSymbol != null && room.Level != null)\n    {\n        doc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Set the 'Comments' parameter for all doors on Level 2 to 'Fire Rating - 92 min'.","completion":"string levelName = \"Level 2\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(targetLevel.Id);\n    FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WherePasses(levelFilter);\n    foreach (Element door in collector)\n    {\n        Parameter commentsParam = door.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n        if (commentsParam != null && !commentsParam.IsReadOnly) { commentsParam.Set(\"Fire Rating - 92 min\"); }\n    }\n}"}
{"prompt":"Position an instance of the 'Office Desk' family in the center of the 'Office 100' room.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Office 100\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Office Desk\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);"}
{"prompt":"Crea una vista 2D con la caja de sección activada.","completion":"string viewName = \"Vista 2D con Caja de Sección\";\nViewFamilyType vft3D = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft3D != null)\n{\n    View3D view3d = View3D.CreateIsometric(doc, vft3D.Id);\n    if (view3d != null)\n    {\n        view3d.Name = viewName;\n        view3d.IsSectionBoxActive = true;\n    }\n}"}
{"prompt":"Check if a pipe is connected at both ends.","completion":"Pipe pipe = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).FirstOrDefault() as Pipe;\nbool isFullyConnected = false;\n\nif (pipe != null)\n{\n    isFullyConnected = pipe.ConnectorManager.UnusedConnectors.IsEmpty;\n}\n"}
{"prompt":"Retrieve a list of all families and their types.","completion":"List<string> familyAndTypeNames = new List<string>();\nList<Family> families = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().ToList();\nforeach (Family fam in families)\n{\n    familyAndTypeNames.Add($\"Family: {fam.Name}\");\n    foreach (ElementId symbolId in fam.GetFamilySymbolIds())\n    {\n        FamilySymbol sym = doc.GetElement(symbolId) as FamilySymbol;\n        if (sym != null)\n        {\n            familyAndTypeNames.Add($\"\\tType: {sym.Name}\");\n        }\n    }\n}"}
{"prompt":"Obtén todos los muros de un modelo vinculado que se cruzan con una caja de delimitación.","completion":"RevitLinkInstance linkInstance = new FilteredElementCollector(doc).OfClass(typeof(RevitLinkInstance)).FirstOrDefault() as RevitLinkInstance;\nList<Element> linkedWalls = new List<Element>();\n\nif (linkInstance != null)\n{\n    Document linkDoc = linkInstance.GetLinkDocument();\n    if (linkDoc != null)\n    {\n        BoundingBoxXYZ bbox = new BoundingBoxXYZ();\n        bbox.Min = new XYZ(0,0,0);\n        bbox.Max = new XYZ(UnitUtils.ConvertToInternalUnits(50, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits(50, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters));\n        BoundingBoxIntersectsFilter filter = new BoundingBoxIntersectsFilter(new Outline(bbox.Min, bbox.Max));\n        linkedWalls = new FilteredElementCollector(linkDoc).OfClass(typeof(Wall)).WherePasses(filter).ToList();\n    }\n}\n"}
{"prompt":"Create a new room on Level 5 at point (14, 8).","completion":"string levelName = \"Level 5\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    UV point = new UV(14, 8);\n    Room newRoom = doc.Create.NewRoom(targetLevel, point);\n}"}
{"prompt":"Place an instance of the 'Office Desk' family in the center of the 'Office 99' room.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Office 99\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Office Desk\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);"}
{"prompt":"Añade un punto al Path of Travel seleccionado.","completion":"\/\/ PathOfTravel related methods like GetPath and Update are likely inaccessible in this environment.\n\/\/ The following code is a placeholder to show the intent.\n\/*\nusing (Transaction t = new Transaction(doc, \"Update Path of Travel\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference pickedRef = localUidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un Path of Travel\");\n\n    if (pickedRef != null)\n    {\n        PathOfTravel pot = doc.GetElement(pickedRef) as PathOfTravel;\n        if (pot != null)\n        {\n            IList<XYZ> points = pot.GetPath();\n            if (points != null && points.Count >= 2)\n            {\n                XYZ midPoint = (points[0] + points[1]) \/ 2;\n                points.Insert(1, midPoint); \n                pot.Update(points);\n            }\n        }\n    }\n    t.Commit();\n}\n*\/"}
{"prompt":"Create a spherical DirectShape with a 5-meter radius.","completion":"using (Transaction t = new Transaction(doc, \"Create Sphere DirectShape\"))\n{\n    t.Start();\n    double radius = 5 \/ 0.3048;\n    List<GeometryObject> solids = new List<GeometryObject>();\n    Frame frame = new Frame(XYZ.Zero, XYZ.BasisX, XYZ.BasisY, XYZ.BasisZ);\n    Arc arc = Arc.Create(frame.Origin, radius, 0, Math.PI, frame.BasisX, frame.BasisY);\n    Line line = Line.CreateBound(arc.GetEndPoint(1), arc.GetEndPoint(0));\n    CurveLoop profile = CurveLoop.Create(new List<Curve> { arc, line });\n    Solid sphere = GeometryCreationUtilities.CreateRevolvedGeometry(frame, new List<CurveLoop> { profile }, 0, 2 * Math.PI);\n    solids.Add(sphere);\n    DirectShape ds = DirectShape.CreateElement(doc, new ElementId(BuiltInCategory.OST_GenericModel));\n\n    if (ds != null)\n    {\n        ds.SetShape(solids);\n        ds.Name = \"Sphere DirectShape\";\n    }\n    t.Commit();\n}"}
{"prompt":"Find all walls taller than 3 meters.","completion":"double heightThreshold = UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\nElementId heightParamId = new ElementId(BuiltInParameter.WALL_USER_HEIGHT_PARAM);\nParameterValueProvider pvp = new ParameterValueProvider(heightParamId);\nFilterNumericRuleEvaluator evaluator = new FilterNumericGreater();\nFilterRule rule = new FilterDoubleRule(pvp, evaluator, heightThreshold, 1e-6);\nElementParameterFilter filter = new ElementParameterFilter(rule);\nList<ElementId> tallWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(filter).ToElementIds().ToList();"}
{"prompt":"Fetch the MEP space associated with the room 'Office 106'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Cast<Room>().FirstOrDefault(r => r.Name == \"Office 106\");\nList<Space> spaces = new List<Space>();\n\nif (room != null)\n{\n    spaces = new FilteredElementCollector(doc).OfClass(typeof(Space)).Cast<Space>().Where(s => s.Room != null && s.Room.Id == room.Id).ToList();\n}"}
{"prompt":"Place lighting posts every 10m along a 100m path.","completion":"FamilySymbol lightSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsElementType().FirstOrDefault(s => s.Name.Contains(\"Post\") || s.Name.Contains(\"Pole\")) as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (lightSymbol != null && level != null)\n{\n    if (!lightSymbol.IsActive)\n    {\n        lightSymbol.Activate();\n    }\n    double spacing = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\n    double pathLength = UnitUtils.ConvertToInternalUnits(100, UnitTypeId.Meters);\n    int postCount = (int)(pathLength \/ spacing);\n    for (int i = 0; i <= postCount; i++)\n    {\n        XYZ point = new XYZ(i * spacing, 0, 0);\n        doc.Create.NewFamilyInstance(point, lightSymbol, level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Extrae todas las habitaciones en el Nivel 'Losa 95'.","completion":"Level groundFloor = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Losa 95\") as Level;\nList<Element> roomsOnGround = new List<Element>();\n\nif (groundFloor != null)\n{\n    roomsOnGround = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Where(r => r.LevelId == groundFloor.Id).ToList();\n}"}
{"prompt":"Añade un punto de referencia en las coordenadas (6,7,1) dentro del editor de familias.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(6,7,1));"}
{"prompt":"Copy level 1 with a 1m offset and name it 'Mezzanine'.","completion":"string levelName = \"Mezzanine\";\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\n\nif (level1 != null)\n{\n    double newElevation = level1.ProjectElevation + UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, newElevation);\n    if (newLevel != null)\n    {\n        newLevel.Name = levelName;\n    }\n}"}
{"prompt":"Clone the 'Generic - 205mm' wall type and name it 'Interior - 15cm Plaster'.","completion":"string originalName = \"Generic - 205mm\";\nstring newName = \"Interior - 15cm Plaster\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif (originalType != null)\n{\n    WallType newType = originalType.Duplicate(newName) as WallType;\n}"}
{"prompt":"Modifica el tipo de la ventana seleccionada al tipo 'Fija 123x60'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una ventana\");\nFamilySymbol newType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name == \"Fija 123x60\");\nif (pickedRef != null && newType != null)\n{\n    FamilyInstance window = doc.GetElement(pickedRef.ElementId) as FamilyInstance;\n    if (window != null)\n    {\n        window.Symbol = newType;\n    }\n}"}
{"prompt":"Create a section view between points (0,0,0) and (10,10,0).","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.Section);\n\nif (vft != null)\n{\n    XYZ p1 = new XYZ(0,0,0);\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),0);\n    XYZ midPoint = (p1 + p2) \/ 2;\n    XYZ direction = (p2 - p1).Normalize();\n    XYZ up = XYZ.BasisZ;\n    XYZ viewdir = up.CrossProduct(direction);\n    \n    BoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\n    Transform t = Transform.Identity;\n    t.Origin = midPoint;\nt.BasisX = direction;\nt.BasisY = up;\nt.BasisZ = viewdir;\nsectionBox.Transform = t;\nsectionBox.Min = new XYZ(UnitUtils.ConvertToInternalUnits(-p1.DistanceTo(p2)\/2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(-10, UnitTypeId.Meters), 0);\nsectionBox.Max = new XYZ(UnitUtils.ConvertToInternalUnits(p1.DistanceTo(p2)\/2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(20, UnitTypeId.Meters));\n    \n    ViewSection.CreateSection(doc, vft.Id, sectionBox);\n}"}
{"prompt":"Incorpora refuerzo tipo estribo a la viga seleccionada.","completion":"\/\/ This is a complex operation that requires multiple steps and\/or user interaction and is not supported by the agent."}
{"prompt":"Exporta el modelo actual a un archivo NWC.","completion":"string folderPath = \"C:\/exports\/\";\nstring fileName = doc.Title + \".nwc\";\nNavisworksExportOptions options = new NavisworksExportOptions();\noptions.ExportScope = NavisworksExportScope.Model;\ndoc.Export(folderPath, fileName, options);"}
{"prompt":"Change the type of a selected floor to 'Concrete 15cm'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a floor\");\n\nif (pickedRef != null)\n{\n    Floor floorToChange = doc.GetElement(pickedRef) as Floor;\n    FloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name == \"Concrete 15cm\");\n    \n    if (floorToChange != null && newType != null)\n    {\n        floorToChange.ChangeTypeId(newType.Id);\n    }\n}"}
{"prompt":"Modifica el nombre de la familia de una puerta seleccionada a 'Puerta_Nueva'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una puerta\");\n\nif (pickedRef != null)\n{\n    FamilyInstance door = doc.GetElement(pickedRef.ElementId) as FamilyInstance;\n    if (door != null && door.Symbol != null)\n    {\n        Family family = door.Symbol.Family;\n        if (family != null)\n        {\n            family.Name = \"Puerta_Nueva\";\n        }\n    }\n}"}
{"prompt":"Construct a new A3 sheet and place a legend on it.","completion":"using (Transaction t = new Transaction(doc, \"Create Sheet with Legend\"))\n{\n    t.Start();\n    FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(tb => tb.Name.Contains(\"A3\"));\n    View legendView = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().FirstOrDefault(v => v.ViewType == ViewType.Legend);\n\n    if (titleBlock != null && legendView != null)\n    {\n        ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n        if (newSheet != null)\n        {\n            BoundingBoxUV sheetBox = newSheet.Outline;\n            UV centerUv = (sheetBox.Min + sheetBox.Max) \/ 2.0;\n            XYZ centerPoint = new XYZ(centerUv.U, centerUv.V, 0);\n            Viewport.Create(doc, newSheet.Id, legendView.Id, centerPoint);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Duplica el nivel 5 con un desfase de 1m y llámalo 'Mezanine'.","completion":"string levelName = \"Nivel 5\";\nLevel levelToCopy = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (levelToCopy != null)\n{\n    double offset = UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, levelToCopy.Elevation + offset);\n    newLevel.Name = \"Mezanine\";\n}"}
{"prompt":"Selecciona todos los muros del 'Nivel 1' y cambia su comentario a 'REVISAR AISLAMIENTO'.","completion":"string levelName = \"Nivel 1\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(targetLevel.Id);\n    FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(levelFilter);\n    foreach (Element wall in collector)\n    {\n        Parameter commentsParam = wall.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n        if (commentsParam != null && !commentsParam.IsReadOnly) { commentsParam.Set(\"REVISAR AISLAMIENTO\"); }\n    }\n}"}
{"prompt":"Get the total number of warnings in the project.","completion":"int totalWarnings = doc.GetWarnings().Count;\n"}
{"prompt":"Reproduce la vista de planta 'Nivel 2' y conviértela en una plantilla de vista.","completion":"using (Transaction t = new Transaction(doc, \"Create View Template\"))\n{\n    t.Start();\n    ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().FirstOrDefault(v => v.Name == \"Nivel 2\");\n    string templateName = \"Plantilla Nivel 2\";\n\n    if (viewToDuplicate != null)\n    {\n        ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n        View newView = doc.GetElement(newViewId) as View;\n        if (newView != null)\n        {\n           \/\/ In older APIs, direct conversion to a template may not be available.\n           \/\/ A common workaround is to set the IsTemplate property if available and writable, \n           \/\/ which is not the case here. This is left as a comment for conceptual understanding.\n           \/\/ newView.IsTemplate = true;\n            newView.Name = templateName;\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create a new wall type 'Generic Wall 300mm' with a thickness of 30cm.","completion":"using (Transaction t = new Transaction(doc, \"Create Wall Type\"))\n{\n    t.Start();\n    string newTypeName = \"Generic Wall 300mm\";\n    WallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\n    if (oldWallType != null)\n    {\n        WallType newWallType = oldWallType.Duplicate(newTypeName) as WallType;\n        if (newWallType != null)\n        {\n            CompoundStructure cs = newWallType.GetCompoundStructure();\n            if (cs != null && cs.LayerCount > 0)\n            {\n                int coreLayerIndex = cs.GetFirstCoreLayerIndex();\n                if (coreLayerIndex >= 0 && coreLayerIndex < cs.LayerCount)\n                {\n                    cs.SetLayerWidth(coreLayerIndex, 300 \/ 304.8);\n                    newWallType.SetCompoundStructure(cs);\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Build a 'Roof Terrace' level at 14m.","completion":"string levelName = \"Roof Terrace\";\ndouble elev = UnitUtils.ConvertToInternalUnits(14, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elev);\nnewLevel.Name = levelName;\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Generate a report with the area of all rooms in the project.","completion":"List<Room> rooms = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>().ToList();"}
{"prompt":"Aplica aislamiento térmico de 26mm a todas las tuberías de agua caliente.","completion":"PipeInsulationType insulationType = new FilteredElementCollector(doc).OfClass(typeof(PipeInsulationType)).FirstOrDefault() as PipeInsulationType;\nPipingSystemType hotWaterSystem = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).Cast<PipingSystemType>().FirstOrDefault(s => s.Name.Contains(\"Hot Water\") || s.Name.Contains(\"Agua Caliente\"));\n\nif (insulationType != null && hotWaterSystem != null)\n{\n    List<Pipe> pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast<Pipe>().Where(p => \n    {\n        Parameter systemParam = p.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM);\n        return systemParam != null && systemParam.HasValue && systemParam.AsElementId() == hotWaterSystem.Id;\n    }).ToList();\n    \n    foreach(Pipe p in pipes)\n    {\n        PipeInsulation.Create(doc, p.Id, insulationType.Id, UnitUtils.ConvertToInternalUnits(26, UnitTypeId.Millimeters));\n    }\n}"}
{"prompt":"Get the total length of all walls in the project.","completion":"double totalLength = 0.0;\nList<Wall> walls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Cast<Wall>().ToList();\nforeach (Wall wall in walls)\n{\n    Parameter lengthParam = wall.get_Parameter(BuiltInParameter.CURVE_ELEM_LENGTH);\n    if (lengthParam != null && lengthParam.HasValue)\n    {\n        totalLength += lengthParam.AsDouble();\n    }\n}"}
{"prompt":"Coloca una etiqueta de material en una cara de muro.","completion":"using (Transaction t = new Transaction(doc, \"Place Material Tag\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference faceRef = localUidoc.Selection.PickObject(ObjectType.Face, \"Selecciona una cara para etiquetar\");\n    XYZ point = localUidoc.Selection.PickPoint(\"Selecciona la ubicación de la etiqueta\");\n    View activeView = doc.ActiveView;\n\n    if (faceRef != null && point != null && activeView != null)\n    {\n        IndependentTag.Create(doc, activeView.Id, faceRef, true, TagMode.TM_ADDBY_MATERIAL, TagOrientation.Horizontal, point);\n    }\n    t.Commit();\n}"}
{"prompt":"Generate a new 25cm wall type named 'Structural Wall 25cm'.","completion":"using (Transaction t = new Transaction(doc, \"Create Wall Type\"))\n{\n    t.Start();\n    string newTypeName = \"Structural Wall 25cm\";\n    WallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\n    if (wallTypeToDuplicate != null)\n    {\n        WallType newWallType = wallTypeToDuplicate.Duplicate(newTypeName) as WallType;\n        if (newWallType != null)\n        {\n            CompoundStructure cs = newWallType.GetCompoundStructure();\n            int coreLayerIndex = cs.GetFirstCoreLayerIndex();\n            cs.SetLayerFunction(coreLayerIndex, MaterialFunctionAssignment.Structure);\n            cs.SetLayerWidth(coreLayerIndex, 0.25 \/ 0.3048);\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Selecciona todos los muros del 'Nivel 1' y cambia su comentario a 'REVISAR AISLAMIENTO'.","completion":"string levelName = \"Nivel 1\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(targetLevel.Id);\n    FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(levelFilter);\n    foreach (Element wall in collector)\n    {\n        Parameter commentsParam = wall.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n        if (commentsParam != null && !commentsParam.IsReadOnly) { commentsParam.Set(\"REVISAR AISLAMIENTO\"); }\n    }\n}"}
{"prompt":"Crea una vista de plano de plafón reflejado para el Nivel 1.","completion":"string levelName = \"Nivel 1\";\nstring viewName = \"Plano de Plafón Nivel 1\";\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.CeilingPlan);\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\n\nif (vft != null && level1 != null)\n{\n    ViewPlan rcp = ViewPlan.Create(doc, vft.Id, level1.Id);\n    if (rcp != null)\n    {\n        rcp.Name = viewName;\n    }\n}"}
{"prompt":"Add a tag to the column closest to the origin.","completion":"using (Transaction t = new Transaction(doc, \"Tag Column\"))\n{\n    t.Start();\n    View activeView = doc.ActiveView;\n    FamilyInstance column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().Cast<FamilyInstance>().OrderBy(c => {\n        LocationPoint lp = c.Location as LocationPoint;\n        return lp != null ? lp.Point.DistanceTo(XYZ.Zero) : double.MaxValue;\n    }).FirstOrDefault();\n\n    if (activeView != null && column != null)\n    {\n        LocationPoint loc = column.Location as LocationPoint;\n        if (loc != null)\n        {\n            IndependentTag.Create(doc, activeView.Id, new Reference(column), true, TagMode.TM_ADDBY_CATEGORY, TagOrientation.Horizontal, loc.Point);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea un nuevo tipo de muro 'Muro Genérico 340mm' con un grosor de 34cm.","completion":"string newTypeName = \"Muro Genérico 340mm\";\nWallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif (oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(newTypeName) as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(34, UnitTypeId.Centimeters));\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n}"}
{"prompt":"Modela un barandal en una escalera existente.","completion":"RailingType railingType = new FilteredElementCollector(doc).OfClass(typeof(RailingType)).FirstOrDefault() as RailingType;\nStairs stairs = new FilteredElementCollector(doc).OfClass(typeof(Stairs)).FirstOrDefault() as Stairs;\n\nif (railingType != null && stairs != null)\n{\n    Railing.Create(doc, stairs.Id, railingType.Id, RailingPlacementPosition.Treads);\n}"}
{"prompt":"Construct a new Level named 'Level 1' at an elevation of 17 meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(17, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\nif (newLevel != null)\n{\n    try { newLevel.Name = \"Level 1\"; } catch {}\n}"}
{"prompt":"Dimension the length of a user-selected wall.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference wallRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a wall to dimension\");\n\nif (wallRef != null)\n{\n    Wall wall = doc.GetElement(wallRef) as Wall;\n    View activeView = doc.ActiveView;\n\n    if (wall != null && activeView != null)\n    {\n        LocationCurve locCurve = wall.Location as LocationCurve;\n        if (locCurve != null)\n        {\n            Line wallLine = locCurve.Curve as Line;\n            if (wallLine != null)\n            {\n                ReferenceArray refs = new ReferenceArray();\n                refs.Append(wallLine.GetEndPointReference(0));\n                refs.Append(wallLine.GetEndPointReference(1));\n                XYZ pt1 = wallLine.GetEndPoint(0).Add(XYZ.BasisZ * 2);\n                XYZ pt2 = wallLine.GetEndPoint(1).Add(XYZ.BasisZ * 2);\n                Line dimLine = Line.CreateBound(pt1, pt2);\n                doc.Create.NewDimension(activeView, dimLine, refs);\n            }\n        }\n    }\n}"}
{"prompt":"Create a detail group with the selected detail items.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds != null && selectedIds.Count > 0)\n{\n    List<ElementId> detailIds = new List<ElementId>();\n    foreach(ElementId id in selectedIds)\n    {\n        Element elem = doc.GetElement(id);\n        if (elem != null && elem.Category != null && elem.Category.CategoryType == CategoryType.Annotation)\n        {\n            detailIds.Add(id);\n        }\n    }\n\n    if (detailIds.Count > 0)\n    {\n        Group group = doc.Create.NewGroup(detailIds);\n        if (group != null)\n        {\n            group.Name = \"Typical Detail 1\";\n        }\n    }\n}"}
{"prompt":"Create a 'Concrete-Rectangular 30x60' column at each grid intersection.","completion":"using (Transaction t = new Transaction(doc, \"Create Columns at Grids\"))\n{\n    t.Start();\n    FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(s => s.Name == \"Concrete-Rectangular 30x60\");\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderBy(l => l.Elevation).FirstOrDefault();\n    List<Grid> grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().ToList();\n    if (columnSymbol != null && level != null)\n    {\n        if (!columnSymbol.IsActive) columnSymbol.Activate();\n        for (int i = 0; i < grids.Count; i++)\n        {\n            for (int j = i + 1; j < grids.Count; j++)\n            {\n                IntersectionResultArray results;\n                if(grids[i].Curve.Intersect(grids[j].Curve, out results) == SetComparisonResult.Overlap)\n                {\n                    if (results != null && !results.IsEmpty)\n                    {\n                        foreach (IntersectionResult ir in results)\n                        {\n                            doc.Create.NewFamilyInstance(ir.XYZPoint, columnSymbol, level, StructuralType.Column);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Ubica una instancia de la familia 'Mesa de Oficina' en el centro de la habitación 'Despacho 101'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 101\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Mesa de Oficina\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);"}
{"prompt":"Selecciona todos los muros con una resistencia al fuego de 94 minutos.","completion":"ElementId fireRatingParamId = new ElementId(BuiltInParameter.FIRE_RATING);\nParameterValueProvider pvp = new ParameterValueProvider(fireRatingParamId);\nFilterStringRuleEvaluator evaluator = new FilterStringEquals();\nFilterRule rule = new FilterStringRule(pvp, evaluator, \"994 min\");\nElementParameterFilter filter = new ElementParameterFilter(rule);\nICollection<ElementId> wallsToSelect = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(filter).ToElementIds();\nif (wallsToSelect.Count > 0)\n{\n    new UIDocument(doc).Selection.SetElementIds(wallsToSelect);\n}"}
{"prompt":"Rotate the given element 45 degrees about its center.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select an element to rotate\");\n\nif (pickedRef != null)\n{\n    Element elem = doc.GetElement(pickedRef.ElementId);\n    if (elem != null)\n    {\n        LocationPoint lp = elem.Location as LocationPoint;\n        if (lp != null)\n        {\n            Line axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\n            double angle = 45 * Math.PI \/ 180.0;\n            ElementTransformUtils.RotateElement(doc, elem.Id, axis, angle);\n        }\n    }\n}"}
{"prompt":"Aplica aislamiento térmico de 30mm a todas las tuberías de agua caliente.","completion":"PipeInsulationType insulationType = new FilteredElementCollector(doc).OfClass(typeof(PipeInsulationType)).FirstOrDefault() as PipeInsulationType;\nPipingSystemType hotWaterSystem = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).Cast<PipingSystemType>().FirstOrDefault(s => s.Name.Contains(\"Hot Water\") || s.Name.Contains(\"Agua Caliente\"));\n\nif (insulationType != null && hotWaterSystem != null)\n{\n    List<Pipe> pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast<Pipe>().Where(p => \n    {\n        Parameter systemParam = p.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM);\n        return systemParam != null && systemParam.HasValue && systemParam.AsElementId() == hotWaterSystem.Id;\n    }).ToList();\n    \n    foreach(Pipe p in pipes)\n    {\n        PipeInsulation.Create(doc, p.Id, insulationType.Id, UnitUtils.ConvertToInternalUnits(30, UnitTypeId.Millimeters));\n    }\n}"}
{"prompt":"Obtén los IDs de todas las vistas 3D que empiezan con 'Coord' para exportación.","completion":"List<ElementId> viewsToExport = new FilteredElementCollector(doc).OfClass(typeof(View3D)).Cast<View3D>().Where(v => v.Name.StartsWith(\"Coord\") && !v.IsTemplate).Select(v => v.Id).ToList();\n"}
{"prompt":"Set the 'Mark' parameter to 'D-01' for the selected door.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a door\");\nif (pickedRef != null)\n{\n    Element door = doc.GetElement(pickedRef.ElementId);\n    if (door != null)\n    {\n        Parameter markParam = door.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n        if (markParam != null && !markParam.IsReadOnly)\n        {\n            markParam.Set(\"D-01\");\n        }\n    }\n}"}
{"prompt":"Obtén el espacio MEP asociado a la habitación 'Oficina 105'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Cast<Room>().FirstOrDefault(r => r.Name == \"Oficina 105\");\nList<Space> spaces = new List<Space>();\n\nif (room != null)\n{\n    spaces = new FilteredElementCollector(doc).OfClass(typeof(Space)).Cast<Space>().Where(s => s.Room != null && s.Room.Id == room.Id).ToList();\n}"}
{"prompt":"Crea una nueva vista de alzado mirando al norte.","completion":"using (Transaction t = new Transaction(doc, \"Create North Elevation\"))\n{\n    t.Start();\n    ViewFamilyType elevationVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(vft => vft.ViewFamily == ViewFamily.Elevation);\n    View activeView = doc.ActiveView;\n\n    if (elevationVFT != null && activeView != null)\n    {\n        ElevationMarker marker = ElevationMarker.CreateElevationMarker(doc, elevationVFT.Id, new XYZ(0, 20 \/ 0.3048, 0), 100);\n        \n        if (marker != null)\n        {\n            View aev = marker.CreateElevation(doc, activeView.Id, 2);\n            if (aev != null)\n            {\n                aev.Name = \"Alzado Norte\";\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Clona la vista 'Nivel 7' como una vista dependiente.","completion":"ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v => v.Name == \"Nivel 7\") as ViewPlan;\n\nif (viewToDuplicate != null)\n{\n    ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n}"}
{"prompt":"Clona el nivel 6 con un desfase de 5m y llámalo 'Mezanine'.","completion":"string levelName = \"Nivel 6\";\nLevel levelToCopy = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (levelToCopy != null)\n{\n    double offset = UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, levelToCopy.Elevation + offset);\n    newLevel.Name = \"Mezanine\";\n}"}
{"prompt":"Modify a glass panel in a curtain wall to a solid panel.","completion":"using (Transaction t = new Transaction(doc, \"Change Curtain Panel\"))\n{\n    t.Start();\n    Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Cast<Wall>().FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain);\n    FamilySymbol solidPanelType = new FilteredElementCollector(doc).OfClass(typeof(FamilySymbol)).Cast<FamilySymbol>().FirstOrDefault(fs => fs.Family.FamilyCategory.Id.IntegerValue == (int)BuiltInCategory.OST_CurtainWallPanels && fs.Name.Contains(\"Solid\"));\n\n    if (curtainWall != null && solidPanelType != null)\n    {\n        CurtainGrid grid = curtainWall.CurtainGrid;\n        if (grid != null)\n        {\n            ElementId panelIdToChange = grid.GetPanelIds().FirstOrDefault();\n            if (panelIdToChange != ElementId.InvalidElementId)\n            {\n                Panel panelToChange = doc.GetElement(panelIdToChange) as Panel;\n                if (panelToChange != null) panelToChange.ChangeTypeId(solidPanelType.Id);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Construct a stair between Level 1 and Level 2","completion":"\/\/ This is a complex operation that requires multiple steps and\/or user interaction and is not supported by the agent."}
{"prompt":"Assign the sill height of all windows to 903mm.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits(903, UnitTypeId.Millimeters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Set the 'Comments' parameter for all doors on Level 1 to 'Fire Rating - 90 min'.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\n\nif (level1 != null)\n{\n    List<FamilyInstance> doorsOnLevel1 = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsNotElementType().Cast<FamilyInstance>().Where(fi => fi.LevelId == level1.Id).ToList();\n    foreach(FamilyInstance door in doorsOnLevel1)\n    {\n        Parameter commentsParam = door.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n        if (commentsParam != null && !commentsParam.IsReadOnly) commentsParam.Set(\"Fire Rating - 90 min\");\n    }\n}"}
{"prompt":"Duplicate level 1 with a 6m offset and name it 'Mezzanine'.","completion":"string levelName = \"Mezzanine\";\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\n\nif (level1 != null)\n{\n    double newElevation = level1.ProjectElevation + UnitUtils.ConvertToInternalUnits(6, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, newElevation);\n    if (newLevel != null)\n    {\n        newLevel.Name = levelName;\n    }\n}"}
{"prompt":"Crea una superficie topográfica a partir de una lista de 4 puntos.","completion":"IList<XYZ> points = new List<XYZ>\n{\n    new XYZ(0, 0, 0),\n    new XYZ(10, 0, 1),\n    new XYZ(0, 10, 2),\n    new XYZ(10, 10, 1)\n};\nElementId toposolidTypeId = new FilteredElementCollector(doc).OfClass(typeof(ToposolidType)).FirstElementId();\nif(toposolidTypeId != null && toposolidTypeId != ElementId.InvalidElementId)\n{\n    Toposolid.Create(doc, points, toposolidTypeId, ElementId.InvalidElementId);\n}"}
{"prompt":"Añade una etiqueta a la columna más cercana al origen.","completion":"using (Transaction t = new Transaction(doc, \"Tag Column\"))\n{\n    t.Start();\n    View activeView = doc.ActiveView;\n    FamilyInstance column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().Cast<FamilyInstance>().OrderBy(c => {\n        LocationPoint lp = c.Location as LocationPoint;\n        return lp != null ? lp.Point.DistanceTo(XYZ.Zero) : double.MaxValue;\n    }).FirstOrDefault();\n\n    if (activeView != null && column != null)\n    {\n        LocationPoint loc = column.Location as LocationPoint;\n        if (loc != null)\n        {\n            IndependentTag.Create(doc, activeView.Id, new Reference(column), true, TagMode.TM_ADDBY_CATEGORY, TagOrientation.Horizontal, loc.Point);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea un nuevo tipo de muro de 21cm llamado 'Interiores'.","completion":"string newTypeName = \"Interiores\";\nWallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif (oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(newTypeName) as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(21, UnitTypeId.Centimeters));\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n}"}
{"prompt":"Crea un nuevo tipo de muro de 24cm llamado 'Estructura'.","completion":"string newTypeName = \"Estructura\";\nWallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(newTypeName) as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(24, UnitTypeId.Centimeters));\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n}"}
{"prompt":"Ajusta la región de recorte de la vista a un rectángulo de (0,0) a (20,20).","completion":"using (Transaction t = new Transaction(doc, \"Adjust Crop Region\"))\n{\n    t.Start();\n    View view = doc.ActiveView;\n\n    if (view != null && view.CropBoxActive)\n    {\n        BoundingBoxXYZ cropBox = view.CropBox;\n        if (cropBox != null)\n        {\n            XYZ minPoint = new XYZ(0, 0, cropBox.Min.Z);\n            XYZ maxPoint = new XYZ(20 \/ 0.3048, 20 \/ 0.3048, cropBox.Max.Z);\n            cropBox.Min = minPoint;\n            cropBox.Max = maxPoint;\n            view.CropBox = cropBox;\n            view.CropBoxVisible = true;\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Une la geometría de una columna y un suelo que se cruzan.","completion":"Element column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().FirstOrDefault();\nElement floor = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault();\nif (column != null && floor != null)\n{\n    JoinGeometryUtils.JoinGeometry(doc, column, floor);\n}"}
{"prompt":"Construct a view filter to hide demolished walls.","completion":"using (Transaction t = new Transaction(doc, \"Create Demolition Filter\"))\n{\n    t.Start();\n    Phase demolishedPhase = new FilteredElementCollector(doc).OfClass(typeof(Phase)).Cast<Phase>().FirstOrDefault(p => p.Name.Contains(\"Demolished\") || p.Name.Contains(\"Demolición\"));\n    View activeView = doc.ActiveView;\n\n    if (demolishedPhase != null && activeView != null)\n    {\n        ElementId paramId = new ElementId(BuiltInParameter.PHASE_DEMOLISHED);\n        FilterRule rule = ParameterFilterRuleFactory.CreateEqualsRule(paramId, demolishedPhase.Id);\n        ElementFilter filter = new ElementParameterFilter(rule);\n        ICollection<ElementId> categories = new List<ElementId>{ new ElementId(BuiltInCategory.OST_Walls) };\n        ParameterFilterElement pfe = ParameterFilterElement.Create(doc, \"Demolition Filter\", categories, filter);\n        \n        if (pfe != null)\n        {\n            activeView.AddFilter(pfe.Id);\n            activeView.SetFilterVisibility(pfe.Id, false);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Actualiza el tipo de una losa seleccionada a 'Concreto 12cm'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una losa\");\n\nif (pickedRef != null)\n{\n    Floor floorToChange = doc.GetElement(pickedRef) as Floor;\n    FloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name == \"Concreto 12cm\");\n    \n    if (floorToChange != null && newType != null)\n    {\n        floorToChange.ChangeTypeId(newType.Id);\n    }\n}"}
{"prompt":"Construct a new Level named 'Level 3' at an elevation of 8 meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Level 3\";\n}"}
{"prompt":"Ajusta todas las ventanas para que la altura del antepecho sea 1 metro.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Generate 10 architectural worksets.","completion":"List<string> worksetNames = new List<string> { \"TAD_ARQ_WALLS\", \"TAD_ARQ_FINISHES\", \"TAD_ARQ_CEILINGS\", \"TAD_ARQ_FLOORS\", \"TAD_ARQ_RAILINGS\", \"TAD_ARQ_WINDOWS\", \"TAD_ARQ_CARPENTRY\", \"TAD_ARQ_FURNITURE\", \"TAD_ARQ_PLUMBING\", \"TAD_ARQ_EXTERIOR\" };\nforeach(string name in worksetNames)\n{\n    Workset.Create(doc, name);\n}"}
{"prompt":"Position a text note with 'Review' in the current view.","completion":"View activeView = doc.ActiveView;\nElementId defaultTypeId = doc.GetDefaultElementTypeId(ElementTypeGroup.TextNoteType);\nif (activeView != null && defaultTypeId != ElementId.InvalidElementId)\n{\n    XYZ position = new XYZ(5, 5, 0);\n    TextNote.Create(doc, activeView.Id, position, \"Review\", defaultTypeId);\n}"}
{"prompt":"Clona el tipo de muro 'Genérico - 149mm' y nómbralo 'Interior - 12cm Yeso'.","completion":"string originalName = \"Genérico - 149mm\";\nstring newName = \"Interior - 12cm Yeso\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif(originalType!=null)\n    originalType.Duplicate(newName);"}
{"prompt":"Genera ocho ejes horizontales con una separación de 10m.","completion":"double separation = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\nfor(int i = 0; i < 8; i++)\n{\n    Line line = Line.CreateBound(new XYZ(0, i * separation, 0), new XYZ(50, i * separation, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Generate an axonometric 3D view oriented to the Northwest.","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft != null)\n{\n    View3D view3d = View3D.CreateIsometric(doc, vft.Id);\n    if (view3d != null)\n    {\n        XYZ eye = new XYZ(-1, 1, 1);\n        XYZ up = new XYZ(0, 0, 1);\n        XYZ forward = new XYZ(1, -1, -1);\n        view3d.SetOrientation(new ViewOrientation3D(eye, up, forward));\n        view3d.Name = \"3D View Northwest\";\n    }\n}"}
{"prompt":"Build a stair between Level 5 and Level 1","completion":"\/\/ This is a complex operation that requires multiple steps and\/or user interaction and is not supported by the agent."}
{"prompt":"Modify the type of a selected floor to 'Concrete 12cm'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a floor\");\n\nif (pickedRef != null)\n{\n    Floor floorToChange = doc.GetElement(pickedRef) as Floor;\n    FloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name == \"Concrete 12cm\");\n    \n    if (floorToChange != null && newType != null)\n    {\n        floorToChange.ChangeTypeId(newType.Id);\n    }\n}"}
{"prompt":"Coloca postes de iluminación cada 10m en un camino de 100m.","completion":"FamilySymbol lightSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsElementType().FirstOrDefault(s => s.Name.Contains(\"Post\") || s.Name.Contains(\"Pole\")) as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (lightSymbol != null && level != null)\n{\n    if(!lightSymbol.IsActive) lightSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\n    for(int i = 0; i <= 10; i++)\n    {\n        XYZ point = new XYZ(i * spacing, 0, 0);\n        doc.Create.NewFamilyInstance(point, lightSymbol, level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Encuentra un muro buscando el valor 'W-01' en su parámetro de Marca.","completion":"string markValue = \"W-01\";\nElementId markParamId = new ElementId(BuiltInParameter.ALL_MODEL_MARK);\nParameterValueProvider pvp = new ParameterValueProvider(markParamId);\nFilterStringRuleEvaluator evaluator = new FilterStringEquals();\nFilterRule rule = new FilterStringRule(pvp, evaluator, markValue);\nElementFilter filter = new ElementParameterFilter(rule);\nWall wall = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().WherePasses(filter).FirstOrDefault() as Wall;"}
{"prompt":"Crea una nueva habitación en el Nivel 1 en el punto (12, 5).","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\n\nif (level1 != null)\n{\n    UV point = new UV(12, 5);\n    Room room = doc.Create.NewRoom(level1, point);\n}"}
{"prompt":"Find all doors on Level 2 that belong to the 'Single-Flush' family.","completion":"Level level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 2\");\nList<Element> doors = new List<Element>();\n\nif (level2 != null)\n{\n    ElementCategoryFilter catFilter = new ElementCategoryFilter(BuiltInCategory.OST_Doors);\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level2.Id);\n    FilterableValueProvider provider = new ParameterValueProvider(new ElementId(BuiltInParameter.ELEM_FAMILY_PARAM));\n    FilterStringRuleEvaluator evaluator = new FilterStringEquals();\n    FilterRule famNameRule = new FilterStringRule(provider, evaluator, \"Single-Flush\");\n    ElementParameterFilter famFilter = new ElementParameterFilter(famNameRule);\n    LogicalAndFilter andFilter = new LogicalAndFilter(new List<ElementFilter> { catFilter, levelFilter, famFilter });\n    doors = new FilteredElementCollector(doc).WherePasses(andFilter).ToList();\n}"}
{"prompt":"Reproduce el tipo de muro 'Genérico - 149mm' y nómbralo 'Interior - 16cm Yeso'.","completion":"string originalName = \"Genérico - 149mm\";\nstring newName = \"Interior - 16cm Yeso\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif (originalType != null)\n{\n    WallType newType = originalType.Duplicate(newName) as WallType;\n}"}
{"prompt":"Encuentra todos los muros que no están asociados a ningún nivel.","completion":"ElementFilter unassociatedFilter = new ElementLevelFilter(ElementId.InvalidElementId);\nList<Element> unassignedWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(unassociatedFilter).ToList();"}
{"prompt":"Inserta un terminal de aire en el extremo de un conducto.","completion":"Duct duct = new FilteredElementCollector(doc).OfClass(typeof(Duct)).FirstOrDefault() as Duct;\nFamilySymbol terminalSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_DuctTerminal).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (duct != null && terminalSymbol != null)\n{\n    if(!terminalSymbol.IsActive) terminalSymbol.Activate();\n    LocationCurve locCurve = duct.Location as LocationCurve;\n    if (locCurve != null)\n    {\n        Connector endConnector = duct.ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault(c => c.Origin.IsAlmostEqualTo(locCurve.Curve.GetEndPoint(1)));\n        if (endConnector != null)\n        {\n            doc.Create.NewFamilyInstance(endConnector.Origin, terminalSymbol, duct, StructuralType.NonStructural);\n        }\n    }\n}"}
{"prompt":"Crea un nuevo nivel 'Nivel 8' a una elevación de 16 metros.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(16, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Nivel 8\";\n}"}
{"prompt":"Genera un equipo eléctrico en X=1,Y=1.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol panelSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_ElectricalEquipment).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif(level != null && panelSymbol != null)\n{\n    if (!panelSymbol.IsActive) { panelSymbol.Activate(); }\n    XYZ point = new XYZ(1, 1, 0);\n    doc.Create.NewFamilyInstance(point, panelSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n}"}
{"prompt":"Sitúa una instancia de la familia 'Mesa de Oficina' en el centro de la habitación 'Despacho 106'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 106\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Mesa de Oficina\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);"}
{"prompt":"Find all doors on Level 2 using a combined filter.","completion":"string levelName = \"Nivel 2\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    ElementCategoryFilter categoryFilter = new ElementCategoryFilter(BuiltInCategory.OST_Doors);\n    ElementLevelFilter levelFilter = new ElementLevelFilter(targetLevel.Id);\n    LogicalAndFilter combinedFilter = new LogicalAndFilter(levelFilter, categoryFilter);\n    FilteredElementCollector collector = new FilteredElementCollector(doc).WherePasses(combinedFilter);\n    uidoc.Selection.SetElementIds(collector.ToElementIds());\n}"}
{"prompt":"Actualiza el tipo de la ventana seleccionada al tipo 'Ventana Fija 120x60'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una ventana\");\nFamilySymbol newType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name == \"Ventana Fija 120x60\");\nif (pickedRef != null && newType != null)\n{\n    FamilyInstance window = doc.GetElement(pickedRef.ElementId) as FamilyInstance;\n    if (window != null)\n    {\n        window.Symbol = newType;\n    }\n}"}
{"prompt":"Establece el parámetro 'Marca' de todos los muros seleccionados a 'M-EXT-01'.","completion":"using (Transaction t = new Transaction(doc, \"Set Wall Mark\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    ICollection<ElementId> selectedIds = localUidoc.Selection.GetElementIds();\n\n    if (selectedIds != null && selectedIds.Count > 0)\n    {\n        foreach(ElementId id in selectedIds)\n        {\n            Element elem = doc.GetElement(id);\n            if(elem is Wall)\n            {\n                Parameter p = elem.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n                if (p != null && !p.IsReadOnly) \n                {\n                    p.Set(\"M-EXT-01\");\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Genera un reporte con el área de todas las habitaciones del proyecto.","completion":"List<Room> rooms = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>().ToList();"}
{"prompt":"Create a global length parameter named 'CorridorWidth' with a value of 0.9m.","completion":"string paramName = \"CorridorWidth\";\nGlobalParameter gp = GlobalParameter.Create(doc, paramName, SpecTypeId.Length);\n\nif (gp != null)\n{\n    gp.SetValue(new DoubleParameterValue(UnitUtils.ConvertToInternalUnits(0.9, UnitTypeId.Meters)));\n}"}
{"prompt":"Construct a new Level named 'Level 1' at an elevation of 9 meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(9, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Level 1\";\n}"}
{"prompt":"Replicate level 1 with a 6m offset and name it 'Mezzanine'.","completion":"string levelName = \"Mezzanine\";\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\n\nif (level1 != null)\n{\n    double newElevation = level1.ProjectElevation + UnitUtils.ConvertToInternalUnits(6, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, newElevation);\n    if (newLevel != null)\n    {\n        newLevel.Name = levelName;\n    }\n}"}
{"prompt":"Clona el nivel 2 con un desfase de 2m y llámalo 'Mezanine'.","completion":"string levelName = \"Nivel 2\";\nLevel levelToCopy = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (levelToCopy != null)\n{\n    double offset = UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, levelToCopy.Elevation + offset);\n    newLevel.Name = \"Mezanine\";\n}"}
{"prompt":"Create an extrusion roof with an arc profile.","completion":"using (Transaction t = new Transaction(doc, \"Create Extrusion Roof\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    RoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n\n    if (level != null && roofType != null && doc.ActiveView != null)\n    {\n        CurveArray profile = new CurveArray();\n        profile.Append(Arc.Create(new XYZ(-10,0,0), new XYZ(10,0,0), new XYZ(0,5,0)));\n        Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisY, XYZ.Zero);\n        ReferencePlane refPlane = doc.Create.NewReferencePlane(plane.Origin, plane.Origin + XYZ.BasisX, plane.Normal, doc.ActiveView);\n        if(refPlane != null)\n            doc.Create.NewExtrusionRoof(profile, refPlane, level, roofType, 0, 20);\n    }\n    t.Commit();\n}"}
{"prompt":"¿Cuántos metros cúbicos de cielorraso 'GWB on Metal Stud' hay?","completion":"CeilingType ceilingType = new FilteredElementCollector(doc).OfClass(typeof(CeilingType)).FirstOrDefault(ct => ct.Name == \"GWB on Metal Stud\") as CeilingType;\ndouble totalVolume = 0.0;\n\nif (ceilingType != null)\n{\n    FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Ceilings).WhereElementIsNotElementType();\n    IList<Ceiling> ceilings = collector.Cast<Ceiling>().Where(c => c.GetTypeId().Equals(ceilingType.Id)).ToList();\n\n    foreach (Ceiling ceiling in ceilings)\n    {\n        Parameter volumeParam = ceiling.get_Parameter(BuiltInParameter.HOST_VOLUME_COMPUTED);\n        if (volumeParam != null) totalVolume += volumeParam.AsDouble();\n    }\n}\ndouble totalVolumeM3 = UnitUtils.ConvertFromInternalUnits(totalVolume, UnitTypeId.CubicMeters);"}
{"prompt":"Create 5 worksets for engineering disciplines.","completion":"List<string> worksetNames = new List<string> { \"MEP_HVAC\", \"MEP_Plumbing\", \"MEP_Electrical\", \"STRUCT_Framing\", \"STRUCT_Foundations\" };\nforeach(string name in worksetNames)\n{\n    Workset newWorkset = Workset.Create(doc, name);\n}"}
{"prompt":"Configure the sill height of all windows to 1 meter.","completion":"using (Transaction t = new Transaction(doc, \"Set Sill Height\"))\n{\n    t.Start();\n    double sillHeight = 1 \/ 0.3048;\n    List<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\n    foreach(FamilyInstance window in windows)\n    {\n        Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n        if (sillHeightParam != null && !sillHeightParam.IsReadOnly)\n        {\n            sillHeightParam.Set(sillHeight);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Copia la vista 'Losa 99' como una vista dependiente.","completion":"ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v => v.Name == \"Losa 99\") as ViewPlan;\n\nif (viewToDuplicate != null)\n{\n    ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n}"}
{"prompt":"Assign the 'Mark' parameter of all selected walls to 'W-EXT-2'.","completion":"using (Transaction t = new Transaction(doc, \"Set Wall Mark\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    ICollection<ElementId> selectedIds = localUidoc.Selection.GetElementIds();\n\n    if (selectedIds != null && selectedIds.Count > 2)\n    {\n        foreach(ElementId id in selectedIds)\n        {\n            Element elem = doc.GetElement(id);\n            if(elem is Wall)\n            {\n                Parameter markParam = elem.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n                if (markParam != null && !markParam.IsReadOnly) markParam.Set(\"W-EXT-01\");\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Ajusta todas las ventanas para que tengan la altura del antepecho a 903mm.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits(903, UnitTypeId.Millimeters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Display a dialog box with 'Yes', 'No', and 'Cancel' options.","completion":""}
{"prompt":"Inserta un punto de referencia en las coordenadas (1,6,1) dentro del editor de familias.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(1,6,1));"}
{"prompt":"Assign the sill height of all windows to 3 meter.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Aplica la plantilla de vista 'Plano de Fontanería' a todas las vistas de planta que contengan 'Fontanería' en su nombre.","completion":"View viewTemplate = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().FirstOrDefault(v => v.IsTemplate && v.Name == \"Plano de Fontanería\");\nif (viewTemplate != null)\n{\n    List<ViewPlan> planViews = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().Where(v => !v.IsTemplate && v.Name.Contains(\"Fontanería\")).ToList();\n    foreach (ViewPlan view in planViews)\n    {\n        view.ViewTemplateId = viewTemplate.Id;\n    }\n}"}
{"prompt":"Extrae todas las habitaciones en el Nivel 'Planta Baja'.","completion":"Level groundFloor = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Planta Baja\") as Level;\nList<Element> roomsOnGround = new List<Element>();\n\nif (groundFloor != null)\n{\n    roomsOnGround = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Where(r => r.LevelId == groundFloor.Id).ToList();\n}"}
{"prompt":"Crea un nuevo nivel 'Nivel 1' a una elevación de 15 metros.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(15, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\nif (newLevel != null)\n{\n    try { newLevel.Name = \"Nivel 1\"; } catch {}\n}"}
{"prompt":"Crea un techo por extrusión con una pendiente del 10%.","completion":"using (Transaction t = new Transaction(doc, \"Create Extrusion Roof\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    RoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n\n    if (level != null && roofType != null)\n    {\n        CurveArray profile = new CurveArray();\n        profile.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(10 \/ 0.3048, 0, 1 \/ 0.3048)));\n        \n        Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisY, XYZ.Zero);\n        ReferencePlane refPlane = doc.Create.NewReferencePlane(plane.Origin, plane.Origin + XYZ.BasisX, plane.Normal, doc.ActiveView);\n        \n        if (refPlane != null)\n        {\n            doc.Create.NewExtrusionRoof(profile, refPlane, level, roofType, 0, 10 \/ 0.3048);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Build a new 5mm text type in green color.","completion":"using (Transaction t = new Transaction(doc, \"Create Green Text Type\"))\n{\n    t.Start();\n    string newTypeName = \"5mm Green\";\n    TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\n    TextNoteType newType = null;\n    if (defaultType != null)\n    {\n        newType = defaultType.Duplicate(newTypeName) as TextNoteType;\n        if (newType != null)\n        {\n            Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n            if (textSizeParam != null && !textSizeParam.IsReadOnly)\n            {\n                textSizeParam.Set(5 \/ 304.8);\n            }\n            Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n            if (lineColorParam != null && !lineColorParam.IsReadOnly)\n            {\n                 lineColorParam.Set(65280);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Update the type of a selected floor to 'Concrete 20cm'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a floor\");\n\nif (pickedRef != null)\n{\n    Floor floorToChange = doc.GetElement(pickedRef) as Floor;\n    FloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name == \"Concrete 20cm\");\n    \n    if (floorToChange != null && newType != null)\n    {\n        floorToChange.ChangeTypeId(newType.Id);\n    }\n}"}
{"prompt":"Get all rooms on the 'Ground Floor' Level.","completion":"Level groundFloor = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Ground Floor\") as Level;\nList<Element> roomsOnGround = new List<Element>();\n\nif (groundFloor != null)\n{\n    roomsOnGround = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Where(r => r.LevelId == groundFloor.Id).ToList();\n}"}
{"prompt":"Establece el parámetro 'Comentarios' de todas las puertas del Nivel 1 a 'Clasificación Fuego - 90 min'.","completion":"using(Transaction t = new Transaction(doc, \"Set Door Comments\"))\n{\n    t.Start();\n    Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel 1\");\n    if(level1 != null)\n    {\n        List<FamilyInstance> doorsOnLevel1 = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsNotElementType().Cast<FamilyInstance>().Where(fi => fi.LevelId.Equals(level1.Id)).ToList();\n        foreach(FamilyInstance door in doorsOnLevel1)\n        {\n            Parameter commentsParam = door.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n            if(commentsParam != null && !commentsParam.IsReadOnly)\n            {\n                commentsParam.Set(\"Clasificación Fuego - 90 min\");\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea una nota de texto con un texto, una ubicación y un elemento de destino dados.","completion":"using (Transaction t = new Transaction(doc, \"Create Text Note\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference targetRef = localUidoc.Selection.PickObject(ObjectType.Element, \"Selecciona el elemento a anotar\");\n    XYZ textLocation = localUidoc.Selection.PickPoint(\"Elige la ubicación del texto\");\n\n    View activeView = doc.ActiveView;\n    ElementId defaultTypeId = doc.GetDefaultElementTypeId(ElementTypeGroup.TextNoteType);\n\n    if (targetRef != null && textLocation != null && activeView != null && defaultTypeId != ElementId.InvalidElementId)\n    {\n        TextNoteOptions opts = new TextNoteOptions(defaultTypeId);\n        TextNote note = TextNote.Create(doc, activeView.Id, textLocation, \"REVISAR CLASH\", opts);\n        if (note != null)\n        {\n            Leader leader = note.AddLeader(TextNoteLeaderTypes.TNLT_STRAIGHT_L);\n            leader.End = targetRef.GlobalPoint;\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create a new wall type 'Generic Wall 300mm' with a thickness of 30cm.","completion":"string newTypeName = \"Generic Wall 300mm\";\nWallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif (oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(newTypeName) as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(30, UnitTypeId.Centimeters));\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n}"}
{"prompt":"Crea una losa de cimentación de 20x15 metros.","completion":"using (Transaction t = new Transaction(doc, \"Create Foundation Slab\"))\n{\n    t.Start();\n    Level foundationLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderBy(l => l.Elevation).FirstOrDefault();\n    FloorType slabType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.get_Parameter(BuiltInParameter.FLOOR_PARAM_IS_STRUCTURAL).AsInteger() == 1);\n\n    if (foundationLevel != null && slabType != null)\n    {\n        XYZ p1 = new XYZ(0,0,0);\n        XYZ p2 = new XYZ(20\/0.3048, 0, 0);\n        XYZ p3 = new XYZ(20\/0.3048, 15\/0.3048, 0);\n        XYZ p4 = new XYZ(0, 15\/0.3048, 0);\n        CurveLoop profile = new CurveLoop();\n        profile.Append(Line.CreateBound(p1,p2));\n        profile.Append(Line.CreateBound(p2,p3));\n        profile.Append(Line.CreateBound(p3,p4));\n        profile.Append(Line.CreateBound(p4,p1));\n        Floor.Create(doc, new List<CurveLoop>{profile}, slabType.Id, foundationLevel.Id);\n    }\n    t.Commit();\n}"}
{"prompt":"Ajusta el tipo de una losa seleccionada a 'Concreto 11cm'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una losa\");\n\nif (pickedRef != null)\n{\n    Floor floorToChange = doc.GetElement(pickedRef) as Floor;\n    FloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name == \"Concreto 11cm\");\n    \n    if (floorToChange != null && newType != null)\n    {\n        floorToChange.ChangeTypeId(newType.Id);\n    }\n}"}
{"prompt":"Crea una región rellena con un patrón de 'Vidrio Templado'.","completion":"using (Transaction t = new Transaction(doc, \"Create Filled Region\"))\n{\n    t.Start();\n    FilledRegionType regionType = new FilteredElementCollector(doc).OfClass(typeof(FilledRegionType)).Cast<FilledRegionType>().FirstOrDefault(frt => frt.Name.Contains(\"Concrete\") || frt.Name.Contains(\"Vidrio Templado\"));\n    View activeView = doc.ActiveView;\n\n    if (regionType != null && activeView != null)\n    {\n        XYZ p1 = new XYZ(0,0,0);\n        XYZ p2 = new XYZ(5 \/ 0.3048, 0,0);\n        XYZ p3 = new XYZ(5 \/ 0.3048, 5 \/ 0.3048,0);\n        XYZ p4 = new XYZ(0, 5 \/ 0.3048,0);\n        CurveLoop profile = new CurveLoop();\n        profile.Append(Line.CreateBound(p1,p2));\n        profile.Append(Line.CreateBound(p2,p3));\n        profile.Append(Line.CreateBound(p3,p4));\n        profile.Append(Line.CreateBound(p4,p1));\n        FilledRegion.Create(doc, regionType.Id, activeView.Id, new List<CurveLoop>{profile});\n    }\n    t.Commit();\n}"}
{"prompt":"Attach a reference point at coordinates (1,2,3) inside the family editor.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(1,2,3));"}
{"prompt":"Crea un muro del tipo 'Genérico - 200mm' en el 'Nivel 1' desde (0,0) hasta (10,5).","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == \"Genérico - 200mm\") as WallType;\n\nif (level != null && wallType != null)\n{\n    XYZ startPoint = new XYZ(0, 0, 0);\n    XYZ endPoint = new XYZ(10, 5, 0);\n    Line wallCurve = Line.CreateBound(startPoint, endPoint);\n    \/\/ Use a default height of 10ft as it's not specified in the prompt\n    double height = 10.0;\n    Wall.Create(doc, wallCurve, wallType.Id, level.Id, height, 0, false, false);\n}"}
{"prompt":"Retrieve a list of all family type names from the 'Furniture' category.","completion":"List<Element> furnitureTypes = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().ToList();\nList<string> typeNames = new List<string>();\nforeach(Element type in furnitureTypes)\n{\n    typeNames.Add(type.Name);\n}\n"}
{"prompt":"Find all walls taller than 4 meters.","completion":"double heightThreshold = UnitUtils.ConvertToInternalUnits(4, UnitTypeId.Meters);\nParameterValueProvider pvp = new ParameterValueProvider(new ElementId(BuiltInParameter.WALL_USER_HEIGHT_PARAM));\nFilterRule rule = new FilterDoubleRule(pvp, new FilterNumericGreater(), heightThreshold, 1e-6);\nList<Element> tallWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(new ElementParameterFilter(rule)).ToList();"}
{"prompt":"Crea un nivel 'Roof Terrace' a 11m.","completion":"string levelName = \"Roof Terrace\";\ndouble elev = UnitUtils.ConvertToInternalUnits(11, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elev);\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Build a 3D view oriented from the southeast.","completion":"string viewName = \"3D View Southeast\";\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft != null)\n{\n    View3D view3d = View3D.CreateIsometric(doc, vft.Id);\n    if (view3d != null)\n    {\n        XYZ eye = new XYZ(1, -1, 1);\n        XYZ up = new XYZ(0, 0, 1);\n        XYZ forward = new XYZ(-1, 1, -1);\n        view3d.SetOrientation(new ViewOrientation3D(eye, up, forward));\n        view3d.Name = viewName;\n    }\n}"}
{"prompt":"Actualiza el tipo de la ventana seleccionada al tipo 'Ventana Fija 118x60'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una ventana\");\nFamilySymbol newType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name == \"Ventana Fija 118x60\");\nif (pickedRef != null && newType != null)\n{\n    FamilyInstance window = doc.GetElement(pickedRef.ElementId) as FamilyInstance;\n    if (window != null)\n    {\n        window.Symbol = newType;\n    }\n}"}
{"prompt":"Encuentra todas las puertas del Nivel 7 que sean de la familia 'Puerta Sencilla'.","completion":"string levelName = \"Nivel 7\";\nstring familyName = \"Puerta Sencilla\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WherePasses(new ElementLevelFilter(targetLevel.Id));\n    List<ElementId> doorIds = new List<ElementId>();\n    foreach (Element door in collector)\n    {\n        FamilyInstance fi = door as FamilyInstance;\n        if (fi != null && fi.Symbol.Family.Name == familyName)\n        {\n            doorIds.Add(door.Id);\n        }\n    }\n    uidoc.Selection.SetElementIds(doorIds);\n}"}
{"prompt":"Get all subcategories from the Walls category.","completion":"Category wallCat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Walls);\nCategoryNameMap subcategories = wallCat.SubCategories;"}
{"prompt":"Crea un conducto eléctrico de 25mm de diámetro entre dos puntos.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nElementId conduitTypeId = new FilteredElementCollector(doc).OfClass(typeof(ConduitType)).FirstElementId();\nif (level != null && conduitTypeId != ElementId.InvalidElementId)\n{\n    XYZ startPoint = new XYZ(0, 0, 3);\n    XYZ endPoint = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0, 3);\n    Conduit conduit = Conduit.Create(doc, conduitTypeId, startPoint, endPoint, level.Id);\n    if (conduit != null)\n    {\n        Parameter diameterParam = conduit.get_Parameter(BuiltInParameter.RBS_CONDUIT_DIAMETER_PARAM);\n        if (diameterParam != null && !diameterParam.IsReadOnly)\n        {\n            diameterParam.Set(UnitUtils.ConvertToInternalUnits(25, UnitTypeId.Millimeters));\n        }\n    }\n}"}
{"prompt":"Añade un punto de referencia en las coordenadas (1,2,3) dentro del editor de familias.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(1,2,3));"}
{"prompt":"Fetch all walls from a linked model that intersect with a bounding box.","completion":"RevitLinkInstance linkInstance = new FilteredElementCollector(doc).OfClass(typeof(RevitLinkInstance)).FirstOrDefault() as RevitLinkInstance;\n\nif (linkInstance != null)\n{\n    Document linkDoc = linkInstance.GetLinkDocument();\n    if (linkDoc != null)\n    {\n        \/\/ Create a default 50ft x 50ft x 20ft bounding box as it's not specified in the prompt\n        BoundingBoxXYZ bbox = new BoundingBoxXYZ();\n        bbox.Min = new XYZ(0, 0, 0);\n        bbox.Max = new XYZ(50, 50, 20);\n        Outline outline = new Outline(bbox.Min, bbox.Max);\n        BoundingBoxIntersectsFilter filter = new BoundingBoxIntersectsFilter(outline);\n        List<Element> linkedWalls = new FilteredElementCollector(linkDoc).OfClass(typeof(Wall)).WherePasses(filter).ToList();\n    }\n}"}
{"prompt":"Insert the 'Level 1' view in the center of the active sheet.","completion":"ViewPlan viewToPlace = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v => v.Name == \"Level 1\") as ViewPlan;\nViewSheet activeSheet = doc.ActiveView as ViewSheet;\n\nif (viewToPlace != null && activeSheet != null)\n{\n    BoundingBoxUV sheetBox = activeSheet.Outline;\n    XYZ centerPoint = new XYZ((sheetBox.Min.U + sheetBox.Max.U) \/ 2, (sheetBox.Min.V + sheetBox.Max.V) \/ 2, 0);\n    Viewport.Create(doc, activeSheet.Id, viewToPlace.Id, centerPoint);\n}"}
{"prompt":"Moldea un plafón a 2.8 metros de altura en el Nivel 1.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\nCeilingType ceilingType = new FilteredElementCollector(doc).OfClass(typeof(CeilingType)).FirstOrDefault() as CeilingType;\nif (ceilingType != null && level != null)\n{\n    CurveLoop profile = new CurveLoop();\n    profile.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(10,0,0)));\n    profile.Append(Line.CreateBound(new XYZ(10,0,0), new XYZ(10,10,0)));\n    profile.Append(Line.CreateBound(new XYZ(10,10,0), new XYZ(0,10,0)));\n    profile.Append(Line.CreateBound(new XYZ(0,10,0), new XYZ(0,0,0)));\n    Ceiling ceiling = Ceiling.Create(doc, new List<CurveLoop>{profile}, ceilingType.Id, level.Id);\n    if (ceiling != null)\n    {\n        Parameter heightParam = ceiling.get_Parameter(BuiltInParameter.CEILING_HEIGHTABOVELEVEL_PARAM);\n        if (heightParam != null && !heightParam.IsReadOnly) heightParam.Set(UnitUtils.ConvertToInternalUnits(2.8, UnitTypeId.Meters));\n    }\n}"}
{"prompt":"Get all door families loaded in the project.","completion":"List<Family> doorFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.Id.IntegerValue == (int)BuiltInCategory.OST_Doors).ToList();"}
{"prompt":"Delete all unused wall types in the project.","completion":"ICollection<ElementId> allWallTypes = new FilteredElementCollector(doc).OfClass(typeof(WallType)).ToElementIds();\nICollection<ElementId> usedWallTypes = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Select(w => w.GetTypeId()).Distinct().ToList();\nList<ElementId> unusedWallTypes = allWallTypes.Except(usedWallTypes).ToList();\nif (unusedWallTypes.Any())\n{\n    doc.Delete(unusedWallTypes);\n}"}
{"prompt":"Append a reference point at coordinates (1,1,6) inside the family editor.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(1,1,6));"}
{"prompt":"Duplica el tipo de muro 'Genérico - 148mm' y nómbralo 'Interior - 14cm Yeso'.","completion":"string originalName = \"Genérico - 148mm\";\nstring newName = \"Interior - 14cm Yeso\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif (originalType != null)\n{\n    WallType newType = originalType.Duplicate(newName) as WallType;\n}"}
{"prompt":"Replicate the 'Generic - 194mm' wall type and name it 'Interior - 15cm Plaster'.","completion":"string originalName = \"Generic - 194mm\";\nstring newName = \"Interior - 15cm Plaster\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif(originalType!=null)\n    originalType.Duplicate(newName);"}
{"prompt":"Ubica un rociador en las coordenadas (10,10,7).","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol sprinklerSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Sprinklers).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (level != null && sprinklerSymbol != null)\n{\n    if (!sprinklerSymbol.IsActive) sprinklerSymbol.Activate();\n    XYZ placementPoint = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(7, UnitTypeId.Meters));\n    doc.Create.NewFamilyInstance(placementPoint, sprinklerSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n}"}
{"prompt":"Cambia el tipo de una losa por uno que contenga 'Concreto'.","completion":"Floor floorToChange = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault() as Floor;\nFloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name.Contains(\"Concreto\") || ft.Name.Contains(\"Concrete\"));\n\nif (floorToChange != null && newType != null)\n{\n    floorToChange.ChangeTypeId(newType.Id);\n}"}
{"prompt":"Set the sill height of all windows to 1 meter.","completion":"using (Transaction t = new Transaction(doc, \"Set Sill Height\"))\n{\n    t.Start();\n    double sillHeight = 1 \/ 0.3048;\n    List<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\n    foreach(FamilyInstance window in windows)\n    {\n        Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n        if (sillHeightParam != null && !sillHeightParam.IsReadOnly)\n        {\n            sillHeightParam.Set(sillHeight);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Construct a roof by footprint on the 'Roof Level'.","completion":"using (Transaction t = new Transaction(doc, \"Create Roof\"))\n{\n    t.Start();\n    Level roofLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Roof Level\");\n    RoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n\n    if (roofLevel != null && roofType != null)\n    {\n        CurveArray roofProfile = new CurveArray();\n        roofProfile.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(20 \/ 0.3048,0,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(20 \/ 0.3048,0,0), new XYZ(20 \/ 0.3048,30 \/ 0.3048,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(20 \/ 0.3048,30 \/ 0.3048,0), new XYZ(0,30 \/ 0.3048,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(0,30 \/ 0.3048,0), new XYZ(0,0,0)));\n        ModelCurveArray mapping = new ModelCurveArray();\n        doc.Create.NewFootPrintRoof(roofProfile, roofLevel, roofType, out mapping);\n    }\n    t.Commit();\n}"}
{"prompt":"Incorpora un punto de referencia en las coordenadas (4,1,1) dentro del editor de familias.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(4,1,1));"}
{"prompt":"Selecciona todos los muros del 'Primer Piso' y cambia su comentario a 'REVISAR AISLAMIENTO'.","completion":"Level level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Primer Piso\") as Level;\nList<Wall> wallsOnLevel2 = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Where(w => w.LevelId == level2.Id).Cast<Wall>().ToList();\nforeach(Wall wall in wallsOnLevel2)\n{\n    wall.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS).Set(\"REVISAR AISLAMIENTO\");\n}"}
{"prompt":"Set the visibility of the 'Furniture' category to false in the active view.","completion":"Category furnitureCat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Furniture);\nif (furnitureCat != null && doc.ActiveView != null)\n{\n    doc.ActiveView.SetCategoryHidden(furnitureCat.Id, true);\n}"}
{"prompt":"Find the structural column type named \"305 x 451mm\" and place it at X=1, Y=11.7","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(s => s.Name == \"305 x 451mm\");\nif (level != null && columnSymbol != null)\n{\n    if (!columnSymbol.IsActive) { columnSymbol.Activate(); }\n    XYZ point = new XYZ(1, 11.7, 0);\n    doc.Create.NewFamilyInstance(point, columnSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n}"}
{"prompt":"Reproduce el tipo de muro 'Genérico - 150mm' y nómbralo 'Interior - 15cm Yeso'.","completion":"string originalName = \"Genérico - 150mm\";\nstring newName = \"Interior - 15cm Yeso\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif(originalType!=null)\n    originalType.Duplicate(newName);"}
{"prompt":"Copy the 'Level 2' plan view and make it a view template.","completion":"using (Transaction t = new Transaction(doc, \"Create View Template\"))\n{\n    t.Start();\n    ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().FirstOrDefault(v => v.Name == \"Level 2\");\n    string templateName = \"Level 2 Template\";\n\n    if (viewToDuplicate != null)\n    {\n        ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n        View newView = doc.GetElement(newViewId) as View;\n        if (newView != null)\n        {\n           \/\/ Direct conversion to a template may not be available in older APIs.\n           \/\/ A common workaround is to set the IsTemplate property if available and writable, \n           \/\/ which is not the case here. This is left as a comment for conceptual understanding.\n           \/\/ newView.IsTemplate = true;\n            newView.Name = templateName;\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Clone level 6 with a 8m offset and name it 'Mezzanine'.","completion":"string levelName = \"Level 6\";\nLevel levelToCopy = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (levelToCopy != null)\n{\n    double offset = UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, levelToCopy.Elevation + offset);\n    newLevel.Name = \"Mezzanine\";\n}"}
{"prompt":"Append a reference point at coordinates (6,1,6) inside the family editor.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(6,1,6));"}
{"prompt":"Attach a reference point at coordinates (1,4,1) inside the family editor.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(1,4,1));"}
{"prompt":"Generate a new level 'Level 2' at an elevation of 15 meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(15, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Level 2\";\n}"}
{"prompt":"Find a wall by searching for the value 'W-01' in its Mark parameter.","completion":"string markValue = \"W-01\";\nElementId markParamId = new ElementId(BuiltInParameter.ALL_MODEL_MARK);\nParameterValueProvider pvp = new ParameterValueProvider(markParamId);\nFilterStringRuleEvaluator evaluator = new FilterStringEquals();\nFilterRule rule = new FilterStringRule(pvp, evaluator, markValue);\nElementFilter filter = new ElementParameterFilter(rule);\nWall wall = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().WherePasses(filter).FirstOrDefault() as Wall;"}
{"prompt":"Crea una nueva hoja A3 y colócale una leyenda.","completion":"using (Transaction t = new Transaction(doc, \"Create Sheet with Legend\"))\n{\n    t.Start();\n    FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(tb => tb.Name.Contains(\"A3\"));\n    View legendView = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().FirstOrDefault(v => v.ViewType == ViewType.Legend);\n\n    if (titleBlock != null && legendView != null)\n    {\n        ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n        if (newSheet != null)\n        {\n            BoundingBoxUV sheetBox = newSheet.Outline;\n            UV centerUv = (sheetBox.Min + sheetBox.Max) \/ 2.0;\n            XYZ centerPoint = new XYZ(centerUv.U, centerUv.V, 0);\n            Viewport.Create(doc, newSheet.Id, legendView.Id, centerPoint);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Configure the 'Comments' parameter for all doors on Level 3 to 'Fire Rating - 85 min'.","completion":"string levelName = \"Level 3\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(targetLevel.Id);\n    FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WherePasses(levelFilter);\n    foreach (Element door in collector)\n    {\n        Parameter commentsParam = door.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n        if (commentsParam != null && !commentsParam.IsReadOnly) { commentsParam.Set(\"Fire Rating - 85 min\"); }\n    }\n}"}
{"prompt":"Crea un DirectShape con forma de caja de 2x2x2 metros.","completion":"TessellatedShapeBuilder builder = new TessellatedShapeBuilder();\nbuilder.OpenConnectedFaceSet(true);\ndouble size = UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\nXYZ p0=new XYZ(0,0,0); XYZ p1=new XYZ(size,0,0); XYZ p2=new XYZ(size,size,0); XYZ p3=new XYZ(0,size,0);\nXYZ p4=new XYZ(0,0,size); XYZ p5=new XYZ(size,0,size); XYZ p6=new XYZ(size,size,size); XYZ p7=new XYZ(0,size,size);\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p0,p1,p2,p3}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p7,p6,p5,p4}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p0,p4,p5,p1}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p1,p5,p6,p2}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p2,p6,p7,p3}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p3,p7,p4,p0}, ElementId.InvalidElementId));\nbuilder.CloseConnectedFaceSet();\nbuilder.Build();\nTessellatedShapeBuilderResult result = builder.GetBuildResult();\nDirectShape ds = DirectShape.CreateElement(doc, new ElementId(BuiltInCategory.OST_GenericModel));\n\nif (ds != null)\n{\n    ds.SetShape(result.GetGeometricalObjects());\n    ds.Name = \"Caja DirectShape\";\n}"}
{"prompt":"Obtén una lista de todas las familias de anotación.","completion":"List<Family> annotationFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.CategoryType == CategoryType.Annotation).ToList();\n"}
{"prompt":"Aplica aislamiento térmico de 25mm a todas las tuberías de agua caliente.","completion":"PipeInsulationType insulationType = new FilteredElementCollector(doc).OfClass(typeof(PipeInsulationType)).FirstOrDefault() as PipeInsulationType;\nPipingSystemType hotWaterSystem = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).Cast<PipingSystemType>().FirstOrDefault(s => s.Name.Contains(\"Hot Water\") || s.Name.Contains(\"Agua Caliente\"));\n\nif (insulationType != null && hotWaterSystem != null)\n{\n    List<Pipe> pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast<Pipe>().Where(p => \n    {\n        Parameter systemParam = p.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM);\n        return systemParam != null && systemParam.HasValue && systemParam.AsElementId() == hotWaterSystem.Id;\n    }).ToList();\n    \n    foreach(Pipe p in pipes)\n    {\n        PipeInsulation.Create(doc, p.Id, insulationType.Id, UnitUtils.ConvertToInternalUnits(25, UnitTypeId.Millimeters));\n    }\n}"}
{"prompt":"Selecciona todos los muros del 'Nivel 5' y cambia su comentario a 'REVISAR AISLAMIENTO'.","completion":"string levelName = \"Nivel 5\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(targetLevel.Id);\n    FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(levelFilter);\n    foreach (Element wall in collector)\n    {\n        Parameter commentsParam = wall.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n        if (commentsParam != null && !commentsParam.IsReadOnly) { commentsParam.Set(\"REVISAR AISLAMIENTO\"); }\n    }\n}"}
{"prompt":"Crea una nueva hoja A1 usando el primer cajetín disponible.","completion":"FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (titleBlock != null)\n{\n    ViewSheet sheet = ViewSheet.Create(doc, titleBlock.Id);\n    if (sheet != null)\n    {\n        sheet.Name = \"A1 - Nueva Hoja\";\n        sheet.SheetNumber = \"A1\";\n    }\n}"}
{"prompt":"Label all rooms with their area.","completion":"using (Transaction t = new Transaction(doc, \"Tag All Rooms\"))\n{\n    t.Start();\n    View activeView = doc.ActiveView;\n\n    if (activeView != null)\n    {\n        List<Room> rooms = new FilteredElementCollector(doc, activeView.Id).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>().ToList();\n        foreach(Room room in rooms)\n        {\n            LocationPoint locPoint = room.Location as LocationPoint;\n            if(locPoint != null)\n            {\n                doc.Create.NewRoomTag(new LinkElementId(room.Id), new UV(locPoint.Point.X, locPoint.Point.Y), activeView.Id);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Calculate the total area of all rooms.","completion":"double totalArea = 0.0;\nList<Room> rooms = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>().ToList();\nforeach (Room room in rooms)\n{\n    totalArea += room.Area;\n}"}
{"prompt":"Attach a reference point at coordinates (7,2,1) inside the family editor.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(7,2,1));"}
{"prompt":"Fetch the total length of all walls in the project.","completion":"double totalLength = 0.0;\nList<Wall> walls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Cast<Wall>().ToList();\nforeach (Wall wall in walls)\n{\n    Parameter lengthParam = wall.get_Parameter(BuiltInParameter.CURVE_ELEM_LENGTH);\n    if (lengthParam != null && lengthParam.HasValue)\n    {\n        totalLength += lengthParam.AsDouble();\n    }\n}"}
{"prompt":"Build a new Level named 'Level 3' at an elevation of 17 meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(17, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Level 3\";\n}"}
{"prompt":"Generate a new Level named 'Level 3' at an elevation of 14 meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(14, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\nif (newLevel != null)\n{\n    try { newLevel.Name = \"Level 3\"; } catch {}\n}"}
{"prompt":"Build a new Level named 'Level 1' at an elevation of 17 meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(17, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Level 1\";\n}"}
{"prompt":"Find all doors on Level 2 that belong to the 'Single-Flush' family.","completion":"Level level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 2\");\nList<Element> doors = new List<Element>();\n\nif (level2 != null)\n{\n    ElementCategoryFilter catFilter = new ElementCategoryFilter(BuiltInCategory.OST_Doors);\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level2.Id);\n    FilterableValueProvider provider = new ParameterValueProvider(new ElementId(BuiltInParameter.ELEM_FAMILY_PARAM));\n    FilterStringRuleEvaluator evaluator = new FilterStringEquals();\n    FilterRule famNameRule = new FilterStringRule(provider, evaluator, \"Single-Flush\");\n    ElementParameterFilter famFilter = new ElementParameterFilter(famNameRule);\n    LogicalAndFilter andFilter = new LogicalAndFilter(new List<ElementFilter> { catFilter, levelFilter, famFilter });\n    doors = new FilteredElementCollector(doc).WherePasses(andFilter).ToList();\n}"}
{"prompt":"Create a section view between points (0,0,0) and (10,10,0).","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.Section);\n\nif (vft != null)\n{\n    XYZ p1 = new XYZ(0,0,0);\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),0);\n    XYZ midPoint = (p1 + p2) \/ 2;\n    XYZ direction = (p2 - p1).Normalize();\n    XYZ up = XYZ.BasisZ;\n    XYZ viewdir = up.CrossProduct(direction);\n    \n    BoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\n    Transform t = Transform.Identity;\n    t.Origin = midPoint;\nt.BasisX = direction;\nt.BasisY = up;\nt.BasisZ = viewdir;\nsectionBox.Transform = t;\nsectionBox.Min = new XYZ(UnitUtils.ConvertToInternalUnits(-p1.DistanceTo(p2)\/2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(-10, UnitTypeId.Meters), 0);\nsectionBox.Max = new XYZ(UnitUtils.ConvertToInternalUnits(p1.DistanceTo(p2)\/2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(20, UnitTypeId.Meters));\n    \n    ViewSection.CreateSection(doc, vft.Id, sectionBox);\n}"}
{"prompt":"Crea un suelo con un hueco circular en el centro.","completion":"using (Transaction t = new Transaction(doc, \"Create Floor with Hole\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    FloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\n\n    if (level != null && floorType != null)\n    {\n        XYZ p1 = new XYZ(-10 \/ 0.3048, -10 \/ 0.3048, 0);\n        XYZ p2 = new XYZ(10 \/ 0.3048, -10 \/ 0.3048, 0);\n        XYZ p3 = new XYZ(10 \/ 0.3048, 10 \/ 0.3048, 0);\n        XYZ p4 = new XYZ(-10 \/ 0.3048, 10 \/ 0.3048, 0);\n        CurveLoop outerLoop = new CurveLoop();\n        outerLoop.Append(Line.CreateBound(p1, p2));\n        outerLoop.Append(Line.CreateBound(p2, p3));\n        outerLoop.Append(Line.CreateBound(p3, p4));\n        outerLoop.Append(Line.CreateBound(p4, p1));\n\n        XYZ center = XYZ.Zero;\n        double radius = 2 \/ 0.3048;\n        CurveLoop innerLoop = new CurveLoop();\n        innerLoop.Append(Arc.Create(center - XYZ.BasisX * radius, center + XYZ.BasisX * radius, center + XYZ.BasisY * radius));\n        innerLoop.Append(Arc.Create(center + XYZ.BasisX * radius, center - XYZ.BasisX * radius, center - XYZ.BasisY * radius));\n\n        Floor.Create(doc, new List<CurveLoop> { outerLoop, innerLoop }, floorType.Id, level.Id);\n    }\n    t.Commit();\n}"}
{"prompt":"Duplica el tipo de muro 'Genérico - 147mm' y nómbralo 'Interior - 11cm Yeso'.","completion":"string originalName = \"Genérico - 147mm\";\nstring newName = \"Interior - 11cm Yeso\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif(originalType!=null)\n    originalType.Duplicate(newName);"}
{"prompt":"Copy all elements from Level 1 to Level 2.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nLevel level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 2\") as Level;\nif (level1 != null && level2 != null)\n{\n    ICollection<ElementId> elementsToCopy = new FilteredElementCollector(doc, level1.Id).WhereElementIsNotElementType().ToElementIds();\n    double elevationDiff = level2.ProjectElevation - level1.ProjectElevation;\n    XYZ translation = new XYZ(0, 0, elevationDiff);\n    if(elementsToCopy.Any())\n    {\n        ElementTransformUtils.CopyElements(doc, elementsToCopy, translation);\n    }\n}"}
{"prompt":"Place an instance of the 'Office Desk' family in the center of the 'Office 101' room.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Office 101\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Office Desk\") as FamilySymbol;\nif(furnitureSymbol != null && !furnitureSymbol.IsActive) furnitureSymbol.Activate();\nif(room != null)\n{\n    LocationPoint roomCenter = room.Location as LocationPoint;\n    if(roomCenter != null && furnitureSymbol != null && room.Level != null)\n    {\n        doc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Build a floor plan view for 'Level 6'.","completion":"string levelName = \"Level 6\";\nLevel level3 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.FloorPlan);\n\nif (level3 != null && vft != null)\n{\n    ViewPlan viewPlan = ViewPlan.Create(doc, vft.Id, level3.Id);\n}"}
{"prompt":"Generate a 'Roof Terrace' level at 10m.","completion":"string levelName = \"Roof Terrace\";\ndouble elev = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elev);\nnewLevel.Name = levelName;\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Crea un parámetro global de longitud llamado 'AnchoCorredor' con valor de 1.4m.","completion":"string paramName = \"AnchoCorredor\";\nGlobalParameter gp = GlobalParameter.Create(doc, paramName, SpecTypeId.Length);\n\nif (gp != null)\n{\n    gp.SetValue(new DoubleParameterValue(UnitUtils.ConvertToInternalUnits(1.4, UnitTypeId.Meters)));\n}"}
{"prompt":"Obtain all rooms on Level 3","completion":"string levelName = \"Level 3\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(targetLevel.Id);\n    FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WherePasses(levelFilter);\n    uidoc.Selection.SetElementIds(collector.ToElementIds());\n}"}
{"prompt":"Crea una nueva hoja A3 y colócale una leyenda.","completion":"using (Transaction t = new Transaction(doc, \"Create Sheet with Legend\"))\n{\n    t.Start();\n    FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(tb => tb.Name.Contains(\"A3\"));\n    View legendView = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().FirstOrDefault(v => v.ViewType == ViewType.Legend);\n\n    if (titleBlock != null && legendView != null)\n    {\n        ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n        if (newSheet != null)\n        {\n            BoundingBoxUV sheetBox = newSheet.Outline;\n            UV centerUv = (sheetBox.Min + sheetBox.Max) \/ 2.0;\n            XYZ centerPoint = new XYZ(centerUv.U, centerUv.V, 0);\n            Viewport.Create(doc, newSheet.Id, legendView.Id, centerPoint);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Rota un elemento seleccionado 92 grados sobre su eje Z.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un elemento para rotar\");\nElement elem = doc.GetElement(pickedRef.ElementId);\nLocationPoint lp = elem.Location as LocationPoint;\nLine axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\nElementTransformUtils.RotateElement(doc, elem.Id, axis, Math.PI \/ 92);"}
{"prompt":"Create a new level named 'Basement Floor' at an elevation of -4.5 meters.","completion":"string levelName = \"Basement Floor\";\ndouble elevationInternal = UnitUtils.ConvertToInternalUnits(-4.5, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevationInternal);\nnewLevel.Name = levelName;"}
{"prompt":"Copy level 7 with a 3m offset and name it 'Mezzanine'.","completion":"string levelName = \"Level 7\";\nLevel levelToCopy = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (levelToCopy != null)\n{\n    double offset = UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, levelToCopy.Elevation + offset);\n    newLevel.Name = \"Mezzanine\";\n}"}
{"prompt":"Estima el área total de todas las habitaciones.","completion":"double totalArea = 0.0;\nList<Room> rooms = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>().ToList();\nforeach (Room room in rooms)\n{\n    totalArea += room.Area;\n}"}
{"prompt":"Build an extrusion roof with a 10% slope.","completion":"using (Transaction t = new Transaction(doc, \"Create Extrusion Roof\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    RoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n\n    if (level != null && roofType != null)\n    {\n        CurveArray profile = new CurveArray();\n        profile.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(10 \/ 0.3048, 0, 1 \/ 0.3048)));\n        \n        Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisY, XYZ.Zero);\n        ReferencePlane refPlane = doc.Create.NewReferencePlane(plane.Origin, plane.Origin + XYZ.BasisX, plane.Normal, doc.ActiveView);\n        \n        if (refPlane != null)\n        {\n            doc.Create.NewExtrusionRoof(profile, refPlane, level, roofType, 0, 10 \/ 0.3048);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Genera un equipo eléctrico en X=1,Y=1.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol panelSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_ElectricalEquipment).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null && panelSymbol != null)\n{\n    XYZ point = new XYZ(UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters), 0);\n    doc.Create.NewFamilyInstance(point, panelSymbol, level, StructuralType.NonStructural);\n}"}
{"prompt":"Cambia el tipo de una losa por uno que contenga 'Acero'.","completion":"Floor floorToChange = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault() as Floor;\nif(floorToChange != null)\n{\n    FloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name.Contains(\"Acero\") || ft.Name.Contains(\"Concrete\"));\n    if(newType!=null)\n        floorToChange.ChangeTypeId(newType.Id);\n}"}
{"prompt":"Configure the 'Mark' parameter of all selected walls to 'W-EXT-3'.","completion":"using (Transaction t = new Transaction(doc, \"Set Wall Mark\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    ICollection<ElementId> selectedIds = localUidoc.Selection.GetElementIds();\n\n    if (selectedIds != null && selectedIds.Count > 3)\n    {\n        foreach(ElementId id in selectedIds)\n        {\n            Element elem = doc.GetElement(id);\n            if(elem is Wall)\n            {\n                Parameter markParam = elem.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n                if (markParam != null && !markParam.IsReadOnly) markParam.Set(\"W-EXT-01\");\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Construct a new A2 sheet with the number 'A-201'.","completion":"string sheetNumber = \"A-201\";\nFamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (titleBlock != null)\n{\n    ViewSheet sheet = ViewSheet.Create(doc, titleBlock.Id);\n    if (sheet != null)\n    {\n        sheet.Name = \"Construction Details\";\n        sheet.SheetNumber = sheetNumber;\n    }\n}"}
{"prompt":"Actualiza el parámetro 'Función' de todos los muros seleccionados a 'Interior'.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nif (selectedIds.Count > 0)\n{\n    foreach(ElementId id in selectedIds)\n    {\n        Wall wall = doc.GetElement(id) as Wall;\n        if (wall != null)\n        {\n            Parameter funcParam = wall.get_Parameter(BuiltInParameter.FUNCTION_PARAM);\n            if (funcParam != null && !funcParam.IsReadOnly)\n            {\n                funcParam.Set(1); \/\/ 1 corresponde a Interior\n            }\n        }\n    }\n}"}
{"prompt":"Configure the 'Mark' parameter of all selected walls to 'W-EXT-4'.","completion":"using (Transaction t = new Transaction(doc, \"Set Wall Mark\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    ICollection<ElementId> selectedIds = localUidoc.Selection.GetElementIds();\n\n    if (selectedIds != null && selectedIds.Count > 4)\n    {\n        foreach(ElementId id in selectedIds)\n        {\n            Element elem = doc.GetElement(id);\n            if(elem is Wall)\n            {\n                Parameter p = elem.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n                if (p != null && !p.IsReadOnly)\n                {\n                    p.Set(\"W-EXT-01\");\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Update a glass panel in a curtain wall to a solid panel.","completion":"using (Transaction t = new Transaction(doc, \"Change Curtain Panel\"))\n{\n    t.Start();\n    Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Cast<Wall>().FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain);\n    FamilySymbol solidPanelType = new FilteredElementCollector(doc).OfClass(typeof(FamilySymbol)).Cast<FamilySymbol>().FirstOrDefault(fs => fs.Family.FamilyCategory.Id.IntegerValue == (int)BuiltInCategory.OST_CurtainWallPanels && fs.Name.Contains(\"Solid\"));\n\n    if (curtainWall != null && solidPanelType != null)\n    {\n        CurtainGrid grid = curtainWall.CurtainGrid;\n        if (grid != null)\n        {\n            ElementId panelIdToChange = grid.GetPanelIds().FirstOrDefault();\n            if (panelIdToChange != ElementId.InvalidElementId)\n            {\n                Panel panelToChange = doc.GetElement(panelIdToChange) as Panel;\n                if (panelToChange != null) panelToChange.ChangeTypeId(solidPanelType.Id);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Establece la visibilidad de la categoría 'Mobiliario' en falso en la vista activa.","completion":"Category furnitureCat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Furniture);\nif (furnitureCat != null && doc.ActiveView != null)\n{\n    doc.ActiveView.SetCategoryHidden(furnitureCat.Id, true);\n}"}
{"prompt":"Modify the type of a floor to one that contains 'Concrete'.","completion":"Floor floorToChange = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault() as Floor;\nif(floorToChange != null)\n{\n    FloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name.Contains(\"Concrete\"));\n    if(newType!=null)\n        floorToChange.ChangeTypeId(newType.Id);\n}"}
{"prompt":"Insert a camera in the active view.","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(f => f.ViewFamily == ViewFamily.ThreeDimensional);\nif (vft != null)\n{\n    View3D cameraView = View3D.CreatePerspective(doc, vft.Id);\n    if (cameraView != null)\n    {\n        try { cameraView.Name = \"New Camera View\"; } catch {}\n        XYZ eyePos = new XYZ(10, 10, 10);\n        XYZ upDir = XYZ.BasisZ;\n        XYZ forwardDir = XYZ.Zero - eyePos;\n        ViewOrientation3D orientation = new ViewOrientation3D(eyePos, upDir, forwardDir);\n        cameraView.SetOrientation(orientation);\n    }\n}"}
{"prompt":"Reproduce el tipo de muro 'Genérico - 148mm' y nómbralo 'Interior - 20cm Yeso'.","completion":"string originalName = \"Genérico - 148mm\";\nstring newName = \"Interior - 20cm Yeso\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif(originalType!=null)\n    originalType.Duplicate(newName);"}
{"prompt":"Cambia el nombre de la familia de una puerta seleccionada a 'Puerta_Nueva'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una puerta\");\n\nif (pickedRef != null)\n{\n    FamilyInstance door = doc.GetElement(pickedRef.ElementId) as FamilyInstance;\n    if (door != null && door.Symbol != null)\n    {\n        Family family = door.Symbol.Family;\n        if (family != null)\n        {\n            family.Name = \"Puerta_Nueva\";\n        }\n    }\n}"}
{"prompt":"Create 8 horizontal grids spaced 10 meters apart.","completion":"double separation = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\nfor(int i = 0; i < 8; i++)\n{\n    Line line = Line.CreateBound(new XYZ(0, i * separation, 0), new XYZ(50, i * separation, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Construct a 30cm 'Double-Wall' type and then create a wall of that type.","completion":"using (Transaction t = new Transaction(doc, \"Create Wall Type and Wall\"))\n{\n    t.Start();\n    string newTypeName = \"Double-Wall\";\n    WallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n    WallType newWallType = null;\n    if (wallTypeToDuplicate != null)\n    {\n        newWallType = wallTypeToDuplicate.Duplicate(newTypeName) as WallType;\n        if (newWallType != null)\n        {\n            CompoundStructure cs = newWallType.GetCompoundStructure();\n            if (cs != null && cs.LayerCount > 0)\n            {\n                cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), 0.3 \/ 0.3048);\n                newWallType.SetCompoundStructure(cs);\n            }\n        }\n    }\n    if (newWallType != null)\n    {\n        Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n        Line wallCurve = Line.CreateBound(XYZ.Zero, new XYZ(10 \/ 0.3048, 0, 0));\n        double height = 3 \/ 0.3048;\n        if (level != null)\n        {\n            Wall.Create(doc, wallCurve, newWallType.Id, level.Id, height, 0, false, false);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Modifica el nombre de la vista activa a 'Plano de Fontanería'.","completion":"string newName = \"Plano de Fontanería\";\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.Name = newName;\n}"}
{"prompt":"Dimension the length of a user-selected wall.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference wallRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a wall to dimension\");\n\nif (wallRef != null)\n{\n    Wall wall = doc.GetElement(wallRef) as Wall;\n    View activeView = doc.ActiveView;\n\n    if (wall != null && activeView != null)\n    {\n        LocationCurve locCurve = wall.Location as LocationCurve;\n        if (locCurve != null)\n        {\n            Line wallLine = locCurve.Curve as Line;\n            if (wallLine != null)\n            {\n                ReferenceArray refs = new ReferenceArray();\n                refs.Append(wallLine.GetEndPointReference(0));\n                refs.Append(wallLine.GetEndPointReference(1));\n                XYZ pt1 = wallLine.GetEndPoint(0).Add(XYZ.BasisZ * 2);\n                XYZ pt2 = wallLine.GetEndPoint(1).Add(XYZ.BasisZ * 2);\n                Line dimLine = Line.CreateBound(pt1, pt2);\n                doc.Create.NewDimension(activeView, dimLine, refs);\n            }\n        }\n    }\n}"}
{"prompt":"Create a new level 'Level 3' at an elevation of 12 meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(12, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Level 3\";\n}"}
{"prompt":"Define the 'Mark' parameter of all selected walls to 'W-EXT-2'.","completion":"using (Transaction t = new Transaction(doc, \"Set Wall Mark\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    ICollection<ElementId> selectedIds = localUidoc.Selection.GetElementIds();\n\n    if (selectedIds != null && selectedIds.Count > 2)\n    {\n        foreach(ElementId id in selectedIds)\n        {\n            Element elem = doc.GetElement(id);\n            if(elem is Wall)\n            {\n                Parameter markParam = elem.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n                if (markParam != null && !markParam.IsReadOnly) markParam.Set(\"W-EXT-01\");\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Get a list of all annotation families.","completion":"List<Family> annotationFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.CategoryType == CategoryType.Annotation).ToList();\n"}
{"prompt":"Obtén una lista de todas las advertencias del proyecto.","completion":"IList<FailureMessage> warnings = doc.GetWarnings();\nList<string> warningDescriptions = warnings.Select(w => w.GetDescriptionText()).ToList();\n"}
{"prompt":"Obtén una lista de todas las vistas de planta del proyecto.","completion":"List<ViewPlan> planViews = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().Where(v => !v.IsTemplate).ToList();"}
{"prompt":"Asigna el material 'Acero' a la primera capa de un tipo de muro.","completion":"using (Transaction t = new Transaction(doc, \"Assign Material\"))\n{\n    t.Start();\n    WallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.GetCompoundStructure() != null);\n    Material steel = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m => m.Name.Contains(\"Steel\") || m.Name.Contains(\"Acero\"));\n\n    if (wallType != null && steel != null)\n    {\n        CompoundStructure cs = wallType.GetCompoundStructure();\n        if (cs != null && cs.LayerCount > 0)\n        {\n            cs.SetMaterialId(0, steel.Id);\n            wallType.SetCompoundStructure(cs);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create a SketchPlane on Level 2.","completion":"using (Transaction t = new Transaction(doc, \"Create Sketch Plane\"))\n{\n    t.Start();\n    Level level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 2\");\n\n    if (level2 != null)\n    {\n        Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisZ, new XYZ(0, 0, level2.Elevation));\n        SketchPlane skp = SketchPlane.Create(doc, plane);\n    }\n    t.Commit();\n}"}
{"prompt":"Pin the selected element so it cannot be moved.","completion":"UIDocument uidoc = new UIDocument(doc);\nElementId selectedId = uidoc.Selection.GetElementIds().FirstOrDefault();\n\nif (selectedId != ElementId.InvalidElementId)\n{\n    Element elementToPin = doc.GetElement(selectedId);\n    if (elementToPin != null)\n    {\n        elementToPin.Pinned = true;\n    }\n}"}
{"prompt":"Ajusta el tipo de la ventana seleccionada al tipo 'Fija 120x60'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una ventana\");\nFamilySymbol newType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name == \"Fija 120x60\");\nif (pickedRef != null && newType != null)\n{\n    FamilyInstance window = doc.GetElement(pickedRef.ElementId) as FamilyInstance;\n    if (window != null)\n    {\n        window.Symbol = newType;\n    }\n}"}
{"prompt":"Crea un nuevo material llamado 'Roble Oscuro' con un patrón de superficie de madera.","completion":"string materialName = \"Roble Oscuro\";\nElementId materialId = Material.Create(doc, materialName);\n\nif (materialId != ElementId.InvalidElementId)\n{\n    Material material = doc.GetElement(materialId) as Material;\n    FillPatternElement fillPattern = new FilteredElementCollector(doc).OfClass(typeof(FillPatternElement)).FirstOrDefault(p => p.Name.Contains(\"Wood\") || p.Name.Contains(\"Madera\")) as FillPatternElement;\n    \n    if (material != null && fillPattern != null)\n    {\n        material.SurfaceForegroundPatternId = fillPattern.Id;\n        material.Color = new Color(139, 69, 19);\n    }\n}"}
{"prompt":"Turn a selected element 87 degrees around its Z-axis.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select an element to rotate\");\nElement elem = doc.GetElement(pickedRef.ElementId);\nLocationPoint lp = elem.Location as LocationPoint;\nLine axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\nElementTransformUtils.RotateElement(doc, elem.Id, axis, Math.PI \/ 87);"}
{"prompt":"Crea una nueva habitación en el Nivel 1 en el punto (10, 10).","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\n\nif (level1 != null)\n{\n    UV point = new UV(10, 10);\n    Room room = doc.Create.NewRoom(level1, point);\n}"}
{"prompt":"Ajusta el tipo de la ventana seleccionada al tipo 'Ventana Fija 115x60'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una ventana\");\nFamilySymbol newType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name == \"Ventana Fija 115x60\");\nif (pickedRef != null && newType != null)\n{\n    FamilyInstance window = doc.GetElement(pickedRef.ElementId) as FamilyInstance;\n    if (window != null)\n    {\n        window.Symbol = newType;\n    }\n}"}
{"prompt":"Exporta una lista de todas las advertencias del proyecto a un archivo de texto en el escritorio.","completion":"string desktopPath = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);\nstring filePath = System.IO.Path.Combine(desktopPath, \"RevitWarnings.txt\");\nIList<FailureMessage> warnings = doc.GetWarnings();\nList<string> warningDescriptions = warnings.Select(w => w.GetDescriptionText()).ToList();\nSystem.IO.File.WriteAllLines(filePath, warningDescriptions);"}
{"prompt":"Create a 30cm 'Double-Wall' type and then create a wall of that type.","completion":"using (Transaction t = new Transaction(doc, \"Create Wall Type and Wall\"))\n{\n    t.Start();\n    string newTypeName = \"Double-Wall\";\n    WallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n    WallType newWallType = null;\n    if (wallTypeToDuplicate != null)\n    {\n        newWallType = wallTypeToDuplicate.Duplicate(newTypeName) as WallType;\n        if (newWallType != null)\n        {\n            CompoundStructure cs = newWallType.GetCompoundStructure();\n            if (cs != null && cs.LayerCount > 0)\n            {\n                cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), 0.3 \/ 0.3048);\n                newWallType.SetCompoundStructure(cs);\n            }\n        }\n    }\n    if (newWallType != null)\n    {\n        Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n        Line wallCurve = Line.CreateBound(XYZ.Zero, new XYZ(10 \/ 0.3048, 0, 0));\n        double height = 3 \/ 0.3048;\n        if (level != null)\n        {\n            Wall.Create(doc, wallCurve, newWallType.Id, level.Id, height, 0, false, false);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Inserta una instancia de la familia 'Puerta Sencilla' en el centro de la habitación 'Despacho 97'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 97\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Puerta Sencilla\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);"}
{"prompt":"Generate 10 architectural worksets.","completion":"List<string> worksetNames = new List<string> { \"TAD_ARQ_WALLS\", \"TAD_ARQ_FINISHES\", \"TAD_ARQ_CEILINGS\", \"TAD_ARQ_FLOORS\", \"TAD_ARQ_RAILINGS\", \"TAD_ARQ_WINDOWS\", \"TAD_ARQ_CARPENTRY\", \"TAD_ARQ_FURNITURE\", \"TAD_ARQ_PLUMBING\", \"TAD_ARQ_EXTERIOR\" };\nforeach(string name in worksetNames)\n{\n    Workset newWorkset = Workset.Create(doc, name);\n}"}
{"prompt":"Synchronize the local model with the central model, adding the comment 'Design update'.","completion":"if (doc.IsWorkshared)\n{\n    TransactWithCentralOptions tco = new TransactWithCentralOptions();\n    SynchronizeWithCentralOptions swcOpts = new SynchronizeWithCentralOptions();\n    swcOpts.Comment = \"Design update\";\n    swcOpts.SaveLocalAfter = true;\n    doc.SynchronizeWithCentral(tco, swcOpts);\n}"}
{"prompt":"Create a new 5mm text type in green color.","completion":"using (Transaction t = new Transaction(doc, \"Create Green Text Type\"))\n{\n    t.Start();\n    string newTypeName = \"5mm Green\";\n    TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\n    TextNoteType newType = null;\n    if (defaultType != null)\n    {\n        newType = defaultType.Duplicate(newTypeName) as TextNoteType;\n        if (newType != null)\n        {\n            Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n            if (textSizeParam != null && !textSizeParam.IsReadOnly)\n            {\n                textSizeParam.Set(5 \/ 304.8);\n            }\n            Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n            if (lineColorParam != null && !lineColorParam.IsReadOnly)\n            {\n                 lineColorParam.Set(65280);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create a new 3mm text type in blue color.","completion":"using (Transaction t = new Transaction(doc, \"Create Text Type\"))\n{\n    t.Start();\n    string newTypeName = \"3mm Blue\";\n    TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\n\n    if (defaultType != null)\n    {\n        TextNoteType newType = defaultType.Duplicate(newTypeName) as TextNoteType;\n        if (newType != null)\n        {\n            Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n            if (textSizeParam != null && !textSizeParam.IsReadOnly) textSizeParam.Set(3 \/ 304.8);\n            \n            Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n            if (lineColorParam != null && !lineColorParam.IsReadOnly) lineColorParam.Set(255);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Reproduce el nivel 1 con un desfase de 1m y llámalo 'Mezanine'.","completion":"string levelName = \"Mezanine\";\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\n\nif (level1 != null)\n{\n    double newElevation = level1.ProjectElevation + UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, newElevation);\n    if (newLevel != null)\n    {\n        newLevel.Name = levelName;\n    }\n}"}
{"prompt":"Build a structural beam between (1,1,6) and (7,1,3) on Level 2.2","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 2.2\") as Level;\nFamilySymbol beamType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (beamType != null && level != null)\n{\n    if(!beamType.IsActive) beamType.Activate();\n    XYZ start = new XYZ(1, 1, 6);\n    XYZ end = new XYZ(7, 1, 3);\n    if (start.IsAlmostEqualTo(end)) return;\n    Line beamCurve = Line.CreateBound(start, end);\n    doc.Create.NewFamilyInstance(beamCurve, beamType, level, Autodesk.Revit.DB.Structure.StructuralType.Beam);\n}"}
{"prompt":"Crea un parámetro global de longitud llamado 'AnchoCorredor' con valor de 1.3m.","completion":"string paramName = \"AnchoCorredor\";\nGlobalParameter gp = GlobalParameter.Create(doc, paramName, SpecTypeId.Length);\n\nif (gp != null)\n{\n    gp.SetValue(new DoubleParameterValue(UnitUtils.ConvertToInternalUnits(1.3, UnitTypeId.Meters)));\n}"}
{"prompt":"Extrae el espacio MEP asociado a la habitación 'Oficina 103'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Cast<Room>().FirstOrDefault(r => r.Name == \"Oficina 103\");\nList<Space> spaces = new List<Space>();\n\nif (room != null)\n{\n    spaces = new FilteredElementCollector(doc).OfClass(typeof(Space)).Cast<Space>().Where(s => s.Room != null && s.Room.Id == room.Id).ToList();\n}"}
{"prompt":"Crea un nivel 'Roof Terrace' a 16m.","completion":"string levelName = \"Roof Terrace\";\ndouble elev = UnitUtils.ConvertToInternalUnits(16, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elev);\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Recupera una lista de todas las familias y sus tipos.","completion":"List<string> familyAndTypeNames = new List<string>();\nList<Family> families = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().ToList();\nforeach (Family fam in families)\n{\n    familyAndTypeNames.Add($\"Familia: {fam.Name}\");\n    foreach (ElementId symbolId in fam.GetFamilySymbolIds())\n    {\n        FamilySymbol sym = doc.GetElement(symbolId) as FamilySymbol;\n        if (sym != null)\n        {\n            familyAndTypeNames.Add($\"\\tTipo: {sym.Name}\");\n        }\n    }\n}"}
{"prompt":"Extrae todas las habitaciones que están en el Nivel 2","completion":"string levelName = \"Nivel 2\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(targetLevel.Id);\n    FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WherePasses(levelFilter);\n    uidoc.Selection.SetElementIds(collector.ToElementIds());\n}"}
{"prompt":"Replicate the 'Generic - 172mm' wall type and name it 'Interior - 15cm Plaster'.","completion":"string originalName = \"Generic - 172mm\";\nstring newName = \"Interior - 15cm Plaster\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif(originalType!=null)\n    originalType.Duplicate(newName);"}
{"prompt":"Coloca una instancia de la familia 'Ventana Fija 123x60' en el centro de la habitación 'Despacho 106'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 123\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Ventana Fija 106x60\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);"}
{"prompt":"Inserta un punto de referencia en las coordenadas (1,5,1) dentro del editor de familias.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(1,5,1));"}
{"prompt":"Modify the type of a selected floor to 'Concrete 16cm'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a floor\");\n\nif (pickedRef != null)\n{\n    Floor floorToChange = doc.GetElement(pickedRef) as Floor;\n    FloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name == \"Concrete 16cm\");\n    \n    if (floorToChange != null && newType != null)\n    {\n        floorToChange.ChangeTypeId(newType.Id);\n    }\n}"}
{"prompt":"Crea un nuevo tipo de puerta llamado 'Puerta RF-90' y establece su resistencia al fuego a '90 min'.","completion":"using (Transaction t = new Transaction(doc, \"Create Door Type\"))\n{\n    t.Start();\n    string newTypeName = \"Puerta RF-90\";\n    FamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n    if (doorTypeToDuplicate != null)\n    {\n        FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\n        if (newDoorType != null)\n        {\n            Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n            if(fireRatingParam != null && !fireRatingParam.IsReadOnly)\n            {\n                fireRatingParam.Set(\"90 min\");\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Encuentra todos los muros que miden más de 3 metros de alto.","completion":"double heightThreshold = UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\nElementId heightParamId = new ElementId(BuiltInParameter.WALL_USER_HEIGHT_PARAM);\nParameterValueProvider pvp = new ParameterValueProvider(heightParamId);\nFilterNumericRuleEvaluator evaluator = new FilterNumericGreater();\nFilterRule rule = new FilterDoubleRule(pvp, evaluator, heightThreshold, 1e-6);\nElementParameterFilter filter = new ElementParameterFilter(rule);\nList<ElementId> tallWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(filter).ToElementIds().ToList();"}
{"prompt":"Crea una familia 'in-situ' para un mostrador de recepción personalizado usando una extrusión.","completion":""}
{"prompt":"Crea un nuevo tipo de texto de 5mm de color verde.","completion":"using (Transaction t = new Transaction(doc, \"Create Green Text Type\"))\n{\n    t.Start();\n    string newTypeName = \"5mm Verde\";\n    TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\n    TextNoteType newType = null;\n    if (defaultType != null)\n    {\n        newType = defaultType.Duplicate(newTypeName) as TextNoteType;\n        if (newType != null)\n        {\n            Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n            if (textSizeParam != null && !textSizeParam.IsReadOnly)\n            {\n                textSizeParam.Set(5 \/ 304.8);\n            }\n            Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n            if (lineColorParam != null && !lineColorParam.IsReadOnly)\n            {\n                 lineColorParam.Set(65280);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Clone the 'Generic - 145mm' wall type and name it 'Interior - 13cm Plaster'.","completion":"string originalName = \"Generic - 145mm\";\nstring newName = \"Interior - 13cm Plaster\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif (originalType != null)\n{\n    WallType newType = originalType.Duplicate(newName) as WallType;\n}"}
{"prompt":"Duplicate level 6 with a 1m offset and name it 'Mezzanine'.","completion":"string levelName = \"Level 6\";\nLevel levelToCopy = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (levelToCopy != null)\n{\n    double offset = UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, levelToCopy.Elevation + offset);\n    newLevel.Name = \"Mezzanine\";\n}"}
{"prompt":"Find all annotation families and count how many there are.","completion":"List<Family> annotationFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.CategoryType == CategoryType.Annotation).ToList();\nint count = annotationFamilies.Count;\n"}
{"prompt":"Crea una nueva hoja A1 y coloca la vista 'Planta Baja' en ella.","completion":"using (Transaction t = new Transaction(doc, \"Create Sheet\"))\n{\n    t.Start();\n    string sheetNumber = \"A-101\";\n    FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(tb => tb.Name.Contains(\"A1\"));\n    View viewToPlace = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<View>().FirstOrDefault(v => v.Name == \"Planta Baja\");\n\n    if (titleBlock != null && viewToPlace != null)\n    {\n        ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n        if (newSheet != null)\n        {\n            newSheet.Name = \"Planta Arquitectónica - Planta Baja\";\n            newSheet.SheetNumber = sheetNumber;\n            BoundingBoxUV sheetBox = newSheet.Outline;\n            UV centerUv = (sheetBox.Min + sheetBox.Max) \/ 2;\n            XYZ centerPoint = new XYZ(centerUv.U, centerUv.V, 0);\n            Viewport.Create(doc, newSheet.Id, viewToPlace.Id, centerPoint);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Acota la longitud de un muro seleccionado por el usuario.","completion":"using (Transaction t = new Transaction(doc, \"Dimension Wall\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference wallRef = localUidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un muro para acotar\");\n    if(wallRef != null)\n    {\n        Wall wall = doc.GetElement(wallRef) as Wall;\n        if(wall != null)\n        {\n            LocationCurve locCurve = wall.Location as LocationCurve;\n            Curve wallCurve = locCurve != null ? locCurve.Curve : null;\n            if(wallCurve != null && wallCurve is Line)\n            {\n                Line wallLine = wallCurve as Line;\n                ReferenceArray refs = new ReferenceArray();\n                refs.Append(wallLine.GetEndPointReference(0));\n                refs.Append(wallLine.GetEndPointReference(1));\n                XYZ pt1 = wallLine.GetEndPoint(0).Add(XYZ.BasisZ * 2);\n                XYZ pt2 = wallLine.GetEndPoint(1).Add(XYZ.BasisZ * 2);\n                Line dimLine = Line.CreateBound(pt1, pt2);\n                doc.Create.NewDimension(doc.ActiveView, dimLine, refs);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Selecciona todos los muros con una resistencia al fuego de 93 minutos.","completion":"ElementId fireRatingParamId = new ElementId(BuiltInParameter.FIRE_RATING);\nParameterValueProvider pvp = new ParameterValueProvider(fireRatingParamId);\nFilterStringRuleEvaluator evaluator = new FilterStringEquals();\nFilterRule rule = new FilterStringRule(pvp, evaluator, \"993 min\");\nElementParameterFilter filter = new ElementParameterFilter(rule);\nICollection<ElementId> wallsToSelect = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(filter).ToElementIds();\nif (wallsToSelect.Count > 0)\n{\n    new UIDocument(doc).Selection.SetElementIds(wallsToSelect);\n}"}
{"prompt":"Build a new pipe type named 'Steel Pipe' with 'Steel, Carbon' material.","completion":"string newTypeName = \"Steel Pipe\";\nPipeType pipeTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(PipeType)).FirstOrDefault() as PipeType;\nMaterial steel = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name == \"Steel, Carbon\") as Material;\n\nif (pipeTypeToDuplicate != null && steel != null)\n{\n    PipeType newType = pipeTypeToDuplicate.Duplicate(newTypeName) as PipeType;\n    if (newType != null)\n    {\n        Parameter materialParam = newType.get_Parameter(BuiltInParameter.MATERIAL_ID_PARAM);\n        if (materialParam != null && !materialParam.IsReadOnly) materialParam.Set(steel.Id);\n    }\n}"}
{"prompt":"Recupera el espacio MEP asociado a la habitación 'Oficina 99'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Cast<Room>().FirstOrDefault(r => r.Name == \"Oficina 99\");\nList<Space> spaces = new List<Space>();\n\nif (room != null)\n{\n    spaces = new FilteredElementCollector(doc).OfClass(typeof(Space)).Cast<Space>().Where(s => s.Room != null && s.Room.Id == room.Id).ToList();\n}"}
{"prompt":"Copia todos los elementos del Nivel 1 al Nivel 2.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\nLevel level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 2\") as Level;\nif (level1 != null && level2 != null)\n{\n    ICollection<ElementId> elementsToCopy = new FilteredElementCollector(doc, level1.Id).WhereElementIsNotElementType().ToElementIds();\n    double elevationDiff = level2.ProjectElevation - level1.ProjectElevation;\n    XYZ translation = new XYZ(0, 0, elevationDiff);\n    if(elementsToCopy.Any())\n    {\n        ElementTransformUtils.CopyElements(doc, elementsToCopy, translation);\n    }\n}"}
{"prompt":"Export each schedule to an individual CSV file.","completion":"string exportPath = \"C:\/RevitExports\/\";\nList<ViewSchedule> schedules = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().Where(vs => !vs.IsTemplate).ToList();\nViewScheduleExportOptions options = new ViewScheduleExportOptions();\noptions.FieldDelimiter = \",\";\nforeach(ViewSchedule schedule in schedules)\n{\n    schedule.Export(exportPath, schedule.Name + \".csv\", options);\n}"}
{"prompt":"Oculta la categoría de mobiliario en la vista activa.","completion":"View activeView = doc.ActiveView;\nCategory furnitureCategory = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Furniture);\nif (activeView != null && furnitureCategory != null && furnitureCategory.get_AllowsVisibilityControl(activeView))\n{\n    activeView.SetCategoryHidden(furnitureCategory.Id, true);\n}"}
{"prompt":"Situa una nota de texto con 'Revisar' en la vista actual.","completion":"View activeView = doc.ActiveView;\nElementId defaultTypeId = doc.GetDefaultElementTypeId(ElementTypeGroup.TextNoteType);\nif (activeView != null && defaultTypeId != ElementId.InvalidElementId)\n{\n    XYZ position = new XYZ(5, 5, 0);\n    TextNote.Create(doc, activeView.Id, position, \"Revisar\", defaultTypeId);\n}"}
{"prompt":"Crea una nueva vista de alzado mirando al norte.","completion":"using (Transaction t = new Transaction(doc, \"Create North Elevation\"))\n{\n    t.Start();\n    ViewFamilyType elevationVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(vft => vft.ViewFamily == ViewFamily.Elevation);\n    View activeView = doc.ActiveView;\n\n    if (elevationVFT != null && activeView != null)\n    {\n        ElevationMarker marker = ElevationMarker.CreateElevationMarker(doc, elevationVFT.Id, new XYZ(0, 20 \/ 0.3048, 0), 100);\n        \n        if (marker != null)\n        {\n            View aev = marker.CreateElevation(doc, activeView.Id, 2);\n            if (aev != null)\n            {\n                aev.Name = \"Alzado Norte\";\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Establece el parámetro 'Comentarios' de todas las puertas del Nivel 1 a 'Clasificación Fuego - 95 min'.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\n\nif (level1 != null)\n{\n    List<FamilyInstance> doorsOnLevel1 = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsNotElementType().Cast<FamilyInstance>().Where(fi => fi.LevelId == level1.Id).ToList();\n    foreach(FamilyInstance door in doorsOnLevel1)\n    {\n        Parameter commentsParam = door.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n        if (commentsParam != null && !commentsParam.IsReadOnly) commentsParam.Set(\"Clasificación Fuego - 95 min\");\n    }\n}"}
{"prompt":"Generate a new Level named 'Level 6' at an elevation of 11 meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(11, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\nif (newLevel != null)\n{\n    try { newLevel.Name = \"Level 6\"; } catch {}\n}"}
{"prompt":"Crea una nueva vista de alzado mirando al sur.","completion":"string viewName = \"Alzado Sur (Nuevo)\";\nViewFamilyType elevationVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(vft => vft.ViewFamily == ViewFamily.Elevation);\nElevationMarker marker = ElevationMarker.CreateElevationMarker(doc, elevationVFT.Id, new XYZ(0, -20, 0), 100);\nView aev = marker.CreateElevation(doc, doc.ActiveView.Id, 0);\naev.Name = viewName;"}
{"prompt":"Crea un nuevo tipo de muro 'Muro Genérico 285mm' con un grosor de 30cm.","completion":"string newTypeName = \"Muro Genérico 285mm\";\nWallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif (oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(newTypeName) as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(30, UnitTypeId.Centimeters));\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n}"}
{"prompt":"Copy the 'Generic - 149mm' wall type and name it 'Interior - 16cm Plaster'.","completion":"string originalName = \"Generic - 149mm\";\nstring newName = \"Interior - 16cm Plaster\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif(originalType!=null)\n    originalType.Duplicate(newName);"}
{"prompt":"Construct an extrusion roof with a 10% slope.","completion":"using (Transaction t = new Transaction(doc, \"Create Extrusion Roof\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    RoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n\n    if (level != null && roofType != null)\n    {\n        CurveArray profile = new CurveArray();\n        profile.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(10 \/ 0.3048, 0, 1 \/ 0.3048)));\n        \n        Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisY, XYZ.Zero);\n        ReferencePlane refPlane = doc.Create.NewReferencePlane(plane.Origin, plane.Origin + XYZ.BasisX, plane.Normal, doc.ActiveView);\n        \n        if (refPlane != null)\n        {\n            doc.Create.NewExtrusionRoof(profile, refPlane, level, roofType, 0, 10 \/ 0.3048);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Ubica todos los elementos seleccionados en el workset 'MEP'.","completion":"using (Transaction t = new Transaction(doc, \"Assign to Workset\"))\n{\n    t.Start();\n    if(doc.IsWorkshared)\n    {\n        UIDocument localUidoc = uidoc;\n        ICollection<ElementId> selectedIds = localUidoc.Selection.GetElementIds();\n        \n        Workset workset = new FilteredWorksetCollector(doc).OfKind(WorksetKind.UserWorkset).FirstOrDefault(ws => ws.Name == \"MEP\");\n        if(workset == null) workset = Workset.Create(doc, \"MEP\");\n\n        if (selectedIds != null && selectedIds.Count > 0 && workset != null)\n        {\n            foreach(ElementId id in selectedIds)\n            {\n                Element elem = doc.GetElement(id);\n                Parameter wsparam = elem.get_Parameter(BuiltInParameter.ELEM_PARTITION_PARAM);\n                if(wsparam != null && !wsparam.IsReadOnly) wsparam.Set(workset.Id.IntegerValue);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Obtén el espacio MEP asociado a la habitación 'Oficina 97'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Cast<Room>().FirstOrDefault(r => r.Name == \"Oficina 97\");\nList<Space> spaces = new List<Space>();\n\nif (room != null)\n{\n    spaces = new FilteredElementCollector(doc).OfClass(typeof(Space)).Cast<Space>().Where(s => s.Room != null && s.Room.Id == room.Id).ToList();\n}"}
{"prompt":"What is the total volume of all concrete structural columns?","completion":"double totalVolume = 0.0;\nFilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType();\n\nforeach (Element elem in collector)\n{\n    Material material = doc.GetElement(elem.GetMaterialIds(false).FirstOrDefault()) as Material;\n    if (material != null && material.Name.Contains(\"Concrete\"))\n    {\n        Parameter volumeParam = elem.get_Parameter(BuiltInParameter.HOST_VOLUME_COMPUTED);\n        if (volumeParam != null) totalVolume += volumeParam.AsDouble();\n    }\n}\ndouble totalVolumeM3 = UnitUtils.ConvertFromInternalUnits(totalVolume, UnitTypeId.CubicMeters);"}
{"prompt":"Crea un nuevo Nivel llamado 'Nivel 6' a una elevación de 11 metros.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(11, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\nif (newLevel != null)\n{\n    try { newLevel.Name = \"Nivel 6\"; } catch {}\n}"}
{"prompt":"Construct a 'Roof Terrace' level at 20m.","completion":"string levelName = \"Roof Terrace\";\ndouble elev = UnitUtils.ConvertToInternalUnits(20, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elev);\nnewLevel.Name = levelName;\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Get the total length of all walls in the project.","completion":"double totalLength = 0.0;\nList<Wall> walls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Cast<Wall>().ToList();\nforeach (Wall wall in walls)\n{\n    Parameter lengthParam = wall.get_Parameter(BuiltInParameter.CURVE_ELEM_LENGTH);\n    if (lengthParam != null && lengthParam.HasValue)\n    {\n        totalLength += lengthParam.AsDouble();\n    }\n}"}
{"prompt":"Dado un muro, obtén los materiales y sus volúmenes.","completion":"UIDocument localUidoc = uidoc;\nReference pickedRef = localUidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un muro\");\n\nDictionary<string, double> materialVolumes = new Dictionary<string, double>();\nif (pickedRef != null)\n{\n    Wall wall = doc.GetElement(pickedRef) as Wall;\n    if (wall != null)\n    {\n        Parameter areaParam = wall.get_Parameter(BuiltInParameter.HOST_AREA_COMPUTED);\n        if (areaParam != null && areaParam.HasValue)\n        {\n            double wallArea = areaParam.AsDouble();\n            WallType wallType = wall.WallType;\n            if (wallType != null)\n            {\n                CompoundStructure cs = wallType.GetCompoundStructure();\n                if (cs != null)\n                {\n                    foreach(CompoundStructureLayer layer in cs.GetLayers())\n                    {\n                        Material material = doc.GetElement(layer.MaterialId) as Material;\n                        if(material != null)\n                        {\n                            double volume = layer.Width * wallArea; \n                            materialVolumes[material.Name] = volume;\n                        }\n                    }\n                }\n            }\n        }\n    }\n}"}
{"prompt":"Obtén todas las habitaciones en el Nivel 'Planta Baja'.","completion":"Level groundFloor = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Planta Baja\") as Level;\nList<Element> roomsOnGround = new List<Element>();\n\nif (groundFloor != null)\n{\n    roomsOnGround = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Where(r => r.LevelId == groundFloor.Id).ToList();\n}"}
{"prompt":"Construct a section view using a 10x10x3 meter box.","completion":"ViewFamilyType sectionVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(vft => vft.ViewFamily == ViewFamily.Section);\n\nif (sectionVFT != null)\n{\n    XYZ min = new XYZ(0, 0, 0);\n    XYZ max = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters));\n    BoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\n    sectionBox.Min = min;\n    sectionBox.Max = max;\n    ViewSection.CreateSection(doc, sectionVFT.Id, sectionBox);\n}"}
{"prompt":"Crea un muro del tipo 'Genérico - 200mm' en el 'Nivel 2' desde (0,0) hasta (10,5).","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 2\") as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == \"Genérico - 200mm\") as WallType;\n\nif (level != null && wallType != null)\n{\n    XYZ startPoint = new XYZ(0, 0, 0);\n    XYZ endPoint = new XYZ(10, 5, 0);\n    Line wallCurve = Line.CreateBound(startPoint, endPoint);\n    \/\/ Use a default height of 10ft as it's not specified in the prompt\n    double height = 10.0;\n    Wall.Create(doc, wallCurve, wallType.Id, level.Id, height, 0, false, false);\n}"}
{"prompt":"Sitúa una cámara en la vista activa.","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(f => f.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft != null)\n{\n    View3D cameraView = View3D.CreatePerspective(doc, vft.Id);\n    if (cameraView != null)\n    {\n        cameraView.Name = \"Nueva Vista de Cámara\";\n        \/\/ Default position as it is not specified in prompt\n        XYZ eyePos = new XYZ(30, -30, 20);\n        XYZ upDir = XYZ.BasisZ;\n        XYZ forwardDir = new XYZ(-1, 1, -0.5);\n        ViewOrientation3D orientation = new ViewOrientation3D(eyePos, upDir, forwardDir);\n        cameraView.SetOrientation(orientation);\n    }\n}"}
{"prompt":"Create a new window schedule that includes Type Mark, Width, and Height.","completion":"string scheduleName = \"Window Schedule\";\nViewSchedule schedule = ViewSchedule.CreateSchedule(doc, new ElementId(BuiltInCategory.OST_Windows));\n\nif (schedule != null)\n{\n    schedule.Name = scheduleName;\n    ScheduleDefinition def = schedule.Definition;\n    if (def != null)\n    {\n        SchedulableField typeMarkField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.ALL_MODEL_TYPE_MARK);\n        SchedulableField widthField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.FAMILY_WIDTH_PARAM);\n        SchedulableField heightField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.FAMILY_HEIGHT_PARAM);\n        \n        if (typeMarkField != null) def.AddField(typeMarkField);\n        if (widthField != null) def.AddField(widthField);\n        if (heightField != null) def.AddField(heightField);\n    }\n}"}
{"prompt":"Create a new Level named 'Level 2' at an elevation of 17 meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(17, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Level 2\";\n}"}
{"prompt":"Mueve un elemento seleccionado a la posición (5,5).","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un elemento para mover\");\n\nif (pickedRef != null)\n{\n    Element elem = doc.GetElement(pickedRef);\n    if (elem != null)\n    {\n        LocationPoint lp = elem.Location as LocationPoint;\n        if (lp != null)\n        {\n            XYZ newPosition = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), lp.Point.Z);\n            lp.Point = newPosition;\n        }\n    }\n}"}
{"prompt":"Cambia el tipo de una losa seleccionada a 'Concreto 19cm'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una losa\");\n\nif (pickedRef != null)\n{\n    Floor floorToChange = doc.GetElement(pickedRef) as Floor;\n    FloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name == \"Concreto 19cm\");\n    \n    if (floorToChange != null && newType != null)\n    {\n        floorToChange.ChangeTypeId(newType.Id);\n    }\n}"}
{"prompt":"Reproduce el tipo de muro 'Genérico - 193mm' y nómbralo 'Interior - 15cm Yeso'.","completion":"string originalName = \"Genérico - 193mm\";\nstring newName = \"Interior - 15cm Yeso\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif (originalType != null)\n{\n    WallType newType = originalType.Duplicate(newName) as WallType;\n}"}
{"prompt":"Clona la vista activa y ponle el nombre 'Vista Duplicada'.","completion":"View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    ElementId newViewId = activeView.Duplicate(ViewDuplicateOption.Duplicate);\n    View newView = doc.GetElement(newViewId) as View;\n    if (newView != null)\n    {\n        newView.Name = \"Vista Duplicada\";\n    }\n}"}
{"prompt":"Create a 'Generic - 200mm' wall on 'Level 1' from (0,0) to (10,5).","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == \"Generic - 200mm\") as WallType;\nif (level != null && wallType != null)\n{\n    XYZ startPoint = new XYZ(0, 0, 0);\n    XYZ endPoint = new XYZ(10, 5, 0);\n    Line wallCurve = Line.CreateBound(startPoint, endPoint);\n    double height = UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\n    Wall.Create(doc, wallCurve, wallType.Id, level.Id, height, 0, false, false);\n}"}
{"prompt":"Carga la familia desde la ruta \"C:\\Librerias\\Puerta Principal.rfa\".","completion":"string familyPath = @\"C:\\Librerias\\Puerta Principal.rfa\";\nFamily loadedFamily = null;\ndoc.LoadFamily(familyPath, out loadedFamily);"}
{"prompt":"Encuentra un muro buscando el valor 'W-01' en su parámetro de Marca.","completion":"string markValue = \"W-01\";\nElementId markParamId = new ElementId(BuiltInParameter.ALL_MODEL_MARK);\nParameterValueProvider pvp = new ParameterValueProvider(markParamId);\nFilterStringRuleEvaluator evaluator = new FilterStringEquals();\nFilterRule rule = new FilterStringRule(pvp, evaluator, markValue);\nElementFilter filter = new ElementParameterFilter(rule);\nWall wall = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().WherePasses(filter).FirstOrDefault() as Wall;"}
{"prompt":"Ubica una instancia de la familia 'Puerta Sencilla' en el centro de la habitación 'Despacho 98'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 98\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Puerta Sencilla\") as FamilySymbol;\nif(furnitureSymbol != null && !furnitureSymbol.IsActive) furnitureSymbol.Activate();\nif(room != null)\n{\n    LocationPoint roomCenter = room.Location as LocationPoint;\n    if(roomCenter != null && furnitureSymbol != null && room.Level != null)\n    {\n        doc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Obtén las coordenadas del punto base y del punto de reconocimiento.","completion":"BasePoint surveyPoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(p => p.IsShared);\nBasePoint projectBasePoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(p => !p.IsShared);\n\nXYZ surveyCoords = null;\nif (surveyPoint != null) surveyCoords = surveyPoint.get_BoundingBox(null).Min;\n\nXYZ projectCoords = null;\nif (projectBasePoint != null) projectCoords = projectBasePoint.get_BoundingBox(null).Min;"}
{"prompt":"Recarga el vínculo de Revit 'Estructura_LINK.rvt'.","completion":"RevitLinkType linkType = new FilteredElementCollector(doc).OfClass(typeof(RevitLinkType)).Cast<RevitLinkType>().FirstOrDefault(lt => lt.Name == \"Estructura_LINK.rvt\");\n\nif (linkType != null)\n{\n    linkType.Reload();\n}"}
{"prompt":"Crea una nueva cota de nivel llamada 'Nivel 2' a una elevación de 10 metros.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\nif (newLevel != null)\n{\n    newLevel.Name = \"Nivel 2\";\n}"}
{"prompt":"Etiqueta todos los muros en la vista actual por su tipo.","completion":"View activeView = doc.ActiveView;\nFilteredElementCollector wallsInView = new FilteredElementCollector(doc, activeView.Id).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType();\nforeach (Element wall in wallsInView)\n{\n    LocationCurve locCurve = (wall as Wall).Location as LocationCurve;\n    if (locCurve != null)\n    {\n        XYZ midPoint = locCurve.Curve.Evaluate(0.5, true);\n        IndependentTag.Create(doc, activeView.Id, new Reference(wall), true, TagMode.TM_ADDBY_CATEGORY, TagOrientation.Horizontal, midPoint);\n    }\n}"}
{"prompt":"Coloca un rociador en las coordenadas (8,2,2).","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol sprinklerSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Sprinklers).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (level != null && sprinklerSymbol != null)\n{\n    if (!sprinklerSymbol.IsActive) sprinklerSymbol.Activate();\n    XYZ placementPoint = new XYZ(UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters));\n    doc.Create.NewFamilyInstance(placementPoint, sprinklerSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n}"}
{"prompt":"Clona el tipo de muro 'Genérico - 149mm' y nómbralo 'Interior - 18cm Yeso'.","completion":"string originalName = \"Genérico - 149mm\";\nstring newName = \"Interior - 18cm Yeso\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif (originalType != null)\n{\n    WallType newType = originalType.Duplicate(newName) as WallType;\n}"}
{"prompt":"Replicate level 5 with a 7m offset and name it 'Mezzanine'.","completion":"string levelName = \"Level 5\";\nLevel levelToCopy = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (levelToCopy != null)\n{\n    double offset = UnitUtils.ConvertToInternalUnits(7, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, levelToCopy.Elevation + offset);\n    newLevel.Name = \"Mezzanine\";\n}"}
{"prompt":"Obtén todos los muros del Nivel 1 que son estructurales.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\nif (level1 != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level1.Id);\n    ElementCategoryFilter categoryFilter = new ElementCategoryFilter(BuiltInCategory.OST_Walls);\n    ParameterValueProvider pvp = new ParameterValueProvider(new ElementId(BuiltInParameter.WALL_STRUCTURAL_SIGNIFICANT));\n    FilterIntegerRule rule = new FilterIntegerRule(pvp, new FilterNumericEquals(), 1);\n    ElementParameterFilter structuralFilter = new ElementParameterFilter(rule);\n    LogicalAndFilter andFilter = new LogicalAndFilter(new List<ElementFilter> { levelFilter, categoryFilter, structuralFilter });\n    List<Element> structuralWalls = new FilteredElementCollector(doc).WherePasses(andFilter).ToList();\n}"}
{"prompt":"Ajusta el nombre de todas las vistas de planta para que empiecen con 'ARQ_'.","completion":"string prefix = \"ARQ_\";\nList<ViewPlan> planViews = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().Where(v => !v.IsTemplate).ToList();\nforeach(ViewPlan view in planViews)\n{\n    if(!view.Name.StartsWith(prefix))\n    {\n        view.Name = prefix + view.Name;\n    }\n}"}
{"prompt":"Get the MEP space associated with the room 'Office 96'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Cast<Room>().FirstOrDefault(r => r.Name == \"Office 96\");\nList<Space> spaces = new List<Space>();\n\nif (room != null)\n{\n    spaces = new FilteredElementCollector(doc).OfClass(typeof(Space)).Cast<Space>().Where(s => s.Room != null && s.Room.Id == room.Id).ToList();\n}"}
{"prompt":"Apply 25mm thermal insulation to all hot water pipes.","completion":"PipeInsulationType insulationType = new FilteredElementCollector(doc).OfClass(typeof(PipeInsulationType)).FirstOrDefault() as PipeInsulationType;\nPipingSystemType hotWaterSystem = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).Cast<PipingSystemType>().FirstOrDefault(s => s.Name.Contains(\"Hot Water\"));\n\nif (insulationType != null && hotWaterSystem != null)\n{\n    List<Pipe> pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast<Pipe>().Where(p => \n    {\n        Parameter systemParam = p.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM);\n        return systemParam != null && systemParam.HasValue && systemParam.AsElementId() == hotWaterSystem.Id;\n    }).ToList();\n    \n    foreach(Pipe p in pipes)\n    {\n        PipeInsulation.Create(doc, p.Id, insulationType.Id, UnitUtils.ConvertToInternalUnits(25, UnitTypeId.Millimeters));\n    }\n}"}
{"prompt":"Place a material tag on a wall face.","completion":"using (Transaction t = new Transaction(doc, \"Place Material Tag\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference faceRef = localUidoc.Selection.PickObject(ObjectType.Face, \"Select a face to tag\");\n    XYZ point = localUidoc.Selection.PickPoint(\"Select the tag location\");\n    View activeView = doc.ActiveView;\n\n    if (faceRef != null && point != null && activeView != null)\n    {\n        IndependentTag.Create(doc, activeView.Id, faceRef, true, TagMode.TM_ADDBY_MATERIAL, TagOrientation.Horizontal, point);\n    }\n    t.Commit();\n}"}
{"prompt":"Recupera el elemento anfitrión de la primera ventana que encuentres.","completion":"FamilyInstance windowInstance = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\nif (windowInstance != null)\n{\n    Element hostElement = windowInstance.Host;\n}"}
{"prompt":"Get the 'Walls' schedule and export its data to CSV.","completion":"ViewSchedule schedule = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().FirstOrDefault(s=>s.Name==\"Walls\");\n\nif (schedule != null)\n{\n    string folderPath = \"C:\/RevitExports\/\";\n    ViewScheduleExportOptions options = new ViewScheduleExportOptions() { FieldDelimiter = \",\" };\n    schedule.Export(folderPath, \"Walls.csv\", options);\n}"}
{"prompt":"Replicate the 'Generic - 148mm' wall type and name it 'Interior - 13cm Plaster'.","completion":"string originalName = \"Generic - 148mm\";\nstring newName = \"Interior - 13cm Plaster\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif (originalType != null)\n{\n    WallType newType = originalType.Duplicate(newName) as WallType;\n}"}
{"prompt":"Crea una vista de sección usando una caja de 10x10x3 metros.","completion":"ViewFamilyType sectionVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(vft => vft.ViewFamily == ViewFamily.Section);\n\nif (sectionVFT != null)\n{\n    BoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\n    sectionBox.Min = new XYZ(0,0,0);\n    sectionBox.Max = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters));\n    Transform transform = Transform.Identity;\n    sectionBox.Transform = transform;\n    ViewSection.CreateSection(doc, sectionVFT.Id, sectionBox);\n}"}
{"prompt":"Create a new 5mm text type in green color.","completion":"using (Transaction t = new Transaction(doc, \"Create Green Text Type\"))\n{\n    t.Start();\n    string newTypeName = \"5mm Green\";\n    TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\n    if (defaultType != null)\n    {\n        TextNoteType newType = defaultType.Duplicate(newTypeName) as TextNoteType;\n        if (newType != null)\n        {\n            Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n            if (textSizeParam != null && !textSizeParam.IsReadOnly)\n            {\n                textSizeParam.Set(5 \/ 304.8);\n            }\n            Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n            if (lineColorParam != null && !lineColorParam.IsReadOnly)\n            {\n                 lineColorParam.Set(65280);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Obtén una lista de todas las vistas de planta del proyecto.","completion":"List<ViewPlan> planViews = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().Where(v => !v.IsTemplate).ToList();"}
{"prompt":"Temporarily isolate the Doors category in the active view.","completion":"ElementId doorCategoryId = new ElementId(BuiltInCategory.OST_Doors);\nICollection<ElementId> categoryIds = new List<ElementId> { doorCategoryId };\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.IsolateCategoriesTemporary(categoryIds);\n}"}
{"prompt":"Generate a new A1 sheet and place the 'Ground Floor' view on it.","completion":"using (Transaction t = new Transaction(doc, \"Create Sheet\"))\n{\n    t.Start();\n    string sheetNumber = \"A-101\";\n    FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(tb => tb.Name.Contains(\"A1\"));\n    View viewToPlace = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<View>().FirstOrDefault(v => v.Name == \"Ground Floor\");\n\n    if (titleBlock != null && viewToPlace != null)\n    {\n        ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n        if (newSheet != null)\n        {\n            newSheet.Name = \"Architectural Plan - Ground Floor\";\n            newSheet.SheetNumber = sheetNumber;\n            BoundingBoxUV sheetBox = newSheet.Outline;\n            UV centerUv = (sheetBox.Min + sheetBox.Max) \/ 2;\n            XYZ centerPoint = new XYZ(centerUv.U, centerUv.V, 0);\n            Viewport.Create(doc, newSheet.Id, viewToPlace.Id, centerPoint);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Duplica el tipo de muro 'Genérico - 113mm' y nómbralo 'Interior - 15cm Yeso'.","completion":"string originalName = \"Genérico - 113mm\";\nstring newName = \"Interior - 15cm Yeso\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif(originalType!=null)\n    originalType.Duplicate(newName);"}
{"prompt":"Cuantifica el volumen total de cimentación estructural.","completion":"double totalVolume = 0.0;\nFilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFoundation).WhereElementIsNotElementType();\n\nforeach (Element foundation in collector)\n{\n    Parameter volumeParam = foundation.get_Parameter(BuiltInParameter.HOST_VOLUME_COMPUTED);\n    if (volumeParam != null) totalVolume += volumeParam.AsDouble();\n}\ndouble totalVolumeM3 = UnitUtils.ConvertFromInternalUnits(totalVolume, UnitTypeId.CubicMeters);"}
{"prompt":"Encuentra todos los muros con el comentario 'Revisar'.","completion":"ElementId commentParamId = new ElementId(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\nParameterValueProvider pvp = new ParameterValueProvider(commentParamId);\nFilterStringRuleEvaluator evaluator = new FilterStringContains();\nFilterRule rule = new FilterStringRule(pvp, evaluator, \"Revisar\");\nElementFilter filter = new ElementParameterFilter(rule);\nList<Element> wallsToReview = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(filter).ToList();"}
{"prompt":"Establece el parámetro 'Comentarios' de todas las puertas del Nivel 6 a 'Clasificación Fuego - 85 min'.","completion":"string levelName = \"Nivel 6\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(targetLevel.Id);\n    FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WherePasses(levelFilter);\n    foreach (Element door in collector)\n    {\n        Parameter commentsParam = door.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n        if (commentsParam != null && !commentsParam.IsReadOnly) { commentsParam.Set(\"Clasificación Fuego - 85 min\"); }\n    }\n}"}
{"prompt":"Find all doors on Level 6 using a combined filter.","completion":"string levelName = \"Nivel 6\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    ElementCategoryFilter categoryFilter = new ElementCategoryFilter(BuiltInCategory.OST_Doors);\n    ElementLevelFilter levelFilter = new ElementLevelFilter(targetLevel.Id);\n    LogicalAndFilter combinedFilter = new LogicalAndFilter(levelFilter, categoryFilter);\n    FilteredElementCollector collector = new FilteredElementCollector(doc).WherePasses(combinedFilter);\n    uidoc.Selection.SetElementIds(collector.ToElementIds());\n}"}
{"prompt":"Load the 'Table.rfa' family and place it at (6,6,1) on Level 5","completion":"string levelName = \"Level 5\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nstring familyName = \"Table\";\nFamilySymbol symbol = new FilteredElementCollector(doc).OfClass(typeof(FamilySymbol)).Cast<FamilySymbol>().FirstOrDefault(fs => fs.Family.Name == familyName);\nif (symbol != null && targetLevel != null)\n{\n    if (!symbol.IsActive) { symbol.Activate(); doc.Regenerate(); }\n    XYZ location = new XYZ(6, 6, 1);\n    doc.Create.NewFamilyInstance(location, symbol, targetLevel, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n}"}
{"prompt":"Create a wall 5 meters long and 3 meters high.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (level != null && wallType != null)\n{\n    Line line = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0, 0));\n    Wall.Create(doc, line, wallType.Id, level.Id, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0.0, false, false);\n}"}
{"prompt":"Selecciona todos los muros del 'Nivel 5' y cambia su comentario a 'REVISAR AISLAMIENTO'.","completion":"string levelName = \"Nivel 5\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(targetLevel.Id);\n    FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(levelFilter);\n    foreach (Element wall in collector)\n    {\n        Parameter commentsParam = wall.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n        if (commentsParam != null && !commentsParam.IsReadOnly) { commentsParam.Set(\"REVISAR AISLAMIENTO\"); }\n    }\n}"}
{"prompt":"Inserta una instancia de la familia 'Mesa de Oficina' en el centro de la habitación 'Despacho 97'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 97\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Mesa de Oficina\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);"}
{"prompt":"Build 10 architectural worksets.","completion":"List<string> worksetNames = new List<string> { \"TAD_ARQ_WALLS\", \"TAD_ARQ_FINISHES\", \"TAD_ARQ_CEILINGS\", \"TAD_ARQ_FLOORS\", \"TAD_ARQ_RAILINGS\", \"TAD_ARQ_WINDOWS\", \"TAD_ARQ_CARPENTRY\", \"TAD_ARQ_FURNITURE\", \"TAD_ARQ_PLUMBING\", \"TAD_ARQ_EXTERIOR\" };\nforeach(string name in worksetNames)\n{\n    Workset newWorkset = Workset.Create(doc, name);\n}"}
{"prompt":"Selecciona todos los muros con una resistencia al fuego de 92 minutos.","completion":"ElementId fireRatingParamId = new ElementId(BuiltInParameter.FIRE_RATING);\nParameterValueProvider pvp = new ParameterValueProvider(fireRatingParamId);\nFilterStringRuleEvaluator evaluator = new FilterStringEquals();\nFilterRule rule = new FilterStringRule(pvp, evaluator, \"992 min\");\nElementParameterFilter filter = new ElementParameterFilter(rule);\nICollection<ElementId> wallsToSelect = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(filter).ToElementIds();\nif (wallsToSelect.Count > 0)\n{\n    new UIDocument(doc).Selection.SetElementIds(wallsToSelect);\n}"}
{"prompt":"Representa una pared de 5m de largo por 3m de altura.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (level != null && wallType != null)\n{\n    Line line = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0, 0));\n    Wall.Create(doc, line, wallType.Id, level.Id, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0.0, false, false);\n}"}
{"prompt":"Exporta la vista 3D activa a NWC para Navisworks.","completion":"View3D view3d = doc.ActiveView as View3D;\n\nif (view3d != null)\n{\n    string folderPath = \"C:\/RevitExports\/\";\n    string fileName = view3d.Name + \".nwc\";\n    NavisworksExportOptions options = new NavisworksExportOptions();\n    options.ExportScope = NavisworksExportScope.View;\n    options.ViewId = view3d.Id;\n    doc.Export(folderPath, fileName, options);\n}"}
{"prompt":"Create a vertical shaft opening from the base level to the top level.","completion":"using (Transaction t = new Transaction(doc, \"Create Shaft\"))\n{\n    t.Start();\n    Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderBy(l => l.ProjectElevation).FirstOrDefault();\n    Level topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderByDescending(l => l.ProjectElevation).FirstOrDefault();\n\n    if (bottomLevel != null && topLevel != null)\n    {\n        XYZ p1 = new XYZ(2 \/ 0.3048, 2 \/ 0.3048,0);\n        XYZ p2 = new XYZ(5 \/ 0.3048, 2 \/ 0.3048,0);\n        XYZ p3 = new XYZ(5 \/ 0.3048, 5 \/ 0.3048,0);\n        XYZ p4 = new XYZ(2 \/ 0.3048, 5 \/ 0.3048,0);\n        CurveArray profile = new CurveArray();\n        profile.Append(Line.CreateBound(p1,p2));\n        profile.Append(Line.CreateBound(p2,p3));\n        profile.Append(Line.CreateBound(p3,p4));\n        profile.Append(Line.CreateBound(p4,p1));\n        doc.Create.NewOpening(bottomLevel, topLevel, profile);\n    }\n    t.Commit();\n}"}
{"prompt":"Build a stair between Level 6 and Level 3","completion":"\/\/ This is a complex operation that requires multiple steps and\/or user interaction and is not supported by the agent."}
{"prompt":"Copia la vista 'Nivel 3'.","completion":"ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v => v.Name == \"Nivel 3\") as ViewPlan;\n\nif (viewToDuplicate != null)\n{\n    ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n}"}
{"prompt":"Pivot project north 30 degrees clockwise.","completion":"using (Transaction t = new Transaction(doc, \"Rotate Project North\"))\n{\n    t.Start();\n    BasePoint projectBasePoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(bp => !bp.IsShared);\n\n    if (projectBasePoint != null)\n    {\n        double angleInDegrees = 30.0;\n        double angleInRadians = -(angleInDegrees * Math.PI \/ 180.0);\n        using (var bbox = projectBasePoint.get_BoundingBox(null))\n        {\n          if (bbox != null)\n          {\n            XYZ center = bbox.Min;\n            Line axis = Line.CreateBound(center, center + XYZ.BasisZ);\n            ElementTransformUtils.RotateElement(doc, projectBasePoint.Id, axis, angleInRadians);\n          }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Obtén todas las habitaciones que están en el Nivel 3.","completion":"Level level3 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 3\") as Level;\nList<Element> roomsOnLevel3 = new List<Element>();\n\nif (level3 != null)\n{\n    roomsOnLevel3 = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Where(r => r.LevelId == level3.Id).ToList();\n}"}
{"prompt":"Add a reference point at coordinates (4,2,7) inside the family editor.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(4,2,7));"}
{"prompt":"Place an instance of the 'Office Desk' family in the center of the 'Office 101' room.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Office 101\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Office Desk\") as FamilySymbol;\nif(furnitureSymbol != null && !furnitureSymbol.IsActive) furnitureSymbol.Activate();\nif(room != null)\n{\n    LocationPoint roomCenter = room.Location as LocationPoint;\n    if(roomCenter != null && furnitureSymbol != null && room.Level != null)\n    {\n        doc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Encuentra el tipo de columna estructural llamado \"299 x 446mm\" y colócalo en X=1, Y=11.2","completion":"string columnTypeName = \"299 x 446mm\";\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(s => s.Name == columnTypeName);\n\nif (level != null && columnSymbol != null)\n{\n    if (!columnSymbol.IsActive)\n    {\n        columnSymbol.Activate();\n    }\n    doc.Create.NewFamilyInstance(new XYZ(1, 11.2, 0), columnSymbol, level, StructuralType.Column);\n}"}
{"prompt":"Place an instance of the 'Office Desk' family in the center of the 'Office 98' room.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Office 98\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Office Desk\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);"}
{"prompt":"Reproduce el tipo de muro 'Genérico - 143mm' y nómbralo 'Interior - 15cm Yeso'.","completion":"string originalName = \"Genérico - 143mm\";\nstring newName = \"Interior - 15cm Yeso\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif(originalType!=null)\n    originalType.Duplicate(newName);"}
{"prompt":"Create a new room on Level 1 at point (9, 5).","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\n\nif (level1 != null)\n{\n    UV point = new UV(9, 5);\n    Room room = doc.Create.NewRoom(level1, point);\n}"}
{"prompt":"Update the type of a selected floor to 'Concrete 17cm'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a floor\");\n\nif (pickedRef != null)\n{\n    Floor floorToChange = doc.GetElement(pickedRef) as Floor;\n    FloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name == \"Concrete 17cm\");\n    \n    if (floorToChange != null && newType != null)\n    {\n        floorToChange.ChangeTypeId(newType.Id);\n    }\n}"}
{"prompt":"Find the structural framing element with the mark 'B-101'.","completion":"string markValue = \"B-101\";\nElement framingElement = new FilteredElementCollector(doc)\n    .OfCategory(BuiltInCategory.OST_StructuralFraming)\n    .WhereElementIsNotElementType()\n    .FirstOrDefault(e => {\n        Parameter p = e.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n        return p != null && p.AsString() == markValue;\n    });"}
{"prompt":"Create columns at each grid intersection.","completion":"FamilySymbol colSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nList<Grid> grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().ToList();\n\nif (colSymbol != null && level != null && grids.Count >= 2)\n{\n    for (int i = 0; i < grids.Count; i++)\n    {\n        for (int j = i + 1; j < grids.Count; j++)\n        {\n            IntersectionResultArray results = null;\n            grids[i].Curve.Intersect(grids[j].Curve, out results);\n            if(results != null)\n            {\n                 foreach (IntersectionResult ir in results)\n                 {\n                     doc.Create.NewFamilyInstance(ir.XYZPoint, colSymbol, level, StructuralType.Column);\n                 }\n            }\n        }\n    }\n}"}
{"prompt":"Configure the sill height of all windows to 6 meter.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits(6, UnitTypeId.Meters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Add a reference point at coordinates (1,4,7) inside the family editor.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(1,4,7));"}
{"prompt":"Find all doors on Level 6 that belong to the 'Single-Flush' family.","completion":"string levelName = \"Level 6\";\nstring familyName = \"Single-Flush\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WherePasses(new ElementLevelFilter(targetLevel.Id));\n    List<ElementId> doorIds = new List<ElementId>();\n    foreach (Element door in collector)\n    {\n        FamilyInstance fi = door as FamilyInstance;\n        if (fi != null && fi.Symbol.Family.Name == familyName)\n        {\n            doorIds.Add(door.Id);\n        }\n    }\n    uidoc.Selection.SetElementIds(doorIds);\n}"}
{"prompt":"Establece el parámetro 'Comentarios' de todas las puertas del Nivel 5 a 'Clasificación Fuego - 93 min'.","completion":"string levelName = \"Nivel 5\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(targetLevel.Id);\n    FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WherePasses(levelFilter);\n    foreach (Element door in collector)\n    {\n        Parameter commentsParam = door.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n        if (commentsParam != null && !commentsParam.IsReadOnly) { commentsParam.Set(\"Clasificación Fuego - 93 min\"); }\n    }\n}"}
{"prompt":"Crea una dimensión radial para un muro curvo.","completion":"using (Transaction t = new Transaction(doc, \"Create Radial Dimension\"))\n{\n    t.Start();\n    Wall curvedWall = new FilteredElementCollector(doc, doc.ActiveView.Id).OfClass(typeof(Wall)).Cast<Wall>().FirstOrDefault(w => w.Location is LocationCurve && (w.Location as LocationCurve).Curve is Arc);\n    View activeView = doc.ActiveView;\n\n    if (curvedWall != null && activeView != null)\n    {\n        LocationCurve locCurve = curvedWall.Location as LocationCurve;\n        if (locCurve != null)\n        {\n            Arc arc = locCurve.Curve as Arc;\n            if (arc != null)\n            {\n                ReferenceArray refArray = new ReferenceArray();\n                refArray.Append(arc.Reference);\n                doc.Create.NewDimension(activeView, Line.CreateBound(arc.Center, arc.GetEndPoint(0)), refArray);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Insert an instance of the 'Office Desk' family in the center of the 'Office 96' room.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Office 96\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Office Desk\") as FamilySymbol;\nif(furnitureSymbol != null && !furnitureSymbol.IsActive) furnitureSymbol.Activate();\nif(room != null)\n{\n    LocationPoint roomCenter = room.Location as LocationPoint;\n    if(roomCenter != null && furnitureSymbol != null && room.Level != null)\n    {\n        doc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Create a topography surface from a list of 4 points.","completion":"IList<XYZ> points = new List<XYZ>\n{\n    new XYZ(0, 0, 0),\n    new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), 0, UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters)),\n    new XYZ(0, UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters)),\n    new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters))\n};\nTopographySurface.Create(doc, points);"}
{"prompt":"Inserta una ventana de 1 metro de ancho y 1.2 metros de alto en un muro, creando un nuevo tipo si es necesario.","completion":"Wall hostWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nFamilySymbol originalSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (originalSymbol != null && hostWall != null)\n{\n    \/\/ Duplica el tipo para no modificar el original\n    string newTypeName = $\"Window 1.0m x 1.2m - {Guid.NewGuid().ToString().Substring(0, 4)}\";\n    FamilySymbol newSymbol = originalSymbol.Duplicate(newTypeName) as FamilySymbol;\n\n    \/\/ Activa el nuevo tipo si no lo está\n    if (!newSymbol.IsActive)\n    {\n        newSymbol.Activate();\n    }\n\n    \/\/ Establece las dimensiones en el nuevo tipo\n    Parameter widthParam = newSymbol.LookupParameter(\"Width\");\n    if(widthParam != null) widthParam.Set(UnitUtils.ConvertToInternalUnits(1.0, UnitTypeId.Meters));\n\n    Parameter heightParam = newSymbol.LookupParameter(\"Height\");\n    if(heightParam != null) heightParam.Set(UnitUtils.ConvertToInternalUnits(1.2, UnitTypeId.Meters));\n\n    \/\/ Obtén la información necesaria para la inserción\n    Level level = doc.GetElement(hostWall.LevelId) as Level;\n    LocationCurve locationCurve = hostWall.Location as LocationCurve;\n    if (locationCurve != null)\n    {\n        XYZ insertionPoint = locationCurve.Curve.Evaluate(0.5, true);\n        \/\/ Inserta una instancia del NUEVO tipo\n        doc.Create.NewFamilyInstance(insertionPoint, newSymbol, hostWall, level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Crea un nuevo tipo de cota lineal con texto azul y tamaño 2mm.","completion":"using (Transaction t = new Transaction(doc, \"Create Dimension Type\"))\n{\n    t.Start();\n    string newTypeName = \"Cota Azul 2mm\";\n    DimensionType linearDimType = new FilteredElementCollector(doc).OfClass(typeof(DimensionType)).Cast<DimensionType>().FirstOrDefault(dt => dt.StyleType == DimensionStyleType.Linear);\n\n    if (linearDimType != null)\n    {\n        DimensionType newDimType = linearDimType.Duplicate(newTypeName) as DimensionType;\n        if (newDimType != null)\n        {\n            Parameter colorParam = newDimType.get_Parameter(BuiltInParameter.LINE_COLOR);\n            if (colorParam != null && !colorParam.IsReadOnly) colorParam.Set(255);\n            Parameter textSizeParam = newDimType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n            if (textSizeParam != null && !textSizeParam.IsReadOnly) textSizeParam.Set(2 \/ 304.8);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Agrega un punto de referencia en las coordenadas (1,1,7) dentro del editor de familias.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(1,1,7));"}
{"prompt":"Retrieve all rooms on Level 3","completion":"string levelName = \"Level 3\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(targetLevel.Id);\n    FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WherePasses(levelFilter);\n    uidoc.Selection.SetElementIds(collector.ToElementIds());\n}"}
{"prompt":"Get the IDs of all 3D views starting with 'Coord' for export.","completion":"List<ElementId> viewsToExport = new FilteredElementCollector(doc).OfClass(typeof(View3D)).Cast<View3D>().Where(v => v.Name.StartsWith(\"Coord\") && !v.IsTemplate).Select(v => v.Id).ToList();\n"}
{"prompt":"Conecta dos conductos con una unión en T.","completion":"List<Duct> ducts = new FilteredElementCollector(doc).OfClass(typeof(Duct)).Cast<Duct>().ToList();\nif (ducts.Count >= 2)\n{\n    Connector c1 = ducts[0].ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n    Connector c2 = ducts[1].ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n    if (c1 != null && c2 != null)\n    {\n        \/\/ CORRECCIÓN: El método correcto es NewUnionFitting, no NewTeeFitting para una conexión simple.\n        doc.Create.NewUnionFitting(c1, c2);\n    }\n}"}
{"prompt":"Generate a new A3 sheet and place a legend on it.","completion":"using (Transaction t = new Transaction(doc, \"Create Sheet with Legend\"))\n{\n    t.Start();\n    FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(tb => tb.Name.Contains(\"A3\"));\n    View legendView = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().FirstOrDefault(v => v.ViewType == ViewType.Legend);\n\n    if (titleBlock != null && legendView != null)\n    {\n        ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n        if (newSheet != null)\n        {\n            BoundingBoxUV sheetBox = newSheet.Outline;\n            UV centerUv = (sheetBox.Min + sheetBox.Max) \/ 2.0;\n            XYZ centerPoint = new XYZ(centerUv.U, centerUv.V, 0);\n            Viewport.Create(doc, newSheet.Id, legendView.Id, centerPoint);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Retrieve all rooms on Level 2","completion":"string levelName = \"Level 2\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(targetLevel.Id);\n    FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WherePasses(levelFilter);\n    uidoc.Selection.SetElementIds(collector.ToElementIds());\n}"}
{"prompt":"Establece la visibilidad de la categoría 'Mobiliario' en falso en la vista activa.","completion":"Category furnitureCat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Furniture);\nif (furnitureCat != null && doc.ActiveView != null)\n{\n    doc.ActiveView.SetCategoryHidden(furnitureCat.Id, true);\n}"}
{"prompt":"Inserta un punto de referencia en las coordenadas (5,1,1) dentro del editor de familias.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(5,1,1));"}
{"prompt":"Create a detail group with the selected detail items.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds != null && selectedIds.Count > 0)\n{\n    List<ElementId> detailIds = new List<ElementId>();\n    foreach(ElementId id in selectedIds)\n    {\n        Element elem = doc.GetElement(id);\n        if (elem != null && elem.Category != null && elem.Category.CategoryType == CategoryType.Annotation)\n        {\n            detailIds.Add(id);\n        }\n    }\n\n    if (detailIds.Count > 0)\n    {\n        Group group = doc.Create.NewGroup(detailIds);\n        if (group != null)\n        {\n            group.Name = \"Typical Detail 1\";\n        }\n    }\n}"}
{"prompt":"Find all annotation families and count how many there are.","completion":"List<Family> annotationFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.CategoryType == CategoryType.Annotation).ToList();\nint count = annotationFamilies.Count;\n"}
{"prompt":"Place an instance of the 'Office Desk' family in the center of the 'Office 99' room.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Office 99\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Office Desk\") as FamilySymbol;\nif(furnitureSymbol != null && !furnitureSymbol.IsActive) furnitureSymbol.Activate();\nif(room != null)\n{\n    LocationPoint roomCenter = room.Location as LocationPoint;\n    if(roomCenter != null && furnitureSymbol != null && room.Level != null)\n    {\n        doc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Assign the 'Mark' parameter of all selected walls to 'W-EXT-5'.","completion":"using (Transaction t = new Transaction(doc, \"Set Wall Mark\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    ICollection<ElementId> selectedIds = localUidoc.Selection.GetElementIds();\n\n    if (selectedIds != null && selectedIds.Count > 5)\n    {\n        foreach(ElementId id in selectedIds)\n        {\n            Element elem = doc.GetElement(id);\n            if(elem is Wall)\n            {\n                Parameter markParam = elem.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n                if (markParam != null && !markParam.IsReadOnly) markParam.Set(\"W-EXT-01\");\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea un nuevo nivel llamado 'Mezzanine' a 6.8 metros de elevación.","completion":"string levelName = \"Mezzanine\";\ndouble elevation = UnitUtils.ConvertToInternalUnits(6.8, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Construct a new Level named 'Level 5' at an elevation of 7 meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(7, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\nif (newLevel != null)\n{\n    try { newLevel.Name = \"Level 5\"; } catch {}\n}"}
{"prompt":"Build an MEP space for each room on Level 2","completion":"string levelName = \"Level 2\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    FilteredElementCollector roomCollector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WherePasses(new ElementLevelFilter(targetLevel.Id));\n    foreach (Room room in roomCollector.ToElements().Cast<Room>())\n    {\n        if (room.Location != null)\n        {\n            LocationPoint locPoint = room.Location as LocationPoint;\n            if(locPoint != null)\n            {\n                UV point = new UV(locPoint.Point.X, locPoint.Point.Y);\n                doc.Create.NewSpace(targetLevel, point);\n            }\n        }\n    }\n}"}
{"prompt":"Coloca un mueble en las coordenadas (2,3).","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null && furnitureSymbol != null)\n{\n    doc.Create.NewFamilyInstance(new XYZ(UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0), furnitureSymbol, level, StructuralType.NonStructural);\n}"}
{"prompt":"Ajusta el parámetro 'Función' de todos los muros seleccionados a 'Interior'.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nif (selectedIds.Count > 0)\n{\n    foreach(ElementId id in selectedIds)\n    {\n        Wall wall = doc.GetElement(id) as Wall;\n        if (wall != null)\n        {\n            Parameter funcParam = wall.get_Parameter(BuiltInParameter.FUNCTION_PARAM);\n            if (funcParam != null && !funcParam.IsReadOnly)\n            {\n                funcParam.Set(1); \/\/ 1 corresponde a Interior\n            }\n        }\n    }\n}"}
{"prompt":"Ajusta el nivel de detalle de la vista actual a 'Bajo'.","completion":"View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.DetailLevel = ViewDetailLevel.Coarse;\n}"}
{"prompt":"Coloca postes de iluminación cada 10m en un camino de 100m.","completion":"FamilySymbol lightSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsElementType().FirstOrDefault(s => s.Name.Contains(\"Post\") || s.Name.Contains(\"Pole\")) as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (lightSymbol != null && level != null)\n{\n    if (!lightSymbol.IsActive)\n    {\n        lightSymbol.Activate();\n    }\n    double spacing = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\n    double pathLength = UnitUtils.ConvertToInternalUnits(100, UnitTypeId.Meters);\n    int postCount = (int)(pathLength \/ spacing);\n    for (int i = 0; i <= postCount; i++)\n    {\n        XYZ point = new XYZ(i * spacing, 0, 0);\n        doc.Create.NewFamilyInstance(point, lightSymbol, level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Create a global length parameter named 'CorridorWidth' with a value of 1.6m.","completion":"string paramName = \"CorridorWidth\";\nGlobalParameter gp = GlobalParameter.Create(doc, paramName, SpecTypeId.Length);\n\nif (gp != null)\n{\n    gp.SetValue(new DoubleParameterValue(UnitUtils.ConvertToInternalUnits(1.6, UnitTypeId.Meters)));\n}"}
{"prompt":"Assign the 'Mark' parameter of all selected walls to 'W-EXT-3'.","completion":"using (Transaction t = new Transaction(doc, \"Set Wall Mark\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    ICollection<ElementId> selectedIds = localUidoc.Selection.GetElementIds();\n\n    if (selectedIds != null && selectedIds.Count > 3)\n    {\n        foreach(ElementId id in selectedIds)\n        {\n            Element elem = doc.GetElement(id);\n            if(elem is Wall)\n            {\n                Parameter p = elem.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n                if (p != null && !p.IsReadOnly)\n                {\n                    p.Set(\"W-EXT-01\");\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Construct a vertical shaft opening from the base level to the top level.","completion":"using (Transaction t = new Transaction(doc, \"Create Shaft\"))\n{\n    t.Start();\n    Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderBy(l => l.ProjectElevation).FirstOrDefault();\n    Level topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderByDescending(l => l.ProjectElevation).FirstOrDefault();\n\n    if (bottomLevel != null && topLevel != null)\n    {\n        XYZ p1 = new XYZ(2 \/ 0.3048, 2 \/ 0.3048,0);\n        XYZ p2 = new XYZ(5 \/ 0.3048, 2 \/ 0.3048,0);\n        XYZ p3 = new XYZ(5 \/ 0.3048, 5 \/ 0.3048,0);\n        XYZ p4 = new XYZ(2 \/ 0.3048, 5 \/ 0.3048,0);\n        CurveArray profile = new CurveArray();\n        profile.Append(Line.CreateBound(p1,p2));\n        profile.Append(Line.CreateBound(p2,p3));\n        profile.Append(Line.CreateBound(p3,p4));\n        profile.Append(Line.CreateBound(p4,p1));\n        doc.Create.NewOpening(bottomLevel, topLevel, profile);\n    }\n    t.Commit();\n}"}
{"prompt":"Obtén todos los muros del Nivel 1 que son estructurales.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\nif (level1 != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level1.Id);\n    ElementCategoryFilter categoryFilter = new ElementCategoryFilter(BuiltInCategory.OST_Walls);\n    ParameterValueProvider pvp = new ParameterValueProvider(new ElementId(BuiltInParameter.WALL_STRUCTURAL_SIGNIFICANT));\n    FilterIntegerRule rule = new FilterIntegerRule(pvp, new FilterNumericEquals(), 1);\n    ElementParameterFilter structuralFilter = new ElementParameterFilter(rule);\n    LogicalAndFilter andFilter = new LogicalAndFilter(new List<ElementFilter> { levelFilter, categoryFilter, structuralFilter });\n    List<Element> structuralWalls = new FilteredElementCollector(doc).WherePasses(andFilter).ToList();\n}"}
{"prompt":"Turn a selected element 86 degrees around its Z-axis.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select an element to rotate\");\nElement elem = doc.GetElement(pickedRef.ElementId);\nLocationPoint lp = elem.Location as LocationPoint;\nLine axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\nElementTransformUtils.RotateElement(doc, elem.Id, axis, Math.PI \/ 86);"}
{"prompt":"Cambia el tipo de todos los muros seleccionados a 'Muro Exterior'.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nWallType targetWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Name == \"Muro Exterior\");\nif(targetWallType != null)\n{\n    foreach(ElementId id in selectedIds)\n    {\n        Wall wall = doc.GetElement(id) as Wall;\n        if(wall != null)\n        {\n            wall.ChangeTypeId(targetWallType.Id);\n        }\n    }\n}"}
{"prompt":"Tag all walls in the current view.","completion":"View activeView = doc.ActiveView;\nif (activeView == null) return;\n\nFilteredElementCollector collector = new FilteredElementCollector(doc, activeView.Id)\n    .OfCategory(BuiltInCategory.OST_Walls)\n    .WhereElementIsNotElementType();\n\nIList<Element> elementsToTag = collector.ToElements();\n\nif (elementsToTag.Any())\n{\n    foreach (Element elem in elementsToTag)\n    {\n        Reference elemRef = new Reference(elem);\n        BoundingBoxXYZ bbox = elem.get_BoundingBox(activeView);\n        if (bbox == null) continue;\n\n        XYZ tagLocation = (bbox.Min + bbox.Max) \/ 2.0;\n        IndependentTag.Create(doc, activeView.Id, elemRef, true, TagMode.TM_ADDBY_CATEGORY, TagOrientation.Horizontal, tagLocation);\n    }\n}"}
{"prompt":"Set the sill height of all windows to 1 meter.","completion":"using (Transaction t = new Transaction(doc, \"Set Sill Height\"))\n{\n    t.Start();\n    double sillHeight = 1 \/ 0.3048;\n    List<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\n    foreach(FamilyInstance window in windows)\n    {\n        Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n        if (sillHeightParam != null && !sillHeightParam.IsReadOnly)\n        {\n            sillHeightParam.Set(sillHeight);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Define a view filter to hide detail lines.","completion":"string filterName = \"Hide Detail Lines\";\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    ICollection<ElementId> catsToHide = new List<ElementId>{new ElementId(BuiltInCategory.OST_Lines)};\n    ElementFilter filter = new ElementCategoryFilter(new ElementId(BuiltInCategory.OST_Lines));\n    ParameterFilterElement pfe = ParameterFilterElement.Create(doc, filterName, catsToHide, filter);\n    \n    if (pfe != null)\n    {\n        activeView.AddFilter(pfe.Id);\n        activeView.SetFilterVisibility(pfe.Id, false);\n    }\n}"}
{"prompt":"Copia el nivel 1 con un desfase de 8m y llámalo 'Mezanine'.","completion":"string levelName = \"Mezanine\";\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\n\nif (level1 != null)\n{\n    double newElevation = level1.ProjectElevation + UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, newElevation);\n    if (newLevel != null)\n    {\n        newLevel.Name = levelName;\n    }\n}"}
{"prompt":"Add a reference point at coordinates (1,6,7) inside the family editor.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(1,6,7));"}
{"prompt":"Duplica la vista de planta 'Nivel 2' y conviértela en una plantilla de vista.","completion":"using (Transaction t = new Transaction(doc, \"Create View Template\"))\n{\n    t.Start();\n    ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().FirstOrDefault(v => v.Name == \"Nivel 2\");\n    string templateName = \"Plantilla Nivel 2\";\n\n    if (viewToDuplicate != null)\n    {\n        ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n        View newView = doc.GetElement(newViewId) as View;\n        if (newView != null)\n        {\n           \/\/ Direct conversion to a template may not be available in older APIs.\n           \/\/ A common workaround is to set the IsTemplate property if available and writable, \n           \/\/ which is not the case here. This is left as a comment for conceptual understanding.\n           \/\/ newView.IsTemplate = true;\n            newView.Name = templateName;\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea un nuevo tipo de muro de 20cm llamado 'Muro Estructural 22cm'.","completion":"string newTypeName = \"Muro Estructural 22cm\";\nWallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(newTypeName) as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(20, UnitTypeId.Centimeters));\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n}"}
{"prompt":"Build a 'Roof Terrace' level at 15m.","completion":"string levelName = \"Roof Terrace\";\ndouble elev = UnitUtils.ConvertToInternalUnits(15, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elev);\nnewLevel.Name = levelName;\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"I want to see only what I've selected.","completion":"ICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nView activeView = doc.ActiveView;\n\nif (activeView != null && selectedIds.Any())\n{\n    activeView.IsolateElementsTemporary(selectedIds);\n}"}
{"prompt":"Get all walls from a linked model that intersect with a bounding box.","completion":"RevitLinkInstance linkInstance = new FilteredElementCollector(doc).OfClass(typeof(RevitLinkInstance)).FirstOrDefault() as RevitLinkInstance;\nList<Element> linkedWalls = new List<Element>();\nif (linkInstance != null)\n{\n    Document linkDoc = linkInstance.GetLinkDocument();\n    if (linkDoc != null)\n    {\n        BoundingBoxXYZ bbox = new BoundingBoxXYZ();\n        bbox.Min = new XYZ(0,0,0);\n        bbox.Max = new XYZ(50, 50, 10);\n        Outline outline = new Outline(bbox.Min, bbox.Max);\n        BoundingBoxIntersectsFilter filter = new BoundingBoxIntersectsFilter(outline);\n        linkedWalls = new FilteredElementCollector(linkDoc).OfClass(typeof(Wall)).WherePasses(filter).ToList();\n    }\n}"}
{"prompt":"Duplicate the 'Generic - 163mm' wall type and name it 'Interior - 15cm Plaster'.","completion":"string originalName = \"Generic - 163mm\";\nstring newName = \"Interior - 15cm Plaster\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif(originalType!=null)\n    originalType.Duplicate(newName);"}
{"prompt":"Crea un nivel 'Roof Terrace' a 15m.","completion":"string levelName = \"Roof Terrace\";\ndouble elev = UnitUtils.ConvertToInternalUnits(15, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elev);\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Recupera los IDs de todas las vistas 3D que empiezan con 'Coord' para exportación.","completion":"List<ElementId> viewsToExport = new FilteredElementCollector(doc).OfClass(typeof(View3D)).Cast<View3D>().Where(v => v.Name.StartsWith(\"Coord\") && !v.IsTemplate).Select(v => v.Id).ToList();\n"}
{"prompt":"Clona el tipo de muro 'Genérico - 145mm' y nómbralo 'Interior - 20cm Yeso'.","completion":"string originalName = \"Genérico - 145mm\";\nstring newName = \"Interior - 20cm Yeso\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif (originalType != null)\n{\n    WallType newType = originalType.Duplicate(newName) as WallType;\n}"}
{"prompt":"Create an electrical circuit connecting light fixtures to a panel.","completion":"using (Transaction t = new Transaction(doc, \"Create Electrical Circuit\"))\n{\n    t.Start();\n    FamilyInstance panel = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_ElectricalEquipment).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\n    List<ElementId> fixtureIds = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsNotElementType().ToElementIds().ToList();\n\n    if (panel != null && fixtureIds.Count > 0)\n    {\n        ElectricalSystem electricalSystem = ElectricalSystem.Create(doc, fixtureIds, ElectricalSystemType.PowerCircuit);\n        if(electricalSystem != null)\n        {\n            electricalSystem.SelectPanel(panel);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Coloca un rociador en las coordenadas (8,2,6).","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol sprinklerSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Sprinklers).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (level != null && sprinklerSymbol != null)\n{\n    if (!sprinklerSymbol.IsActive) sprinklerSymbol.Activate();\n    XYZ placementPoint = new XYZ(UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(6, UnitTypeId.Meters));\n    doc.Create.NewFamilyInstance(placementPoint, sprinklerSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n}"}
{"prompt":"Copia el nivel 1 con un desfase de 7m y llámalo 'Mezanine'.","completion":"string levelName = \"Mezanine\";\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\n\nif (level1 != null)\n{\n    double newElevation = level1.ProjectElevation + UnitUtils.ConvertToInternalUnits(7, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, newElevation);\n    if (newLevel != null)\n    {\n        newLevel.Name = levelName;\n    }\n}"}
{"prompt":"Create a new door type named 'FR-90 Door' and set its fire rating to '90 min'.","completion":"using (Transaction t = new Transaction(doc, \"Create Door Type\"))\n{\n    t.Start();\n    string newTypeName = \"FR-90 Door\";\n    FamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n    if (doorTypeToDuplicate != null)\n    {\n        FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\n        if (newDoorType != null)\n        {\n            Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n            if(fireRatingParam != null && !fireRatingParam.IsReadOnly)\n            {\n                fireRatingParam.Set(\"90 min\");\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create an in-place family for a custom reception desk using an extrusion.","completion":""}
{"prompt":"Copia la vista 'Losa 105' como una vista dependiente.","completion":"ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v => v.Name == \"Losa 105\") as ViewPlan;\n\nif (viewToDuplicate != null)\n{\n    ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n}"}
{"prompt":"Create a new window schedule that includes Type Mark, Width, and Height.","completion":"string scheduleName = \"Window Schedule\";\nViewSchedule schedule = ViewSchedule.CreateSchedule(doc, new ElementId(BuiltInCategory.OST_Windows));\n\nif (schedule != null)\n{\n    schedule.Name = scheduleName;\n    ScheduleDefinition def = schedule.Definition;\n    if (def != null)\n    {\n        SchedulableField typeMarkField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.ALL_MODEL_TYPE_MARK);\n        SchedulableField widthField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.FAMILY_WIDTH_PARAM);\n        SchedulableField heightField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.FAMILY_HEIGHT_PARAM);\n        \n        if (typeMarkField != null) def.AddField(typeMarkField);\n        if (widthField != null) def.AddField(widthField);\n        if (heightField != null) def.AddField(heightField);\n    }\n}"}
{"prompt":"Find all doors on Level 5 that belong to the 'Single-Flush' family.","completion":"string levelName = \"Level 5\";\nstring familyName = \"Single-Flush\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WherePasses(new ElementLevelFilter(targetLevel.Id));\n    List<ElementId> doorIds = new List<ElementId>();\n    foreach (Element door in collector)\n    {\n        FamilyInstance fi = door as FamilyInstance;\n        if (fi != null && fi.Symbol.Family.Name == familyName)\n        {\n            doorIds.Add(door.Id);\n        }\n    }\n    uidoc.Selection.SetElementIds(doorIds);\n}"}
{"prompt":"Find the structural column type named \"305 x 452mm\" and place it at X=1, Y=12.5","completion":"string columnTypeName = \"305 x 452mm\";\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(s => s.Name == columnTypeName);\n\nif (level != null && columnSymbol != null)\n{\n    if (!columnSymbol.IsActive)\n    {\n        columnSymbol.Activate();\n    }\n    doc.Create.NewFamilyInstance(new XYZ(1, 12.5, 0), columnSymbol, level, StructuralType.Column);\n}"}
{"prompt":"Crea un nuevo material llamado 'Vidrio Reflectante' y asígnale un color base y una transparencia.","completion":"string materialName = \"Vidrio Reflectante\";\nElementId materialId = Material.Create(doc, materialName);\nif (materialId != ElementId.InvalidElementId)\n{\n    Material material = doc.GetElement(materialId) as Material;\n    if (material != null)\n    {\n        material.Color = new Color(210, 230, 240);\n        material.Transparency = 80;\n    }\n}"}
{"prompt":"Create a floor plan view for 'Level 8'.","completion":"string levelName = \"Level 8\";\nLevel level3 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.FloorPlan);\n\nif (level3 != null && vft != null)\n{\n    ViewPlan viewPlan = ViewPlan.Create(doc, vft.Id, level3.Id);\n}"}
{"prompt":"Create a new door type named 'FR-90 Door' and set its fire rating to '90 min'.","completion":"using (Transaction t = new Transaction(doc, \"Create Door Type\"))\n{\n    t.Start();\n    string newTypeName = \"FR-90 Door\";\n    FamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n    if (doorTypeToDuplicate != null)\n    {\n        FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\n        if (newDoorType != null)\n        {\n            Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n            if(fireRatingParam != null && !fireRatingParam.IsReadOnly)\n            {\n                fireRatingParam.Set(\"90 min\");\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea columnas en cada intersección de ejes.","completion":"FamilySymbol colSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nList<Grid> grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().ToList();\n\nif (colSymbol != null && level != null && grids.Count >= 2)\n{\n    for (int i = 0; i < grids.Count; i++)\n    {\n        for (int j = i + 1; j < grids.Count; j++)\n        {\n            IntersectionResultArray results = null;\n            grids[i].Curve.Intersect(grids[j].Curve, out results);\n            if(results != null)\n            {\n                 foreach (IntersectionResult ir in results)\n                 {\n                     doc.Create.NewFamilyInstance(ir.XYZPoint, colSymbol, level, StructuralType.Column);\n                 }\n            }\n        }\n    }\n}"}
{"prompt":"Construct a global length parameter named 'CorridorWidth' with a value of 1.1m.","completion":"string paramName = \"CorridorWidth\";\nGlobalParameter gp = GlobalParameter.Create(doc, paramName, SpecTypeId.Length);\n\nif (gp != null)\n{\n    gp.SetValue(new DoubleParameterValue(UnitUtils.ConvertToInternalUnits(1.1, UnitTypeId.Meters)));\n}"}
{"prompt":"Inserta un punto de referencia en las coordenadas (4,1,7) dentro del editor de familias.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(4,1,7));"}
{"prompt":"Clona la vista 'Nivel 2' como una vista dependiente.","completion":"ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v => v.Name == \"Nivel 2\") as ViewPlan;\n\nif (viewToDuplicate != null)\n{\n    ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n}"}
{"prompt":"Inserta un punto de referencia en las coordenadas (1,2,3) dentro del editor de familias.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(1,2,3));"}
{"prompt":"Find all views that do not have an assigned view template.","completion":"List<View> viewsWithoutTemplate = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().Where(v => v.CanBePrinted && !v.IsTemplate && v.ViewTemplateId.Equals(ElementId.InvalidElementId)).ToList();"}
{"prompt":"Assign the sill height of all windows to 902mm.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits(902, UnitTypeId.Millimeters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Construct a wall on Level 1 from (0,0,0) to (10,0,0) with a height of 4 meters.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (level1 != null && wallType != null)\n{\n    XYZ p1 = new XYZ(0, 0, 0);\n    XYZ p2 = new XYZ(10, 0, 0);\n    Line wallCurve = Line.CreateBound(p1, p2);\n    double height = UnitUtils.ConvertToInternalUnits(4, UnitTypeId.Meters);\n    Wall.Create(doc, wallCurve, wallType.Id, level1.Id, height, 0.0, false, false);\n}"}
{"prompt":"Recarga el vínculo de Revit 'Estructura_LINK.rvt'.","completion":"RevitLinkType linkType = new FilteredElementCollector(doc).OfClass(typeof(RevitLinkType)).Cast<RevitLinkType>().FirstOrDefault(lt => lt.Name == \"Estructura_LINK.rvt\");\n\nif (linkType != null)\n{\n    linkType.Reload();\n}"}
{"prompt":"Crea un nuevo tipo de muro de 25cm llamado 'Interiores'.","completion":"string newTypeName = \"Interiores\";\nWallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif (oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(newTypeName) as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(25, UnitTypeId.Centimeters));\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n}"}
{"prompt":"Add a 90-degree elbow between two pipes.","completion":"using (Transaction t = new Transaction(doc, \"Add Elbow\"))\n{\n    t.Start();\n    List<Pipe> pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast<Pipe>().Where(p => p.ConnectorManager != null && p.ConnectorManager.UnusedConnectors.Size > 0).Take(2).ToList();\n\n    if (pipes.Count >= 2)\n    {\n        Connector c1 = pipes[0].ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n        Connector c2 = pipes[1].ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n        \n        if (c1 != null && c2 != null)\n        {\n            doc.Create.NewElbowFitting(c1, c2);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Rota el norte del proyecto 30 grados en sentido horario.","completion":"using (Transaction t = new Transaction(doc, \"Rotate Project North\"))\n{\n    t.Start();\n    BasePoint projectBasePoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(bp => !bp.IsShared);\n\n    if (projectBasePoint != null)\n    {\n        double angleInDegrees = 30.0;\n        double angleInRadians = -(angleInDegrees * Math.PI \/ 180.0);\n        using (var bbox = projectBasePoint.get_BoundingBox(null))\n        {\n          if (bbox != null)\n          {\n            XYZ center = bbox.Min;\n            Line axis = Line.CreateBound(center, center + XYZ.BasisZ);\n            ElementTransformUtils.RotateElement(doc, projectBasePoint.Id, axis, angleInRadians);\n          }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Incorpora un punto de referencia en las coordenadas (1,5,1) dentro del editor de familias.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(1,5,1));"}
{"prompt":"Fetch the IDs of all 3D views starting with 'Coord' for export.","completion":"List<ElementId> viewsToExport = new FilteredElementCollector(doc).OfClass(typeof(View3D)).Cast<View3D>().Where(v => v.Name.StartsWith(\"Coord\") && !v.IsTemplate).Select(v => v.Id).ToList();\n"}
{"prompt":"Generate a 'Roof Terrace' level at 18m.","completion":"string levelName = \"Roof Terrace\";\ndouble elev = UnitUtils.ConvertToInternalUnits(18, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elev);\nnewLevel.Name = levelName;\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Crea un nuevo tipo de muro 'Muro Genérico 300mm' con un grosor de 30cm.","completion":"using (Transaction t = new Transaction(doc, \"Create Wall Type\"))\n{\n    t.Start();\n    string newTypeName = \"Muro Genérico 300mm\";\n    WallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\n    if (oldWallType != null)\n    {\n        WallType newWallType = oldWallType.Duplicate(newTypeName) as WallType;\n        if (newWallType != null)\n        {\n            CompoundStructure cs = newWallType.GetCompoundStructure();\n            if (cs != null && cs.LayerCount > 0)\n            {\n                int coreLayerIndex = cs.GetFirstCoreLayerIndex();\n                if (coreLayerIndex >= 0 && coreLayerIndex < cs.LayerCount)\n                {\n                    cs.SetLayerWidth(coreLayerIndex, 300 \/ 304.8);\n                    newWallType.SetCompoundStructure(cs);\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Clone the 'Generic - 148mm' wall type and name it 'Interior - 13cm Plaster'.","completion":"string originalName = \"Generic - 148mm\";\nstring newName = \"Interior - 13cm Plaster\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif(originalType!=null)\n    originalType.Duplicate(newName);"}
{"prompt":"Duplicate the 'Generic - 132mm' wall type and name it 'Interior - 15cm Plaster'.","completion":"string originalName = \"Generic - 132mm\";\nstring newName = \"Interior - 15cm Plaster\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif(originalType!=null)\n    originalType.Duplicate(newName);"}
{"prompt":"Copia el tipo de muro 'Genérico - 148mm' y nómbralo 'Interior - 10cm Yeso'.","completion":"string originalName = \"Genérico - 148mm\";\nstring newName = \"Interior - 10cm Yeso\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif (originalType != null)\n{\n    WallType newType = originalType.Duplicate(newName) as WallType;\n}"}
{"prompt":"Position a spot elevation on a given face and view point.","completion":"using (Transaction t = new Transaction(doc, \"Place Spot Elevation\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference faceRef = localUidoc.Selection.PickObject(ObjectType.Face, \"Select the top face of the floor\");\n\n    View activeView = doc.ActiveView;\n\n    if (faceRef != null && activeView != null)\n    {\n        XYZ pointOnFace = faceRef.GlobalPoint;\n        XYZ leaderEnd = pointOnFace + new XYZ(1 \/ 0.3048, 1 \/ 0.3048, 0);\n        doc.Create.NewSpotElevation(activeView, faceRef, pointOnFace, pointOnFace, leaderEnd, pointOnFace, true);\n    }\n    t.Commit();\n}"}
{"prompt":"Build a new level named 'Mezzanine' at 6.8 meters elevation.","completion":"string levelName = \"Mezzanine\";\ndouble elevation = UnitUtils.ConvertToInternalUnits(6.8, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Crea un nuevo tipo de texto de 3mm de color azul.","completion":"using (Transaction t = new Transaction(doc, \"Create Text Type\"))\n{\n    t.Start();\n    string newTypeName = \"3mm Azul\";\n    TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\n\n    if (defaultType != null)\n    {\n        TextNoteType newType = defaultType.Duplicate(newTypeName) as TextNoteType;\n        if (newType != null)\n        {\n            Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n            if (textSizeParam != null && !textSizeParam.IsReadOnly) textSizeParam.Set(3 \/ 304.8);\n            \n            Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n            if (lineColorParam != null && !lineColorParam.IsReadOnly) lineColorParam.Set(255);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Put a piece of furniture at coordinates (2,3).","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (level != null && furnitureSymbol != null)\n{\n    if (!furnitureSymbol.IsActive) { furnitureSymbol.Activate(); }\n    XYZ point = new XYZ(2, 3, 0);\n    doc.Create.NewFamilyInstance(point, furnitureSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n}"}
{"prompt":"Crea un nuevo tipo de tubería con material de Cobre.","completion":"string newTypeName = \"Tubería de Cobre\";\nPipeType pipeTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(PipeType)).FirstOrDefault() as PipeType;\nMaterial copper = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name.Contains(\"Copper\") || m.Name.Contains(\"Cobre\")) as Material;\n\nif (pipeTypeToDuplicate != null && copper != null)\n{\n    PipeType newType = pipeTypeToDuplicate.Duplicate(newTypeName) as PipeType;\n    if (newType != null)\n    {\n        Parameter materialParam = newType.get_Parameter(BuiltInParameter.MATERIAL_ID_PARAM);\n        if (materialParam != null && !materialParam.IsReadOnly) materialParam.Set(copper.Id);\n    }\n}"}
{"prompt":"Create a new room on Level 1 at point (11, 14).","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\n\nif (level1 != null)\n{\n    UV point = new UV(11, 14);\n    Room room = doc.Create.NewRoom(level1, point);\n}"}
{"prompt":"Get the MEP space associated with the room 'Office 98'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Cast<Room>().FirstOrDefault(r => r.Name == \"Office 98\");\nList<Space> spaces = new List<Space>();\n\nif (room != null)\n{\n    spaces = new FilteredElementCollector(doc).OfClass(typeof(Space)).Cast<Space>().Where(s => s.Room != null && s.Room.Id == room.Id).ToList();\n}"}
{"prompt":"Place the 'Level 1' view in the center of the active sheet.","completion":"ViewPlan viewToPlace = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v => v.Name == \"Level 1\") as ViewPlan;\nViewSheet activeSheet = doc.ActiveView as ViewSheet;\n\nif (viewToPlace != null && activeSheet != null)\n{\n    BoundingBoxUV sheetBox = activeSheet.Outline;\n    XYZ centerPoint = new XYZ((sheetBox.Min.U + sheetBox.Max.U) \/ 2, (sheetBox.Min.V + sheetBox.Max.V) \/ 2, 0);\n    Viewport.Create(doc, activeSheet.Id, viewToPlace.Id, centerPoint);\n}"}
{"prompt":"Exporta el documento a un archivo IFC con la versión IFC4x3.","completion":"string folderPath = \"C:\/RevitExports\/\";\nstring fileName = doc.Title + \"_IFC4x3.ifc\";\nif(System.IO.Directory.Exists(folderPath))\n{\n    IFCExportOptions options = new IFCExportOptions();\n    options.FileVersion = IFCVersion.IFC4x3;\n    doc.Export(folderPath, fileName, options);\n}"}
{"prompt":"Create a Reflected Ceiling Plan view for Level 1.","completion":"string levelName = \"Level 1\";\nstring viewName = \"Level 1 Ceiling Plan\";\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.CeilingPlan);\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\n\nif (vft != null && level1 != null)\n{\n    ViewPlan rcp = ViewPlan.Create(doc, vft.Id, level1.Id);\n    if (rcp != null)\n    {\n        rcp.Name = viewName;\n    }\n}"}
{"prompt":"Create a shaft opening that passes through from Level 1 to Level 3.","completion":"using (Transaction t = new Transaction(doc, \"Create Shaft Opening\"))\n{\n    t.Start();\n    Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 1\");\n    Level topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 3\");\n\n    if (bottomLevel != null && topLevel != null)\n    {\n        XYZ p1 = new XYZ(5 \/ 0.3048, 5 \/ 0.3048,0);\n        XYZ p2 = new XYZ(8 \/ 0.3048, 5 \/ 0.3048,0);\n        XYZ p3 = new XYZ(8 \/ 0.3048, 8 \/ 0.3048,0);\n        XYZ p4 = new XYZ(5 \/ 0.3048, 8 \/ 0.3048,0);\n        CurveArray profile = new CurveArray();\n        profile.Append(Line.CreateBound(p1,p2));\n        profile.Append(Line.CreateBound(p2,p3));\n        profile.Append(Line.CreateBound(p3,p4));\n        profile.Append(Line.CreateBound(p4,p1));\n        Opening shaft = doc.Create.NewOpening(bottomLevel, topLevel, profile);\n    }\n    t.Commit();\n}"}
{"prompt":"Crea un muro en Nivel 1 de (0,0,0) a (5,0,0) con 5m de alto.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\nif (level1 != null)\n{\n    WallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n    if(wallType != null)\n    {\n        Line wallCurve = Line.CreateBound(new XYZ(0, 0, 0), new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0, 0));\n        double height = UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters);\n        Wall.Create(doc, wallCurve, wallType.Id, level1.Id, height, 0.0, false, false);\n    }\n}"}
{"prompt":"Create a new 3mm text type in blue color.","completion":"using (Transaction t = new Transaction(doc, \"Create Text Type\"))\n{\n    t.Start();\n    string newTypeName = \"3mm Blue\";\n    TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\n\n    if (defaultType != null)\n    {\n        TextNoteType newType = defaultType.Duplicate(newTypeName) as TextNoteType;\n        if (newType != null)\n        {\n            Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n            if (textSizeParam != null && !textSizeParam.IsReadOnly) textSizeParam.Set(3 \/ 304.8);\n            \n            Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n            if (lineColorParam != null && !lineColorParam.IsReadOnly) lineColorParam.Set(255);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Find all views that do not have an assigned view template.","completion":"List<View> viewsWithoutTemplate = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().Where(v => v.CanBePrinted && !v.IsTemplate && v.ViewTemplateId == ElementId.InvalidElementId).ToList();"}
{"prompt":"Crea un nuevo tipo de texto de 5mm de color verde.","completion":"using (Transaction t = new Transaction(doc, \"Create Green Text Type\"))\n{\n    t.Start();\n    string newTypeName = \"5mm Verde\";\n    TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\n    TextNoteType newType = null;\n    if (defaultType != null)\n    {\n        newType = defaultType.Duplicate(newTypeName) as TextNoteType;\n        if (newType != null)\n        {\n            Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n            if (textSizeParam != null && !textSizeParam.IsReadOnly)\n            {\n                textSizeParam.Set(5 \/ 304.8);\n            }\n            Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n            if (lineColorParam != null && !lineColorParam.IsReadOnly)\n            {\n                 lineColorParam.Set(65280);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Assign the 'Comments' parameter for all doors on Level 1 to 'Fire Rating - 87 min'.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\n\nif (level1 != null)\n{\n    List<FamilyInstance> doorsOnLevel1 = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsNotElementType().Cast<FamilyInstance>().Where(fi => fi.LevelId == level1.Id).ToList();\n    foreach(FamilyInstance door in doorsOnLevel1)\n    {\n        Parameter commentsParam = door.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n        if (commentsParam != null && !commentsParam.IsReadOnly) commentsParam.Set(\"Fire Rating - 87 min\");\n    }\n}"}
{"prompt":"Crea una nueva revisión y aplícala a la hoja activa.","completion":"Revision rev = Revision.Create(doc);\nViewSheet sheet = doc.ActiveView as ViewSheet;\n\nif (rev != null && sheet != null)\n{\n    rev.Description = \"Emitido para Construcción\";\n    rev.RevisionDate = DateTime.Now.ToString(\"yyyy-MM-dd\");\n    rev.IssuedBy = \"Departamento BIM\";\n    \n    ICollection<ElementId> revisions = sheet.GetAdditionalRevisionIds();\n    revisions.Add(rev.Id);\n    sheet.SetAdditionalRevisionIds(revisions);\n}"}
{"prompt":"Determine the total area of all rooms.","completion":"double totalArea = 0.0;\nList<Room> rooms = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>().ToList();\nforeach (Room room in rooms)\n{\n    totalArea += room.Area;\n}"}
{"prompt":"Sitúa una instancia de la familia 'Mesa de Oficina' en el centro de la habitación 'Despacho 104'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 104\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Mesa de Oficina\") as FamilySymbol;\nif(furnitureSymbol != null && !furnitureSymbol.IsActive) furnitureSymbol.Activate();\nif(room != null)\n{\n    LocationPoint roomCenter = room.Location as LocationPoint;\n    if(roomCenter != null && furnitureSymbol != null && room.Level != null)\n    {\n        doc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Insert an instance of the 'Office Desk' family in the center of the 'Office 97' room.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Office 97\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Office Desk\") as FamilySymbol;\nif(furnitureSymbol != null && !furnitureSymbol.IsActive) furnitureSymbol.Activate();\nif(room != null)\n{\n    LocationPoint roomCenter = room.Location as LocationPoint;\n    if(roomCenter != null && furnitureSymbol != null && room.Level != null)\n    {\n        doc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Agrega un punto de referencia en las coordenadas (1,4,7) dentro del editor de familias.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(1,4,7));"}
{"prompt":"Coloca las vistas 'Planta Nivel 1' y 'Losa 100' en el plano 'A-101'.","completion":"ViewSheet sheet = new FilteredElementCollector(doc).OfClass(typeof(ViewSheet)).Cast<ViewSheet>().FirstOrDefault(s => s.SheetNumber == \"A-101\");\nView view1 = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().FirstOrDefault(v => v.Name == \"Planta Nivel 1\");\nView view2 = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().FirstOrDefault(v => v.Name == \"Losa 100\");\nif (sheet != null && view1 != null && view2 != null)\n{\n    XYZ insertPoint1 = new XYZ(1.0, 1.0, 0);\n    Viewport.Create(doc, sheet.Id, view1.Id, insertPoint1);\n    XYZ insertPoint2 = new XYZ(1.0, 2.0, 0);\n    Viewport.Create(doc, sheet.Id, view2.Id, insertPoint2);\n}"}
{"prompt":"Append a reference point at coordinates (1,1,7) inside the family editor.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(1,1,7));"}
{"prompt":"Duplica el nivel 1 con un desfase de 3m y llámalo 'Mezanine'.","completion":"string levelName = \"Mezanine\";\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\n\nif (level1 != null)\n{\n    double newElevation = level1.ProjectElevation + UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, newElevation);\n    if (newLevel != null)\n    {\n        newLevel.Name = levelName;\n    }\n}"}
{"prompt":"Build a structural beam between (1,1,1) and (2,1,8) on Level 2","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 2\") as Level;\nFamilySymbol beamType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (beamType != null && level != null)\n{\n    if(!beamType.IsActive) beamType.Activate();\n    XYZ start = new XYZ(1, 1, 1);\n    XYZ end = new XYZ(2, 1, 8);\n    if (start.IsAlmostEqualTo(end)) return;\n    Line beamCurve = Line.CreateBound(start, end);\n    doc.Create.NewFamilyInstance(beamCurve, beamType, level, Autodesk.Revit.DB.Structure.StructuralType.Beam);\n}"}
{"prompt":"Calcula la longitud total de todos los ductos de Suministro de Aire.","completion":"List<Duct> ducts = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_DuctCurves).WhereElementIsNotElementType().Cast<Duct>().Where(d => d.get_Parameter(BuiltInParameter.RBS_SYSTEM_CLASSIFICATION_PARAM).AsString() == \"SupplyAir\").ToList();\ndouble totalLength = 0.0;\nforeach (Duct d in ducts)\n{\n    totalLength += d.get_Parameter(BuiltInParameter.CURVE_ELEM_LENGTH).AsDouble();\n}"}
{"prompt":"Dimension the length of a user-selected wall.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference wallRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a wall to dimension\");\n\nif (wallRef != null)\n{\n    Wall wall = doc.GetElement(wallRef) as Wall;\n    View activeView = doc.ActiveView;\n\n    if (wall != null && activeView != null)\n    {\n        LocationCurve locCurve = wall.Location as LocationCurve;\n        if (locCurve != null)\n        {\n            Line wallLine = locCurve.Curve as Line;\n            if (wallLine != null)\n            {\n                ReferenceArray refs = new ReferenceArray();\n                refs.Append(wallLine.GetEndPointReference(0));\n                refs.Append(wallLine.GetEndPointReference(1));\n                XYZ pt1 = wallLine.GetEndPoint(0).Add(XYZ.BasisZ * 2);\n                XYZ pt2 = wallLine.GetEndPoint(1).Add(XYZ.BasisZ * 2);\n                Line dimLine = Line.CreateBound(pt1, pt2);\n                doc.Create.NewDimension(activeView, dimLine, refs);\n            }\n        }\n    }\n}"}
{"prompt":"Attach a reference point at coordinates (5,1,1) inside the family editor.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(5,1,1));"}
{"prompt":"Build a 3D view with the section box enabled.","completion":"string viewName = \"3D View with Section Box\";\nViewFamilyType vft3D = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft3D != null)\n{\n    View3D view3d = View3D.CreateIsometric(doc, vft3D.Id);\n    if (view3d != null)\n    {\n        view3d.Name = viewName;\n        view3d.IsSectionBoxActive = true;\n    }\n}"}
{"prompt":"Build a new Level named 'Level 1' at an elevation of 15 meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(15, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\nif (newLevel != null)\n{\n    try { newLevel.Name = \"Level 1\"; } catch {}\n}"}
{"prompt":"Rota el elemento dado 45 grados alrededor de su centro.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un elemento para rotar\");\n\nif (pickedRef != null)\n{\n    Element elem = doc.GetElement(pickedRef.ElementId);\n    if (elem != null)\n    {\n        LocationPoint lp = elem.Location as LocationPoint;\n        if (lp != null)\n        {\n            Line axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\n            double angle = 45 * Math.PI \/ 180.0;\n            ElementTransformUtils.RotateElement(doc, elem.Id, axis, angle);\n        }\n    }\n}"}
{"prompt":"Set the 'Mark' parameter of all selected walls to 'W-EXT-1'.","completion":"using (Transaction t = new Transaction(doc, \"Set Wall Mark\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    ICollection<ElementId> selectedIds = localUidoc.Selection.GetElementIds();\n\n    if (selectedIds != null && selectedIds.Count > 1)\n    {\n        foreach(ElementId id in selectedIds)\n        {\n            Element elem = doc.GetElement(id);\n            if(elem is Wall)\n            {\n                Parameter markParam = elem.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n                if (markParam != null && !markParam.IsReadOnly) markParam.Set(\"W-EXT-01\");\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Generate a wall on Level 1 from (0,0,0) to (5,0,0) with a height of 5 meters.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (level1 != null && wallType != null)\n{\n    Line wallCurve = Line.CreateBound(new XYZ(0, 0, 0), new XYZ(5, 0, 0));\n    double height = UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters);\n    Wall.Create(doc, wallCurve, wallType.Id, level1.Id, height, 0.0, false, false);\n}"}
{"prompt":"Update the detail level of the current view to 'Coarse'.","completion":"View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.DetailLevel = ViewDetailLevel.Coarse;\n}"}
{"prompt":"Obtain a list of all family type names from the 'Furniture' category.","completion":"List<Element> furnitureTypes = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().ToList();\nList<string> typeNames = new List<string>();\nforeach(Element type in furnitureTypes)\n{\n    typeNames.Add(type.Name);\n}\n"}
{"prompt":"Crea un techo por extrusión con un perfil en arco.","completion":"using (Transaction t = new Transaction(doc, \"Create Extrusion Roof\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    RoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n\n    if (level != null && roofType != null && doc.ActiveView != null)\n    {\n        CurveArray profile = new CurveArray();\n        profile.Append(Arc.Create(new XYZ(-10,0,0), new XYZ(10,0,0), new XYZ(0,5,0)));\n        Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisY, XYZ.Zero);\n        ReferencePlane refPlane = doc.Create.NewReferencePlane(plane.Origin, plane.Origin + XYZ.BasisX, plane.Normal, doc.ActiveView);\n        if(refPlane != null)\n            doc.Create.NewExtrusionRoof(profile, refPlane, level, roofType, 0, 20);\n    }\n    t.Commit();\n}"}
{"prompt":"Encuentra todas las vistas que no tienen una plantilla de vista asignada.","completion":"List<View> viewsWithoutTemplate = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().Where(v => v.CanBePrinted && !v.IsTemplate && v.ViewTemplateId == ElementId.InvalidElementId).ToList();"}
{"prompt":"Establece el parámetro 'Marca' de todos los muros seleccionados a 'M-EXT-01'.","completion":"using (Transaction t = new Transaction(doc, \"Set Wall Mark\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    ICollection<ElementId> selectedIds = localUidoc.Selection.GetElementIds();\n\n    if (selectedIds != null && selectedIds.Count > 0)\n    {\n        foreach(ElementId id in selectedIds)\n        {\n            Element elem = doc.GetElement(id);\n            if(elem is Wall)\n            {\n                Parameter markParam = elem.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n                if (markParam != null && !markParam.IsReadOnly) markParam.Set(\"M-EXT-01\");\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Aísla temporalmente la categoría de Puertas en la vista activa.","completion":"ElementId doorCategoryId = new ElementId(BuiltInCategory.OST_Doors);\nICollection<ElementId> categoryIds = new List<ElementId> { doorCategoryId };\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.IsolateCategoriesTemporary(categoryIds);\n}"}
{"prompt":"Build an MEP space for each room on Level 1","completion":"string levelName = \"Level 1\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    FilteredElementCollector roomCollector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WherePasses(new ElementLevelFilter(targetLevel.Id));\n    foreach (Room room in roomCollector.ToElements().Cast<Room>())\n    {\n        LocationPoint locPoint = room.Location as LocationPoint;\n        if (locPoint != null)\n        {\n            UV point = new UV(locPoint.Point.X, locPoint.Point.Y);\n            doc.Create.NewSpace(targetLevel, point);\n        }\n    }\n}"}
{"prompt":"Añade una etiqueta a la columna más cercana al origen.","completion":"using (Transaction t = new Transaction(doc, \"Tag Column\"))\n{\n    t.Start();\n    View activeView = doc.ActiveView;\n    FamilyInstance column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().Cast<FamilyInstance>().OrderBy(c => {\n        LocationPoint lp = c.Location as LocationPoint;\n        return lp != null ? lp.Point.DistanceTo(XYZ.Zero) : double.MaxValue;\n    }).FirstOrDefault();\n\n    if (activeView != null && column != null)\n    {\n        LocationPoint loc = column.Location as LocationPoint;\n        if (loc != null)\n        {\n            IndependentTag.Create(doc, activeView.Id, new Reference(column), true, TagMode.TM_ADDBY_CATEGORY, TagOrientation.Horizontal, loc.Point);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Assign the 'Mark' parameter of all selected walls to 'W-EXT-6'.","completion":"using (Transaction t = new Transaction(doc, \"Set Wall Mark\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    ICollection<ElementId> selectedIds = localUidoc.Selection.GetElementIds();\n\n    if (selectedIds != null && selectedIds.Count > 6)\n    {\n        foreach(ElementId id in selectedIds)\n        {\n            Element elem = doc.GetElement(id);\n            if(elem is Wall)\n            {\n                Parameter p = elem.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n                if (p != null && !p.IsReadOnly)\n                {\n                    p.Set(\"W-EXT-01\");\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create a global length parameter named 'CorridorWidth' with a value of 1.1m.","completion":"string paramName = \"CorridorWidth\";\nGlobalParameter gp = GlobalParameter.Create(doc, paramName, SpecTypeId.Length);\n\nif (gp != null)\n{\n    gp.SetValue(new DoubleParameterValue(UnitUtils.ConvertToInternalUnits(1.1, UnitTypeId.Meters)));\n}"}
{"prompt":"Generate a new wall type 'Generic Wall 297mm' with a thickness of 34cm.","completion":"string newTypeName = \"Generic Wall 297mm\";\nWallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif (oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(newTypeName) as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(34, UnitTypeId.Centimeters));\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n}"}
{"prompt":"Create a grid of 5 horizontal and 5 vertical grids, spaced 6 meters apart.","completion":"double spacing = UnitUtils.ConvertToInternalUnits(6, UnitTypeId.Meters);\nint count = 5;\nfor (int i = 0; i < count; i++)\n{\n    Line line = Line.CreateBound(new XYZ(0, i * spacing, 0), new XYZ((count - 1) * spacing, i * spacing, 0));\n    Grid.Create(doc, line);\n}\nfor (int i = 0; i < count; i++)\n{\n    Line line = Line.CreateBound(new XYZ(i * spacing, 0, 0), new XYZ(i * spacing, (count - 1) * spacing, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Assign the 'Mark' parameter of all selected walls to 'W-EXT-4'.","completion":"using (Transaction t = new Transaction(doc, \"Set Wall Mark\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    ICollection<ElementId> selectedIds = localUidoc.Selection.GetElementIds();\n\n    if (selectedIds != null && selectedIds.Count > 4)\n    {\n        foreach(ElementId id in selectedIds)\n        {\n            Element elem = doc.GetElement(id);\n            if(elem is Wall)\n            {\n                Parameter markParam = elem.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n                if (markParam != null && !markParam.IsReadOnly) markParam.Set(\"W-EXT-01\");\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Construct 10 architectural worksets.","completion":"List<string> worksetNames = new List<string> { \"TAD_ARQ_WALLS\", \"TAD_ARQ_FINISHES\", \"TAD_ARQ_CEILINGS\", \"TAD_ARQ_FLOORS\", \"TAD_ARQ_RAILINGS\", \"TAD_ARQ_WINDOWS\", \"TAD_ARQ_CARPENTRY\", \"TAD_ARQ_FURNITURE\", \"TAD_ARQ_PLUMBING\", \"TAD_ARQ_EXTERIOR\" };\nforeach(string name in worksetNames)\n{\n    Workset newWorkset = Workset.Create(doc, name);\n}"}
{"prompt":"Actualiza el tipo de la ventana seleccionada al tipo 'Ventana Fija 124x60'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una ventana\");\nFamilySymbol newType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name == \"Ventana Fija 124x60\");\nif (pickedRef != null && newType != null)\n{\n    FamilyInstance window = doc.GetElement(pickedRef.ElementId) as FamilyInstance;\n    if (window != null)\n    {\n        window.Symbol = newType;\n    }\n}"}
{"prompt":"Create a 'Concrete-Rectangular 30x60' column at each grid intersection.","completion":"using (Transaction t = new Transaction(doc, \"Create Columns at Grids\"))\n{\n    t.Start();\n    FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(s => s.Name == \"Concrete-Rectangular 30x60\");\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderBy(l => l.Elevation).FirstOrDefault();\n    List<Grid> grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().ToList();\n    if (columnSymbol != null && level != null)\n    {\n        if (!columnSymbol.IsActive) columnSymbol.Activate();\n        for (int i = 0; i < grids.Count; i++)\n        {\n            for (int j = i + 1; j < grids.Count; j++)\n            {\n                IntersectionResultArray results;\n                if(grids[i].Curve.Intersect(grids[j].Curve, out results) == SetComparisonResult.Overlap)\n                {\n                    if (results != null && !results.IsEmpty)\n                    {\n                        foreach (IntersectionResult ir in results)\n                        {\n                            doc.Create.NewFamilyInstance(ir.XYZPoint, columnSymbol, level, StructuralType.Column);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Obtain a list of all plan views in the project.","completion":"List<ViewPlan> planViews = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().Where(v => !v.IsTemplate).ToList();"}
{"prompt":"Copia el tipo de muro 'Genérico - 164mm' y nómbralo 'Interior - 15cm Yeso'.","completion":"string originalName = \"Genérico - 164mm\";\nstring newName = \"Interior - 15cm Yeso\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif (originalType != null)\n{\n    WallType newType = originalType.Duplicate(newName) as WallType;\n}"}
{"prompt":"Create a new elevation view looking south.","completion":"using (Transaction t = new Transaction(doc, \"Create South Elevation\"))\n{\n    t.Start();\n    ViewFamilyType elevationVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(vft => vft.ViewFamily == ViewFamily.Elevation);\n    View activeView = doc.ActiveView;\n\n    if (elevationVFT != null && activeView != null)\n    {\n        ElevationMarker marker = ElevationMarker.CreateElevationMarker(doc, elevationVFT.Id, new XYZ(0, -20 \/ 0.3048, 0), 100);\n        \n        if (marker != null)\n        {\n            View aev = marker.CreateElevation(doc, activeView.Id, 0);\n            if (aev != null)\n            {\n                aev.Name = \"South Elevation\";\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Construct a 20x15 meter foundation slab.","completion":"using (Transaction t = new Transaction(doc, \"Create Foundation Slab\"))\n{\n    t.Start();\n    Level foundationLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderBy(l => l.Elevation).FirstOrDefault();\n    FloorType slabType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.get_Parameter(BuiltInParameter.FLOOR_PARAM_IS_STRUCTURAL).AsInteger() == 1);\n\n    if (foundationLevel != null && slabType != null)\n    {\n        XYZ p1 = new XYZ(0,0,0);\n        XYZ p2 = new XYZ(20\/0.3048, 0, 0);\n        XYZ p3 = new XYZ(20\/0.3048, 15\/0.3048, 0);\n        XYZ p4 = new XYZ(0, 15\/0.3048, 0);\n        CurveLoop profile = new CurveLoop();\n        profile.Append(Line.CreateBound(p1,p2));\n        profile.Append(Line.CreateBound(p2,p3));\n        profile.Append(Line.CreateBound(p3,p4));\n        profile.Append(Line.CreateBound(p4,p1));\n        Floor.Create(doc, new List<CurveLoop>{profile}, slabType.Id, foundationLevel.Id);\n    }\n    t.Commit();\n}"}
{"prompt":"Traza una región rellena con patrón diagonal.","completion":"using (Transaction t = new Transaction(doc, \"Draw Filled Region\"))\n{\n    t.Start();\n    View activeView = doc.ActiveView;\n    FillPatternElement fillPattern = new FilteredElementCollector(doc).OfClass(typeof(FillPatternElement)).Cast<FillPatternElement>().FirstOrDefault(p => !p.GetFillPattern().IsSolidFill);\n\n    if (activeView != null && fillPattern != null)\n    {\n        FilledRegionType filledRegionType = new FilteredElementCollector(doc, activeView.Id).OfClass(typeof(FilledRegionType)).FirstOrDefault() as FilledRegionType;\n        if (filledRegionType != null)\n        {\n            FilledRegionType newType = filledRegionType.Duplicate(\"Temp Diagonal Region\") as FilledRegionType;\n            if (newType != null)\n            {\n                newType.ForegroundPatternId = fillPattern.Id;\n                XYZ p1 = new XYZ(0,0,0);\n                XYZ p2 = new XYZ(5 \/ 0.3048,0,0);\n                XYZ p3 = new XYZ(5 \/ 0.3048,5 \/ 0.3048,0);\n                XYZ p4 = new XYZ(0,5 \/ 0.3048,0);\n                CurveLoop profile = new CurveLoop();\n                profile.Append(Line.CreateBound(p1,p2));\n                profile.Append(Line.CreateBound(p2,p3));\n                profile.Append(Line.CreateBound(p3,p4));\n                profile.Append(Line.CreateBound(p4,p1));\n                FilledRegion.Create(doc, newType.Id, activeView.Id, new List<CurveLoop>{profile});\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Replicate the 'Generic - 150mm' wall type and name it 'Interior - 15cm Plaster'.","completion":"string originalName = \"Generic - 150mm\";\nstring newName = \"Interior - 15cm Plaster\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif (originalType != null)\n{\n    WallType newType = originalType.Duplicate(newName) as WallType;\n}"}
{"prompt":"Get all subcategories from the Doors category.","completion":"Category doorCat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Doors);\nCategoryNameMap subcategories = doorCat.SubCategories;"}
{"prompt":"Exporta cada tabla de planificación a un archivo CSV individual.","completion":"string exportPath = \"C:\/RevitExports\/\";\nList<ViewSchedule> schedules = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().Where(vs => !vs.IsTemplate).ToList();\nViewScheduleExportOptions options = new ViewScheduleExportOptions();\noptions.FieldDelimiter = \",\";\nforeach(ViewSchedule schedule in schedules)\n{\n    schedule.Export(exportPath, schedule.Name + \".csv\", options);\n}"}
{"prompt":"Crea una nueva hoja A1 y coloca la vista 'Planta Baja' en ella.","completion":"using (Transaction t = new Transaction(doc, \"Create Sheet\"))\n{\n    t.Start();\n    string sheetNumber = \"A-101\";\n    FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(tb => tb.Name.Contains(\"A1\"));\n    View viewToPlace = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<View>().FirstOrDefault(v => v.Name == \"Planta Baja\");\n\n    if (titleBlock != null && viewToPlace != null)\n    {\n        ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n        if (newSheet != null)\n        {\n            newSheet.Name = \"Planta Arquitectónica - Planta Baja\";\n            newSheet.SheetNumber = sheetNumber;\n            BoundingBoxUV sheetBox = newSheet.Outline;\n            UV centerUv = (sheetBox.Min + sheetBox.Max) \/ 2;\n            XYZ centerPoint = new XYZ(centerUv.U, centerUv.V, 0);\n            Viewport.Create(doc, newSheet.Id, viewToPlace.Id, centerPoint);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Clona el tipo de muro 'Genérico - 145mm' y nómbralo 'Interior - 15cm Yeso'.","completion":"string originalName = \"Genérico - 145mm\";\nstring newName = \"Interior - 15cm Yeso\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif(originalType!=null)\n    originalType.Duplicate(newName);"}
{"prompt":"Oculta todas las categorías de anotación en la vista activa.","completion":"using (Transaction t = new Transaction(doc, \"Hide Annotation Categories\"))\n{\n    t.Start();\n    Categories categories = doc.Settings.Categories;\n    View activeView = doc.ActiveView;\n\n    if (activeView != null)\n    {\n        foreach(Category cat in categories)\n        {\n            if(cat.CategoryType == CategoryType.Annotation && cat.get_AllowsVisibilityControl(activeView))\n            {\n                 activeView.SetCategoryHidden(cat.Id, true);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea un nuevo tipo de muro de 26cm llamado 'Interiores'.","completion":"string newTypeName = \"Interiores\";\nWallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif (oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(newTypeName) as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(26, UnitTypeId.Centimeters));\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n}"}
{"prompt":"Coloca una cota de elevación en el Nivel 1.","completion":"using (Transaction t = new Transaction(doc, \"Place Spot Elevation\"))\n{\n    t.Start();\n    Level lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel 1\");\n    View activeView = doc.ActiveView;\n\n    if (lvl1 != null && activeView != null)\n    {\n        Reference levelRef = new Reference(lvl1);\n        XYZ origin = new XYZ(5\/0.3048, 5\/0.3048, lvl1.Elevation);\n        XYZ leaderEnd = origin + new XYZ(2\/0.3048, 2\/0.3048, 0);\n        doc.Create.NewSpotElevation(activeView, levelRef, origin, origin, leaderEnd, origin, true);\n    }\n    t.Commit();\n}"}
{"prompt":"Generate a Reflected Ceiling Plan view for Level 1.","completion":"string levelName = \"Level 1\";\nstring viewName = \"Level 1 Ceiling Plan\";\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.CeilingPlan);\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\n\nif (vft != null && level1 != null)\n{\n    ViewPlan rcp = ViewPlan.Create(doc, vft.Id, level1.Id);\n    if (rcp != null)\n    {\n        rcp.Name = viewName;\n    }\n}"}
{"prompt":"Export the geometry of a selected element to an SAT file.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select an element to export\");\n\nif (pickedRef != null)\n{\n    Element elem = doc.GetElement(pickedRef.ElementId);\n    if (elem != null)\n    {\n        string folderPath = \"C:\/RevitExports\/\";\n        string fileName = elem.Name + \".sat\";\n        SATExportOptions options = new SATExportOptions();\n        doc.Export(folderPath, fileName, new List<ElementId>{elem.Id}, options);\n    }\n}"}
{"prompt":"Crea una columna estructural en la posición X=10, Y=5.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null && columnSymbol != null)\n{\n    doc.Create.NewFamilyInstance(new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0), columnSymbol, level, StructuralType.Column);\n}"}
{"prompt":"Vincula un archivo DWG como referencia en la vista activa.","completion":"string filePath = \"C:\/CAD_Files\/Base_Plan.dwg\";\nDWGImportOptions options = new DWGImportOptions();\noptions.ColorMode = ImportColorMode.Preserved;\nElementId linkedFileId;\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    doc.Link(filePath, options, activeView, out linkedFileId);\n}"}
{"prompt":"Add a reference point at coordinates (1,1,5) inside the family editor.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(1,1,5));"}
{"prompt":"Crea una vista 3D orientada desde el sureste.","completion":"string viewName = \"Vista 3D Sureste\";\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft != null)\n{\n    View3D view3d = View3D.CreateIsometric(doc, vft.Id);\n    if (view3d != null)\n    {\n        XYZ eye = new XYZ(1, -1, 1);\n        XYZ up = new XYZ(0, 0, 1);\n        XYZ forward = new XYZ(-1, 1, -1);\n        view3d.SetOrientation(new ViewOrientation3D(eye, up, forward));\n        view3d.Name = viewName;\n    }\n}"}
{"prompt":"Find all views that do not have an assigned view template.","completion":"List<View> viewsWithoutTemplate = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().Where(v => v.CanBePrinted && !v.IsTemplate && v.ViewTemplateId == ElementId.InvalidElementId).ToList();"}
{"prompt":"Crea un grupo de detalles con los elementos de detalle seleccionados.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds != null && selectedIds.Count > 0)\n{\n    List<ElementId> detailIds = new List<ElementId>();\n    foreach(ElementId id in selectedIds)\n    {\n        Element elem = doc.GetElement(id);\n        if (elem != null && elem.Category != null && elem.Category.CategoryType == CategoryType.Annotation)\n        {\n            detailIds.Add(id);\n        }\n    }\n\n    if (detailIds.Count > 0)\n    {\n        Group group = doc.Create.NewGroup(detailIds);\n        if (group != null)\n        {\n            group.Name = \"Detalle Típico 1\";\n        }\n    }\n}"}
{"prompt":"Selecciona todos los muros del 'Nivel 5' y cambia su comentario a 'REVISAR AISLAMIENTO'.","completion":"Level level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 5\") as Level;\nif (level2 != null)\n{\n    List<Wall> wallsOnLevel2 = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Where(w => w.LevelId == level2.Id).Cast<Wall>().ToList();\n    foreach(Wall wall in wallsOnLevel2)\n    {\n        Parameter commentParam = wall.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n        if (commentParam != null && !commentParam.IsReadOnly)\n        {\n            commentParam.Set(\"REVISAR AISLAMIENTO\");\n        }\n    }\n}"}
{"prompt":"Generate a view filter to hide demolished walls.","completion":"using (Transaction t = new Transaction(doc, \"Create Demolition Filter\"))\n{\n    t.Start();\n    Phase demolishedPhase = new FilteredElementCollector(doc).OfClass(typeof(Phase)).Cast<Phase>().FirstOrDefault(p => p.Name.Contains(\"Demolished\") || p.Name.Contains(\"Demolición\"));\n    View activeView = doc.ActiveView;\n\n    if (demolishedPhase != null && activeView != null)\n    {\n        ElementId paramId = new ElementId(BuiltInParameter.PHASE_DEMOLISHED);\n        FilterRule rule = ParameterFilterRuleFactory.CreateEqualsRule(paramId, demolishedPhase.Id);\n        ElementFilter filter = new ElementParameterFilter(rule);\n        ICollection<ElementId> categories = new List<ElementId>{ new ElementId(BuiltInCategory.OST_Walls) };\n        ParameterFilterElement pfe = ParameterFilterElement.Create(doc, \"Demolition Filter\", categories, filter);\n        \n        if (pfe != null)\n        {\n            activeView.AddFilter(pfe.Id);\n            activeView.SetFilterVisibility(pfe.Id, false);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Recupera todas las habitaciones en el Nivel 'Losa 105'.","completion":"Level groundFloor = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Losa 105\") as Level;\nList<Element> roomsOnGround = new List<Element>();\n\nif (groundFloor != null)\n{\n    roomsOnGround = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Where(r => r.LevelId == groundFloor.Id).ToList();\n}"}
{"prompt":"Crea un nuevo nivel llamado 'Mezzanine' a 7.0 metros de elevación.","completion":"string levelName = \"Mezzanine\";\ndouble elevation = UnitUtils.ConvertToInternalUnits(7.0, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Rellena el parámetro de material de todos los muros con 'Concreto'.","completion":"Material concreteMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name.Contains(\"Concreto\")) as Material;\nvar walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>().ToList();\n\nif (concreteMaterial != null)\n{\n    foreach(Wall w in walls)\n    {\n        Parameter materialParam = w.get_Parameter(BuiltInParameter.STRUCTURAL_MATERIAL_PARAM);\n        if(materialParam != null && !materialParam.IsReadOnly) materialParam.Set(concreteMaterial.Id);\n    }\n}"}
{"prompt":"Aplica aislamiento térmico de 20mm a todas las tuberías de agua caliente.","completion":"PipeInsulationType insulationType = new FilteredElementCollector(doc).OfClass(typeof(PipeInsulationType)).FirstOrDefault() as PipeInsulationType;\nPipingSystemType hotWaterSystem = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).Cast<PipingSystemType>().FirstOrDefault(s => s.Name.Contains(\"Hot Water\") || s.Name.Contains(\"Agua Caliente\"));\n\nif (insulationType != null && hotWaterSystem != null)\n{\n    List<Pipe> pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast<Pipe>().Where(p => \n    {\n        Parameter systemParam = p.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM);\n        return systemParam != null && systemParam.HasValue && systemParam.AsElementId() == hotWaterSystem.Id;\n    }).ToList();\n    \n    foreach(Pipe p in pipes)\n    {\n        PipeInsulation.Create(doc, p.Id, insulationType.Id, UnitUtils.ConvertToInternalUnits(20, UnitTypeId.Millimeters));\n    }\n}"}
{"prompt":"Create a 'Generic - 200mm' wall on 'Level 1' from (0,0) to (10,5).","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == \"Generic - 200mm\") as WallType;\n\nif (level != null && wallType != null)\n{\n    XYZ startPoint = new XYZ(0, 0, 0);\n    XYZ endPoint = new XYZ(10, 5, 0);\n    Line wallCurve = Line.CreateBound(startPoint, endPoint);\n    \/\/ Use a default height of 10ft as it's not specified in the prompt\n    double height = 10.0;\n    Wall.Create(doc, wallCurve, wallType.Id, level.Id, height, 0, false, false);\n}"}
{"prompt":"Crea un nuevo tipo de muro de 26cm llamado 'Estructura'.","completion":"string newTypeName = \"Estructura\";\nWallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(newTypeName) as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(26, UnitTypeId.Centimeters));\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n}"}
{"prompt":"Create an extrusion roof with an arc profile.","completion":"using (Transaction t = new Transaction(doc, \"Create Extrusion Roof\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    RoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n\n    if (level != null && roofType != null && doc.ActiveView != null)\n    {\n        CurveArray profile = new CurveArray();\n        profile.Append(Arc.Create(new XYZ(-10,0,0), new XYZ(10,0,0), new XYZ(0,5,0)));\n        Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisY, XYZ.Zero);\n        ReferencePlane refPlane = doc.Create.NewReferencePlane(plane.Origin, plane.Origin + XYZ.BasisX, plane.Normal, doc.ActiveView);\n        if(refPlane != null)\n            doc.Create.NewExtrusionRoof(profile, refPlane, level, roofType, 0, 20);\n    }\n    t.Commit();\n}"}
{"prompt":"Elimina todos los tipos de muro no utilizados en el proyecto.","completion":"ICollection<ElementId> allWallTypes = new FilteredElementCollector(doc).OfClass(typeof(WallType)).ToElementIds();\nICollection<ElementId> usedWallTypes = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Select(w => w.GetTypeId()).Distinct().ToList();\nList<ElementId> unusedWallTypes = allWallTypes.Except(usedWallTypes).ToList();\nif (unusedWallTypes.Any())\n{\n    doc.Delete(unusedWallTypes);\n}"}
{"prompt":"Build a new level named 'Mezzanine' at 7.2 meters elevation.","completion":"string levelName = \"Mezzanine\";\ndouble elevation = UnitUtils.ConvertToInternalUnits(7.2, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Actualiza el nombre de la vista activa a 'PLANTA PARA CLIENTE'.","completion":"string newName = \"PLANTA PARA CLIENTE\";\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.Name = newName;\n}"}
{"prompt":"Position an instance of the 'Office Desk' family in the center of the 'Office 101' room.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Office 101\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Office Desk\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);"}
{"prompt":"Crea una nueva hoja A3 y colócale una leyenda.","completion":"using (Transaction t = new Transaction(doc, \"Create Sheet with Legend\"))\n{\n    t.Start();\n    FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(tb => tb.Name.Contains(\"A3\"));\n    View legendView = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().FirstOrDefault(v => v.ViewType == ViewType.Legend);\n\n    if (titleBlock != null && legendView != null)\n    {\n        ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n        if (newSheet != null)\n        {\n            BoundingBoxUV sheetBox = newSheet.Outline;\n            UV centerUv = (sheetBox.Min + sheetBox.Max) \/ 2.0;\n            XYZ centerPoint = new XYZ(centerUv.U, centerUv.V, 0);\n            Viewport.Create(doc, newSheet.Id, legendView.Id, centerPoint);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create a new wall type 'Generic Wall 300mm' with a thickness of 30cm.","completion":"using (Transaction t = new Transaction(doc, \"Create Wall Type\"))\n{\n    t.Start();\n    string newTypeName = \"Generic Wall 300mm\";\n    WallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\n    if (oldWallType != null)\n    {\n        WallType newWallType = oldWallType.Duplicate(newTypeName) as WallType;\n        if (newWallType != null)\n        {\n            CompoundStructure cs = newWallType.GetCompoundStructure();\n            if (cs != null && cs.LayerCount > 0)\n            {\n                int coreLayerIndex = cs.GetFirstCoreLayerIndex();\n                if (coreLayerIndex >= 0 && coreLayerIndex < cs.LayerCount)\n                {\n                    cs.SetLayerWidth(coreLayerIndex, 300 \/ 304.8);\n                    newWallType.SetCompoundStructure(cs);\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Construct a new room on Level 2 at point (6, 6).","completion":"string levelName = \"Level 2\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    UV point = new UV(6, 6);\n    Room newRoom = doc.Create.NewRoom(targetLevel, point);\n}"}
{"prompt":"Inserta una instancia de la familia 'Puerta Sencilla' en el centro de la habitación 'Despacho 103'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 103\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Puerta Sencilla\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);"}
{"prompt":"Añade los campos 'Planta Baja', 'Marca' y 'Volumen' a la tabla de pilares.","completion":"ViewSchedule schedule = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().FirstOrDefault(s => s.Name.Contains(\"Pilares\") || s.Name.Contains(\"Column\"));\nif (schedule != null)\n{\n    ScheduleDefinition def = schedule.Definition;\n    SchedulableField levelField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.FAMILY_LEVEL_PARAM);\n    if (levelField != null) def.AddField(levelField);\n    SchedulableField markField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.ALL_MODEL_MARK);\n    if (markField != null) def.AddField(markField);\n    SchedulableField volumeField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.HOST_VOLUME_COMPUTED);\n    if (volumeField != null) def.AddField(volumeField);\n}"}
{"prompt":"Establece el parámetro 'Comentarios' de todas las puertas del Nivel 1 a 'Clasificación Fuego - 90 min'.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\n\nif (level1 != null)\n{\n    List<FamilyInstance> doorsOnLevel1 = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsNotElementType().Cast<FamilyInstance>().Where(fi => fi.LevelId == level1.Id).ToList();\n    foreach(FamilyInstance door in doorsOnLevel1)\n    {\n        Parameter commentsParam = door.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n        if (commentsParam != null && !commentsParam.IsReadOnly) commentsParam.Set(\"Clasificación Fuego - 90 min\");\n    }\n}"}
{"prompt":"Ajusta el tipo de la ventana seleccionada al tipo 'Ventana Fija 118x60'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una ventana\");\nFamilySymbol newType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name == \"Ventana Fija 118x60\");\nif (pickedRef != null && newType != null)\n{\n    FamilyInstance window = doc.GetElement(pickedRef.ElementId) as FamilyInstance;\n    if (window != null)\n    {\n        window.Symbol = newType;\n    }\n}"}
{"prompt":"Clona el nivel 6 con un desfase de 7m y llámalo 'Mezanine'.","completion":"string levelName = \"Nivel 6\";\nLevel levelToCopy = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (levelToCopy != null)\n{\n    double offset = UnitUtils.ConvertToInternalUnits(7, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, levelToCopy.Elevation + offset);\n    newLevel.Name = \"Mezanine\";\n}"}
{"prompt":"Gira la columna seleccionada 45 grados.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una columna para rotar\");\nif (pickedRef != null)\n{\n    Element elem = doc.GetElement(pickedRef.ElementId);\n    LocationPoint lp = elem.Location as LocationPoint;\n    if (lp != null)\n    {\n        Line axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\n        double angle = 45 * Math.PI \/ 180.0;\n        ElementTransformUtils.RotateElement(doc, elem.Id, axis, angle);\n    }\n}"}
{"prompt":"Coloca la vista 'Nivel 1' en el centro de la hoja activa.","completion":"ViewPlan viewToPlace = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v => v.Name == \"Nivel 1\") as ViewPlan;\nViewSheet activeSheet = doc.ActiveView as ViewSheet;\n\nif (viewToPlace != null && activeSheet != null)\n{\n    BoundingBoxUV sheetBox = activeSheet.Outline;\n    XYZ centerPoint = new XYZ((sheetBox.Min.U + sheetBox.Max.U) \/ 2, (sheetBox.Min.V + sheetBox.Max.V) \/ 2, 0);\n    Viewport.Create(doc, activeSheet.Id, viewToPlace.Id, centerPoint);\n}"}
{"prompt":"Create a new door type named 'FR-90 Door' and set its fire rating to '90 min'.","completion":"string newTypeName = \"FR-90 Door\";\nFamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nFamilySymbol newDoorType = null;\nif (doorTypeToDuplicate != null)\n{\n    newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\n    if (newDoorType != null)\n    {\n        Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n        if (fireRatingParam != null && !fireRatingParam.IsReadOnly)\n        {\n            fireRatingParam.Set(\"90 min\");\n        }\n    }\n}"}
{"prompt":"Generate a structural beam between (1,2,11) and (5,0,4) on Level 2","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 2\") as Level;\nFamilySymbol beamType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (beamType != null && level != null)\n{\n    if(!beamType.IsActive) beamType.Activate();\n    XYZ start = new XYZ(1, 2, 11);\n    XYZ end = new XYZ(5, 0, 4);\n    if (start.IsAlmostEqualTo(end)) return;\n    Line beamCurve = Line.CreateBound(start, end);\n    doc.Create.NewFamilyInstance(beamCurve, beamType, level, Autodesk.Revit.DB.Structure.StructuralType.Beam);\n}"}
{"prompt":"Crea una superficie topográfica a partir de una lista de 4 puntos.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nElementId toposolidTypeId = Toposolid.GetDefaultToposolidType(doc);\n\nif (level != null && toposolidTypeId != ElementId.InvalidElementId)\n{\n    \/\/ Create a default set of points as none were specified in the prompt\n    IList<XYZ> points = new List<XYZ>\n    {\n        new XYZ(0, 0, 0),\n        new XYZ(50, 0, 2),\n        new XYZ(0, 50, 5),\n        new XYZ(50, 50, 3)\n    };\n    Toposolid.Create(doc, points, toposolidTypeId, level.Id);\n}"}
{"prompt":"Set the 'Mark' parameter of all selected walls to 'W-EXT-2'.","completion":"using (Transaction t = new Transaction(doc, \"Set Wall Mark\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    ICollection<ElementId> selectedIds = localUidoc.Selection.GetElementIds();\n\n    if (selectedIds != null && selectedIds.Count > 2)\n    {\n        foreach(ElementId id in selectedIds)\n        {\n            Element elem = doc.GetElement(id);\n            if(elem is Wall)\n            {\n                Parameter markParam = elem.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n                if (markParam != null && !markParam.IsReadOnly) markParam.Set(\"W-EXT-01\");\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea un nivel 'Roof Terrace' a 13m.","completion":"string levelName = \"Roof Terrace\";\ndouble elev = UnitUtils.ConvertToInternalUnits(13, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elev);\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Averigua quién es el propietario de un elemento seleccionado.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un elemento\");\n\nWorksharingTooltipInfo info = null;\nif (pickedRef != null)\n{\n    info = WorksharingUtils.GetWorksharingTooltipInfo(doc, pickedRef.ElementId);\n}\n"}
{"prompt":"Ajusta todas las ventanas para que la altura del antepecho sea 3 metro.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Crea un nuevo tipo de puerta llamado 'Puerta RF-90' y establece su resistencia al fuego a '90 min'.","completion":"string newTypeName = \"Puerta RF-90\";\nFamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nFamilySymbol newDoorType = null;\nif (doorTypeToDuplicate != null)\n{\n    newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\n    if (newDoorType != null)\n    {\n        Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n        if (fireRatingParam != null && !fireRatingParam.IsReadOnly)\n        {\n            fireRatingParam.Set(\"90 min\");\n        }\n    }\n}"}
{"prompt":"Construye ocho ejes horizontales con una separación de 10m.","completion":"double separation = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\nfor(int i = 0; i < 8; i++)\n{\n    Line line = Line.CreateBound(new XYZ(0, i * separation, 0), new XYZ(50, i * separation, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Reproduce la vista de planta 'Nivel 2' y conviértela en una plantilla de vista.","completion":"using (Transaction t = new Transaction(doc, \"Create View Template\"))\n{\n    t.Start();\n    ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().FirstOrDefault(v => v.Name == \"Nivel 2\");\n    string templateName = \"Plantilla Nivel 2\";\n\n    if (viewToDuplicate != null)\n    {\n        ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n        View newView = doc.GetElement(newViewId) as View;\n        if (newView != null)\n        {\n           \/\/ Direct conversion to a template may not be available in older APIs.\n           \/\/ A common workaround is to set the IsTemplate property if available and writable, \n           \/\/ which is not the case here. This is left as a comment for conceptual understanding.\n           \/\/ newView.IsTemplate = true;\n            newView.Name = templateName;\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea un muro del tipo 'Genérico - 200mm' en el 'Nivel 1' desde (0,0) hasta (10,5).","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == \"Genérico - 200mm\") as WallType;\nXYZ startPoint = new XYZ(0, 0, 0);\nXYZ endPoint = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0);\nLine wallCurve = Line.CreateBound(startPoint, endPoint);\ndouble height = UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\nWall.Create(doc, wallCurve, wallType.Id, level.Id, height, 0, false, false);"}
{"prompt":"Define the 'Comments' parameter for all doors on Level 3 to 'Fire Rating - 95 min'.","completion":"string levelName = \"Level 3\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(targetLevel.Id);\n    FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WherePasses(levelFilter);\n    foreach (Element door in collector)\n    {\n        Parameter commentsParam = door.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n        if (commentsParam != null && !commentsParam.IsReadOnly) { commentsParam.Set(\"Fire Rating - 95 min\"); }\n    }\n}"}
{"prompt":"Attach a 90-degree elbow between two pipes.","completion":"using (Transaction t = new Transaction(doc, \"Add Elbow\"))\n{\n    t.Start();\n    List<Pipe> pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast<Pipe>().Where(p => p.ConnectorManager != null && p.ConnectorManager.UnusedConnectors.Size > 0).Take(2).ToList();\n\n    if (pipes.Count >= 2)\n    {\n        Connector c1 = pipes[0].ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n        Connector c2 = pipes[1].ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n        \n        if (c1 != null && c2 != null)\n        {\n            doc.Create.NewElbowFitting(c1, c2);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create an electrical conduit with a 1-inch diameter.","completion":"using (Transaction t = new Transaction(doc, \"Create Conduit\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    ElementId conduitTypeId = new FilteredElementCollector(doc).OfClass(typeof(ConduitType)).FirstElementId();\n\n    if (level != null && conduitTypeId != null && conduitTypeId != ElementId.InvalidElementId)\n    {\n        XYZ start = new XYZ(0, 0, 3 \/ 0.3048);\n        XYZ end = new XYZ(5 \/ 0.3048, 0, 3 \/ 0.3048);\n        Conduit conduit = Conduit.Create(doc, conduitTypeId, start, end, level.Id);\n\n        if (conduit != null)\n        {\n            Parameter diameterParam = conduit.get_Parameter(BuiltInParameter.RBS_CONDUIT_DIAMETER_PARAM);\n            if (diameterParam != null && !diameterParam.IsReadOnly)\n            {\n                diameterParam.Set(1.0 \/ 12.0);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Añade un nivel llamado 'Nivel Azotea' a 15.5 metros.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(15.5, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Nivel Azotea\";\n}"}
{"prompt":"Establece la visibilidad de la categoría 'Mobiliario' en falso en la vista activa.","completion":"Category furnitureCat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Furniture);\nif (furnitureCat != null && doc.ActiveView != null)\n{\n    doc.ActiveView.SetCategoryHidden(furnitureCat.Id, true);\n}"}
{"prompt":"Group a room schedule by Level.","completion":"using (Transaction t = new Transaction(doc, \"Group Schedule\"))\n{\n    t.Start();\n    ViewSchedule schedule = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().FirstOrDefault(vs => vs.Definition.CategoryId.IntegerValue == (int)BuiltInCategory.OST_Rooms);\n\n    if (schedule != null)\n    {\n        ScheduleDefinition def = schedule.Definition;\n        if (def != null)\n        {\n            SchedulableField schedulableField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.ROOM_LEVEL_ID);\n            if (schedulableField != null)\n            {\n                ScheduleField field = def.AddField(schedulableField);\n                ScheduleSortGroupField sortGroupField = new ScheduleSortGroupField(field.FieldId);\n                sortGroupField.ShowHeader = true;\n                def.AddSortGroupField(sortGroupField);\n                def.IsItemized = false;\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Añade un punto de referencia en las coordenadas (4,2,1) dentro del editor de familias.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(4,2,1));"}
{"prompt":"Rotate a selected element 90 degrees around its Z-axis.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select an element to rotate\");\nElement elem = doc.GetElement(pickedRef.ElementId);\nLocationPoint lp = elem.Location as LocationPoint;\nLine axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\nElementTransformUtils.RotateElement(doc, elem.Id, axis, Math.PI \/ 2.0);"}
{"prompt":"Append a reference point at coordinates (1,2,1) inside the family editor.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(1,2,1));"}
{"prompt":"Crea un muro del tipo 'Genérico - 200mm' en el 'Nivel 1' desde (0,0) hasta (10,5).","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == \"Genérico - 200mm\") as WallType;\n\nif (level != null && wallType != null)\n{\n    XYZ startPoint = new XYZ(0, 0, 0);\n    XYZ endPoint = new XYZ(10, 5, 0);\n    Line wallCurve = Line.CreateBound(startPoint, endPoint);\n    \/\/ Use a default height of 10ft as it's not specified in the prompt\n    double height = 10.0;\n    Wall.Create(doc, wallCurve, wallType.Id, level.Id, height, 0, false, false);\n}"}
{"prompt":"Construct a 'Concrete-Rectangular 30x60' column at each grid intersection.","completion":"using (Transaction t = new Transaction(doc, \"Create Columns at Grids\"))\n{\n    t.Start();\n    FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(s => s.Name == \"Concrete-Rectangular 30x60\");\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderBy(l => l.Elevation).FirstOrDefault();\n    List<Grid> grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().ToList();\n    if (columnSymbol != null && level != null)\n    {\n        if (!columnSymbol.IsActive) columnSymbol.Activate();\n        for (int i = 0; i < grids.Count; i++)\n        {\n            for (int j = i + 1; j < grids.Count; j++)\n            {\n                IntersectionResultArray results;\n                if(grids[i].Curve.Intersect(grids[j].Curve, out results) == SetComparisonResult.Overlap)\n                {\n                    if (results != null && !results.IsEmpty)\n                    {\n                        foreach (IntersectionResult ir in results)\n                        {\n                            doc.Create.NewFamilyInstance(ir.XYZPoint, columnSymbol, level, StructuralType.Column);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Build a new door type named 'FR-90 Door' and set its fire rating to '90 min'.","completion":"string newTypeName = \"FR-90 Door\";\nFamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nFamilySymbol newDoorType = null;\nif (doorTypeToDuplicate != null)\n{\n    newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\n    if (newDoorType != null)\n    {\n        Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n        if (fireRatingParam != null && !fireRatingParam.IsReadOnly)\n        {\n            fireRatingParam.Set(\"90 min\");\n        }\n    }\n}"}
{"prompt":"Apply the 'X-Ray' visual style to the active 3D view.","completion":"View3D view3D = doc.ActiveView as View3D;\nif (view3D != null && !view3D.IsTemplate)\n{\n    view3D.DisplayStyle = DisplayStyle.Wireframe;\n}"}
{"prompt":"Configure the 'Mark' parameter of all selected walls to 'W-EXT-2'.","completion":"using (Transaction t = new Transaction(doc, \"Set Wall Mark\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    ICollection<ElementId> selectedIds = localUidoc.Selection.GetElementIds();\n\n    if (selectedIds != null && selectedIds.Count > 2)\n    {\n        foreach(ElementId id in selectedIds)\n        {\n            Element elem = doc.GetElement(id);\n            if(elem is Wall)\n            {\n                Parameter markParam = elem.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n                if (markParam != null && !markParam.IsReadOnly) markParam.Set(\"W-EXT-01\");\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Localiza todos los muros con un parámetro 'Marca' vacío y asigna 'WM-01'.","completion":"List<Wall> walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>().ToList();\nforeach(var w in walls)\n{\n  Parameter p = w.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n  if(p != null && !p.IsReadOnly && string.IsNullOrEmpty(p.AsString()))\n  {\n      p.Set(\"WM-01\");\n  }\n}"}
{"prompt":"Clone the 'Generic - 201mm' wall type and name it 'Interior - 15cm Plaster'.","completion":"string originalName = \"Generic - 201mm\";\nstring newName = \"Interior - 15cm Plaster\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif(originalType!=null)\n    originalType.Duplicate(newName);"}
{"prompt":"Set the sill height of all windows to 895mm.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits(895, UnitTypeId.Millimeters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Clona el nivel 5 con un desfase de 8m y llámalo 'Mezanine'.","completion":"string levelName = \"Nivel 5\";\nLevel levelToCopy = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (levelToCopy != null)\n{\n    double offset = UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, levelToCopy.Elevation + offset);\n    newLevel.Name = \"Mezanine\";\n}"}
{"prompt":"Create a 'Concrete-Rectangular 30x60' column at each grid intersection.","completion":"using (Transaction t = new Transaction(doc, \"Create Columns at Grids\"))\n{\n    t.Start();\n    FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(s => s.Name == \"Concrete-Rectangular 30x60\");\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderBy(l => l.Elevation).FirstOrDefault();\n    List<Grid> grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().ToList();\n    if (columnSymbol != null && level != null)\n    {\n        if (!columnSymbol.IsActive) columnSymbol.Activate();\n        for (int i = 0; i < grids.Count; i++)\n        {\n            for (int j = i + 1; j < grids.Count; j++)\n            {\n                IntersectionResultArray results;\n                if(grids[i].Curve.Intersect(grids[j].Curve, out results) == SetComparisonResult.Overlap)\n                {\n                    if (results != null && !results.IsEmpty)\n                    {\n                        foreach (IntersectionResult ir in results)\n                        {\n                            doc.Create.NewFamilyInstance(ir.XYZPoint, columnSymbol, level, StructuralType.Column);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Build a vertical shaft opening from the base level to the top level.","completion":"using (Transaction t = new Transaction(doc, \"Create Shaft\"))\n{\n    t.Start();\n    Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderBy(l => l.ProjectElevation).FirstOrDefault();\n    Level topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderByDescending(l => l.ProjectElevation).FirstOrDefault();\n\n    if (bottomLevel != null && topLevel != null)\n    {\n        XYZ p1 = new XYZ(2 \/ 0.3048, 2 \/ 0.3048,0);\n        XYZ p2 = new XYZ(5 \/ 0.3048, 2 \/ 0.3048,0);\n        XYZ p3 = new XYZ(5 \/ 0.3048, 5 \/ 0.3048,0);\n        XYZ p4 = new XYZ(2 \/ 0.3048, 5 \/ 0.3048,0);\n        CurveArray profile = new CurveArray();\n        profile.Append(Line.CreateBound(p1,p2));\n        profile.Append(Line.CreateBound(p2,p3));\n        profile.Append(Line.CreateBound(p3,p4));\n        profile.Append(Line.CreateBound(p4,p1));\n        doc.Create.NewOpening(bottomLevel, topLevel, profile);\n    }\n    t.Commit();\n}"}
{"prompt":"Export a list of all project warnings to a text file on the desktop.","completion":"string desktopPath = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);\nstring filePath = System.IO.Path.Combine(desktopPath, \"RevitWarnings.txt\");\nIList<FailureMessage> warnings = doc.GetWarnings();\nList<string> warningDescriptions = warnings.Select(w => w.GetDescriptionText()).ToList();\nSystem.IO.File.WriteAllLines(filePath, warningDescriptions);"}
{"prompt":"Clona el tipo de muro 'Genérico - 183mm' y nómbralo 'Interior - 15cm Yeso'.","completion":"string originalName = \"Genérico - 183mm\";\nstring newName = \"Interior - 15cm Yeso\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif(originalType!=null)\n    originalType.Duplicate(newName);"}
{"prompt":"Create a new schedule for Structural Columns.","completion":"string scheduleName = \"Structural Column Schedule\";\nElementId categoryId = new ElementId(BuiltInCategory.OST_StructuralColumns);\nViewSchedule schedule = ViewSchedule.CreateSchedule(doc, categoryId);\nschedule.Name = scheduleName;"}
{"prompt":"Cambia el parámetro 'Función' de todos los muros seleccionados a 'Interior'.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nif (selectedIds.Count > 0)\n{\n    foreach(ElementId id in selectedIds)\n    {\n        Wall wall = doc.GetElement(id) as Wall;\n        if (wall != null)\n        {\n            Parameter funcParam = wall.get_Parameter(BuiltInParameter.FUNCTION_PARAM);\n            if (funcParam != null && !funcParam.IsReadOnly)\n            {\n                funcParam.Set(1); \/\/ 1 corresponde a Interior\n            }\n        }\n    }\n}"}
{"prompt":"Crea una nueva habitación en el Nivel 1 en el punto (11, 9).","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\nif (level1 != null)\n{\n    UV point = new UV(11, 9);\n    Room room = doc.Create.NewRoom(level1, point);\n}"}
{"prompt":"Update the family name of a selected door to 'New_Door'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a door\");\n\nif (pickedRef != null)\n{\n    FamilyInstance door = doc.GetElement(pickedRef.ElementId) as FamilyInstance;\n    if (door != null && door.Symbol != null)\n    {\n        Family family = door.Symbol.Family;\n        if (family != null)\n        {\n            family.Name = \"New_Door\";\n        }\n    }\n}"}
{"prompt":"Inserta un rociador en las coordenadas (5,5,3).","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol sprinklerSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Sprinklers).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (level != null && sprinklerSymbol != null)\n{\n    if (!sprinklerSymbol.IsActive) sprinklerSymbol.Activate();\n    XYZ placementPoint = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters));\n    doc.Create.NewFamilyInstance(placementPoint, sprinklerSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n}"}
{"prompt":"Load the family from the path \"C:\\Libraries\\Main Door.rfa\".","completion":"string familyPath = @\"C:\\Libraries\\Main Door.rfa\";\nFamily loadedFamily = null;\ndoc.LoadFamily(familyPath, out loadedFamily);"}
{"prompt":"Rotate the given element 45 degrees about its center.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select an element to rotate\");\n\nif (pickedRef != null)\n{\n    Element elem = doc.GetElement(pickedRef.ElementId);\n    if (elem != null)\n    {\n        LocationPoint lp = elem.Location as LocationPoint;\n        if (lp != null)\n        {\n            Line axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\n            double angle = 45 * Math.PI \/ 180.0;\n            ElementTransformUtils.RotateElement(doc, elem.Id, axis, angle);\n        }\n    }\n}"}
{"prompt":"Put an instance of the 'Office Desk' family in the center of the 'Office 102' room.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Office 102\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Office Desk\") as FamilySymbol;\nif(furnitureSymbol != null && !furnitureSymbol.IsActive) furnitureSymbol.Activate();\nif(room != null)\n{\n    LocationPoint roomCenter = room.Location as LocationPoint;\n    if(roomCenter != null && furnitureSymbol != null && room.Level != null)\n    {\n        doc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Coloca una instancia de la familia 'Mesa de Oficina' en el centro de la habitación 'Despacho 102'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 102\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Mesa de Oficina\") as FamilySymbol;\nif(furnitureSymbol != null && !furnitureSymbol.IsActive) furnitureSymbol.Activate();\nif(room != null)\n{\n    LocationPoint roomCenter = room.Location as LocationPoint;\n    if(roomCenter != null && furnitureSymbol != null && room.Level != null)\n    {\n        doc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Assign the sill height of all windows to 1 meter.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Fetch all instances of the Furniture category.","completion":"List<Element> furnitureInstances = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsNotElementType().ToList();"}
{"prompt":"Assign the sill height of all windows to 900mm.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits(900, UnitTypeId.Millimeters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Create a new wall type 'Generic Wall 330mm' with a thickness of 30cm.","completion":"string newTypeName = \"Generic Wall 330mm\";\nWallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif (oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(newTypeName) as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(30, UnitTypeId.Centimeters));\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n}"}
{"prompt":"Obtain the system type of a selected pipe.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a pipe\");\n\nPipingSystemType systemType = null;\nif (pickedRef != null)\n{\n    Pipe pipe = doc.GetElement(pickedRef.ElementId) as Pipe;\n    if (pipe != null)\n    {\n        Parameter systemTypeParam = pipe.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM);\n        if (systemTypeParam != null && systemTypeParam.HasValue)\n        {\n            systemType = doc.GetElement(systemTypeParam.AsElementId()) as PipingSystemType;\n        }\n    }\n}\n"}
{"prompt":"Cambia la escala de la vista activa a 1:50.","completion":"View activeView = doc.ActiveView;\nif (activeView != null)\n{\n    activeView.Scale = 50;\n}"}
{"prompt":"Include a reference point at coordinates (5,1,1) inside the family editor.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(5,1,1));"}
{"prompt":"Crea un tipo de muro 'Muro-Doble' de 30cm y luego crea un muro de ese tipo.","completion":"string newTypeName = \"Muro-Doble\";\nWallType newWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == newTypeName) as WallType;\nif (newWallType == null)\n{\n    WallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n    if (wallTypeToDuplicate != null)\n    {\n        newWallType = wallTypeToDuplicate.Duplicate(newTypeName) as WallType;\n        if (newWallType != null)\n        {\n            CompoundStructure cs = newWallType.GetCompoundStructure();\n            if (cs != null)\n            {\n                cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(30, UnitTypeId.Centimeters));\n                newWallType.SetCompoundStructure(cs);\n            }\n        }\n    }\n}\nif (newWallType != null)\n{\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    if (level != null)\n    {\n        Line wallCurve = Line.CreateBound(XYZ.Zero, new XYZ(10, 0, 0));\n        Wall.Create(doc, wallCurve, newWallType.Id, level.Id, 10.0, 0, false, false);\n    }\n}"}
{"prompt":"Get a list of all family type names from the 'Furniture' category.","completion":"List<Element> furnitureTypes = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().ToList();\nList<string> typeNames = new List<string>();\nforeach(Element type in furnitureTypes)\n{\n    typeNames.Add(type.Name);\n}\n"}
{"prompt":"Create a stair between Level 6 and Level 3","completion":"\/\/ This is a complex operation that requires multiple steps and\/or user interaction and is not supported by the agent."}
{"prompt":"Cambia el nombre de todas las vistas de planta para que empiecen con 'ARQ_'.","completion":"string prefix = \"ARQ_\";\nList<ViewPlan> planViews = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().Where(v => !v.IsTemplate).ToList();\nforeach(ViewPlan view in planViews)\n{\n    if(!view.Name.StartsWith(prefix))\n    {\n        view.Name = prefix + view.Name;\n    }\n}"}
{"prompt":"Crea un nuevo material llamado 'Vidrio Reflectante' y asígnale un color base y una transparencia.","completion":"string materialName = \"Vidrio Reflectante\";\nElementId materialId = Material.Create(doc, materialName);\nif (materialId != ElementId.InvalidElementId)\n{\n    Material material = doc.GetElement(materialId) as Material;\n    if (material != null)\n    {\n        material.Color = new Color(210, 230, 240);\n        material.Transparency = 80;\n    }\n}"}
{"prompt":"Obtén una lista de todas las familias de anotación.","completion":"List<Family> annotationFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.CategoryType == CategoryType.Annotation).ToList();\n"}
{"prompt":"Coloca una instancia de la familia 'Ventana Fija 116x60' en el centro de la habitación 'Despacho 102'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 116\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Ventana Fija 102x60\") as FamilySymbol;\nif(furnitureSymbol != null && !furnitureSymbol.IsActive) furnitureSymbol.Activate();\nif(room != null)\n{\n    LocationPoint roomCenter = room.Location as LocationPoint;\n    if(roomCenter != null && furnitureSymbol != null && room.Level != null)\n    {\n        doc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Generate a new wall type 'Generic Wall 298mm' with a thickness of 33cm.","completion":"string newTypeName = \"Generic Wall 298mm\";\nWallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif (oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(newTypeName) as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(33, UnitTypeId.Centimeters));\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n}"}
{"prompt":"Ajusta todas las ventanas para que tengan la altura del antepecho a 900mm.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits(900, UnitTypeId.Millimeters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Place a structural column at (10,5), making sure the family type is active.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null && columnSymbol != null)\n{\n    if (!columnSymbol.IsActive)\n    {\n        columnSymbol.Activate();\n    }\n    doc.Create.NewFamilyInstance(new XYZ(10, 5, 0), columnSymbol, level, StructuralType.Column);\n}"}
{"prompt":"Exporta el modelo a formato IFC4 para coordinación.","completion":"string folderPath = \"C:\/RevitExports\/\";\nstring fileName = doc.Title + \"-Coordination.ifc\";\nIFCExportOptions options = new IFCExportOptions();\noptions.FileVersion = IFCVersion.IFC4;\ndoc.Export(folderPath, fileName, options);"}
{"prompt":"Obtén el elemento anfitrión de la primera ventana que encuentres.","completion":"FamilyInstance windowInstance = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\n\nif (windowInstance != null)\n{\n    Element hostElement = windowInstance.Host;\n}"}
{"prompt":"Renombra todas las vistas de sección para que empiecen con 'SEC-'.","completion":"string prefix = \"SEC-\";\nList<ViewSection> sectionViews = new FilteredElementCollector(doc).OfClass(typeof(ViewSection)).Cast<ViewSection>().Where(v => !v.IsTemplate).ToList();\nforeach (ViewSection view in sectionViews)\n{\n    if (!view.Name.StartsWith(prefix))\n    {\n        view.Name = prefix + view.Name;\n    }\n}"}
{"prompt":"Crea una columna estructural en la posición X=10, Y=5.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null && columnSymbol != null)\n{\n    if (!columnSymbol.IsActive)\n    {\n        columnSymbol.Activate();\n    }\n    doc.Create.NewFamilyInstance(new XYZ(10, 5, 0), columnSymbol, level, StructuralType.Column);\n}"}
{"prompt":"Modifica el tipo de la ventana seleccionada al tipo 'Fija 116x60'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una ventana\");\nFamilySymbol newType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name == \"Fija 116x60\");\nif (pickedRef != null && newType != null)\n{\n    FamilyInstance window = doc.GetElement(pickedRef.ElementId) as FamilyInstance;\n    if (window != null)\n    {\n        window.Symbol = newType;\n    }\n}"}
{"prompt":"Duplicate level 5 with a 3m offset and name it 'Mezzanine'.","completion":"string levelName = \"Level 5\";\nLevel levelToCopy = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (levelToCopy != null)\n{\n    double offset = UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, levelToCopy.Elevation + offset);\n    newLevel.Name = \"Mezzanine\";\n}"}
{"prompt":"Crea 4 ejes en sentido vertical separados 10 metros.","completion":"double separation = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\nfor(int i=0; i<4; i++)\n{\n    Line line = Line.CreateBound(new XYZ(i * separation, 0, 0), new XYZ(i * separation, 40, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Ubica una instancia de la familia 'Puerta Sencilla' en el centro de la habitación 'Despacho 104'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 104\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Puerta Sencilla\") as FamilySymbol;\nif(furnitureSymbol != null && !furnitureSymbol.IsActive) furnitureSymbol.Activate();\nif(room != null)\n{\n    LocationPoint roomCenter = room.Location as LocationPoint;\n    if(roomCenter != null && furnitureSymbol != null && room.Level != null)\n    {\n        doc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Coloca una instancia de la familia 'Mesa de Oficina' en el centro de la habitación 'Despacho 101'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 101\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Mesa de Oficina\") as FamilySymbol;\nif(furnitureSymbol != null && !furnitureSymbol.IsActive) furnitureSymbol.Activate();\nif(room != null)\n{\n    LocationPoint roomCenter = room.Location as LocationPoint;\n    if(roomCenter != null && furnitureSymbol != null && room.Level != null)\n    {\n        doc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Inserta un punto de referencia en las coordenadas (1,4,1) dentro del editor de familias.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(1,4,1));"}
{"prompt":"Create a structural column at position X=10, Y=5.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null && columnSymbol != null)\n{\n    doc.Create.NewFamilyInstance(new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0), columnSymbol, level, StructuralType.Column);\n}"}
{"prompt":"Añade un nivel llamado 'Nivel Azotea' a 15.5 metros.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(15.5, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Nivel Azotea\";\n}"}
{"prompt":"Create a new Level named 'Level 9' at an elevation of 16 meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(16, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Level 9\";\n}"}
{"prompt":"Duplica el nivel 8 con un desfase de 3m y llámalo 'Mezanine'.","completion":"string levelName = \"Nivel 8\";\nLevel levelToCopy = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (levelToCopy != null)\n{\n    double offset = UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, levelToCopy.Elevation + offset);\n    newLevel.Name = \"Mezanine\";\n}"}
{"prompt":"Crea un muro en Nivel 1 de (0,0,0) a (5,0,0) con 5m de alto.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\nif (level1 != null)\n{\n    WallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n    if(wallType != null)\n    {\n        Line wallCurve = Line.CreateBound(new XYZ(0, 0, 0), new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0, 0));\n        double height = UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters);\n        Wall.Create(doc, wallCurve, wallType.Id, level1.Id, height, 0.0, false, false);\n    }\n}"}
{"prompt":"Construct a new Level named 'Level 4' at an elevation of 12 meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(12, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Level 4\";\n}"}
{"prompt":"Place a spot elevation on a given face and view point.","completion":"using (Transaction t = new Transaction(doc, \"Place Spot Elevation\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference faceRef = localUidoc.Selection.PickObject(ObjectType.Face, \"Select the top face of the floor\");\n\n    View activeView = doc.ActiveView;\n\n    if (faceRef != null && activeView != null)\n    {\n        XYZ pointOnFace = faceRef.GlobalPoint;\n        XYZ leaderEnd = pointOnFace + new XYZ(1 \/ 0.3048, 1 \/ 0.3048, 0);\n        doc.Create.NewSpotElevation(activeView, faceRef, pointOnFace, pointOnFace, leaderEnd, pointOnFace, true);\n    }\n    t.Commit();\n}"}
{"prompt":"Apply 23mm thermal insulation to all hot water pipes.","completion":"PipeInsulationType insulationType = new FilteredElementCollector(doc).OfClass(typeof(PipeInsulationType)).FirstOrDefault() as PipeInsulationType;\nPipingSystemType hotWaterSystem = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).Cast<PipingSystemType>().FirstOrDefault(s => s.Name.Contains(\"Hot Water\"));\n\nif (insulationType != null && hotWaterSystem != null)\n{\n    List<Pipe> pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast<Pipe>().Where(p => \n    {\n        Parameter systemParam = p.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM);\n        return systemParam != null && systemParam.HasValue && systemParam.AsElementId() == hotWaterSystem.Id;\n    }).ToList();\n    \n    foreach(Pipe p in pipes)\n    {\n        PipeInsulation.Create(doc, p.Id, insulationType.Id, UnitUtils.ConvertToInternalUnits(23, UnitTypeId.Millimeters));\n    }\n}"}
{"prompt":"Get all door families loaded in the project.","completion":"List<Family> doorFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.Id.IntegerValue == (int)BuiltInCategory.OST_Doors).ToList();"}
{"prompt":"Dame los metros lineales totales de todas las vigas en el proyecto.","completion":"double totalLength = 0.0;\nFilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsNotElementType();\n\nforeach (Element beam in collector)\n{\n    Parameter lengthParam = beam.get_Parameter(BuiltInParameter.CURVE_ELEM_LENGTH);\n    if (lengthParam != null) totalLength += lengthParam.AsDouble();\n}\ndouble totalLengthM = UnitUtils.ConvertFromInternalUnits(totalLength, UnitTypeId.Meters);"}
{"prompt":"Crea un parámetro global de longitud llamado 'AnchoCorredor' con valor de 1.5m.","completion":"string paramName = \"AnchoCorredor\";\nGlobalParameter gp = GlobalParameter.Create(doc, paramName, SpecTypeId.Length);\n\nif (gp != null)\n{\n    gp.SetValue(new DoubleParameterValue(UnitUtils.ConvertToInternalUnits(1.5, UnitTypeId.Meters)));\n}"}
{"prompt":"Find the structural column type named \"303 x 446mm\" and place it at X=1, Y=12.1","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(s => s.Name == \"303 x 446mm\");\nif (level != null && columnSymbol != null)\n{\n    if (!columnSymbol.IsActive) { columnSymbol.Activate(); }\n    XYZ point = new XYZ(1, 12.1, 0);\n    doc.Create.NewFamilyInstance(point, columnSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n}"}
{"prompt":"Crea un nuevo nivel llamado 'Mezzanine' a 8.0 metros de elevación.","completion":"string levelName = \"Mezzanine\";\ndouble elevation = UnitUtils.ConvertToInternalUnits(8.0, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Mold a ceiling at a height of 2.8 meters on Level 1.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nCeilingType ceilingType = new FilteredElementCollector(doc).OfClass(typeof(CeilingType)).FirstOrDefault() as CeilingType;\n\nif (level != null && ceilingType != null)\n{\n    \/\/ Create a default 10ft x 10ft rectangular profile as the prompt is not specific\n    CurveLoop profile = new CurveLoop();\n    profile.Append(Line.CreateBound(new XYZ(0, 0, 0), new XYZ(10, 0, 0)));\n    profile.Append(Line.CreateBound(new XYZ(10, 0, 0), new XYZ(10, 10, 0)));\n    profile.Append(Line.CreateBound(new XYZ(10, 10, 0), new XYZ(0, 10, 0)));\n    profile.Append(Line.CreateBound(new XYZ(0, 10, 0), new XYZ(0, 0, 0)));\n\n    Ceiling ceiling = Ceiling.Create(doc, new List<CurveLoop> { profile }, ceilingType.Id, level.Id);\n    if (ceiling != null)\n    {\n        Parameter heightParam = ceiling.get_Parameter(BuiltInParameter.CEILING_HEIGHTABOVELEVEL_PARAM);\n        if (heightParam != null && !heightParam.IsReadOnly)\n        {\n            heightParam.Set(UnitUtils.ConvertToInternalUnits(2.8, UnitTypeId.Meters));\n        }\n    }\n}"}
{"prompt":"Genera un reporte con el área de todas las habitaciones del proyecto.","completion":"List<Room> rooms = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>().ToList();\nList<double> roomAreas = new List<double>();\nforeach (Room room in rooms)\n{\n    if (room != null && room.Area > 0)\n    {\n        roomAreas.Add(UnitUtils.ConvertFromInternalUnits(room.Area, UnitTypeId.SquareMeters));\n    }\n}\n\/\/ El orquestador puede ahora usar la lista 'roomAreas' para generar el reporte final."}
{"prompt":"Construct a new level 'Level 7' at an elevation of 17 meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(17, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\nif (newLevel != null)\n{\n    try { newLevel.Name = \"Level 7\"; } catch {}\n}"}
{"prompt":"Position an instance of the 'Office Desk' family in the center of the 'Office 99' room.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Office 99\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Office Desk\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);"}
{"prompt":"Configure the sill height of all windows to 901mm.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits(901, UnitTypeId.Millimeters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Ajusta el nombre de la familia de una puerta seleccionada a 'Puerta_Nueva'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una puerta\");\n\nif (pickedRef != null)\n{\n    FamilyInstance door = doc.GetElement(pickedRef.ElementId) as FamilyInstance;\n    if (door != null && door.Symbol != null)\n    {\n        Family family = door.Symbol.Family;\n        if (family != null)\n        {\n            family.Name = \"Puerta_Nueva\";\n        }\n    }\n}"}
{"prompt":"Create a wall on Level 1 from (0,0,0) to (10,0,0) with a height of 4 meters.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (level1 != null && wallType != null)\n{\n    XYZ p1 = new XYZ(0, 0, 0);\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), 0, 0);\n    Line wallCurve = Line.CreateBound(p1, p2);\n    double height = UnitUtils.ConvertToInternalUnits(4, UnitTypeId.Meters);\n    Wall.Create(doc, wallCurve, wallType.Id, level1.Id, height, 0.0, false, false);\n}"}
{"prompt":"Duplica el nivel 5 con un desfase de 7m y llámalo 'Mezanine'.","completion":"string levelName = \"Nivel 5\";\nLevel levelToCopy = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (levelToCopy != null)\n{\n    double offset = UnitUtils.ConvertToInternalUnits(7, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, levelToCopy.Elevation + offset);\n    newLevel.Name = \"Mezanine\";\n}"}
{"prompt":"Encuentra todos los pilares estructurales en el Nivel 2 que sean de hormigón.","completion":"Level level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 2\") as Level;\nFamilySymbol concreteColumnType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name.Contains(\"Hormigón\"));\nif (level2 != null && concreteColumnType != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level2.Id);\n    FamilySymbolFilter typeFilter = new FamilySymbolFilter(concreteColumnType.Id);\n    LogicalAndFilter andFilter = new LogicalAndFilter(levelFilter, typeFilter);\n    List<Element> concreteColumns = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WherePasses(andFilter).ToList();\n}"}
{"prompt":"Obtain the MEP space associated with the room 'Office 98'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Cast<Room>().FirstOrDefault(r => r.Name == \"Office 98\");\nList<Space> spaces = new List<Space>();\n\nif (room != null)\n{\n    spaces = new FilteredElementCollector(doc).OfClass(typeof(Space)).Cast<Space>().Where(s => s.Room != null && s.Room.Id == room.Id).ToList();\n}"}
{"prompt":"Get the MEP space associated with the room 'Office 102'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Cast<Room>().FirstOrDefault(r => r.Name == \"Office 102\");\nList<Space> spaces = new List<Space>();\n\nif (room != null)\n{\n    spaces = new FilteredElementCollector(doc).OfClass(typeof(Space)).Cast<Space>().Where(s => s.Room != null && s.Room.Id == room.Id).ToList();\n}"}
{"prompt":"Sitúa una instancia de la familia 'Mesa de Oficina' en el centro de la habitación 'Despacho 101'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 101\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Mesa de Oficina\") as FamilySymbol;\nif(furnitureSymbol != null && !furnitureSymbol.IsActive) furnitureSymbol.Activate();\nif(room != null)\n{\n    LocationPoint roomCenter = room.Location as LocationPoint;\n    if(roomCenter != null && furnitureSymbol != null && room.Level != null)\n    {\n        doc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Given a wall, get its materials and their volumes.","completion":"UIDocument localUidoc = uidoc;\nReference pickedRef = localUidoc.Selection.PickObject(ObjectType.Element, \"Select a wall\");\n\nDictionary<string, double> materialVolumes = new Dictionary<string, double>();\nif (pickedRef != null)\n{\n    Wall wall = doc.GetElement(pickedRef) as Wall;\n    if (wall != null)\n    {\n        Parameter areaParam = wall.get_Parameter(BuiltInParameter.HOST_AREA_COMPUTED);\n        if (areaParam != null && areaParam.HasValue)\n        {\n            double wallArea = areaParam.AsDouble();\n            WallType wallType = wall.WallType;\n            if (wallType != null)\n            {\n                CompoundStructure cs = wallType.GetCompoundStructure();\n                if (cs != null)\n                {\n                    foreach(CompoundStructureLayer layer in cs.GetLayers())\n                    {\n                        Material material = doc.GetElement(layer.MaterialId) as Material;\n                        if(material != null)\n                        {\n                            double volume = layer.Width * wallArea;\n                            materialVolumes[material.Name] = volume;\n                        }\n                    }\n                }\n            }\n        }\n    }\n}"}
{"prompt":"Change the type of a floor to one that contains 'Concrete'.","completion":"Floor floorToChange = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault() as Floor;\nFloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name.Contains(\"Concrete\"));\n\nif (floorToChange != null && newType != null)\n{\n    floorToChange.ChangeTypeId(newType.Id);\n}"}
{"prompt":"Create an electrical circuit connecting light fixtures to a panel.","completion":"using (Transaction t = new Transaction(doc, \"Create Electrical Circuit\"))\n{\n    t.Start();\n    FamilyInstance panel = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_ElectricalEquipment).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\n    List<ElementId> fixtureIds = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsNotElementType().ToElementIds().ToList();\n\n    if (panel != null && fixtureIds.Count > 0)\n    {\n        ElectricalSystem electricalSystem = ElectricalSystem.Create(doc, fixtureIds, ElectricalSystemType.PowerCircuit);\n        if(electricalSystem != null)\n        {\n            electricalSystem.SelectPanel(panel);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Build a new material named 'Dark Oak' with a wood surface pattern.","completion":"string materialName = \"Dark Oak\";\nElementId materialId = Material.Create(doc, materialName);\n\nif (materialId != ElementId.InvalidElementId)\n{\n    Material material = doc.GetElement(materialId) as Material;\n    FillPatternElement fillPattern = new FilteredElementCollector(doc).OfClass(typeof(FillPatternElement)).FirstOrDefault(p => p.Name.Contains(\"Wood\") || p.Name.Contains(\"Madera\")) as FillPatternElement;\n    \n    if (material != null && fillPattern != null)\n    {\n        material.SurfaceForegroundPatternId = fillPattern.Id;\n        material.Color = new Color(139, 69, 19);\n    }\n}"}
{"prompt":"Duplica la vista 'Nivel 1' como una vista dependiente.","completion":"ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v => v.Name == \"Nivel 1\") as ViewPlan;\n\nif (viewToDuplicate != null)\n{\n    ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n}"}
{"prompt":"Build a view filter to hide demolished walls.","completion":"using (Transaction t = new Transaction(doc, \"Create Demolition Filter\"))\n{\n    t.Start();\n    Phase demolishedPhase = new FilteredElementCollector(doc).OfClass(typeof(Phase)).Cast<Phase>().FirstOrDefault(p => p.Name.Contains(\"Demolished\") || p.Name.Contains(\"Demolición\"));\n    View activeView = doc.ActiveView;\n\n    if (demolishedPhase != null && activeView != null)\n    {\n        ElementId paramId = new ElementId(BuiltInParameter.PHASE_DEMOLISHED);\n        FilterRule rule = ParameterFilterRuleFactory.CreateEqualsRule(paramId, demolishedPhase.Id);\n        ElementFilter filter = new ElementParameterFilter(rule);\n        ICollection<ElementId> categories = new List<ElementId>{ new ElementId(BuiltInCategory.OST_Walls) };\n        ParameterFilterElement pfe = ParameterFilterElement.Create(doc, \"Demolition Filter\", categories, filter);\n        \n        if (pfe != null)\n        {\n            activeView.AddFilter(pfe.Id);\n            activeView.SetFilterVisibility(pfe.Id, false);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Mueve un elemento seleccionado a la posición (9,2).","completion":"ICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds.Any())\n{\n    foreach (ElementId id in selectedIds)\n    {\n        Element elem = doc.GetElement(id);\n        if (elem != null)\n        {\n            LocationPoint lp = elem.Location as LocationPoint;\n            if (lp != null)\n            {\n                XYZ newPosition = new XYZ(9, 2, lp.Point.Z);\n                lp.Point = newPosition;\n            }\n        }\n    }\n}"}
{"prompt":"Crea una nueva tabla de planificación para ventanas que incluya Marca de Tipo, Ancho y Alto.","completion":"string scheduleName = \"Tabla de Ventanas\";\nViewSchedule schedule = ViewSchedule.CreateSchedule(doc, new ElementId(BuiltInCategory.OST_Windows));\n\nif (schedule != null)\n{\n    schedule.Name = scheduleName;\n    ScheduleDefinition def = schedule.Definition;\n    if (def != null)\n    {\n        SchedulableField typeMarkField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.ALL_MODEL_TYPE_MARK);\n        SchedulableField widthField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.FAMILY_WIDTH_PARAM);\n        SchedulableField heightField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.FAMILY_HEIGHT_PARAM);\n        \n        if (typeMarkField != null) def.AddField(typeMarkField);\n        if (widthField != null) def.AddField(widthField);\n        if (heightField != null) def.AddField(heightField);\n    }\n}"}
{"prompt":"Create a curtain wall 6 meters wide and 4 meters high.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nWallType cwType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Kind == WallKind.Curtain);\n\nif (level != null && cwType != null)\n{\n    Line baseLine = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits(6, UnitTypeId.Meters), 0, 0));\n    Wall.Create(doc, baseLine, cwType.Id, level.Id, UnitUtils.ConvertToInternalUnits(4.0, UnitTypeId.Meters), 0.0, false, false);\n}"}
{"prompt":"Position an instance of the 'Office Desk' family in the center of the 'Office 99' room.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Office 99\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Office Desk\") as FamilySymbol;\nif(furnitureSymbol != null && !furnitureSymbol.IsActive) furnitureSymbol.Activate();\nif(room != null)\n{\n    LocationPoint roomCenter = room.Location as LocationPoint;\n    if(roomCenter != null && furnitureSymbol != null && room.Level != null)\n    {\n        doc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Duplicate the 'Level 2' plan view and make it a view template.","completion":"using (Transaction t = new Transaction(doc, \"Create View Template\"))\n{\n    t.Start();\n    ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().FirstOrDefault(v => v.Name == \"Level 2\");\n    string templateName = \"Level 2 Template\";\n\n    if (viewToDuplicate != null)\n    {\n        ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n        View newView = doc.GetElement(newViewId) as View;\n        if (newView != null)\n        {\n           \/\/ In older APIs, direct conversion to a template may not be available.\n           \/\/ A common workaround is to set the IsTemplate property if available and writable, \n           \/\/ which is not the case here. This is left as a comment for conceptual understanding.\n           \/\/ newView.IsTemplate = true;\n            newView.Name = templateName;\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Aísla temporalmente todo el mobiliario en la vista activa.","completion":"ICollection<ElementId> furnitureIds = new FilteredElementCollector(doc, doc.ActiveView.Id).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsNotElementType().ToElementIds();\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.IsolateElementsTemporary(furnitureIds);\n}"}
{"prompt":"Create a floor plan view for 'Level 7'.","completion":"string levelName = \"Level 7\";\nLevel level3 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.FloorPlan);\n\nif (level3 != null && vft != null)\n{\n    ViewPlan viewPlan = ViewPlan.Create(doc, vft.Id, level3.Id);\n}"}
{"prompt":"Añade un punto de referencia en las coordenadas (1,5,5) dentro del editor de familias.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(1,5,5));"}
{"prompt":"Crea un nuevo Nivel llamado 'Nivel 3' a una elevación de 14 metros.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(14, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\nif (newLevel != null)\n{\n    try { newLevel.Name = \"Nivel 3\"; } catch {}\n}"}
{"prompt":"Incorpora refuerzo a una columna.","completion":"RebarBarType barType = new FilteredElementCollector(doc).OfClass(typeof(RebarBarType)).FirstOrDefault() as RebarBarType;\nRebarShape shape = new FilteredElementCollector(doc).OfClass(typeof(RebarShape)).FirstOrDefault() as RebarShape;\nFamilyInstance column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\n\nif (barType != null && shape != null && column != null)\n{\n    \/\/ Para simplificar, asume que la columna tiene una LocationPoint y una Transform válida.\n    \/\/ Para mayor robustez, se podría validar column.Location y column.GetTransform().\n    Rebar.CreateFromRebarShape(doc, shape, barType, column, column.GetTransform().Origin, XYZ.BasisX, XYZ.BasisY);\n}"}
{"prompt":"Muestra un cuadro de diálogo con las opciones 'Sí', 'No' y 'Cancelar'.","completion":""}
{"prompt":"Obtén todas las familias de puertas cargadas en el proyecto.","completion":"List<Family> doorFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.Id.IntegerValue == (int)BuiltInCategory.OST_Doors).ToList();"}
{"prompt":"Move a selected element to position (2,4).","completion":"ICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nElementId selectedId = selectedIds.FirstOrDefault();\nif (selectedId != null && selectedId != ElementId.InvalidElementId)\n{\n    Element elem = doc.GetElement(selectedId);\n    if (elem != null)\n    {\n        LocationPoint lp = elem.Location as LocationPoint;\n        if (lp != null)\n        {\n            XYZ currentPoint = lp.Point;\n            XYZ newPosition = new XYZ(2, 4, currentPoint.Z);\n            XYZ translation = newPosition - currentPoint;\n            if(translation.GetLength() > 0.001)\n            {\n                ElementTransformUtils.MoveElement(doc, elem.Id, translation);\n            }\n        }\n    }\n}"}
{"prompt":"Crea un nuevo Nivel llamado 'Nivel 4' a una elevación de 12 metros.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(12, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Nivel 4\";\n}"}
{"prompt":"Obtain all subcategories from the Doors category.","completion":"Category doorCat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Doors);\nCategoryNameMap subcategories = doorCat.SubCategories;"}
{"prompt":"Create a 'Roof Terrace' level at 16m.","completion":"string levelName = \"Roof Terrace\";\ndouble elev = UnitUtils.ConvertToInternalUnits(16, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elev);\nnewLevel.Name = levelName;\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Cambia el tipo de la ventana seleccionada al tipo 'Fija 120x60'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una ventana\");\nFamilySymbol newType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name == \"Fija 120x60\");\nif (pickedRef != null && newType != null)\n{\n    FamilyInstance window = doc.GetElement(pickedRef.ElementId) as FamilyInstance;\n    if (window != null)\n    {\n        window.Symbol = newType;\n    }\n}"}
{"prompt":"Crea un nuevo material llamado 'Vidrio Templado' con un patrón de superficie de madera.","completion":"string materialName = \"Vidrio Templado\";\nElementId materialId = Material.Create(doc, materialName);\n\nif (materialId != ElementId.InvalidElementId)\n{\n    Material material = doc.GetElement(materialId) as Material;\n    FillPatternElement fillPattern = new FilteredElementCollector(doc).OfClass(typeof(FillPatternElement)).FirstOrDefault(p => p.Name.Contains(\"Wood\") || p.Name.Contains(\"Madera\")) as FillPatternElement;\n    \n    if (material != null && fillPattern != null)\n    {\n        material.SurfaceForegroundPatternId = fillPattern.Id;\n        material.Color = new Color(139, 69, 19);\n    }\n}"}
{"prompt":"Configure the 'Mark' parameter of all selected walls to 'W-EXT-6'.","completion":"using (Transaction t = new Transaction(doc, \"Set Wall Mark\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    ICollection<ElementId> selectedIds = localUidoc.Selection.GetElementIds();\n\n    if (selectedIds != null && selectedIds.Count > 6)\n    {\n        foreach(ElementId id in selectedIds)\n        {\n            Element elem = doc.GetElement(id);\n            if(elem is Wall)\n            {\n                Parameter markParam = elem.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n                if (markParam != null && !markParam.IsReadOnly) markParam.Set(\"W-EXT-01\");\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Obtén una lista de todas las familias de anotación.","completion":"List<Family> annotationFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.CategoryType == CategoryType.Annotation).ToList();\n"}
{"prompt":"Sitúa un rociador en las coordenadas (7,4,1).","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol sprinklerSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Sprinklers).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (level != null && sprinklerSymbol != null)\n{\n    if (!sprinklerSymbol.IsActive) sprinklerSymbol.Activate();\n    XYZ placementPoint = new XYZ(UnitUtils.ConvertToInternalUnits(7, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(4, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters));\n    doc.Create.NewFamilyInstance(placementPoint, sprinklerSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n}"}
{"prompt":"Build a new linear dimension type with blue text and 2mm size.","completion":"using (Transaction t = new Transaction(doc, \"Create Dimension Type\"))\n{\n    t.Start();\n    string newTypeName = \"Blue Dimension 2mm\";\n    DimensionType linearDimType = new FilteredElementCollector(doc).OfClass(typeof(DimensionType)).Cast<DimensionType>().FirstOrDefault(dt => dt.StyleType == DimensionStyleType.Linear);\n\n    if (linearDimType != null)\n    {\n        DimensionType newDimType = linearDimType.Duplicate(newTypeName) as DimensionType;\n        if (newDimType != null)\n        {\n            Parameter colorParam = newDimType.get_Parameter(BuiltInParameter.LINE_COLOR);\n            if (colorParam != null && !colorParam.IsReadOnly) colorParam.Set(255);\n            Parameter textSizeParam = newDimType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n            if (textSizeParam != null && !textSizeParam.IsReadOnly) textSizeParam.Set(2 \/ 304.8);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Pivot a selected element 85 degrees around its Z-axis.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select an element to rotate\");\nElement elem = doc.GetElement(pickedRef.ElementId);\nLocationPoint lp = elem.Location as LocationPoint;\nLine axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\nElementTransformUtils.RotateElement(doc, elem.Id, axis, Math.PI \/ 85);"}
{"prompt":"Conecta dos conductos con una unión en T.","completion":"List<Duct> ducts = new FilteredElementCollector(doc).OfClass(typeof(Duct)).Cast<Duct>().ToList();\nif (ducts.Count >= 2)\n{\n    Connector c1 = ducts[0].ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n    Connector c2 = ducts[1].ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n    if (c1 != null && c2 != null)\n    {\n        \/\/ CORRECCIÓN: El método correcto es NewUnionFitting, no NewTeeFitting para una conexión simple.\n        doc.Create.NewUnionFitting(c1, c2);\n    }\n}"}
{"prompt":"Rota el elemento dado 45 grados alrededor de su centro.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un elemento para rotar\");\n\nif (pickedRef != null)\n{\n    Element elem = doc.GetElement(pickedRef.ElementId);\n    if (elem != null)\n    {\n        LocationPoint lp = elem.Location as LocationPoint;\n        if (lp != null)\n        {\n            Line axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\n            double angle = 45 * Math.PI \/ 180.0;\n            ElementTransformUtils.RotateElement(doc, elem.Id, axis, angle);\n        }\n    }\n}"}
{"prompt":"Generate a new level 'Level 1' at an elevation of 10 meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\nif (newLevel != null)\n{\n    try { newLevel.Name = \"Level 1\"; } catch {}\n}"}
{"prompt":"Sitúa una instancia de la familia 'Mesa de Oficina' en el centro de la habitación 'Despacho 99'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 99\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Mesa de Oficina\") as FamilySymbol;\nif(furnitureSymbol != null && !furnitureSymbol.IsActive) furnitureSymbol.Activate();\nif(room != null)\n{\n    LocationPoint roomCenter = room.Location as LocationPoint;\n    if(roomCenter != null && furnitureSymbol != null && room.Level != null)\n    {\n        doc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Aísla temporalmente los elementos seleccionados en la vista activa.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> idsToIsolate = uidoc.Selection.GetElementIds();\nView activeView = doc.ActiveView;\n\nif (activeView != null && idsToIsolate.Count > 0)\n{\n    activeView.IsolateElementsTemporary(idsToIsolate);\n}"}
{"prompt":"Calculate the total area of all rooms.","completion":"double totalArea = 0.0;\nList<Room> rooms = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>().ToList();\nforeach (Room room in rooms)\n{\n    totalArea += room.Area;\n}"}
{"prompt":"Crea un nuevo tipo de muro 'Muro Genérico 300mm' con un grosor de 30cm.","completion":"string newTypeName = \"Muro Genérico 300mm\";\nWallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif (oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(newTypeName) as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(30, UnitTypeId.Centimeters));\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n}"}
{"prompt":"Modela un plafón a 2.8 metros de altura en el Nivel 1.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\nCeilingType ceilingType = new FilteredElementCollector(doc).OfClass(typeof(CeilingType)).FirstOrDefault() as CeilingType;\nif (ceilingType != null && level != null)\n{\n    CurveLoop profile = new CurveLoop();\n    profile.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(10,0,0)));\n    profile.Append(Line.CreateBound(new XYZ(10,0,0), new XYZ(10,10,0)));\n    profile.Append(Line.CreateBound(new XYZ(10,10,0), new XYZ(0,10,0)));\n    profile.Append(Line.CreateBound(new XYZ(0,10,0), new XYZ(0,0,0)));\n    Ceiling ceiling = Ceiling.Create(doc, new List<CurveLoop>{profile}, ceilingType.Id, level.Id);\n    if (ceiling != null)\n    {\n        Parameter heightParam = ceiling.get_Parameter(BuiltInParameter.CEILING_HEIGHTABOVELEVEL_PARAM);\n        if (heightParam != null && !heightParam.IsReadOnly) heightParam.Set(UnitUtils.ConvertToInternalUnits(2.8, UnitTypeId.Meters));\n    }\n}"}
{"prompt":"Create an extrusion roof with a 10% slope.","completion":"using (Transaction t = new Transaction(doc, \"Create Extrusion Roof\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    RoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n\n    if (level != null && roofType != null)\n    {\n        CurveArray profile = new CurveArray();\n        profile.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(10 \/ 0.3048, 0, 1 \/ 0.3048)));\n        \n        Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisY, XYZ.Zero);\n        ReferencePlane refPlane = doc.Create.NewReferencePlane(plane.Origin, plane.Origin + XYZ.BasisX, plane.Normal, doc.ActiveView);\n        \n        if (refPlane != null)\n        {\n            doc.Create.NewExtrusionRoof(profile, refPlane, level, roofType, 0, 10 \/ 0.3048);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Hide the selected elements in the active view.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> idsToHide = uidoc.Selection.GetElementIds();\nView activeView = doc.ActiveView;\n\nif (activeView != null && idsToHide.Count > 0)\n{\n    activeView.HideElements(idsToHide);\n}"}
{"prompt":"Create a 30cm 'Double-Wall' type and then create a wall of that type.","completion":"using (Transaction t = new Transaction(doc, \"Create Wall Type and Wall\"))\n{\n    t.Start();\n    string newTypeName = \"Double-Wall\";\n    WallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n    WallType newWallType = null;\n    if (wallTypeToDuplicate != null)\n    {\n        newWallType = wallTypeToDuplicate.Duplicate(newTypeName) as WallType;\n        if (newWallType != null)\n        {\n            CompoundStructure cs = newWallType.GetCompoundStructure();\n            if (cs != null && cs.LayerCount > 0)\n            {\n                cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), 0.3 \/ 0.3048);\n                newWallType.SetCompoundStructure(cs);\n            }\n        }\n    }\n    if (newWallType != null)\n    {\n        Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n        Line wallCurve = Line.CreateBound(XYZ.Zero, new XYZ(10 \/ 0.3048, 0, 0));\n        double height = 3 \/ 0.3048;\n        if (level != null)\n        {\n            Wall.Create(doc, wallCurve, newWallType.Id, level.Id, height, 0, false, false);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea 10 worksets de arquitectura.","completion":"List<string> worksetNames = new List<string> { \"TAD_ARQ_MAM\", \"TAD_ARQ_ACA\", \"TAD_ARQ_PLA\", \"TAD_ARQ_PSO\", \"TAD_ARQ_HRE\", \"TAD_ARQ_ALU\", \"TAD_ARQ_CAR\", \"TAD_ARQ_MOB\", \"TAD_ARQ_PLO\", \"TAD_ARQ_EXT\" };\nforeach(string name in worksetNames)\n{\n    Workset newWorkset = Workset.Create(doc, name);\n}"}
{"prompt":"Generate a wall 5 meters long and 3 meters high.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (level != null && wallType != null)\n{\n    Line line = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0, 0));\n    Wall.Create(doc, line, wallType.Id, level.Id, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0.0, false, false);\n}"}
{"prompt":"Crea un nuevo tipo de tubería llamado 'Acero' con material 'Acero, Carbono'.","completion":"string newTypeName = \"Acero\";\nPipeType pipeTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(PipeType)).FirstOrDefault() as PipeType;\nMaterial steel = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name == \"Acero, Carbono\") as Material;\n\nif (pipeTypeToDuplicate != null && steel != null)\n{\n    PipeType newType = pipeTypeToDuplicate.Duplicate(newTypeName) as PipeType;\n    if (newType != null)\n    {\n        Parameter materialParam = newType.get_Parameter(BuiltInParameter.MATERIAL_ID_PARAM);\n        if (materialParam != null && !materialParam.IsReadOnly) materialParam.Set(steel.Id);\n    }\n}"}
{"prompt":"Create a new Level named 'Level 4' at an elevation of 12 meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(12, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Level 4\";\n}"}
{"prompt":"Extrae una lista de todas las advertencias del proyecto.","completion":"IList<FailureMessage> warnings = doc.GetWarnings();\nList<string> warningDescriptions = warnings.Select(w => w.GetDescriptionText()).ToList();\n"}
{"prompt":"Import a CAD file named 'BasePlan.dwg' into the current view.","completion":"string filePath = \"C:\/CAD\/BasePlan.dwg\";\nDWGImportOptions options = new DWGImportOptions();\noptions.Placement = ImportPlacement.Origin;\nElementId importId;\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    doc.Import(filePath, options, activeView, out importId);\n}"}
{"prompt":"Insert a camera in the active view.","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(f => f.ViewFamily == ViewFamily.ThreeDimensional);\nif (vft != null)\n{\n    View3D cameraView = View3D.CreatePerspective(doc, vft.Id);\n    if (cameraView != null)\n    {\n        try { cameraView.Name = \"New Camera View\"; } catch {}\n        XYZ eyePos = new XYZ(30, 30, 30);\n        XYZ upDir = XYZ.BasisZ;\n        XYZ forwardDir = XYZ.Zero - eyePos;\n        ViewOrientation3D orientation = new ViewOrientation3D(eyePos, upDir, forwardDir);\n        cameraView.SetOrientation(orientation);\n    }\n}"}
{"prompt":"Find out who the owner of a selected element is.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select an element\");\n\nWorksharingTooltipInfo info = null;\nif (pickedRef != null)\n{\n    info = WorksharingUtils.GetWorksharingTooltipInfo(doc, pickedRef.ElementId);\n}\n"}
{"prompt":"Agrega un punto de referencia en las coordenadas (5,1,4) dentro del editor de familias.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(5,1,4));"}
{"prompt":"Turn project north 30 degrees clockwise.","completion":"using (Transaction t = new Transaction(doc, \"Rotate Project North\"))\n{\n    t.Start();\n    BasePoint projectBasePoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(bp => !bp.IsShared);\n\n    if (projectBasePoint != null)\n    {\n        double angleInDegrees = 30.0;\n        double angleInRadians = -(angleInDegrees * Math.PI \/ 180.0);\n        using (var bbox = projectBasePoint.get_BoundingBox(null))\n        {\n          if (bbox != null)\n          {\n            XYZ center = bbox.Min;\n            Line axis = Line.CreateBound(center, center + XYZ.BasisZ);\n            ElementTransformUtils.RotateElement(doc, projectBasePoint.Id, axis, angleInRadians);\n          }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Attach a reference point at coordinates (1,6,4) inside the family editor.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(1,6,4));"}
{"prompt":"Get all rooms on Level 2","completion":"string levelName = \"Level 2\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(targetLevel.Id);\n    FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WherePasses(levelFilter);\n    uidoc.Selection.SetElementIds(collector.ToElementIds());\n}"}
{"prompt":"Copy level 5 with a 3m offset and name it 'Mezzanine'.","completion":"string levelName = \"Level 5\";\nLevel levelToCopy = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (levelToCopy != null)\n{\n    double offset = UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, levelToCopy.Elevation + offset);\n    newLevel.Name = \"Mezzanine\";\n}"}
{"prompt":"Create a new level named 'Mezzanine' at 6.6 meters elevation.","completion":"string levelName = \"Mezzanine\";\ndouble elevation = UnitUtils.ConvertToInternalUnits(6.6, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Establece el parámetro 'Comentarios' de todas las puertas del Nivel 3 a 'Clasificación Fuego - 85 min'.","completion":"string levelName = \"Nivel 3\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(targetLevel.Id);\n    FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WherePasses(levelFilter);\n    foreach (Element door in collector)\n    {\n        Parameter commentsParam = door.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n        if (commentsParam != null && !commentsParam.IsReadOnly) { commentsParam.Set(\"Clasificación Fuego - 85 min\"); }\n    }\n}"}
{"prompt":"Create an MEP space for each room on Level 1","completion":"string levelName = \"Level 1\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    FilteredElementCollector roomCollector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WherePasses(new ElementLevelFilter(targetLevel.Id));\n    foreach (Room room in roomCollector.ToElements().Cast<Room>())\n    {\n        LocationPoint locPoint = room.Location as LocationPoint;\n        if (locPoint != null)\n        {\n            UV point = new UV(locPoint.Point.X, locPoint.Point.Y);\n            doc.Create.NewSpace(targetLevel, point);\n        }\n    }\n}"}
{"prompt":"Delete all unused wall types in the project.","completion":"ICollection<ElementId> allWallTypes = new FilteredElementCollector(doc).OfClass(typeof(WallType)).ToElementIds();\nICollection<ElementId> usedWallTypes = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Select(w => w.GetTypeId()).Distinct().ToList();\nList<ElementId> unusedWallTypes = allWallTypes.Except(usedWallTypes).ToList();\nif (unusedWallTypes.Any())\n{\n    doc.Delete(unusedWallTypes);\n}"}
{"prompt":"Generate a section view between points (0,0,0) and (10,10,0).","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.Section);\n\nif (vft != null)\n{\n    XYZ p1 = new XYZ(0,0,0);\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),0);\n    XYZ midPoint = (p1 + p2) \/ 2;\n    XYZ direction = (p2 - p1).Normalize();\n    XYZ up = XYZ.BasisZ;\n    XYZ viewdir = up.CrossProduct(direction);\n    \n    BoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\n    Transform t = Transform.Identity;\n    t.Origin = midPoint;\nt.BasisX = direction;\nt.BasisY = up;\nt.BasisZ = viewdir;\nsectionBox.Transform = t;\nsectionBox.Min = new XYZ(UnitUtils.ConvertToInternalUnits(-p1.DistanceTo(p2)\/2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(-10, UnitTypeId.Meters), 0);\nsectionBox.Max = new XYZ(UnitUtils.ConvertToInternalUnits(p1.DistanceTo(p2)\/2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(20, UnitTypeId.Meters));\n    \n    ViewSection.CreateSection(doc, vft.Id, sectionBox);\n}"}
{"prompt":"Mueve el punto base del proyecto 100 metros hacia el norte.","completion":"using (Transaction t = new Transaction(doc, \"Move Project Base Point\"))\n{\n    t.Start();\n    BasePoint projectBasePoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(bp => !bp.IsShared);\n\n    if (projectBasePoint != null)\n    {\n        XYZ translation = new XYZ(0, 100 \/ 0.3048, 0);\n        ElementTransformUtils.MoveElement(doc, projectBasePoint.Id, translation);\n    }\n    t.Commit();\n}"}
{"prompt":"Find all section views in the project.","completion":"List<ViewSection> sectionViews = new FilteredElementCollector(doc).OfClass(typeof(ViewSection)).Cast<ViewSection>().ToList();"}
{"prompt":"Obtén todas las habitaciones que están en el Nivel 2","completion":"string levelName = \"Nivel 2\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(targetLevel.Id);\n    FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WherePasses(levelFilter);\n    uidoc.Selection.SetElementIds(collector.ToElementIds());\n}"}
{"prompt":"Comprueba si la vista activa es una vista de plano.","completion":"View activeView = doc.ActiveView;\nbool isPlanView = false;\n\nif (activeView != null)\n{\n    isPlanView = activeView.ViewType == ViewType.FloorPlan \n                 || activeView.ViewType == ViewType.CeilingPlan \n                 || activeView.ViewType == ViewType.AreaPlan \n                 || activeView.ViewType == ViewType.EngineeringPlan;\n}\n"}
{"prompt":"Crea un nuevo tipo de puerta llamado 'Puerta RF-90' y establece su resistencia al fuego a '90 min'.","completion":"string newTypeName = \"Puerta RF-90\";\nFamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nFamilySymbol newDoorType = null;\nif (doorTypeToDuplicate != null)\n{\n    newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\n    if (newDoorType != null)\n    {\n        Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n        if (fireRatingParam != null && !fireRatingParam.IsReadOnly)\n        {\n            fireRatingParam.Set(\"90 min\");\n        }\n    }\n}"}
{"prompt":"Cambia el tipo de todas las ventanas de 'Fijo' a 'Abatible'.","completion":"FamilySymbol newType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name.Contains(\"Abatible\"));\nFamilySymbol oldType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name.Contains(\"Fijo\"));\n\nif (newType != null && oldType != null)\n{\n    List<FamilyInstance> windowsToChange = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().Where(fi => fi.Symbol.Id == oldType.Id).ToList();\n    foreach (FamilyInstance window in windowsToChange)\n    {\n        window.Symbol = newType;\n    }\n}"}
{"prompt":"Clona el nivel 5 con un desfase de 1m y llámalo 'Mezanine'.","completion":"string levelName = \"Nivel 5\";\nLevel levelToCopy = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (levelToCopy != null)\n{\n    double offset = UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, levelToCopy.Elevation + offset);\n    newLevel.Name = \"Mezanine\";\n}"}
{"prompt":"Create a 'Roof Terrace' level at 15m.","completion":"string levelName = \"Roof Terrace\";\ndouble elev = UnitUtils.ConvertToInternalUnits(15, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elev);\nnewLevel.Name = levelName;\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Cambia el nombre de la vista activa a 'Sección Longitudinal'.","completion":"string newName = \"Sección Longitudinal\";\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.Name = newName;\n}"}
{"prompt":"Coloca una instancia de la familia 'Ventana Fija 116x60' en el centro de la habitación 'Despacho 100'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 116\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Ventana Fija 100x60\") as FamilySymbol;\nif(furnitureSymbol != null && !furnitureSymbol.IsActive) furnitureSymbol.Activate();\nif(room != null)\n{\n    LocationPoint roomCenter = room.Location as LocationPoint;\n    if(roomCenter != null && furnitureSymbol != null && room.Level != null)\n    {\n        doc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Inserta un nivel llamado 'Nivel Azotea' a 16.2 metros.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(16.2, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Nivel Azotea\";\n}"}
{"prompt":"Crea un nuevo Nivel llamado 'Nivel 9' a una elevación de 11 metros.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(11, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Nivel 9\";\n}"}
{"prompt":"Set the 'Comments' parameter for all doors on Level 1 to 'Fire Rating - 95 min'.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\n\nif (level1 != null)\n{\n    List<FamilyInstance> doorsOnLevel1 = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsNotElementType().Cast<FamilyInstance>().Where(fi => fi.LevelId == level1.Id).ToList();\n    foreach(FamilyInstance door in doorsOnLevel1)\n    {\n        Parameter commentsParam = door.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n        if (commentsParam != null && !commentsParam.IsReadOnly) commentsParam.Set(\"Fire Rating - 95 min\");\n    }\n}"}
{"prompt":"Clona el nivel 1 con un desfase de 7m y llámalo 'Mezanine'.","completion":"string levelName = \"Mezanine\";\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\n\nif (level1 != null)\n{\n    double newElevation = level1.ProjectElevation + UnitUtils.ConvertToInternalUnits(7, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, newElevation);\n    if (newLevel != null)\n    {\n        newLevel.Name = levelName;\n    }\n}"}
{"prompt":"Create a curtain wall 6 meters wide and 4 meters high.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nWallType cwType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Kind == WallKind.Curtain);\n\nif (level != null && cwType != null)\n{\n    Line baseLine = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits(6, UnitTypeId.Meters), 0, 0));\n    Wall.Create(doc, baseLine, cwType.Id, level.Id, UnitUtils.ConvertToInternalUnits(4.0, UnitTypeId.Meters), 0.0, false, false);\n}"}
{"prompt":"Set the 'Mark' parameter of all selected walls to 'W-EXT-01'.","completion":"using (Transaction t = new Transaction(doc, \"Set Wall Mark\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    ICollection<ElementId> selectedIds = localUidoc.Selection.GetElementIds();\n\n    if (selectedIds != null && selectedIds.Count > 0)\n    {\n        foreach(ElementId id in selectedIds)\n        {\n            Element elem = doc.GetElement(id);\n            if(elem is Wall)\n            {\n                Parameter markParam = elem.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n                if (markParam != null && !markParam.IsReadOnly) markParam.Set(\"W-EXT-01\");\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Set the visibility of the 'Furniture' category to false in the active view.","completion":"Category furnitureCat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Furniture);\nif (furnitureCat != null && doc.ActiveView != null)\n{\n    doc.ActiveView.SetCategoryHidden(furnitureCat.Id, true);\n}"}
{"prompt":"Replicate the 'Generic - 145mm' wall type and name it 'Interior - 18cm Plaster'.","completion":"string originalName = \"Generic - 145mm\";\nstring newName = \"Interior - 18cm Plaster\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif(originalType!=null)\n    originalType.Duplicate(newName);"}
{"prompt":"Añade una línea de rejilla vertical a la mitad de un muro cortina.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Cast<Wall>().FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain);\nif (curtainWall != null)\n{\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    if (grid != null)\n    {\n        grid.AddGridLine(true, new XYZ(0,0,0), false);\n    }\n}"}
{"prompt":"Construct a new Ribbon panel named 'My Tools' with a button.","completion":""}
{"prompt":"Incorpora el prefijo 'ARQ-' a todas las tablas de planificación.","completion":"string prefix = \"ARQ-\";\nList<ViewSchedule> schedules = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().Where(v => !v.IsTemplate).ToList();\nforeach (ViewSchedule schedule in schedules)\n{\n    if (!schedule.Name.StartsWith(prefix))\n    {\n        schedule.Name = prefix + schedule.Name;\n    }\n}"}
{"prompt":"Find all walls with an empty 'Mark' parameter and set it to 'WM-01'.","completion":"List<Wall> walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>().ToList();\nforeach(var w in walls)\n{\n  Parameter p = w.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n  if(p != null && !p.IsReadOnly && string.IsNullOrEmpty(p.AsString()))\n  {\n      p.Set(\"WM-01\");\n  }\n}"}
{"prompt":"Encuentra todas las puertas del Nivel 2 que sean de la familia 'Puerta Sencilla'.","completion":"Level level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel 2\");\nList<Element> doors = new List<Element>();\n\nif (level2 != null)\n{\n    ElementCategoryFilter catFilter = new ElementCategoryFilter(BuiltInCategory.OST_Doors);\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level2.Id);\n    FilterableValueProvider provider = new ParameterValueProvider(new ElementId(BuiltInParameter.ELEM_FAMILY_PARAM));\n    FilterStringRuleEvaluator evaluator = new FilterStringEquals();\n    FilterRule famNameRule = new FilterStringRule(provider, evaluator, \"Puerta Sencilla\");\n    ElementParameterFilter famFilter = new ElementParameterFilter(famNameRule);\n    LogicalAndFilter andFilter = new LogicalAndFilter(new List<ElementFilter> { catFilter, levelFilter, famFilter });\n    doors = new FilteredElementCollector(doc).WherePasses(andFilter).ToList();\n}"}
{"prompt":"Crea una dimensión radial para un muro curvo.","completion":"using (Transaction t = new Transaction(doc, \"Create Radial Dimension\"))\n{\n    t.Start();\n    Wall curvedWall = new FilteredElementCollector(doc, doc.ActiveView.Id).OfClass(typeof(Wall)).Cast<Wall>().FirstOrDefault(w => w.Location is LocationCurve && (w.Location as LocationCurve).Curve is Arc);\n    View activeView = doc.ActiveView;\n\n    if (curvedWall != null && activeView != null)\n    {\n        LocationCurve locCurve = curvedWall.Location as LocationCurve;\n        if (locCurve != null)\n        {\n            Arc arc = locCurve.Curve as Arc;\n            if (arc != null)\n            {\n                ReferenceArray refArray = new ReferenceArray();\n                refArray.Append(arc.Reference);\n                doc.Create.NewDimension(activeView, Line.CreateBound(arc.Center, arc.GetEndPoint(0)), refArray);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea un nuevo tipo de tubería llamado 'Tubería de Acero' con material 'Acero, Carbono'.","completion":"string newTypeName = \"Tubería de Acero\";\nPipeType pipeTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(PipeType)).FirstOrDefault() as PipeType;\nMaterial steel = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name == \"Acero, Carbono\") as Material;\n\nif (pipeTypeToDuplicate != null && steel != null)\n{\n    PipeType newType = pipeTypeToDuplicate.Duplicate(newTypeName) as PipeType;\n    if (newType != null)\n    {\n        Parameter materialParam = newType.get_Parameter(BuiltInParameter.MATERIAL_ID_PARAM);\n        if (materialParam != null && !materialParam.IsReadOnly) materialParam.Set(steel.Id);\n    }\n}"}
{"prompt":"Clone the 'Generic - 145mm' wall type and name it 'Interior - 12cm Plaster'.","completion":"string originalName = \"Generic - 145mm\";\nstring newName = \"Interior - 12cm Plaster\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif (originalType != null)\n{\n    WallType newType = originalType.Duplicate(newName) as WallType;\n}"}
{"prompt":"Modify the type of a selected floor to 'Concrete 18cm'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a floor\");\n\nif (pickedRef != null)\n{\n    Floor floorToChange = doc.GetElement(pickedRef) as Floor;\n    FloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name == \"Concrete 18cm\");\n    \n    if (floorToChange != null && newType != null)\n    {\n        floorToChange.ChangeTypeId(newType.Id);\n    }\n}"}
{"prompt":"Aplica aislamiento térmico de 28mm a todas las tuberías de agua caliente.","completion":"PipeInsulationType insulationType = new FilteredElementCollector(doc).OfClass(typeof(PipeInsulationType)).FirstOrDefault() as PipeInsulationType;\nPipingSystemType hotWaterSystem = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).Cast<PipingSystemType>().FirstOrDefault(s => s.Name.Contains(\"Hot Water\") || s.Name.Contains(\"Agua Caliente\"));\n\nif (insulationType != null && hotWaterSystem != null)\n{\n    List<Pipe> pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast<Pipe>().Where(p => \n    {\n        Parameter systemParam = p.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM);\n        return systemParam != null && systemParam.HasValue && systemParam.AsElementId() == hotWaterSystem.Id;\n    }).ToList();\n    \n    foreach(Pipe p in pipes)\n    {\n        PipeInsulation.Create(doc, p.Id, insulationType.Id, UnitUtils.ConvertToInternalUnits(28, UnitTypeId.Millimeters));\n    }\n}"}
{"prompt":"Crea una topografía DirectShape a partir de una lista de puntos.","completion":"\/\/ Create a default set of points as none were specified in the prompt\nList<XYZ> points = new List<XYZ>\n{\n    new XYZ(0, 0, 0),\n    new XYZ(50, 0, 2),\n    new XYZ(0, 50, 5),\n    new XYZ(50, 50, 3)\n};\n\nTessellatedShapeBuilder builder = new TessellatedShapeBuilder();\nbuilder.OpenConnectedFaceSet(true);\nbuilder.AddFace(new TessellatedFace(new List<XYZ> { points[0], points[1], points[2] }, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ> { points[1], points[3], points[2] }, ElementId.InvalidElementId));\nbuilder.CloseConnectedFaceSet();\nbuilder.Build();\nTessellatedShapeBuilderResult result = builder.GetBuildResult();\n\nif (result.GetGeometricalObjects().Any())\n{\n    DirectShape ds = DirectShape.CreateElement(doc, new ElementId(BuiltInCategory.OST_Topography));\n    if (ds != null)\n    {\n        ds.SetShape(result.GetGeometricalObjects());\n        ds.Name = \"Topografía DirectShape\";\n    }\n}"}
{"prompt":"Crea 5 worksets para las disciplinas de ingeniería.","completion":"List<string> worksetNames = new List<string> { \"MEP_HVAC\", \"MEP_Plumbing\", \"MEP_Electrical\", \"STRUCT_Framing\", \"STRUCT_Foundations\" };\nforeach(string name in worksetNames)\n{\n    Workset newWorkset = Workset.Create(doc, name);\n}"}
{"prompt":"Crea un nuevo tipo de muro de 27cm llamado 'Interiores'.","completion":"WallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif(wallTypeToDuplicate != null)\n{\n    WallType newWallType = null;\n    try { newWallType = wallTypeToDuplicate.Duplicate(\"Interiores\") as WallType; } catch {}\n    if(newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if(cs != null && cs.GetLayers().Any())\n        {\n            int coreLayerIndex = cs.GetFirstCoreLayerIndex();\n            if(coreLayerIndex != -1) \n            {\n                cs.SetLayerFunction(coreLayerIndex, MaterialFunctionAssignment.Structure);\n                cs.SetLayerWidth(coreLayerIndex, UnitUtils.ConvertToInternalUnits(27, UnitTypeId.Centimeters));\n                newWallType.SetCompoundStructure(cs);\n            }\n        }\n    }\n}"}
{"prompt":"Create an MEP space for each room on Level 1.","completion":"using (Transaction t = new Transaction(doc, \"Create MEP Spaces\"))\n{\n    t.Start();\n    Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 1\");\n\n    if (level1 != null)\n    {\n        List<Room> roomsOnLevel1 = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Where(e => (e as Room) != null && (e as Room).LevelId.Equals(level1.Id)).Cast<Room>().ToList();\n        foreach(Room room in roomsOnLevel1)\n        {\n           \/\/ The direct creation of MEP spaces from rooms might not be available in this specific API version.\n           \/\/ Placeholder comment for the intended logic.\n           \/\/ Space.Create(doc, room, null);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Move a selected element to position (2,6).","completion":"ICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds.Any())\n{\n    foreach (ElementId id in selectedIds)\n    {\n        Element elem = doc.GetElement(id);\n        if (elem != null)\n        {\n            LocationPoint lp = elem.Location as LocationPoint;\n            if (lp != null)\n            {\n                XYZ newPosition = new XYZ(2, 6, lp.Point.Z);\n                lp.Point = newPosition;\n            }\n        }\n    }\n}"}
{"prompt":"Actualiza el parámetro 'Función' de todos los muros seleccionados a 'Genérico - 250mm'.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nif (selectedIds.Count > 0)\n{\n    foreach(ElementId id in selectedIds)\n    {\n        Wall wall = doc.GetElement(id) as Wall;\n        if (wall != null)\n        {\n            Parameter funcParam = wall.get_Parameter(BuiltInParameter.FUNCTION_PARAM);\n            if (funcParam != null && !funcParam.IsReadOnly)\n            {\n                funcParam.Set(1); \/\/ 1 corresponde a Genérico - 250mm\n            }\n        }\n    }\n}"}
{"prompt":"Construct 5 worksets for engineering disciplines.","completion":"List<string> worksetNames = new List<string> { \"MEP_HVAC\", \"MEP_Plumbing\", \"MEP_Electrical\", \"STRUCT_Framing\", \"STRUCT_Foundations\" };\nforeach(string name in worksetNames)\n{\n    Workset newWorkset = Workset.Create(doc, name);\n}"}
{"prompt":"Construct a new pipe type named 'Steel Pipe' with 'Steel, Carbon' material.","completion":"string newTypeName = \"Steel Pipe\";\nPipeType pipeTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(PipeType)).FirstOrDefault() as PipeType;\nMaterial steel = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name == \"Steel, Carbon\") as Material;\n\nif (pipeTypeToDuplicate != null && steel != null)\n{\n    PipeType newType = pipeTypeToDuplicate.Duplicate(newTypeName) as PipeType;\n    if (newType != null)\n    {\n        Parameter materialParam = newType.get_Parameter(BuiltInParameter.MATERIAL_ID_PARAM);\n        if (materialParam != null && !materialParam.IsReadOnly) materialParam.Set(steel.Id);\n    }\n}"}
{"prompt":"Get all rooms on Level 1","completion":"string levelName = \"Level 1\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(targetLevel.Id);\n    FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WherePasses(levelFilter);\n    uidoc.Selection.SetElementIds(collector.ToElementIds());\n}"}
{"prompt":"Fill the material parameter of all walls with 'Concrete'.","completion":"Material concreteMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name.Contains(\"Concrete\")) as Material;\nvar walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>().ToList();\n\nif (concreteMaterial != null)\n{\n    foreach(Wall w in walls)\n    {\n        Parameter materialParam = w.get_Parameter(BuiltInParameter.STRUCTURAL_MATERIAL_PARAM);\n        if(materialParam != null && !materialParam.IsReadOnly) materialParam.Set(concreteMaterial.Id);\n    }\n}"}
{"prompt":"Duplicate the 'Generic - 145mm' wall type and name it 'Interior - 11cm Plaster'.","completion":"string originalName = \"Generic - 145mm\";\nstring newName = \"Interior - 11cm Plaster\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif(originalType!=null)\n    originalType.Duplicate(newName);"}
{"prompt":"Replicate the 'Generic - 147mm' wall type and name it 'Interior - 17cm Plaster'.","completion":"string originalName = \"Generic - 147mm\";\nstring newName = \"Interior - 17cm Plaster\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif(originalType!=null)\n    originalType.Duplicate(newName);"}
{"prompt":"Clona la vista de planta 'Nivel 2' y conviértela en una plantilla de vista.","completion":"using (Transaction t = new Transaction(doc, \"Create View Template\"))\n{\n    t.Start();\n    ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().FirstOrDefault(v => v.Name == \"Nivel 2\");\n    string templateName = \"Plantilla Nivel 2\";\n\n    if (viewToDuplicate != null)\n    {\n        ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n        View newView = doc.GetElement(newViewId) as View;\n        if (newView != null)\n        {\n           \/\/ Direct conversion to a template may not be available in older APIs.\n           \/\/ A common workaround is to set the IsTemplate property if available and writable, \n           \/\/ which is not the case here. This is left as a comment for conceptual understanding.\n           \/\/ newView.IsTemplate = true;\n            newView.Name = templateName;\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Encuentra todas las puertas del Nivel 5 que sean de la familia 'M_Chair-Breuer'.","completion":"string levelName = \"Nivel 5\";\nstring familyName = \"M_Chair-Breuer\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WherePasses(new ElementLevelFilter(targetLevel.Id));\n    List<ElementId> doorIds = new List<ElementId>();\n    foreach (Element door in collector)\n    {\n        FamilyInstance fi = door as FamilyInstance;\n        if (fi != null && fi.Symbol.Family.Name == familyName)\n        {\n            doorIds.Add(door.Id);\n        }\n    }\n    uidoc.Selection.SetElementIds(doorIds);\n}"}
{"prompt":"Copia la vista 'Nivel 2' como una vista dependiente.","completion":"ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v => v.Name == \"Nivel 2\") as ViewPlan;\n\nif (viewToDuplicate != null)\n{\n    ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n}"}
{"prompt":"Crea un nuevo tipo de puerta llamado 'Puerta RF-60' y asigna '60 min' al parámetro 'Fire Rating'.","completion":"string newTypeName = \"Puerta RF-60\";\nFamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (doorTypeToDuplicate != null)\n{\n    FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\n    if (newDoorType != null)\n    {\n        Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n        if (fireRatingParam != null && !fireRatingParam.IsReadOnly) fireRatingParam.Set(\"60 min\");\n    }\n}"}
{"prompt":"Place a piece of furniture at coordinates (2,3).","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (level != null && furnitureSymbol != null)\n{\n    if (!furnitureSymbol.IsActive) { furnitureSymbol.Activate(); }\n    XYZ point = new XYZ(2, 3, 0);\n    doc.Create.NewFamilyInstance(point, furnitureSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n}"}
{"prompt":"Permite al usuario seleccionar un muro y obtén su ElementId.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un muro\");\nElementId selectedWallId = ElementId.InvalidElementId;\nif (pickedRef != null)\n{\n    selectedWallId = pickedRef.ElementId;\n}"}
{"prompt":"Crea un nuevo parámetro de proyecto compartido de texto llamado 'Notas Adicionales' para muros y puertas.","completion":"string paramName = \"Notas Adicionales\";\nstring originalFile = doc.Application.SharedParametersFilename;\nstring tempFile = System.IO.Path.GetTempFileName() + \".txt\";\nusing (System.IO.File.Create(tempFile)) { }\ndoc.Application.SharedParametersFilename = tempFile;\ntry\n{\n    DefinitionFile defFile = doc.Application.OpenSharedParameterFile();\n    if (defFile != null)\n    {\n        DefinitionGroup group = defFile.Groups.Create(\"General\");\n        if (group != null)\n        {\n            ExternalDefinitionCreationOptions options = new ExternalDefinitionCreationOptions(paramName, SpecTypeId.String.Text);\n            Definition definition = group.Definitions.Create(options);\n            if (definition != null)\n            {\n                CategorySet categories = doc.Application.Create.NewCategorySet();\n                categories.Insert(doc.Settings.Categories.get_Item(BuiltInCategory.OST_Walls));\n                categories.Insert(doc.Settings.Categories.get_Item(BuiltInCategory.OST_Doors));\n                InstanceBinding binding = doc.Application.Create.NewInstanceBinding(categories);\n                doc.ParameterBindings.Insert(definition, binding, GroupTypeId.Data);\n            }\n        }\n    }\n}\nfinally\n{\n    doc.Application.SharedParametersFilename = originalFile;\n    System.IO.File.Delete(tempFile);\n}"}
{"prompt":"Append a point to the selected Path of Travel.","completion":"\/\/ PathOfTravel related methods like GetPath and Update are likely inaccessible in this environment.\n\/\/ The following code is a placeholder to show the intent.\n\/*\nusing (Transaction t = new Transaction(doc, \"Update Path of Travel\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference pickedRef = localUidoc.Selection.PickObject(ObjectType.Element, \"Select a Path of Travel\");\n\n    if (pickedRef != null)\n    {\n        PathOfTravel pot = doc.GetElement(pickedRef) as PathOfTravel;\n        if (pot != null)\n        {\n            IList<XYZ> points = pot.GetPath();\n            if (points != null && points.Count >= 2)\n            {\n                XYZ midPoint = (points[0] + points[1]) \/ 2;\n                points.Insert(1, midPoint);\n                pot.Update(points);\n            }\n        }\n    }\n    t.Commit();\n}\n*\/"}
{"prompt":"Crea una vista 3D con la caja de sección activada.","completion":"string viewName = \"Vista 3D con Caja de Sección\";\nViewFamilyType vft3D = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft3D != null)\n{\n    View3D view3d = View3D.CreateIsometric(doc, vft3D.Id);\n    if (view3d != null)\n    {\n        view3d.Name = viewName;\n        view3d.IsSectionBoxActive = true;\n    }\n}"}
{"prompt":"Generate a new level 'Level 1' at an elevation of 11 meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(11, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Level 1\";\n}"}
{"prompt":"Create 5 worksets for engineering disciplines.","completion":"List<string> worksetNames = new List<string> { \"MEP_HVAC\", \"MEP_Plumbing\", \"MEP_Electrical\", \"STRUCT_Framing\", \"STRUCT_Foundations\" };\nforeach(string name in worksetNames)\n{\n    Workset newWorkset = Workset.Create(doc, name);\n}"}
{"prompt":"Create a floor with a circular hole in the center.","completion":"using (Transaction t = new Transaction(doc, \"Create Floor with Hole\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    FloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\n\n    if (level != null && floorType != null)\n    {\n        XYZ p1 = new XYZ(-10 \/ 0.3048, -10 \/ 0.3048, 0);\n        XYZ p2 = new XYZ(10 \/ 0.3048, -10 \/ 0.3048, 0);\n        XYZ p3 = new XYZ(10 \/ 0.3048, 10 \/ 0.3048, 0);\n        XYZ p4 = new XYZ(-10 \/ 0.3048, 10 \/ 0.3048, 0);\n        CurveLoop outerLoop = new CurveLoop();\n        outerLoop.Append(Line.CreateBound(p1, p2));\n        outerLoop.Append(Line.CreateBound(p2, p3));\n        outerLoop.Append(Line.CreateBound(p3, p4));\n        outerLoop.Append(Line.CreateBound(p4, p1));\n\n        XYZ center = XYZ.Zero;\n        double radius = 2 \/ 0.3048;\n        CurveLoop innerLoop = new CurveLoop();\n        innerLoop.Append(Arc.Create(center - XYZ.BasisX * radius, center + XYZ.BasisX * radius, center + XYZ.BasisY * radius));\n        innerLoop.Append(Arc.Create(center + XYZ.BasisX * radius, center - XYZ.BasisX * radius, center - XYZ.BasisY * radius));\n\n        Floor.Create(doc, new List<CurveLoop> { outerLoop, innerLoop }, floorType.Id, level.Id);\n    }\n    t.Commit();\n}"}
{"prompt":"Apply 26mm thermal insulation to all hot water pipes.","completion":"PipeInsulationType insulationType = new FilteredElementCollector(doc).OfClass(typeof(PipeInsulationType)).FirstOrDefault() as PipeInsulationType;\nPipingSystemType hotWaterSystem = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).Cast<PipingSystemType>().FirstOrDefault(s => s.Name.Contains(\"Hot Water\"));\n\nif (insulationType != null && hotWaterSystem != null)\n{\n    List<Pipe> pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast<Pipe>().Where(p => \n    {\n        Parameter systemParam = p.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM);\n        return systemParam != null && systemParam.HasValue && systemParam.AsElementId() == hotWaterSystem.Id;\n    }).ToList();\n    \n    foreach(Pipe p in pipes)\n    {\n        PipeInsulation.Create(doc, p.Id, insulationType.Id, UnitUtils.ConvertToInternalUnits(26, UnitTypeId.Millimeters));\n    }\n}"}
{"prompt":"Duplicate the 'Generic - 148mm' wall type and name it 'Interior - 16cm Plaster'.","completion":"string originalName = \"Generic - 148mm\";\nstring newName = \"Interior - 16cm Plaster\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif (originalType != null)\n{\n    WallType newType = originalType.Duplicate(newName) as WallType;\n}"}
{"prompt":"Unjoin the geometry of two given elements.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference ref1 = uidoc.Selection.PickObject(ObjectType.Element, \"Select the first element\");\nReference ref2 = uidoc.Selection.PickObject(ObjectType.Element, \"Select the second element\");\n\nif (ref1 != null && ref2 != null)\n{\n    Element e1 = doc.GetElement(ref1.ElementId);\n    Element e2 = doc.GetElement(ref2.ElementId);\n    if (e1 != null && e2 != null)\n    {\n        JoinGeometryUtils.UnjoinGeometry(doc, e1, e2);\n    }\n}"}
{"prompt":"Inserta una instancia de la familia 'Puerta Sencilla' en el centro de la habitación 'Despacho 102'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 102\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Puerta Sencilla\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);"}
{"prompt":"Spin a selected element 95 degrees around its Z-axis.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select an element to rotate\");\nElement elem = doc.GetElement(pickedRef.ElementId);\nLocationPoint lp = elem.Location as LocationPoint;\nLine axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\nElementTransformUtils.RotateElement(doc, elem.Id, axis, Math.PI \/ 95);"}
{"prompt":"Construct an MEP space for each room on Level 1","completion":"string levelName = \"Level 1\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    FilteredElementCollector roomCollector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WherePasses(new ElementLevelFilter(targetLevel.Id));\n    foreach (Room room in roomCollector.ToElements().Cast<Room>())\n    {\n        if (room.Location != null)\n        {\n            LocationPoint locPoint = room.Location as LocationPoint;\n            if(locPoint != null)\n            {\n                UV point = new UV(locPoint.Point.X, locPoint.Point.Y);\n                doc.Create.NewSpace(targetLevel, point);\n            }\n        }\n    }\n}"}
{"prompt":"Construct a topography surface from a list of 4 points.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nElementId toposolidTypeId = Toposolid.GetDefaultToposolidType(doc);\n\nif (level != null && toposolidTypeId != ElementId.InvalidElementId)\n{\n    \/\/ Create a default set of points as none were specified in the prompt\n    IList<XYZ> points = new List<XYZ>\n    {\n        new XYZ(0, 0, 0),\n        new XYZ(50, 0, 2),\n        new XYZ(0, 50, 5),\n        new XYZ(50, 50, 3)\n    };\n    Toposolid.Create(doc, points, toposolidTypeId, level.Id);\n}"}
{"prompt":"Build a new room on Level 2 at point (15, 15).","completion":"string levelName = \"Level 2\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    Phase defaultPhase = doc.Phases.get_Item(doc.Phases.Size - 1);\n    UV point = new UV(15, 15);\n    Room newRoom = doc.Create.NewRoom(targetLevel, point);\n}"}
{"prompt":"Añade un plano de referencia horizontal llamado 'Eje Central A'.","completion":"using (Transaction t = new Transaction(doc, \"Add Reference Plane\"))\n{\n    t.Start();\n    string rpName = \"Eje Central A\";\n    View activeView = doc.ActiveView;\n\n    if (activeView != null)\n    {\n        XYZ bubbleEnd = new XYZ(0, 10, 0);\n        XYZ freeEnd = new XYZ(10, 10, 0);\n        XYZ cutVec = XYZ.BasisZ;\n        ReferencePlane rp = doc.Create.NewReferencePlane(bubbleEnd, freeEnd, cutVec, activeView);\n        if (rp != null)\n        {\n            rp.Name = rpName;\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Genera un reporte con el área de todas las habitaciones del proyecto.","completion":"List<Room> rooms = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>().ToList();"}
{"prompt":"Crea un nuevo nivel llamado 'Mezzanine' a 7.2 metros de elevación.","completion":"string levelName = \"Mezzanine\";\ndouble elevation = UnitUtils.ConvertToInternalUnits(7.2, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Inserta un punto de referencia en las coordenadas (6,1,1) dentro del editor de familias.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(6,1,1));"}
{"prompt":"Get all rooms on the 'Ground Floor' Level.","completion":"Level groundFloor = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Ground Floor\") as Level;\nList<Element> roomsOnGround = new List<Element>();\n\nif (groundFloor != null)\n{\n    roomsOnGround = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Where(r => r.LevelId == groundFloor.Id).ToList();\n}"}
{"prompt":"Inserta un pilar estructural en (10,5), asegurándote de que el tipo de familia esté activo.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null && columnSymbol != null)\n{\n    if (!columnSymbol.IsActive)\n    {\n        columnSymbol.Activate();\n    }\n    doc.Create.NewFamilyInstance(new XYZ(10, 5, 0), columnSymbol, level, StructuralType.Column);\n}"}
{"prompt":"Construct a new elevation view looking south.","completion":"using (Transaction t = new Transaction(doc, \"Create South Elevation\"))\n{\n    t.Start();\n    ViewFamilyType elevationVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(vft => vft.ViewFamily == ViewFamily.Elevation);\n    View activeView = doc.ActiveView;\n\n    if (elevationVFT != null && activeView != null)\n    {\n        ElevationMarker marker = ElevationMarker.CreateElevationMarker(doc, elevationVFT.Id, new XYZ(0, -20 \/ 0.3048, 0), 100);\n        \n        if (marker != null)\n        {\n            View aev = marker.CreateElevation(doc, activeView.Id, 0);\n            if (aev != null)\n            {\n                aev.Name = \"South Elevation\";\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Copy level 6 with a 6m offset and name it 'Mezzanine'.","completion":"string levelName = \"Level 6\";\nLevel levelToCopy = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (levelToCopy != null)\n{\n    double offset = UnitUtils.ConvertToInternalUnits(6, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, levelToCopy.Elevation + offset);\n    newLevel.Name = \"Mezzanine\";\n}"}
{"prompt":"Create a new 5mm text type in green color.","completion":"using (Transaction t = new Transaction(doc, \"Create Green Text Type\"))\n{\n    t.Start();\n    string newTypeName = \"5mm Green\";\n    TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\n    TextNoteType newType = null;\n    if (defaultType != null)\n    {\n        newType = defaultType.Duplicate(newTypeName) as TextNoteType;\n        if (newType != null)\n        {\n            Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n            if (textSizeParam != null && !textSizeParam.IsReadOnly)\n            {\n                textSizeParam.Set(5 \/ 304.8);\n            }\n            Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n            if (lineColorParam != null && !lineColorParam.IsReadOnly)\n            {\n                 lineColorParam.Set(65280);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Añade un codo de 90 grados entre dos tuberías.","completion":"using (Transaction t = new Transaction(doc, \"Add Elbow\"))\n{\n    t.Start();\n    List<Pipe> pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast<Pipe>().Where(p => p.ConnectorManager != null && p.ConnectorManager.UnusedConnectors.Size > 0).Take(2).ToList();\n\n    if (pipes.Count >= 2)\n    {\n        Connector c1 = pipes[0].ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n        Connector c2 = pipes[1].ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n        \n        if (c1 != null && c2 != null)\n        {\n            doc.Create.NewElbowFitting(c1, c2);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Mueve un elemento seleccionado a la posición (6,6).","completion":"ICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds.Any())\n{\n    foreach (ElementId id in selectedIds)\n    {\n        Element elem = doc.GetElement(id);\n        if (elem != null)\n        {\n            LocationPoint lp = elem.Location as LocationPoint;\n            if (lp != null)\n            {\n                XYZ newPosition = new XYZ(6, 6, lp.Point.Z);\n                lp.Point = newPosition;\n            }\n        }\n    }\n}"}
{"prompt":"Place a camera in the active view.","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(f => f.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft != null)\n{\n    View3D cameraView = View3D.CreatePerspective(doc, vft.Id);\n    if (cameraView != null)\n    {\n        cameraView.Name = \"New Camera View\";\n        XYZ eyePos = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters));\n        XYZ upDir = XYZ.BasisZ;\n        XYZ forwardDir = XYZ.Zero - eyePos;\n        ViewOrientation3D orientation = new ViewOrientation3D(eyePos, upDir, forwardDir);\n        cameraView.SetOrientation(orientation);\n    }\n}"}
{"prompt":"Crea 10 worksets de arquitectura.","completion":"List<string> worksetNames = new List<string> { \"TAD_ARQ_MAM\", \"TAD_ARQ_ACA\", \"TAD_ARQ_PLA\", \"TAD_ARQ_PSO\", \"TAD_ARQ_HRE\", \"TAD_ARQ_ALU\", \"TAD_ARQ_CAR\", \"TAD_ARQ_MOB\", \"TAD_ARQ_PLO\", \"TAD_ARQ_EXT\" };\nforeach(string name in worksetNames)\n{\n    Workset.Create(doc, name);\n}"}
{"prompt":"Build a new 3mm text type in blue color.","completion":"using (Transaction t = new Transaction(doc, \"Create Text Type\"))\n{\n    t.Start();\n    string newTypeName = \"3mm Blue\";\n    TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\n\n    if (defaultType != null)\n    {\n        TextNoteType newType = defaultType.Duplicate(newTypeName) as TextNoteType;\n        if (newType != null)\n        {\n            Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n            if (textSizeParam != null && !textSizeParam.IsReadOnly) textSizeParam.Set(3 \/ 304.8);\n            \n            Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n            if (lineColorParam != null && !lineColorParam.IsReadOnly) lineColorParam.Set(255);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Get the total area of 'Exterior - Brick on CMU' walls.","completion":"WallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == \"Exterior - Brick on CMU\") as WallType;\ndouble totalArea = 0.0;\n\nif (wallType != null)\n{\n    FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType();\n    IList<Wall> walls = collector.Cast<Wall>().Where(w => w.GetTypeId().Equals(wallType.Id)).ToList();\n\n    foreach (Wall wall in walls)\n    {\n        Parameter areaParam = wall.get_Parameter(BuiltInParameter.HOST_AREA_COMPUTED);\n        if (areaParam != null) totalArea += areaParam.AsDouble();\n    }\n}\ndouble totalAreaFt2 = UnitUtils.ConvertFromInternalUnits(totalArea, UnitTypeId.SquareFeet);"}
{"prompt":"Recupera la longitud total de todos los muros del proyecto.","completion":"double totalLength = 0.0;\nList<Wall> walls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Cast<Wall>().ToList();\nforeach (Wall wall in walls)\n{\n    Parameter lengthParam = wall.get_Parameter(BuiltInParameter.CURVE_ELEM_LENGTH);\n    if (lengthParam != null && lengthParam.HasValue)\n    {\n        totalLength += lengthParam.AsDouble();\n    }\n}"}
{"prompt":"Crea un sistema de vigas en un forjado seleccionado.","completion":""}
{"prompt":"Generate a report with the area of all rooms in the project.","completion":"List<Room> rooms = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>().ToList();\nList<double> roomAreas = new List<double>();\nforeach (Room room in rooms)\n{\n    if (room != null && room.Area > 0)\n    {\n        roomAreas.Add(UnitUtils.ConvertFromInternalUnits(room.Area, UnitTypeId.SquareMeters));\n    }\n}\n\/\/ The orchestrator can now use the 'roomAreas' list to generate the final report."}
{"prompt":"Establece el parámetro 'Marca' de todos los muros seleccionados a 'M-EXT-01'.","completion":"using (Transaction t = new Transaction(doc, \"Set Wall Mark\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    ICollection<ElementId> selectedIds = localUidoc.Selection.GetElementIds();\n\n    if (selectedIds != null && selectedIds.Count > 0)\n    {\n        foreach(ElementId id in selectedIds)\n        {\n            Element elem = doc.GetElement(id);\n            if(elem is Wall)\n            {\n                Parameter p = elem.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n                if (p != null && !p.IsReadOnly) \n                {\n                    p.Set(\"M-EXT-01\");\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Generate a new linear dimension type with blue text and 2mm size.","completion":"using (Transaction t = new Transaction(doc, \"Create Dimension Type\"))\n{\n    t.Start();\n    string newTypeName = \"Blue Dimension 2mm\";\n    DimensionType linearDimType = new FilteredElementCollector(doc).OfClass(typeof(DimensionType)).Cast<DimensionType>().FirstOrDefault(dt => dt.StyleType == DimensionStyleType.Linear);\n\n    if (linearDimType != null)\n    {\n        DimensionType newDimType = linearDimType.Duplicate(newTypeName) as DimensionType;\n        if (newDimType != null)\n        {\n            Parameter colorParam = newDimType.get_Parameter(BuiltInParameter.LINE_COLOR);\n            if (colorParam != null && !colorParam.IsReadOnly) colorParam.Set(255);\n            Parameter textSizeParam = newDimType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n            if (textSizeParam != null && !textSizeParam.IsReadOnly) textSizeParam.Set(2 \/ 304.8);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Generate a stair between Level 1 and Level 1","completion":"\/\/ This is a complex operation that requires multiple steps and\/or user interaction and is not supported by the agent."}
{"prompt":"Cambia el tipo de la ventana seleccionada al tipo 'Fija 117x60'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una ventana\");\nFamilySymbol newType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name == \"Fija 117x60\");\nif (pickedRef != null && newType != null)\n{\n    FamilyInstance window = doc.GetElement(pickedRef.ElementId) as FamilyInstance;\n    if (window != null)\n    {\n        window.Symbol = newType;\n    }\n}"}
{"prompt":"Ubica una instancia de la familia 'Mesa de Oficina' en el centro de la habitación 'Despacho 101'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 101\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Mesa de Oficina\") as FamilySymbol;\nif(furnitureSymbol != null && !furnitureSymbol.IsActive) furnitureSymbol.Activate();\nif(room != null)\n{\n    LocationPoint roomCenter = room.Location as LocationPoint;\n    if(roomCenter != null && furnitureSymbol != null && room.Level != null)\n    {\n        doc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Carga la familia 'Mesa.rfa' y colócala en (6,7,1) en el Nivel 1","completion":"string levelName = \"Nivel 1\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nstring familyName = \"Mesa\";\nFamilySymbol symbol = new FilteredElementCollector(doc).OfClass(typeof(FamilySymbol)).Cast<FamilySymbol>().FirstOrDefault(fs => fs.Family.Name == familyName);\nif (symbol != null && targetLevel != null)\n{\n    if (!symbol.IsActive) { symbol.Activate(); doc.Regenerate(); }\n    XYZ location = new XYZ(6, 7, 1);\n    doc.Create.NewFamilyInstance(location, symbol, targetLevel, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n}"}
{"prompt":"Connect two cable trays with an elbow fitting.","completion":"List<CableTray> trays = new FilteredElementCollector(doc).OfClass(typeof(CableTray)).Cast<CableTray>().ToList();\n\nif (trays.Count >= 2)\n{\n    Connector c1 = trays[0].ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n    Connector c2 = trays[1].ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n    \n    if (c1 != null && c2 != null)\n    {\n        doc.Create.NewUnionFitting(c1, c2);\n    }\n}"}
{"prompt":"Create an 8-meter long foundation beam.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol foundationSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFoundation).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null && foundationSymbol != null)\n{\n    Line line = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters), 0, 0));\n    doc.Create.NewFamilyInstance(line, foundationSymbol, level, StructuralType.Footing);\n}"}
{"prompt":"Encuentra todas las puertas del Nivel 2 que sean de la familia 'Puerta Sencilla'.","completion":"Level level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel 2\");\nList<Element> doors = new List<Element>();\n\nif (level2 != null)\n{\n    ElementCategoryFilter catFilter = new ElementCategoryFilter(BuiltInCategory.OST_Doors);\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level2.Id);\n    FilterableValueProvider provider = new ParameterValueProvider(new ElementId(BuiltInParameter.ELEM_FAMILY_PARAM));\n    FilterStringRuleEvaluator evaluator = new FilterStringEquals();\n    FilterRule famNameRule = new FilterStringRule(provider, evaluator, \"Puerta Sencilla\");\n    ElementParameterFilter famFilter = new ElementParameterFilter(famNameRule);\n    LogicalAndFilter andFilter = new LogicalAndFilter(new List<ElementFilter> { catFilter, levelFilter, famFilter });\n    doors = new FilteredElementCollector(doc).WherePasses(andFilter).ToList();\n}"}
{"prompt":"Create a new door type named 'FR-90 Door' and set its fire rating to '90 min'.","completion":"using (Transaction t = new Transaction(doc, \"Create Door Type\"))\n{\n    t.Start();\n    string newTypeName = \"FR-90 Door\";\n    FamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n    if (doorTypeToDuplicate != null)\n    {\n        FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\n        if (newDoorType != null)\n        {\n            Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n            if(fireRatingParam != null && !fireRatingParam.IsReadOnly)\n            {\n                fireRatingParam.Set(\"90 min\");\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Duplicate the 'Level 5' view as a dependent view.","completion":"ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v => v.Name == \"Level 5\") as ViewPlan;\n\nif (viewToDuplicate != null)\n{\n    ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n}"}
{"prompt":"Situa una armadura (truss) de 6 metros entre dos puntos.","completion":"using (Transaction t = new Transaction(doc, \"Create Truss\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    FamilySymbol trussSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Family.Name.Contains(\"Truss\"));\n\n    if (level != null && trussSymbol != null)\n    {\n        if (!trussSymbol.IsActive) { trussSymbol.Activate(); }\n        Line trussLine = Line.CreateBound(new XYZ(0, 10, 0), new XYZ(6 \/ 0.3048, 10, 0));\n        doc.Create.NewFamilyInstance(trussLine, trussSymbol, level, StructuralType.NonStructural);\n    }\n    t.Commit();\n}"}
{"prompt":"Put a camera in the active view.","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(f => f.ViewFamily == ViewFamily.ThreeDimensional);\nif (vft != null)\n{\n    View3D cameraView = View3D.CreatePerspective(doc, vft.Id);\n    if (cameraView != null)\n    {\n        try { cameraView.Name = \"New Camera View\"; } catch {}\n        XYZ eyePos = new XYZ(30, 30, 30); \/\/ Default camera position in feet\n        XYZ upDir = XYZ.BasisZ;\n        XYZ forwardDir = XYZ.Zero - eyePos;\n        ViewOrientation3D orientation = new ViewOrientation3D(eyePos, upDir, forwardDir);\n        cameraView.SetOrientation(orientation);\n    }\n}"}
{"prompt":"Generate a global length parameter named 'CorridorWidth' with a value of 2.1m.","completion":"string paramName = \"CorridorWidth\";\nGlobalParameter gp = GlobalParameter.Create(doc, paramName, SpecTypeId.Length);\n\nif (gp != null)\n{\n    gp.SetValue(new DoubleParameterValue(UnitUtils.ConvertToInternalUnits(2.1, UnitTypeId.Meters)));\n}"}
{"prompt":"Fetch the MEP space associated with the room 'Office 105'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Cast<Room>().FirstOrDefault(r => r.Name == \"Office 105\");\nList<Space> spaces = new List<Space>();\n\nif (room != null)\n{\n    spaces = new FilteredElementCollector(doc).OfClass(typeof(Space)).Cast<Space>().Where(s => s.Room != null && s.Room.Id == room.Id).ToList();\n}"}
{"prompt":"Create a new Level named 'Level 1' at an elevation of 9 meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(9, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Level 1\";\n}"}
{"prompt":"Put an instance of the 'Office Desk' family in the center of the 'Office 103' room.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Office 103\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Office Desk\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);"}
{"prompt":"Activa todos los FamilySymbol del proyecto.","completion":"List<FamilySymbol> symbols = new FilteredElementCollector(doc).OfClass(typeof(FamilySymbol)).Cast<FamilySymbol>().ToList();\nforeach (FamilySymbol sym in symbols)\n{\n    if (!sym.IsActive)\n    {\n        sym.Activate();\n    }\n}"}
{"prompt":"Crea una nueva cota de nivel llamada 'Nivel 1' a una elevación de 14 metros.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(14, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\nif (newLevel != null)\n{\n    try { newLevel.Name = \"Nivel 1\"; } catch {}\n}"}
{"prompt":"Crea un nuevo nivel llamado 'Planta Sótano' a una elevación de -4.5 metros.","completion":"double elevationInternal = UnitUtils.ConvertToInternalUnits(-4.5, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevationInternal);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Planta Sótano\";\n}"}
{"prompt":"Incorpora un nivel llamado 'Nivel Azotea' a 15.5 metros.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(15.5, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Nivel Azotea\";\n}"}
{"prompt":"Duplica la vista de planta 'Nivel 2' y conviértela en una plantilla de vista.","completion":"using (Transaction t = new Transaction(doc, \"Create View Template\"))\n{\n    t.Start();\n    ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().FirstOrDefault(v => v.Name == \"Nivel 2\");\n    string templateName = \"Plantilla Nivel 2\";\n\n    if (viewToDuplicate != null)\n    {\n        ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n        View newView = doc.GetElement(newViewId) as View;\n        if (newView != null)\n        {\n           \/\/ In older APIs, direct conversion to a template may not be available.\n           \/\/ A common workaround is to set the IsTemplate property if available and writable, \n           \/\/ which is not the case here. This is left as a comment for conceptual understanding.\n           \/\/ newView.IsTemplate = true;\n            newView.Name = templateName;\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Dado un muro, obtén los materiales y sus volúmenes.","completion":"UIDocument localUidoc = uidoc;\nReference pickedRef = localUidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un muro\");\n\nDictionary<string, double> materialVolumes = new Dictionary<string, double>();\nif (pickedRef != null)\n{\n    Wall wall = doc.GetElement(pickedRef) as Wall;\n    if (wall != null)\n    {\n        Parameter areaParam = wall.get_Parameter(BuiltInParameter.HOST_AREA_COMPUTED);\n        if (areaParam != null && areaParam.HasValue)\n        {\n            double wallArea = areaParam.AsDouble();\n            WallType wallType = wall.WallType;\n            if (wallType != null)\n            {\n                CompoundStructure cs = wallType.GetCompoundStructure();\n                if (cs != null)\n                {\n                    foreach(CompoundStructureLayer layer in cs.GetLayers())\n                    {\n                        Material material = doc.GetElement(layer.MaterialId) as Material;\n                        if(material != null)\n                        {\n                            double volume = layer.Width * wallArea; \n                            materialVolumes[material.Name] = volume;\n                        }\n                    }\n                }\n            }\n        }\n    }\n}"}
{"prompt":"Open a family, add a type parameter 'Material Code', and save it.","completion":""}
{"prompt":"Ubica una instancia de la familia 'Mesa de Oficina' en el centro de la habitación 'Despacho 106'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 106\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Mesa de Oficina\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);"}
{"prompt":"Add a horizontal grid line to a curtain wall at a height of 1.5 meters.","completion":"using (Transaction t = new Transaction(doc, \"Add Curtain Grid Line\"))\n{\n    t.Start();\n    Wall cw = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Cast<Wall>().FirstOrDefault(w => w.CurtainGrid != null);\n\n    if (cw != null)\n    {\n        CurtainGrid cg = cw.CurtainGrid;\n        if (cg != null)\n        {\n            LocationCurve locCurve = cw.Location as LocationCurve;\n            if(locCurve != null)\n            {\n                 XYZ startPoint = locCurve.Curve.GetEndPoint(0);\n                 XYZ endPoint = locCurve.Curve.GetEndPoint(1);\n                 XYZ midPoint = (startPoint + endPoint) \/ 2;\n                 XYZ gridLinePoint = new XYZ(midPoint.X, midPoint.Y, 1.5 \/ 0.3048);\n                 cg.AddGridLine(false, gridLinePoint, false);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Calcula el área total de todas las habitaciones.","completion":"double totalArea = 0.0;\nList<Room> rooms = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>().ToList();\nforeach (Room room in rooms)\n{\n    totalArea += room.Area;\n}"}
{"prompt":"Apply 25mm thermal insulation to all hot water pipes.","completion":"PipeInsulationType insulationType = new FilteredElementCollector(doc).OfClass(typeof(PipeInsulationType)).FirstOrDefault() as PipeInsulationType;\nPipingSystemType hotWaterSystem = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).Cast<PipingSystemType>().FirstOrDefault(s => s.Name.Contains(\"Hot Water\"));\n\nif (insulationType != null && hotWaterSystem != null)\n{\n    List<Pipe> pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast<Pipe>().Where(p => \n    {\n        Parameter systemParam = p.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM);\n        return systemParam != null && systemParam.HasValue && systemParam.AsElementId() == hotWaterSystem.Id;\n    }).ToList();\n    \n    foreach(Pipe p in pipes)\n    {\n        PipeInsulation.Create(doc, p.Id, insulationType.Id, UnitUtils.ConvertToInternalUnits(25, UnitTypeId.Millimeters));\n    }\n}"}
{"prompt":"Pon un pilar estructural en las coordenadas 10,5.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null && columnSymbol != null)\n{\n    if (!columnSymbol.IsActive)\n    {\n        columnSymbol.Activate();\n    }\n    doc.Create.NewFamilyInstance(new XYZ(10, 5, 0), columnSymbol, level, StructuralType.Column);\n}"}
{"prompt":"Crea un muro en Nivel 1 de (0,0,0) a (5,0,0) con 5m de alto.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\nif (level1 != null)\n{\n    WallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n    if(wallType != null)\n    {\n        Line wallCurve = Line.CreateBound(new XYZ(0, 0, 0), new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0, 0));\n        double height = UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters);\n        Wall.Create(doc, wallCurve, wallType.Id, level1.Id, height, 0.0, false, false);\n    }\n}"}
{"prompt":"Find all clashes between pipes and beams.","completion":"ICollection<ElementId> pipeIds = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_PipeCurves).WhereElementIsNotElementType().ToElementIds();\nICollection<ElementId> beamIds = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsNotElementType().ToElementIds();\n\nif(pipeIds.Count > 0 && beamIds.Count > 0)\n{\n    List<ElementFilter> beamFilters = new List<ElementFilter>();\n    foreach(ElementId beamId in beamIds)\n    {\n        Element beam = doc.GetElement(beamId);\n        if(beam != null) beamFilters.Add(new ElementIntersectsElementFilter(beam));\n    }\n    LogicalOrFilter clashFilter = new LogicalOrFilter(beamFilters);\n    ICollection<ElementId> clashingPipeIds = new FilteredElementCollector(doc, pipeIds).WherePasses(clashFilter).ToElementIds();\n    \/\/ clashingPipeIds contains the IDs of clashing elements; selection\/display is external.\n}"}
{"prompt":"Aplica aislamiento térmico de 21mm a todas las tuberías de agua caliente.","completion":"PipeInsulationType insulationType = new FilteredElementCollector(doc).OfClass(typeof(PipeInsulationType)).FirstOrDefault() as PipeInsulationType;\nPipingSystemType hotWaterSystem = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).Cast<PipingSystemType>().FirstOrDefault(s => s.Name.Contains(\"Hot Water\") || s.Name.Contains(\"Agua Caliente\"));\n\nif (insulationType != null && hotWaterSystem != null)\n{\n    List<Pipe> pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast<Pipe>().Where(p => \n    {\n        Parameter systemParam = p.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM);\n        return systemParam != null && systemParam.HasValue && systemParam.AsElementId() == hotWaterSystem.Id;\n    }).ToList();\n    \n    foreach(Pipe p in pipes)\n    {\n        PipeInsulation.Create(doc, p.Id, insulationType.Id, UnitUtils.ConvertToInternalUnits(21, UnitTypeId.Millimeters));\n    }\n}"}
{"prompt":"Ajusta el nivel de detalle de la vista actual a 'Sección Longitudinal'.","completion":"View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.DetailLevel = ViewDetailLevel.Coarse;\n}"}
{"prompt":"Include a reference point at coordinates (1,7,4) inside the family editor.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(1,7,4));"}
{"prompt":"Crea una vista de sección entre los puntos (0,0,0) y (10,10,0).","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.Section);\n\nif (vft != null)\n{\n    XYZ p1 = new XYZ(0,0,0);\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),0);\n    XYZ midPoint = (p1 + p2) \/ 2;\n    XYZ direction = (p2 - p1).Normalize();\n    XYZ up = XYZ.BasisZ;\n    XYZ viewdir = up.CrossProduct(direction);\n    \n    BoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\n    Transform t = Transform.Identity;\n    t.Origin = midPoint;\nt.BasisX = direction;\nt.BasisY = up;\nt.BasisZ = viewdir;\nsectionBox.Transform = t;\nsectionBox.Min = new XYZ(UnitUtils.ConvertToInternalUnits(-p1.DistanceTo(p2)\/2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(-10, UnitTypeId.Meters), 0);\nsectionBox.Max = new XYZ(UnitUtils.ConvertToInternalUnits(p1.DistanceTo(p2)\/2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(20, UnitTypeId.Meters));\n    \n    ViewSection.CreateSection(doc, vft.Id, sectionBox);\n}"}
{"prompt":"Include a point to the selected Path of Travel.","completion":"\/\/ PathOfTravel related methods like GetPath and Update are likely inaccessible in this environment.\n\/\/ The following code is a placeholder to show the intent.\n\/*\nusing (Transaction t = new Transaction(doc, \"Update Path of Travel\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference pickedRef = localUidoc.Selection.PickObject(ObjectType.Element, \"Select a Path of Travel\");\n\n    if (pickedRef != null)\n    {\n        PathOfTravel pot = doc.GetElement(pickedRef) as PathOfTravel;\n        if (pot != null)\n        {\n            IList<XYZ> points = pot.GetPath();\n            if (points != null && points.Count >= 2)\n            {\n                XYZ midPoint = (points[0] + points[1]) \/ 2;\n                points.Insert(1, midPoint);\n                pot.Update(points);\n            }\n        }\n    }\n    t.Commit();\n}\n*\/"}
{"prompt":"Desune la geometría de dos elementos dados.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference ref1 = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona el primer elemento\");\nReference ref2 = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona el segundo elemento\");\n\nif (ref1 != null && ref2 != null)\n{\n    Element e1 = doc.GetElement(ref1.ElementId);\n    Element e2 = doc.GetElement(ref2.ElementId);\n    if (e1 != null && e2 != null)\n    {\n        JoinGeometryUtils.UnjoinGeometry(doc, e1, e2);\n    }\n}"}
{"prompt":"Define the sill height of all windows to 5 meter.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Create columns at each grid intersection.","completion":"FamilySymbol colSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nList<Grid> grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().ToList();\n\nif (colSymbol != null && level != null && grids.Count >= 2)\n{\n    for (int i = 0; i < grids.Count; i++)\n    {\n        for (int j = i + 1; j < grids.Count; j++)\n        {\n            IntersectionResultArray results = null;\n            grids[i].Curve.Intersect(grids[j].Curve, out results);\n            if(results != null)\n            {\n                 foreach (IntersectionResult ir in results)\n                 {\n                     doc.Create.NewFamilyInstance(ir.XYZPoint, colSymbol, level, StructuralType.Column);\n                 }\n            }\n        }\n    }\n}"}
{"prompt":"Get the MEP space associated with the room 'Office 104'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Cast<Room>().FirstOrDefault(r => r.Name == \"Office 104\");\nList<Space> spaces = new List<Space>();\n\nif (room != null)\n{\n    spaces = new FilteredElementCollector(doc).OfClass(typeof(Space)).Cast<Space>().Where(s => s.Room != null && s.Room.Id == room.Id).ToList();\n}"}
{"prompt":"Coloca un rociador en las coordenadas (5,5,3).","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol sprinklerSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Sprinklers).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (level != null && sprinklerSymbol != null)\n{\n    if (!sprinklerSymbol.IsActive) sprinklerSymbol.Activate();\n    XYZ placementPoint = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters));\n    doc.Create.NewFamilyInstance(placementPoint, sprinklerSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n}"}
{"prompt":"Establece el parámetro 'Comentarios' de todas las puertas del Nivel 1 a 'Clasificación Fuego - 90 min'.","completion":"using(Transaction t = new Transaction(doc, \"Set Door Comments\"))\n{\n    t.Start();\n    Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel 1\");\n    if(level1 != null)\n    {\n        List<FamilyInstance> doorsOnLevel1 = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsNotElementType().Cast<FamilyInstance>().Where(fi => fi.LevelId.Equals(level1.Id)).ToList();\n        foreach(FamilyInstance door in doorsOnLevel1)\n        {\n            Parameter commentsParam = door.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n            if(commentsParam != null && !commentsParam.IsReadOnly)\n            {\n                commentsParam.Set(\"Clasificación Fuego - 90 min\");\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Clear all detail lines in the active view.","completion":"using (Transaction t = new Transaction(doc, \"Delete Detail Lines\"))\n{\n    t.Start();\n    if (doc.ActiveView != null)\n    {\n        ICollection<ElementId> detailLines = new FilteredElementCollector(doc, doc.ActiveView.Id).OfClass(typeof(DetailCurve)).ToElementIds();\n        if (detailLines.Count > 0)\n        {\n            doc.Delete(detailLines);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Agrega un punto de referencia en las coordenadas (7,2,5) dentro del editor de familias.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(7,2,5));"}
{"prompt":"Crea una nueva hoja A3 y colócale una leyenda.","completion":"using (Transaction t = new Transaction(doc, \"Create Sheet with Legend\"))\n{\n    t.Start();\n    FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(tb => tb.Name.Contains(\"A3\"));\n    View legendView = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().FirstOrDefault(v => v.ViewType == ViewType.Legend);\n\n    if (titleBlock != null && legendView != null)\n    {\n        ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n        if (newSheet != null)\n        {\n            BoundingBoxUV sheetBox = newSheet.Outline;\n            UV centerUv = (sheetBox.Min + sheetBox.Max) \/ 2.0;\n            XYZ centerPoint = new XYZ(centerUv.U, centerUv.V, 0);\n            Viewport.Create(doc, newSheet.Id, legendView.Id, centerPoint);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Place a spot elevation on Level 1.","completion":"using (Transaction t = new Transaction(doc, \"Place Spot Elevation\"))\n{\n    t.Start();\n    Level lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 1\");\n    View activeView = doc.ActiveView;\n\n    if (lvl1 != null && activeView != null)\n    {\n        Reference levelRef = new Reference(lvl1);\n        XYZ origin = new XYZ(5\/0.3048, 5\/0.3048, lvl1.Elevation);\n        XYZ leaderEnd = origin + new XYZ(2\/0.3048, 2\/0.3048, 0);\n        doc.Create.NewSpotElevation(activeView, levelRef, origin, origin, leaderEnd, origin, true);\n    }\n    t.Commit();\n}"}
{"prompt":"Extrae todas las habitaciones en el Nivel 'Losa 96'.","completion":"Level groundFloor = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Losa 96\") as Level;\nList<Element> roomsOnGround = new List<Element>();\n\nif (groundFloor != null)\n{\n    roomsOnGround = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Where(r => r.LevelId == groundFloor.Id).ToList();\n}"}
{"prompt":"Recupera una lista de los nombres de todos los tipos de familia de la categoría 'Mobiliario'.","completion":"List<Element> furnitureTypes = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().ToList();\nList<string> typeNames = new List<string>();\nforeach(Element type in furnitureTypes)\n{\n    typeNames.Add(type.Name);\n}\n"}
{"prompt":"Duplicate level 1 with a 3m offset and name it 'Mezzanine'.","completion":"string levelName = \"Mezzanine\";\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\n\nif (level1 != null)\n{\n    double newElevation = level1.ProjectElevation + UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, newElevation);\n    if (newLevel != null)\n    {\n        newLevel.Name = levelName;\n    }\n}"}
{"prompt":"Fetch the MEP space associated with the room 'Office 104'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Cast<Room>().FirstOrDefault(r => r.Name == \"Office 104\");\nList<Space> spaces = new List<Space>();\n\nif (room != null)\n{\n    spaces = new FilteredElementCollector(doc).OfClass(typeof(Space)).Cast<Space>().Where(s => s.Room != null && s.Room.Id == room.Id).ToList();\n}"}
{"prompt":"Crea un nuevo Nivel llamado 'Nivel 6' a una elevación de 17 metros.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(17, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Nivel 6\";\n}"}
{"prompt":"Aplica aislamiento térmico de 22mm a todas las tuberías de agua caliente.","completion":"PipeInsulationType insulationType = new FilteredElementCollector(doc).OfClass(typeof(PipeInsulationType)).FirstOrDefault() as PipeInsulationType;\nPipingSystemType hotWaterSystem = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).Cast<PipingSystemType>().FirstOrDefault(s => s.Name.Contains(\"Hot Water\") || s.Name.Contains(\"Agua Caliente\"));\n\nif (insulationType != null && hotWaterSystem != null)\n{\n    List<Pipe> pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast<Pipe>().Where(p => \n    {\n        Parameter systemParam = p.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM);\n        return systemParam != null && systemParam.HasValue && systemParam.AsElementId() == hotWaterSystem.Id;\n    }).ToList();\n    \n    foreach(Pipe p in pipes)\n    {\n        PipeInsulation.Create(doc, p.Id, insulationType.Id, UnitUtils.ConvertToInternalUnits(22, UnitTypeId.Millimeters));\n    }\n}"}
{"prompt":"Encuentra todas las vistas de sección en el proyecto.","completion":"List<ViewSection> sectionViews = new FilteredElementCollector(doc).OfClass(typeof(ViewSection)).Cast<ViewSection>().ToList();"}
{"prompt":"Importa un archivo CAD llamado 'BasePlan.dwg' en la vista actual.","completion":"string filePath = \"C:\/CAD\/BasePlan.dwg\";\nDWGImportOptions options = new DWGImportOptions();\noptions.Placement = ImportPlacement.Origin;\nElementId importId;\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    doc.Import(filePath, options, activeView, out importId);\n}"}
{"prompt":"Crea un nivel 'Roof Terrace' a 15m.","completion":"string levelName = \"Roof Terrace\";\ndouble elev = UnitUtils.ConvertToInternalUnits(15, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elev);\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Incorpora un nivel llamado 'Nivel Azotea' a 16.3 metros.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(16.3, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Nivel Azotea\";\n}"}
{"prompt":"Reproduce el tipo de muro 'Genérico - 174mm' y nómbralo 'Interior - 15cm Yeso'.","completion":"string originalName = \"Genérico - 174mm\";\nstring newName = \"Interior - 15cm Yeso\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif(originalType!=null)\n    originalType.Duplicate(newName);"}
{"prompt":"Build a new elevation view looking south.","completion":"using (Transaction t = new Transaction(doc, \"Create South Elevation\"))\n{\n    t.Start();\n    ViewFamilyType elevationVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(vft => vft.ViewFamily == ViewFamily.Elevation);\n    View activeView = doc.ActiveView;\n\n    if (elevationVFT != null && activeView != null)\n    {\n        ElevationMarker marker = ElevationMarker.CreateElevationMarker(doc, elevationVFT.Id, new XYZ(0, -20 \/ 0.3048, 0), 100);\n        \n        if (marker != null)\n        {\n            View aev = marker.CreateElevation(doc, activeView.Id, 0);\n            if (aev != null)\n            {\n                aev.Name = \"South Elevation\";\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Get the total length of all walls in the project.","completion":"double totalLength = 0.0;\nList<Wall> walls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Cast<Wall>().ToList();\nforeach (Wall wall in walls)\n{\n    Parameter lengthParam = wall.get_Parameter(BuiltInParameter.CURVE_ELEM_LENGTH);\n    if (lengthParam != null && lengthParam.HasValue)\n    {\n        totalLength += lengthParam.AsDouble();\n    }\n}"}
{"prompt":"Crea un sistema de vigas en un forjado seleccionado.","completion":""}
{"prompt":"Duplica el tipo de muro 'Genérico - 150mm' y nómbralo 'Interior - 15cm Yeso'.","completion":"string originalName = \"Genérico - 150mm\";\nstring newName = \"Interior - 15cm Yeso\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif (originalType != null)\n{\n    WallType newType = originalType.Duplicate(newName) as WallType;\n}"}
{"prompt":"Elimina todos los tipos de muro no utilizados en el proyecto.","completion":"ICollection<ElementId> allWallTypes = new FilteredElementCollector(doc).OfClass(typeof(WallType)).ToElementIds();\nICollection<ElementId> usedWallTypes = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Select(w => w.GetTypeId()).Distinct().ToList();\nList<ElementId> unusedWallTypes = allWallTypes.Except(usedWallTypes).ToList();\ndoc.Delete(unusedWallTypes);"}
{"prompt":"Coloca un terminal de aire en el extremo de un conducto.","completion":"Duct duct = new FilteredElementCollector(doc).OfClass(typeof(Duct)).FirstOrDefault() as Duct;\nFamilySymbol terminalSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_DuctTerminal).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (duct != null && terminalSymbol != null)\n{\n    if(!terminalSymbol.IsActive) terminalSymbol.Activate();\n    LocationCurve locCurve = duct.Location as LocationCurve;\n    if (locCurve != null)\n    {\n        Connector endConnector = duct.ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault(c => c.Origin.IsAlmostEqualTo(locCurve.Curve.GetEndPoint(1)));\n        if (endConnector != null)\n        {\n            doc.Create.NewFamilyInstance(endConnector.Origin, terminalSymbol, duct, StructuralType.NonStructural);\n        }\n    }\n}"}
{"prompt":"Get a list of all annotation families.","completion":"List<Family> annotationFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.CategoryType == CategoryType.Annotation).ToList();\n"}
{"prompt":"Crea una losa de cimentación estructural de 40cm de espesor.","completion":"Level foundationLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderBy(l => l.Elevation).FirstOrDefault();\nFloorType slabTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.get_Parameter(BuiltInParameter.FLOOR_PARAM_IS_STRUCTURAL).AsInteger() == 1);\nif(slabTypeToDuplicate != null && foundationLevel != null)\n{\n    string newTypeName = \"Losa Cimentación 40cm\";\n    FloorType newSlabType = slabTypeToDuplicate.Duplicate(newTypeName) as FloorType;\n    if(newSlabType != null)\n    {\n        CompoundStructure cs = newSlabType.GetCompoundStructure();\n        if (cs != null)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(40, UnitTypeId.Centimeters));\n            newSlabType.SetCompoundStructure(cs);\n            XYZ p1 = new XYZ(0,0,0); XYZ p2 = new XYZ(10,0,0); XYZ p3 = new XYZ(10,10,0); XYZ p4 = new XYZ(0,10,0);\n            CurveLoop profile = new CurveLoop();\n            profile.Append(Line.CreateBound(p1,p2)); profile.Append(Line.CreateBound(p2,p3)); profile.Append(Line.CreateBound(p3,p4)); profile.Append(Line.CreateBound(p4,p1));\n            Floor.Create(doc, new List<CurveLoop>{profile}, newSlabType.Id, foundationLevel.Id);\n        }\n    }\n}"}
{"prompt":"Get a list of all material names.","completion":"List<Material> materials = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().ToList();\nList<string> materialNames = new List<string>();\nforeach(Material m in materials)\n{\n    materialNames.Add(m.Name);\n}\n"}
{"prompt":"Given a wall, get its materials and their volumes.","completion":"UIDocument localUidoc = uidoc;\nReference pickedRef = localUidoc.Selection.PickObject(ObjectType.Element, \"Select a wall\");\n\nDictionary<string, double> materialVolumes = new Dictionary<string, double>();\nif (pickedRef != null)\n{\n    Wall wall = doc.GetElement(pickedRef) as Wall;\n    if (wall != null)\n    {\n        Parameter areaParam = wall.get_Parameter(BuiltInParameter.HOST_AREA_COMPUTED);\n        if (areaParam != null && areaParam.HasValue)\n        {\n            double wallArea = areaParam.AsDouble();\n            WallType wallType = wall.WallType;\n            if (wallType != null)\n            {\n                CompoundStructure cs = wallType.GetCompoundStructure();\n                if (cs != null)\n                {\n                    foreach(CompoundStructureLayer layer in cs.GetLayers())\n                    {\n                        Material material = doc.GetElement(layer.MaterialId) as Material;\n                        if(material != null)\n                        {\n                            double volume = layer.Width * wallArea;\n                            materialVolumes[material.Name] = volume;\n                        }\n                    }\n                }\n            }\n        }\n    }\n}"}
{"prompt":"Crea un nuevo tipo de muro 'Muro Genérico 300mm' con un grosor de 30cm.","completion":"using (Transaction t = new Transaction(doc, \"Create Wall Type\"))\n{\n    t.Start();\n    string newTypeName = \"Muro Genérico 300mm\";\n    WallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\n    if (oldWallType != null)\n    {\n        WallType newWallType = oldWallType.Duplicate(newTypeName) as WallType;\n        if (newWallType != null)\n        {\n            CompoundStructure cs = newWallType.GetCompoundStructure();\n            if (cs != null && cs.LayerCount > 0)\n            {\n                int coreLayerIndex = cs.GetFirstCoreLayerIndex();\n                if (coreLayerIndex >= 0 && coreLayerIndex < cs.LayerCount)\n                {\n                    cs.SetLayerWidth(coreLayerIndex, 300 \/ 304.8);\n                    newWallType.SetCompoundStructure(cs);\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Generate a new 5mm text type in green color.","completion":"using (Transaction t = new Transaction(doc, \"Create Green Text Type\"))\n{\n    t.Start();\n    string newTypeName = \"5mm Green\";\n    TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\n    TextNoteType newType = null;\n    if (defaultType != null)\n    {\n        newType = defaultType.Duplicate(newTypeName) as TextNoteType;\n        if (newType != null)\n        {\n            Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n            if (textSizeParam != null && !textSizeParam.IsReadOnly)\n            {\n                textSizeParam.Set(5 \/ 304.8);\n            }\n            Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n            if (lineColorParam != null && !lineColorParam.IsReadOnly)\n            {\n                 lineColorParam.Set(65280);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Generate a new Level named 'Level 2' at an elevation of 15 meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(15, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Level 2\";\n}"}
{"prompt":"Ajusta el tipo de una losa por uno que contenga 'Concreto'.","completion":"Floor floorToChange = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault() as Floor;\nif(floorToChange != null)\n{\n    FloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name.Contains(\"Concreto\") || ft.Name.Contains(\"Concrete\"));\n    if(newType!=null)\n        floorToChange.ChangeTypeId(newType.Id);\n}"}
{"prompt":"Create a text note with given text, location, and target element.","completion":"using (Transaction t = new Transaction(doc, \"Create Text Note\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference targetRef = localUidoc.Selection.PickObject(ObjectType.Element, \"Select an element to annotate\");\n    XYZ textLocation = localUidoc.Selection.PickPoint(\"Choose the text location\");\n\n    View activeView = doc.ActiveView;\n    ElementId defaultTypeId = doc.GetDefaultElementTypeId(ElementTypeGroup.TextNoteType);\n\n    if (targetRef != null && textLocation != null && activeView != null && defaultTypeId != ElementId.InvalidElementId)\n    {\n        TextNoteOptions opts = new TextNoteOptions(defaultTypeId);\n        TextNote note = TextNote.Create(doc, activeView.Id, textLocation, \"REVIEW CLASH\", opts);\n        if (note != null)\n        {\n            Leader leader = note.AddLeader(TextNoteLeaderTypes.TNLT_STRAIGHT_L);\n            leader.End = targetRef.GlobalPoint;\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Count all windows and calculate their total glazed area.","completion":"int windowCount = 0;\ndouble totalGlazedArea = 0.0;\nFilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType();\n\nwindowCount = collector.GetElementCount();\n\nforeach (FamilyInstance window in collector)\n{\n    \/\/ Note: 'Glazed Area' is not a standard built-in parameter. This assumes a custom shared parameter exists.\n    \/\/ The orchestrator would need to handle cases where the parameter is not found.\n    Parameter areaParam = window.Symbol.LookupParameter(\"Glazed Area\"); \n    if (areaParam != null) totalGlazedArea += areaParam.AsDouble();\n}\ndouble totalGlazedAreaM2 = UnitUtils.ConvertFromInternalUnits(totalGlazedArea, UnitTypeId.SquareMeters);"}
{"prompt":"Etiqueta cada pilar estructural en la vista activa.","completion":"View activeView = doc.ActiveView;\nif (activeView == null) return;\n\nFilteredElementCollector collector = new FilteredElementCollector(doc, activeView.Id)\n    .OfCategory(BuiltInCategory.OST_StructuralColumns)\n    .WhereElementIsNotElementType();\n\nIList<Element> elementsToTag = collector.ToElements();\n\nif (elementsToTag.Any())\n{\n    foreach (Element elem in elementsToTag)\n    {\n        Reference elemRef = new Reference(elem);\n        BoundingBoxXYZ bbox = elem.get_BoundingBox(activeView);\n        if (bbox == null) continue;\n\n        XYZ tagLocation = (bbox.Min + bbox.Max) \/ 2.0;\n        IndependentTag.Create(doc, activeView.Id, elemRef, true, TagMode.TM_ADDBY_CATEGORY, TagOrientation.Horizontal, tagLocation);\n    }\n}"}
{"prompt":"Crea un nuevo Nivel llamado 'Nivel 8' a una elevación de 10 metros.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Nivel 8\";\n}"}
{"prompt":"Define the 'Mark' parameter of all selected walls to 'W-EXT-5'.","completion":"using (Transaction t = new Transaction(doc, \"Set Wall Mark\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    ICollection<ElementId> selectedIds = localUidoc.Selection.GetElementIds();\n\n    if (selectedIds != null && selectedIds.Count > 5)\n    {\n        foreach(ElementId id in selectedIds)\n        {\n            Element elem = doc.GetElement(id);\n            if(elem is Wall)\n            {\n                Parameter markParam = elem.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n                if (markParam != null && !markParam.IsReadOnly) markParam.Set(\"W-EXT-01\");\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Allow the user to select a wall and get its ElementId.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a wall\");\nElementId selectedWallId = ElementId.InvalidElementId;\nif (pickedRef != null)\n{\n    selectedWallId = pickedRef.ElementId;\n}"}
{"prompt":"Set the visibility of the 'Furniture' category to false in the active view.","completion":"Category furnitureCat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Furniture);\nView activeView = doc.ActiveView;\n\nif (furnitureCat != null && activeView != null)\n{\n    activeView.SetCategoryHidden(furnitureCat.Id, true);\n}\n"}
{"prompt":"Clona el nivel 6 con un desfase de 1m y llámalo 'Mezanine'.","completion":"string levelName = \"Nivel 6\";\nLevel levelToCopy = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (levelToCopy != null)\n{\n    double offset = UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, levelToCopy.Elevation + offset);\n    newLevel.Name = \"Mezanine\";\n}"}
{"prompt":"Actualiza el tipo de la ventana seleccionada al tipo 'Ventana Fija 117x60'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una ventana\");\nFamilySymbol newType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name == \"Ventana Fija 117x60\");\nif (pickedRef != null && newType != null)\n{\n    FamilyInstance window = doc.GetElement(pickedRef.ElementId) as FamilyInstance;\n    if (window != null)\n    {\n        window.Symbol = newType;\n    }\n}"}
{"prompt":"Voltea un elemento seleccionado 85 grados sobre su eje Z.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un elemento para rotar\");\nElement elem = doc.GetElement(pickedRef.ElementId);\nLocationPoint lp = elem.Location as LocationPoint;\nLine axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\nElementTransformUtils.RotateElement(doc, elem.Id, axis, Math.PI \/ 85);"}
{"prompt":"Duplicate level 8 with a 3m offset and name it 'Mezzanine'.","completion":"string levelName = \"Level 8\";\nLevel levelToCopy = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (levelToCopy != null)\n{\n    double offset = UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, levelToCopy.Elevation + offset);\n    newLevel.Name = \"Mezzanine\";\n}"}
{"prompt":"Find all doors on Level 1 using a combined filter.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nList<Element> doors = new List<Element>();\n\nif (level1 != null)\n{\n    ElementCategoryFilter categoryFilter = new ElementCategoryFilter(BuiltInCategory.OST_Doors);\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level1.Id);\n    LogicalAndFilter combinedFilter = new LogicalAndFilter(categoryFilter, levelFilter);\n    doors = new FilteredElementCollector(doc).WherePasses(combinedFilter).ToList();\n}"}
{"prompt":"Añade un punto de referencia en las coordenadas (1,1,6) dentro del editor de familias.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(1,1,6));"}
{"prompt":"Pinta la cara interior de los muros exteriores con 'Pintura Blanca'.","completion":"using (Transaction t = new Transaction(doc, \"Paint Walls\"))\n{\n    t.Start();\n    Material paintMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m => m.Name == \"Pintura Blanca\");\n    var exteriorWalls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Cast<Wall>().Where(w => w.WallType.Function == WallFunction.Exterior).ToList();\n\n    if (paintMaterial != null)\n    {\n        foreach (Wall w in exteriorWalls)\n        {\n            IList<Reference> interiorFaceRefs = HostObjectUtils.GetSideFaces(w, ShellLayerType.Interior);\n            if(interiorFaceRefs.Count > 0)\n            {\n                Face interiorFace = w.GetGeometryObjectFromReference(interiorFaceRefs.First()) as Face;\n                if (interiorFace != null)\n                {\n                    doc.Paint(w.Id, interiorFace, paintMaterial.Id);\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Inserta un rociador en las coordenadas (1,1,6).","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol sprinklerSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Sprinklers).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (level != null && sprinklerSymbol != null)\n{\n    if (!sprinklerSymbol.IsActive) sprinklerSymbol.Activate();\n    XYZ placementPoint = new XYZ(UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(6, UnitTypeId.Meters));\n    doc.Create.NewFamilyInstance(placementPoint, sprinklerSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n}"}
{"prompt":"Modifica un panel de vidrio de un muro cortina por un panel sólido.","completion":"using (Transaction t = new Transaction(doc, \"Change Curtain Panel\"))\n{\n    t.Start();\n    Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Cast<Wall>().FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain);\n    FamilySymbol solidPanelType = new FilteredElementCollector(doc).OfClass(typeof(FamilySymbol)).Cast<FamilySymbol>().FirstOrDefault(fs => fs.Family.FamilyCategory.Id.IntegerValue == (int)BuiltInCategory.OST_CurtainWallPanels && (fs.Name.Contains(\"Solid\") || fs.Name.Contains(\"Sólido\")));\n\n    if (curtainWall != null && solidPanelType != null)\n    {\n        CurtainGrid grid = curtainWall.CurtainGrid;\n        if (grid != null)\n        {\n            ElementId panelIdToChange = grid.GetPanelIds().FirstOrDefault();\n            if (panelIdToChange != ElementId.InvalidElementId)\n            {\n                Panel panelToChange = doc.GetElement(panelIdToChange) as Panel;\n                if (panelToChange != null) panelToChange.ChangeTypeId(solidPanelType.Id);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create beams between horizontally aligned columns.","completion":"FamilySymbol beamSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nList<FamilyInstance> columns = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().Cast<FamilyInstance>().OrderBy(c => c.GetTransform().Origin.Y).ThenBy(c => c.GetTransform().Origin.X).ToList();\n\nif (beamSymbol != null && level != null && columns.Count >= 2)\n{\n    for(int i=0; i < columns.Count - 1; i++)\n    {\n        LocationPoint p1 = columns[i].Location as LocationPoint;\n        LocationPoint p2 = columns[i+1].Location as LocationPoint;\n        if (p1 != null && p2 != null && Math.Abs(p1.Point.Y - p2.Point.Y) < 0.01)\n        {\n            Line line = Line.CreateBound(p1.Point, p2.Point);\n            doc.Create.NewFamilyInstance(line, beamSymbol, level, StructuralType.Beam);\n        }\n    }\n}"}
{"prompt":"Create a new Level named 'Level 9' at an elevation of 13 meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(13, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Level 9\";\n}"}
{"prompt":"Obtén los IDs de todas las vistas 3D que empiezan con 'Coord' para exportación.","completion":"List<ElementId> viewsToExport = new FilteredElementCollector(doc).OfClass(typeof(View3D)).Cast<View3D>().Where(v => v.Name.StartsWith(\"Coord\") && !v.IsTemplate).Select(v => v.Id).ToList();\n"}
{"prompt":"Create a new wall type 'Generic Wall 296mm' with a thickness of 26cm.","completion":"string newTypeName = \"Generic Wall 296mm\";\nWallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif (oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(newTypeName) as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(26, UnitTypeId.Centimeters));\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n}"}
{"prompt":"Crea una vista 3D axonométrica orientada al Noroeste.","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft != null)\n{\n    View3D view3d = View3D.CreateIsometric(doc, vft.Id);\n    if (view3d != null)\n    {\n        XYZ eye = new XYZ(-1, 1, 1);\n        XYZ up = new XYZ(0, 0, 1);\n        XYZ forward = new XYZ(1, -1, -1);\n        view3d.SetOrientation(new ViewOrientation3D(eye, up, forward));\n        view3d.Name = \"Vista 3D Noroeste\";\n    }\n}"}
{"prompt":"Create columns at each grid intersection.","completion":"FamilySymbol colSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nList<Grid> grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().ToList();\n\nif (colSymbol != null && level != null && grids.Count >= 2)\n{\n    for (int i = 0; i < grids.Count; i++)\n    {\n        for (int j = i + 1; j < grids.Count; j++)\n        {\n            IntersectionResultArray results = null;\n            grids[i].Curve.Intersect(grids[j].Curve, out results);\n            if(results != null)\n            {\n                 foreach (IntersectionResult ir in results)\n                 {\n                     doc.Create.NewFamilyInstance(ir.XYZPoint, colSymbol, level, StructuralType.Column);\n                 }\n            }\n        }\n    }\n}"}
{"prompt":"Construye un reporte con el área de todas las habitaciones del proyecto.","completion":"List<Room> rooms = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>().ToList();\nList<double> roomAreas = new List<double>();\nforeach (Room room in rooms)\n{\n    if (room != null && room.Area > 0)\n    {\n        roomAreas.Add(UnitUtils.ConvertFromInternalUnits(room.Area, UnitTypeId.SquareMeters));\n    }\n}\n\/\/ El orquestador puede ahora usar la lista 'roomAreas' para generar el reporte final."}
{"prompt":"Change the type of a floor to one that contains 'Concrete'.","completion":"Floor floorToChange = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault() as Floor;\nif(floorToChange != null)\n{\n    FloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name.Contains(\"Concrete\"));\n    if(newType!=null)\n        floorToChange.ChangeTypeId(newType.Id);\n}"}
{"prompt":"Cambia el parámetro 'Función' de todos los muros seleccionados a 'Interior'.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nif (selectedIds.Count > 0)\n{\n    foreach(ElementId id in selectedIds)\n    {\n        Wall wall = doc.GetElement(id) as Wall;\n        if (wall != null)\n        {\n            Parameter funcParam = wall.get_Parameter(BuiltInParameter.FUNCTION_PARAM);\n            if (funcParam != null && !funcParam.IsReadOnly)\n            {\n                funcParam.Set(1); \/\/ 1 corresponde a Interior\n            }\n        }\n    }\n}"}
{"prompt":"Crea una nueva hoja A1 usando el primer cajetín disponible.","completion":"FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (titleBlock != null)\n{\n    ViewSheet sheet = ViewSheet.Create(doc, titleBlock.Id);\n    if (sheet != null)\n    {\n        sheet.Name = \"A1 - Nueva Hoja\";\n        sheet.SheetNumber = \"A1\";\n    }\n}"}
{"prompt":"Clona la vista 'Nivel 3' como una vista dependiente.","completion":"ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v => v.Name == \"Nivel 3\") as ViewPlan;\n\nif (viewToDuplicate != null)\n{\n    ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n}"}
{"prompt":"Obtén todas las habitaciones que están en el Nivel 3","completion":"string levelName = \"Nivel 3\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(targetLevel.Id);\n    FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WherePasses(levelFilter);\n    uidoc.Selection.SetElementIds(collector.ToElementIds());\n}"}
{"prompt":"Ubica un pilar estructural en (10,5), asegurándote de que el tipo de familia esté activo.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (level != null && columnSymbol != null)\n{\n    if (!columnSymbol.IsActive)\n    {\n        columnSymbol.Activate();\n    }\n    XYZ point = new XYZ(10, 5, 0);\n    doc.Create.NewFamilyInstance(point, columnSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n}"}
{"prompt":"Crea una nueva hoja A3 y colócale una leyenda.","completion":"using (Transaction t = new Transaction(doc, \"Create Sheet with Legend\"))\n{\n    t.Start();\n    FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(tb => tb.Name.Contains(\"A3\"));\n    View legendView = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().FirstOrDefault(v => v.ViewType == ViewType.Legend);\n\n    if (titleBlock != null && legendView != null)\n    {\n        ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n        if (newSheet != null)\n        {\n            BoundingBoxUV sheetBox = newSheet.Outline;\n            UV centerUv = (sheetBox.Min + sheetBox.Max) \/ 2.0;\n            XYZ centerPoint = new XYZ(centerUv.U, centerUv.V, 0);\n            Viewport.Create(doc, newSheet.Id, legendView.Id, centerPoint);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Modela una tabla para puertas con los campos 'Marca de Tipo' y 'Costo'.","completion":"string scheduleName = \"Tabla de Puertas\";\nViewSchedule schedule = ViewSchedule.CreateSchedule(doc, new ElementId(BuiltInCategory.OST_Doors));\n\nif (schedule != null)\n{\n    schedule.Name = scheduleName;\n    ScheduleDefinition def = schedule.Definition;\n    if (def != null)\n    {\n        SchedulableField typeMarkField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.Value == (long)BuiltInParameter.ALL_MODEL_TYPE_MARK);\n        SchedulableField costField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.Value == (long)BuiltInParameter.ALL_MODEL_COST);\n        \n        if (typeMarkField != null) def.AddField(typeMarkField);\n        if (costField != null) def.AddField(costField);\n    }\n}"}
{"prompt":"Añade refuerzo tipo estribo a la viga seleccionada.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference beamRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a beam\");\nRebarBarType barType = new FilteredElementCollector(doc).OfClass(typeof(RebarBarType)).FirstOrDefault() as RebarBarType;\nRebarShape stirrupShape = new FilteredElementCollector(doc).OfClass(typeof(RebarShape)).Cast<RebarShape>().FirstOrDefault(s => s.RebarStyle == RebarStyle.StirrupTie);\nif (beamRef != null && barType != null && stirrupShape != null)\n{\n    FamilyInstance beam = doc.GetElement(beamRef) as FamilyInstance;\n    if (beam != null)\n    {\n        Rebar.CreateFromRebarShape(doc, stirrupShape, barType, beam, beam.GetTransform().Origin, XYZ.BasisX, XYZ.BasisY);\n    }\n}"}
{"prompt":"Ajusta el nombre de la vista activa a 'PLANTA PARA CLIENTE'.","completion":"string newName = \"PLANTA PARA CLIENTE\";\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.Name = newName;\n}"}
{"prompt":"Extrae todas las habitaciones en el Nivel 'Losa 100'.","completion":"Level groundFloor = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Losa 100\") as Level;\nList<Element> roomsOnGround = new List<Element>();\n\nif (groundFloor != null)\n{\n    roomsOnGround = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Where(r => r.LevelId == groundFloor.Id).ToList();\n}"}
{"prompt":"Duplicate the active view with detailing.","completion":"View activeView = doc.ActiveView;\nif (activeView != null)\n{\n    activeView.Duplicate(ViewDuplicateOption.WithDetailing);\n}"}
{"prompt":"Replicate level 1 with a 1m offset and name it 'Mezzanine'.","completion":"string levelName = \"Mezzanine\";\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\n\nif (level1 != null)\n{\n    double newElevation = level1.ProjectElevation + UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, newElevation);\n    if (newLevel != null)\n    {\n        newLevel.Name = levelName;\n    }\n}"}
{"prompt":"Turn a selected element 89 degrees around its Z-axis.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select an element to rotate\");\nElement elem = doc.GetElement(pickedRef.ElementId);\nLocationPoint lp = elem.Location as LocationPoint;\nLine axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\nElementTransformUtils.RotateElement(doc, elem.Id, axis, Math.PI \/ 89);"}
{"prompt":"Construct a new level named 'Mezzanine' at 8.3 meters elevation.","completion":"string levelName = \"Mezzanine\";\ndouble elevation = UnitUtils.ConvertToInternalUnits(8.3, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Vira un elemento seleccionado 94 grados sobre su eje Z.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un elemento para rotar\");\nElement elem = doc.GetElement(pickedRef.ElementId);\nLocationPoint lp = elem.Location as LocationPoint;\nLine axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\nElementTransformUtils.RotateElement(doc, elem.Id, axis, Math.PI \/ 94);"}
{"prompt":"Construct a new level named 'Mezzanine' at 7.1 meters elevation.","completion":"string levelName = \"Mezzanine\";\ndouble elevation = UnitUtils.ConvertToInternalUnits(7.1, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Crea una región rellena con un patrón de 'Concreto'.","completion":"using (Transaction t = new Transaction(doc, \"Create Filled Region\"))\n{\n    t.Start();\n    FilledRegionType regionType = new FilteredElementCollector(doc).OfClass(typeof(FilledRegionType)).Cast<FilledRegionType>().FirstOrDefault(frt => frt.Name.Contains(\"Concrete\") || frt.Name.Contains(\"Concreto\"));\n    View activeView = doc.ActiveView;\n\n    if (regionType != null && activeView != null)\n    {\n        XYZ p1 = new XYZ(0,0,0);\n        XYZ p2 = new XYZ(5 \/ 0.3048, 0,0);\n        XYZ p3 = new XYZ(5 \/ 0.3048, 5 \/ 0.3048,0);\n        XYZ p4 = new XYZ(0, 5 \/ 0.3048,0);\n        CurveLoop profile = new CurveLoop();\n        profile.Append(Line.CreateBound(p1,p2));\n        profile.Append(Line.CreateBound(p2,p3));\n        profile.Append(Line.CreateBound(p3,p4));\n        profile.Append(Line.CreateBound(p4,p1));\n        FilledRegion.Create(doc, regionType.Id, activeView.Id, new List<CurveLoop>{profile});\n    }\n    t.Commit();\n}"}
{"prompt":"Append a reference point at coordinates (1,1,5) inside the family editor.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(1,1,5));"}
{"prompt":"Modifica el tipo de una losa seleccionada a 'Concreto 18cm'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una losa\");\n\nif (pickedRef != null)\n{\n    Floor floorToChange = doc.GetElement(pickedRef) as Floor;\n    FloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name == \"Concreto 18cm\");\n    \n    if (floorToChange != null && newType != null)\n    {\n        floorToChange.ChangeTypeId(newType.Id);\n    }\n}"}
{"prompt":"Fetch all rooms on Level 2","completion":"string levelName = \"Level 2\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(targetLevel.Id);\n    FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WherePasses(levelFilter);\n    uidoc.Selection.SetElementIds(collector.ToElementIds());\n}"}
{"prompt":"Crea un nuevo tipo de muro de 21cm llamado 'Estructura'.","completion":"string newTypeName = \"Estructura\";\nWallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(newTypeName) as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(21, UnitTypeId.Centimeters));\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n}"}
{"prompt":"Select all walls on 'Level 2' and change their comment to 'REVIEW INSULATION'.","completion":"Level level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 2\") as Level;\nif (level2 != null)\n{\n    List<Wall> wallsOnLevel2 = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Where(w => w.LevelId == level2.Id).Cast<Wall>().ToList();\n    foreach(Wall wall in wallsOnLevel2)\n    {\n        Parameter commentParam = wall.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n        if (commentParam != null && !commentParam.IsReadOnly)\n        {\n            commentParam.Set(\"REVIEW INSULATION\");\n        }\n    }\n}"}
{"prompt":"Añade un nivel llamado 'Nivel Azotea' a 15.9 metros.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(15.9, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Nivel Azotea\";\n}"}
{"prompt":"Get a list of all material names.","completion":"List<Material> materials = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().ToList();\nList<string> materialNames = new List<string>();\nforeach(Material m in materials)\n{\n    materialNames.Add(m.Name);\n}\n"}
{"prompt":"Place a spot elevation on a given face and view point.","completion":"using (Transaction t = new Transaction(doc, \"Place Spot Elevation\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference faceRef = localUidoc.Selection.PickObject(ObjectType.Face, \"Select the top face of the floor\");\n\n    View activeView = doc.ActiveView;\n\n    if (faceRef != null && activeView != null)\n    {\n        XYZ pointOnFace = faceRef.GlobalPoint;\n        XYZ leaderEnd = pointOnFace + new XYZ(1 \/ 0.3048, 1 \/ 0.3048, 0);\n        doc.Create.NewSpotElevation(activeView, faceRef, pointOnFace, pointOnFace, leaderEnd, pointOnFace, true);\n    }\n    t.Commit();\n}"}
{"prompt":"Build an assembly from the selected elements.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds != null && selectedIds.Count > 0)\n{\n    AssemblyInstance assemblyInstance = AssemblyInstance.Create(doc, selectedIds, new ElementId(BuiltInCategory.OST_Assemblies));\n    if (assemblyInstance != null)\n    {\n        assemblyInstance.Name = \"New Assembly\";\n    }\n}"}
{"prompt":"Clear all unused wall types in the project.","completion":"ICollection<ElementId> allWallTypes = new FilteredElementCollector(doc).OfClass(typeof(WallType)).ToElementIds();\nICollection<ElementId> usedWallTypes = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Select(w => w.GetTypeId()).Distinct().ToList();\nList<ElementId> unusedWallTypes = allWallTypes.Except(usedWallTypes).ToList();\ndoc.Delete(unusedWallTypes);"}
{"prompt":"Include a tag to the column closest to the origin.","completion":"using (Transaction t = new Transaction(doc, \"Tag Column\"))\n{\n    t.Start();\n    View activeView = doc.ActiveView;\n    FamilyInstance column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().Cast<FamilyInstance>().OrderBy(c => {\n        LocationPoint lp = c.Location as LocationPoint;\n        return lp != null ? lp.Point.DistanceTo(XYZ.Zero) : double.MaxValue;\n    }).FirstOrDefault();\n\n    if (activeView != null && column != null)\n    {\n        LocationPoint loc = column.Location as LocationPoint;\n        if (loc != null)\n        {\n            IndependentTag.Create(doc, activeView.Id, new Reference(column), true, TagMode.TM_ADDBY_CATEGORY, TagOrientation.Horizontal, loc.Point);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Apply the 'X-Ray' visual style to the active 3D view.","completion":"View3D view3D = doc.ActiveView as View3D;\nif (view3D != null && !view3D.IsTemplate)\n{\n    view3D.DisplayStyle = DisplayStyle.Wireframe; \/\/ Simulates 'X-Ray' effect\n}"}
{"prompt":"Generate an MEP space for each room on Level 1","completion":"string levelName = \"Level 1\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    FilteredElementCollector roomCollector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WherePasses(new ElementLevelFilter(targetLevel.Id));\n    foreach (Room room in roomCollector.ToElements().Cast<Room>())\n    {\n        LocationPoint locPoint = room.Location as LocationPoint;\n        if (locPoint != null)\n        {\n            UV point = new UV(locPoint.Point.X, locPoint.Point.Y);\n            doc.Create.NewSpace(targetLevel, point);\n        }\n    }\n}"}
{"prompt":"Create columns at each grid intersection.","completion":"FamilySymbol colSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nList<Grid> grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().ToList();\n\nif (colSymbol != null && level != null && grids.Count >= 2)\n{\n    for (int i = 0; i < grids.Count; i++)\n    {\n        for (int j = i + 1; j < grids.Count; j++)\n        {\n            IntersectionResultArray results = null;\n            grids[i].Curve.Intersect(grids[j].Curve, out results);\n            if(results != null)\n            {\n                 foreach (IntersectionResult ir in results)\n                 {\n                     doc.Create.NewFamilyInstance(ir.XYZPoint, colSymbol, level, StructuralType.Column);\n                 }\n            }\n        }\n    }\n}"}
{"prompt":"Construct a new level 'Level 5' at an elevation of 8 meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Level 5\";\n}"}
{"prompt":"Place a spot elevation on Level 1.","completion":"using (Transaction t = new Transaction(doc, \"Place Spot Elevation\"))\n{\n    t.Start();\n    Level lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 1\");\n    View activeView = doc.ActiveView;\n\n    if (lvl1 != null && activeView != null)\n    {\n        Reference levelRef = new Reference(lvl1);\n        XYZ origin = new XYZ(5\/0.3048, 5\/0.3048, lvl1.Elevation);\n        XYZ leaderEnd = origin + new XYZ(2\/0.3048, 2\/0.3048, 0);\n        doc.Create.NewSpotElevation(activeView, levelRef, origin, origin, leaderEnd, origin, true);\n    }\n    t.Commit();\n}"}
{"prompt":"Create a structural column at position X=10, Y=5.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (level != null && columnSymbol != null)\n{\n    if (!columnSymbol.IsActive) { columnSymbol.Activate(); }\n    XYZ point = new XYZ(10, 5, 0);\n    doc.Create.NewFamilyInstance(point, columnSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n}"}
{"prompt":"Crea una tubería con un diámetro de 150mm.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nPipeType pipeType = new FilteredElementCollector(doc).OfClass(typeof(PipeType)).FirstOrDefault() as PipeType;\nPipingSystemType systemType = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).FirstOrDefault() as PipingSystemType;\n\nif (level != null && pipeType != null && systemType != null)\n{\n    \/\/ Create a default 10ft long pipe as the prompt is not specific\n    XYZ p1 = new XYZ(0, 0, 0);\n    XYZ p2 = new XYZ(10, 0, 0);\n    Pipe pipe = Pipe.Create(doc, systemType.Id, pipeType.Id, level.Id, p1, p2);\n\n    if (pipe != null)\n    {\n        Parameter diameterParam = pipe.get_Parameter(BuiltInParameter.RBS_PIPE_DIAMETER_PARAM);\n        if (diameterParam != null && !diameterParam.IsReadOnly)\n        {\n            diameterParam.Set(UnitUtils.ConvertToInternalUnits(150, UnitTypeId.Millimeters));\n        }\n    }\n}"}
{"prompt":"Ajusta el nombre de todas las familias cargadas que contengan 'Métrica' a 'Imperial'.","completion":"List<Family> familiesToRename = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.Name.Contains(\"Métrica\")).ToList();\nforeach(Family fam in familiesToRename)\n{\n    fam.Name = fam.Name.Replace(\"Métrica\", \"Imperial\");\n}"}
{"prompt":"Asigna todos los muros al workset 'Estructura'.","completion":"using (Transaction t = new Transaction(doc, \"Assign to Workset\"))\n{\n    t.Start();\n    if (doc.IsWorkshared)\n    {\n        Workset ws = new FilteredWorksetCollector(doc).OfKind(WorksetKind.UserWorkset).FirstOrDefault(w => w.Name == \"Estructura\");\n        if (ws != null)\n        {\n            FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType();\n            foreach (Element e in collector)\n            {\n                Parameter p = e.get_Parameter(BuiltInParameter.ELEM_PARTITION_PARAM);\n                if (p != null && !p.IsReadOnly)\n                {\n                    p.Set(ws.Id.IntegerValue);\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Include a reference point at coordinates (7,1,3) inside the family editor.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(7,1,3));"}
{"prompt":"Create a stair between Level 1 and Level 2","completion":"\/\/ This is a complex operation that requires multiple steps and\/or user interaction and is not supported by the agent."}
{"prompt":"Obtén todas las subcategorías de la categoría Puertas.","completion":"Category doorCat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Doors);\nCategoryNameMap subcategories = doorCat.SubCategories;"}
{"prompt":"Clone level 5 with a 8m offset and name it 'Mezzanine'.","completion":"string levelName = \"Level 5\";\nLevel levelToCopy = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (levelToCopy != null)\n{\n    double offset = UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, levelToCopy.Elevation + offset);\n    newLevel.Name = \"Mezzanine\";\n}"}
{"prompt":"Insert a 6-meter truss between two points.","completion":"using (Transaction t = new Transaction(doc, \"Create Truss\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    FamilySymbol trussSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Family.Name.Contains(\"Truss\"));\n\n    if (level != null && trussSymbol != null)\n    {\n        if (!trussSymbol.IsActive) { trussSymbol.Activate(); }\n        Line trussLine = Line.CreateBound(new XYZ(0, 10, 0), new XYZ(6 \/ 0.3048, 10, 0));\n        doc.Create.NewFamilyInstance(trussLine, trussSymbol, level, StructuralType.NonStructural);\n    }\n    t.Commit();\n}"}
{"prompt":"Change the type of all 'Fixed' windows to 'Casement'.","completion":"FamilySymbol newType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name.Contains(\"Casement\"));\nFamilySymbol oldType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name.Contains(\"Fixed\"));\n\nif (newType != null && oldType != null)\n{\n    List<FamilyInstance> windowsToChange = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().Where(fi => fi.Symbol.Id == oldType.Id).ToList();\n    foreach (FamilyInstance window in windowsToChange)\n    {\n        window.Symbol = newType;\n    }\n}"}
{"prompt":"Cambia el nombre de la familia de una puerta seleccionada a 'Puerta_Nueva'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una puerta\");\n\nif (pickedRef != null)\n{\n    FamilyInstance door = doc.GetElement(pickedRef.ElementId) as FamilyInstance;\n    if (door != null && door.Symbol != null)\n    {\n        Family family = door.Symbol.Family;\n        if (family != null)\n        {\n            family.Name = \"Puerta_Nueva\";\n        }\n    }\n}"}
{"prompt":"Incorpora un punto de referencia en las coordenadas (1,6,1) dentro del editor de familias.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(1,6,1));"}
{"prompt":"Crea un muro en el Nivel 1 que vaya de (0,0,0) a (10,0,0) con una altura de 4 metros.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (level1 != null && wallType != null)\n{\n    XYZ p1 = new XYZ(0, 0, 0);\n    XYZ p2 = new XYZ(10, 0, 0);\n    Line wallCurve = Line.CreateBound(p1, p2);\n    double height = UnitUtils.ConvertToInternalUnits(4, UnitTypeId.Meters);\n    Wall.Create(doc, wallCurve, wallType.Id, level1.Id, height, 0.0, false, false);\n}"}
{"prompt":"Permite al usuario seleccionar un muro y obtén su ElementId.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un muro\");\nElementId selectedWallId = ElementId.InvalidElementId;\nif (pickedRef != null)\n{\n    selectedWallId = pickedRef.ElementId;\n}"}
{"prompt":"Clona el tipo de muro 'Genérico - 194mm' y nómbralo 'Interior - 15cm Yeso'.","completion":"string originalName = \"Genérico - 194mm\";\nstring newName = \"Interior - 15cm Yeso\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif(originalType!=null)\n    originalType.Duplicate(newName);"}
{"prompt":"Insert a text note with 'Review' in the current view.","completion":"View activeView = doc.ActiveView;\nElementId defaultTypeId = doc.GetDefaultElementTypeId(ElementTypeGroup.TextNoteType);\n\nif (activeView != null && defaultTypeId != ElementId.InvalidElementId)\n{\n    XYZ position = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0);\n    TextNote.Create(doc, activeView.Id, position, \"Review\", defaultTypeId);\n}"}
{"prompt":"Encuentra todas las familias de anotación y cuenta cuántas hay.","completion":"List<Family> annotationFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.CategoryType == CategoryType.Annotation).ToList();"}
{"prompt":"Crea una topografía DirectShape a partir de una lista de puntos.","completion":"List<XYZ> points = new List<XYZ>\n{\n    new XYZ(0,0,0),\n    new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), 0, UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters)),\n    new XYZ(0, UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters)),\n    new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), 0)\n};\nTessellatedShapeBuilder builder = new TessellatedShapeBuilder();\nbuilder.OpenConnectedFaceSet(true);\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{points[0], points[1], points[2]}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{points[1], points[3], points[2]}, ElementId.InvalidElementId));\nbuilder.CloseConnectedFaceSet();\nbuilder.Build();\nTessellatedShapeBuilderResult result = builder.GetBuildResult();\nDirectShape ds = DirectShape.CreateElement(doc, new ElementId(BuiltInCategory.OST_Topography));\n\nif (ds != null)\n{\n    ds.SetShape(result.GetGeometricalObjects());\n    ds.Name = \"Topografía DirectShape\";\n}"}
{"prompt":"Crea una vista 3D por defecto.","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft != null)\n{\n    View3D view3d = View3D.CreateIsometric(doc, vft.Id);\n}"}
{"prompt":"Inserta un nivel llamado 'Nivel Azotea' a 16.1 metros.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(16.1, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Nivel Azotea\";\n}"}
{"prompt":"Import a georeferenced survey from a LandXML file.","completion":"\/\/ The Revit API in the provided context does not support direct LandXML import.\n\/\/ This functionality typically requires additional add-ins like the Site Designer, which are not available here.\n\/\/ As a placeholder, this code will show how to create a simple topography surface from a list of points.\nusing(Transaction t = new Transaction(doc, \"Create Topography\"))\n{\n    t.Start();\n    IList<XYZ> points = new List<XYZ>();\n    points.Add(new XYZ(0, 0, 0));\n    points.Add(new XYZ(50, 0, 5));\n    points.Add(new XYZ(0, 50, 10));\n    TopographySurface.Create(doc, points);\n    t.Commit();\n}"}
{"prompt":"Retrieve all rooms on Level 2.5","completion":"string levelName = \"Level 2.5\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(targetLevel.Id);\n    FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WherePasses(levelFilter);\n    uidoc.Selection.SetElementIds(collector.ToElementIds());\n}"}
{"prompt":"Get the total number of warnings in the project.","completion":"int totalWarnings = doc.GetWarnings().Count;\n"}
{"prompt":"Create a new level named 'Mezzanine' at 7.4 meters elevation.","completion":"string levelName = \"Mezzanine\";\ndouble elevation = UnitUtils.ConvertToInternalUnits(7.4, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Assign the sill height of all windows to 4 meter.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits(4, UnitTypeId.Meters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Ajusta todas las ventanas para que la altura del antepecho sea 5 metro.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Coloca un rociador en las coordenadas (10,9,8).","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol sprinklerSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Sprinklers).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (level != null && sprinklerSymbol != null)\n{\n    if (!sprinklerSymbol.IsActive) sprinklerSymbol.Activate();\n    XYZ placementPoint = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(9, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters));\n    doc.Create.NewFamilyInstance(placementPoint, sprinklerSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n}"}
{"prompt":"Create a new level 'Level 1' at an elevation of 13 meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(13, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\nif (newLevel != null)\n{\n    try { newLevel.Name = \"Level 1\"; } catch {}\n}"}
{"prompt":"Crea un nuevo tipo de puerta llamado 'Puerta RF-90' y establece su resistencia al fuego a '90 min'.","completion":"string newTypeName = \"Puerta RF-90\";\nFamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (doorTypeToDuplicate != null)\n{\n    FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\n    if (newDoorType != null)\n    {\n        Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n        if (fireRatingParam != null && !fireRatingParam.IsReadOnly) fireRatingParam.Set(\"90 min\");\n    }\n}"}
{"prompt":"Include a reference point at coordinates (2,6,3) inside the family editor.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(2,6,3));"}
{"prompt":"Extrae una lista de los nombres de todos los tipos de familia de la categoría 'Mobiliario'.","completion":"List<Element> furnitureTypes = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().ToList();\nList<string> typeNames = new List<string>();\nforeach(Element type in furnitureTypes)\n{\n    typeNames.Add(type.Name);\n}\n"}
{"prompt":"Pivot a selected element 86 degrees around its Z-axis.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select an element to rotate\");\nElement elem = doc.GetElement(pickedRef.ElementId);\nLocationPoint lp = elem.Location as LocationPoint;\nLine axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\nElementTransformUtils.RotateElement(doc, elem.Id, axis, Math.PI \/ 86);"}
{"prompt":"Build a new level 'Level 3' at an elevation of 12 meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(12, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Level 3\";\n}"}
{"prompt":"Vira el norte del proyecto 30 grados en sentido horario.","completion":"using (Transaction t = new Transaction(doc, \"Rotate Project North\"))\n{\n    t.Start();\n    BasePoint projectBasePoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(bp => !bp.IsShared);\n\n    if (projectBasePoint != null)\n    {\n        double angleInDegrees = 30.0;\n        double angleInRadians = -(angleInDegrees * Math.PI \/ 180.0);\n        using (var bbox = projectBasePoint.get_BoundingBox(null))\n        {\n          if (bbox != null)\n          {\n            XYZ center = bbox.Min;\n            Line axis = Line.CreateBound(center, center + XYZ.BasisZ);\n            ElementTransformUtils.RotateElement(doc, projectBasePoint.Id, axis, angleInRadians);\n          }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Generate a floor plan view for 'Level 6'.","completion":"string levelName = \"Level 6\";\nLevel level3 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.FloorPlan);\n\nif (level3 != null && vft != null)\n{\n    ViewPlan viewPlan = ViewPlan.Create(doc, vft.Id, level3.Id);\n}"}
{"prompt":"Place all selected elements on the 'Facade' workset.","completion":"using (Transaction t = new Transaction(doc, \"Assign to Workset\"))\n{\n    t.Start();\n    if(doc.IsWorkshared)\n    {\n        UIDocument localUidoc = uidoc;\n        ICollection<ElementId> selectedIds = localUidoc.Selection.GetElementIds();\n        \n        Workset workset = new FilteredWorksetCollector(doc).OfKind(WorksetKind.UserWorkset).FirstOrDefault(ws => ws.Name == \"Facade\");\n        if(workset == null) workset = Workset.Create(doc, \"Facade\");\n\n        if (selectedIds != null && selectedIds.Count > 0 && workset != null)\n        {\n            foreach(ElementId id in selectedIds)\n            {\n                Element elem = doc.GetElement(id);\n                Parameter wsparam = elem.get_Parameter(BuiltInParameter.ELEM_PARTITION_PARAM);\n                if(wsparam != null && !wsparam.IsReadOnly) wsparam.Set(workset.Id.IntegerValue);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Generate a 30cm 'Double-Wall' type and then create a wall of that type.","completion":"string newTypeName = \"Double-Wall\";\nWallType newWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == newTypeName) as WallType;\nif (newWallType == null)\n{\n    WallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n    if (wallTypeToDuplicate != null)\n    {\n        newWallType = wallTypeToDuplicate.Duplicate(newTypeName) as WallType;\n        if (newWallType != null)\n        {\n            CompoundStructure cs = newWallType.GetCompoundStructure();\n            if (cs != null)\n            {\n                cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(30, UnitTypeId.Centimeters));\n                newWallType.SetCompoundStructure(cs);\n            }\n        }\n    }\n}\n\nif (newWallType != null)\n{\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    if (level != null)\n    {\n        \/\/ Create a default 10ft long wall with a default 10ft height\n        Line wallCurve = Line.CreateBound(XYZ.Zero, new XYZ(10, 0, 0));\n        Wall.Create(doc, wallCurve, newWallType.Id, level.Id, 10.0, 0, false, false);\n    }\n}"}
{"prompt":"Create a new level 'Level 3' at an elevation of 12 meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(12, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Level 3\";\n}"}
{"prompt":"Crea un Path of Travel entre los puntos (1,1) y (10,10) en la vista de planta.","completion":"\/\/ PathOfTravel.Create is likely inaccessible in this environment.\n\/\/ A comment is left as a placeholder for the intended functionality.\n\/*\nusing (Transaction t = new Transaction(doc, \"Create Path of Travel\"))\n{\n    t.Start();\n    ViewPlan viewPlan = doc.ActiveView as ViewPlan;\n\n    if (viewPlan != null && viewPlan.ViewType == ViewType.FloorPlan)\n    {\n        ElementId levelId = viewPlan.get_Parameter(BuiltInParameter.PLAN_VIEW_LEVEL).AsElementId();\n        Level level = doc.GetElement(levelId) as Level;\n        if (level != null)\n        {\n            XYZ startPoint = new XYZ(1 \/ 0.3048, 1 \/ 0.3048, level.Elevation);\n            XYZ endPoint = new XYZ(10 \/ 0.3048, 10 \/ 0.3048, level.Elevation);\n            \/\/ PathOfTravel.Create(viewPlan, startPoint, endPoint);\n        }\n    }\n    t.Commit();\n}\n*\/"}
{"prompt":"Enumera todos los tipos de pilares estructurales.","completion":"FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType();\nList<string> columnTypeNames = collector.Select(e => e.Name).ToList();"}
{"prompt":"Sitúa pilares en todos los cruces de la rejilla.","completion":"FamilySymbol colSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nList<Grid> grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().ToList();\n\nif (colSymbol != null && level != null && grids.Count >= 2)\n{\n    for (int i = 0; i < grids.Count; i++)\n    {\n        for (int j = i + 1; j < grids.Count; j++)\n        {\n            IntersectionResultArray results = null;\n            grids[i].Curve.Intersect(grids[j].Curve, out results);\n            if(results != null)\n            {\n                 foreach (IntersectionResult ir in results)\n                 {\n                     doc.Create.NewFamilyInstance(ir.XYZPoint, colSymbol, level, StructuralType.Column);\n                 }\n            }\n        }\n    }\n}"}
{"prompt":"Obtén una lista de todas las vistas de planta del proyecto.","completion":"List<ViewPlan> planViews = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().Where(v => !v.IsTemplate).ToList();"}
{"prompt":"Select all walls on 'Level 7' and change their comment to 'REVIEW INSULATION'.","completion":"string levelName = \"Level 7\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(targetLevel.Id);\n    FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(levelFilter);\n    foreach (Element wall in collector)\n    {\n        Parameter commentsParam = wall.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n        if (commentsParam != null && !commentsParam.IsReadOnly) { commentsParam.Set(\"REVIEW INSULATION\"); }\n    }\n}"}
{"prompt":"Create a DirectShape with a 2x2x2 meter box shape.","completion":"TessellatedShapeBuilder builder = new TessellatedShapeBuilder();\nbuilder.OpenConnectedFaceSet(true);\ndouble size = UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\nXYZ p0=new XYZ(0,0,0); XYZ p1=new XYZ(size,0,0); XYZ p2=new XYZ(size,size,0); XYZ p3=new XYZ(0,size,0);\nXYZ p4=new XYZ(0,0,size); XYZ p5=new XYZ(size,0,size); XYZ p6=new XYZ(size,size,size); XYZ p7=new XYZ(0,size,size);\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p0,p1,p2,p3}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p7,p6,p5,p4}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p0,p4,p5,p1}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p1,p5,p6,p2}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p2,p6,p7,p3}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p3,p7,p4,p0}, ElementId.InvalidElementId));\nbuilder.CloseConnectedFaceSet();\nbuilder.Build();\nTessellatedShapeBuilderResult result = builder.GetBuildResult();\nDirectShape ds = DirectShape.CreateElement(doc, new ElementId(BuiltInCategory.OST_GenericModel));\n\nif (ds != null)\n{\n    ds.SetShape(result.GetGeometricalObjects());\n    ds.Name = \"DirectShape Box\";\n}"}
{"prompt":"Create 8 horizontal grids spaced 10.8 meters apart.","completion":"double separation = UnitUtils.ConvertToInternalUnits(10.8, UnitTypeId.Meters);\nfor(int i = 0; i < 8; i++)\n{\n    \/\/ Create a default 50ft long grid line\n    Line line = Line.CreateBound(new XYZ(0, i * separation, 0), new XYZ(50, i * separation, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Obtén todas las habitaciones que están en el Nivel 3","completion":"string levelName = \"Nivel 3\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(targetLevel.Id);\n    FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WherePasses(levelFilter);\n    uidoc.Selection.SetElementIds(collector.ToElementIds());\n}"}
{"prompt":"Cambia el tipo de la ventana seleccionada al tipo 'Fija 123x60'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una ventana\");\nFamilySymbol newType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name == \"Fija 123x60\");\nif (pickedRef != null && newType != null)\n{\n    FamilyInstance window = doc.GetElement(pickedRef.ElementId) as FamilyInstance;\n    if (window != null)\n    {\n        window.Symbol = newType;\n    }\n}"}
{"prompt":"Create a 'Roof Terrace' level at 17m.","completion":"string levelName = \"Roof Terrace\";\ndouble elev = UnitUtils.ConvertToInternalUnits(17, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elev);\nnewLevel.Name = levelName;\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Duplica el nivel 2 con un desfase de 3m y llámalo 'Mezanine'.","completion":"string levelName = \"Nivel 2\";\nLevel levelToCopy = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (levelToCopy != null)\n{\n    double offset = UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, levelToCopy.Elevation + offset);\n    newLevel.Name = \"Mezanine\";\n}"}
{"prompt":"Actualiza el tipo de una losa por uno que contenga 'Concreto'.","completion":"Floor floorToChange = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault() as Floor;\nFloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name.Contains(\"Concreto\") || ft.Name.Contains(\"Concrete\"));\n\nif (floorToChange != null && newType != null)\n{\n    floorToChange.ChangeTypeId(newType.Id);\n}"}
{"prompt":"Construct a section view between points (0,0,0) and (10,10,0).","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.Section);\n\nif (vft != null)\n{\n    XYZ p1 = new XYZ(0,0,0);\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),0);\n    XYZ midPoint = (p1 + p2) \/ 2;\n    XYZ direction = (p2 - p1).Normalize();\n    XYZ up = XYZ.BasisZ;\n    XYZ viewdir = up.CrossProduct(direction);\n    \n    BoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\n    Transform t = Transform.Identity;\n    t.Origin = midPoint;\nt.BasisX = direction;\nt.BasisY = up;\nt.BasisZ = viewdir;\nsectionBox.Transform = t;\nsectionBox.Min = new XYZ(UnitUtils.ConvertToInternalUnits(-p1.DistanceTo(p2)\/2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(-10, UnitTypeId.Meters), 0);\nsectionBox.Max = new XYZ(UnitUtils.ConvertToInternalUnits(p1.DistanceTo(p2)\/2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(20, UnitTypeId.Meters));\n    \n    ViewSection.CreateSection(doc, vft.Id, sectionBox);\n}"}
{"prompt":"Crea una columna estructural en la posición X=10, Y=5.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (level != null && columnSymbol != null)\n{\n    if (!columnSymbol.IsActive) { columnSymbol.Activate(); }\n    XYZ point = new XYZ(10, 5, 0);\n    doc.Create.NewFamilyInstance(point, columnSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n}"}
{"prompt":"Ubica las vistas 'Primer Piso' y 'Planta Nivel 2' en el plano 'A-101'.","completion":"ViewSheet sheet = new FilteredElementCollector(doc).OfClass(typeof(ViewSheet)).Cast<ViewSheet>().FirstOrDefault(s => s.SheetNumber == \"A-101\");\nView view1 = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().FirstOrDefault(v => v.Name == \"Primer Piso\");\nView view2 = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().FirstOrDefault(v => v.Name == \"Planta Nivel 2\");\nif (sheet != null && view1 != null && view2 != null)\n{\n    XYZ insertPoint1 = new XYZ(1.0, 1.0, 0);\n    Viewport.Create(doc, sheet.Id, view1.Id, insertPoint1);\n    XYZ insertPoint2 = new XYZ(1.0, 2.0, 0);\n    Viewport.Create(doc, sheet.Id, view2.Id, insertPoint2);\n}"}
{"prompt":"Create a floor plan view for 'Level 3'.","completion":"string levelName = \"Level 3\";\nLevel level3 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.FloorPlan);\n\nif (level3 != null && vft != null)\n{\n    ViewPlan viewPlan = ViewPlan.Create(doc, vft.Id, level3.Id);\n}"}
{"prompt":"Añade un punto al Path of Travel seleccionado.","completion":"\/\/ PathOfTravel related methods are likely inaccessible in this environment.\n\/\/ The following code is a placeholder to show the intent.\n\/*\nusing (Transaction t = new Transaction(doc, \"Update Path of Travel\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference pickedRef = localUidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un Path of Travel\");\n\n    if (pickedRef != null)\n    {\n        PathOfTravel pot = doc.GetElement(pickedRef) as PathOfTravel;\n        if (pot != null)\n        {\n            IList<XYZ> points = pot.GetPath();\n            if (points != null && points.Count >= 2)\n            {\n                XYZ midPoint = (points[0] + points[1]) \/ 2;\n                points.Insert(1, midPoint); \n                pot.Update(points);\n            }\n        }\n    }\n    t.Commit();\n}\n*\/"}
{"prompt":"Cambia el nombre de la vista activa a 'Vista de Trabajo'.","completion":"string newName = \"Vista de Trabajo\";\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.Name = newName;\n}"}
{"prompt":"Ajusta el tipo de una losa por uno que contenga 'Roble Oscuro'.","completion":"Floor floorToChange = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault() as Floor;\nif(floorToChange != null)\n{\n    FloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name.Contains(\"Roble Oscuro\") || ft.Name.Contains(\"Concrete\"));\n    if(newType!=null)\n        floorToChange.ChangeTypeId(newType.Id);\n}"}
{"prompt":"Crea una vista de sección usando una caja de 10x10x3 metros.","completion":"ViewFamilyType sectionVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(vft => vft.ViewFamily == ViewFamily.Section);\n\nif (sectionVFT != null)\n{\n    XYZ min = new XYZ(0, 0, 0);\n    XYZ max = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters));\n    BoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\n    sectionBox.Min = min;\n    sectionBox.Max = max;\n    ViewSection.CreateSection(doc, sectionVFT.Id, sectionBox);\n}"}
{"prompt":"Ubica una cota de elevación en el Nivel 1.","completion":"using (Transaction t = new Transaction(doc, \"Place Spot Elevation\"))\n{\n    t.Start();\n    Level lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel 1\");\n    View activeView = doc.ActiveView;\n\n    if (lvl1 != null && activeView != null)\n    {\n        Reference levelRef = new Reference(lvl1);\n        XYZ origin = new XYZ(5\/0.3048, 5\/0.3048, lvl1.Elevation);\n        XYZ leaderEnd = origin + new XYZ(2\/0.3048, 2\/0.3048, 0);\n        doc.Create.NewSpotElevation(activeView, levelRef, origin, origin, leaderEnd, origin, true);\n    }\n    t.Commit();\n}"}
{"prompt":"Establece el parámetro 'Marca' de todos los muros seleccionados a 'M-EXT-5'.","completion":"using (Transaction t = new Transaction(doc, \"Set Wall Mark\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    ICollection<ElementId> selectedIds = localUidoc.Selection.GetElementIds();\n\n    if (selectedIds != null && selectedIds.Count > 5)\n    {\n        foreach(ElementId id in selectedIds)\n        {\n            Element elem = doc.GetElement(id);\n            if(elem is Wall)\n            {\n                Parameter markParam = elem.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n                if (markParam != null && !markParam.IsReadOnly) markParam.Set(\"M-EXT-01\");\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create a filled region with a 'Concrete' pattern.","completion":"using (Transaction t = new Transaction(doc, \"Create Filled Region\"))\n{\n    t.Start();\n    FilledRegionType regionType = new FilteredElementCollector(doc).OfClass(typeof(FilledRegionType)).Cast<FilledRegionType>().FirstOrDefault(frt => frt.Name.Contains(\"Concrete\"));\n    View activeView = doc.ActiveView;\n\n    if (regionType != null && activeView != null)\n    {\n        XYZ p1 = new XYZ(0,0,0);\n        XYZ p2 = new XYZ(5 \/ 0.3048, 0,0);\n        XYZ p3 = new XYZ(5 \/ 0.3048, 5 \/ 0.3048,0);\n        XYZ p4 = new XYZ(0, 5 \/ 0.3048,0);\n        CurveLoop profile = new CurveLoop();\n        profile.Append(Line.CreateBound(p1,p2));\n        profile.Append(Line.CreateBound(p2,p3));\n        profile.Append(Line.CreateBound(p3,p4));\n        profile.Append(Line.CreateBound(p4,p1));\n        FilledRegion.Create(doc, regionType.Id, activeView.Id, new List<CurveLoop>{profile});\n    }\n    t.Commit();\n}"}
{"prompt":"Put a spot elevation on Level 1.","completion":"using (Transaction t = new Transaction(doc, \"Place Spot Elevation\"))\n{\n    t.Start();\n    Level lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 1\");\n    View activeView = doc.ActiveView;\n\n    if (lvl1 != null && activeView != null)\n    {\n        Reference levelRef = new Reference(lvl1);\n        XYZ origin = new XYZ(5\/0.3048, 5\/0.3048, lvl1.Elevation);\n        XYZ leaderEnd = origin + new XYZ(2\/0.3048, 2\/0.3048, 0);\n        doc.Create.NewSpotElevation(activeView, levelRef, origin, origin, leaderEnd, origin, true);\n    }\n    t.Commit();\n}"}
{"prompt":"Construct an MEP space for each room on Level 1.","completion":"using (Transaction t = new Transaction(doc, \"Create MEP Spaces\"))\n{\n    t.Start();\n    Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 1\");\n\n    if (level1 != null)\n    {\n        List<Room> roomsOnLevel1 = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Where(e => (e as Room) != null && (e as Room).LevelId.Equals(level1.Id)).Cast<Room>().ToList();\n        foreach(Room room in roomsOnLevel1)\n        {\n           \/\/ The direct creation of MEP spaces from rooms might not be available in this specific API version.\n           \/\/ Placeholder comment for the intended logic.\n           \/\/ Space.Create(doc, room, null);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Insert a piece of furniture at coordinates (2,3).","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null && furnitureSymbol != null)\n{\n    if (!furnitureSymbol.IsActive)\n    {\n        furnitureSymbol.Activate();\n    }\n    doc.Create.NewFamilyInstance(new XYZ(2, 3, 0), furnitureSymbol, level, StructuralType.NonStructural);\n}"}
{"prompt":"Fetch the 'Walls' schedule and export its data to CSV.","completion":"ViewSchedule schedule = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().FirstOrDefault(s=>s.Name==\"Walls\");\n\nif (schedule != null)\n{\n    string folderPath = \"C:\/RevitExports\/\";\n    ViewScheduleExportOptions options = new ViewScheduleExportOptions() { FieldDelimiter = \",\" };\n    schedule.Export(folderPath, \"Walls.csv\", options);\n}"}
{"prompt":"Recupera todas las habitaciones en el Nivel 'Losa 95'.","completion":"Level groundFloor = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Losa 95\") as Level;\nList<Element> roomsOnGround = new List<Element>();\n\nif (groundFloor != null)\n{\n    roomsOnGround = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Where(r => r.LevelId == groundFloor.Id).ToList();\n}"}
{"prompt":"Define the 'Comments' parameter for all doors on Level 4 to 'Fire Rating - 91 min'.","completion":"string levelName = \"Level 4\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(targetLevel.Id);\n    FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WherePasses(levelFilter);\n    foreach (Element door in collector)\n    {\n        Parameter commentsParam = door.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n        if (commentsParam != null && !commentsParam.IsReadOnly) { commentsParam.Set(\"Fire Rating - 91 min\"); }\n    }\n}"}
{"prompt":"Set the sill height of all windows to 1 meter.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Create a DirectShape with a 2x2x2 meter box shape.","completion":"TessellatedShapeBuilder builder = new TessellatedShapeBuilder();\nbuilder.OpenConnectedFaceSet(true);\ndouble size = UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\nXYZ p0=new XYZ(0,0,0); XYZ p1=new XYZ(size,0,0); XYZ p2=new XYZ(size,size,0); XYZ p3=new XYZ(0,size,0);\nXYZ p4=new XYZ(0,0,size); XYZ p5=new XYZ(size,0,size); XYZ p6=new XYZ(size,size,size); XYZ p7=new XYZ(0,size,size);\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p0,p1,p2,p3}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p7,p6,p5,p4}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p0,p4,p5,p1}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p1,p5,p6,p2}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p2,p6,p7,p3}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p3,p7,p4,p0}, ElementId.InvalidElementId));\nbuilder.CloseConnectedFaceSet();\nbuilder.Build();\nTessellatedShapeBuilderResult result = builder.GetBuildResult();\nDirectShape ds = DirectShape.CreateElement(doc, new ElementId(BuiltInCategory.OST_GenericModel));\n\nif (ds != null)\n{\n    ds.SetShape(result.GetGeometricalObjects());\n    ds.Name = \"DirectShape Box\";\n}"}
{"prompt":"Reproduce el nivel 1 con un desfase de 6m y llámalo 'Mezanine'.","completion":"string levelName = \"Mezanine\";\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\n\nif (level1 != null)\n{\n    double newElevation = level1.ProjectElevation + UnitUtils.ConvertToInternalUnits(6, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, newElevation);\n    if (newLevel != null)\n    {\n        newLevel.Name = levelName;\n    }\n}"}
{"prompt":"Esculpe un plafón a 2.8 metros de altura en el Nivel 1.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\nCeilingType ceilingType = new FilteredElementCollector(doc).OfClass(typeof(CeilingType)).FirstOrDefault() as CeilingType;\nif (ceilingType != null && level != null)\n{\n    CurveLoop profile = new CurveLoop();\n    profile.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(10,0,0)));\n    profile.Append(Line.CreateBound(new XYZ(10,0,0), new XYZ(10,10,0)));\n    profile.Append(Line.CreateBound(new XYZ(10,10,0), new XYZ(0,10,0)));\n    profile.Append(Line.CreateBound(new XYZ(0,10,0), new XYZ(0,0,0)));\n    Ceiling ceiling = Ceiling.Create(doc, new List<CurveLoop>{profile}, ceilingType.Id, level.Id);\n    if (ceiling != null)\n    {\n        Parameter heightParam = ceiling.get_Parameter(BuiltInParameter.CEILING_HEIGHTABOVELEVEL_PARAM);\n        if (heightParam != null && !heightParam.IsReadOnly) heightParam.Set(UnitUtils.ConvertToInternalUnits(2.8, UnitTypeId.Meters));\n    }\n}"}
{"prompt":"Update the type of a floor to one that contains 'Concrete'.","completion":"Floor floorToChange = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault() as Floor;\nFloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name.Contains(\"Concrete\"));\n\nif (floorToChange != null && newType != null)\n{\n    floorToChange.ChangeTypeId(newType.Id);\n}"}
{"prompt":"Crea una cimentación de viga de 8 metros de largo.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol foundationSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFoundation).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null && foundationSymbol != null)\n{\n    Line line = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters), 0, 0));\n    doc.Create.NewFamilyInstance(line, foundationSymbol, level, StructuralType.Footing);\n}"}
{"prompt":"Clone level 1 with a 8m offset and name it 'Mezzanine'.","completion":"string levelName = \"Mezzanine\";\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\n\nif (level1 != null)\n{\n    double newElevation = level1.ProjectElevation + UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, newElevation);\n    if (newLevel != null)\n    {\n        newLevel.Name = levelName;\n    }\n}"}
{"prompt":"Aplica un color rojo a todas las ventanas en la vista activa.","completion":"View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    OverrideGraphicSettings ogs = new OverrideGraphicSettings();\n    ogs.SetProjectionLineColor(new Color(255, 0, 0));\n    ICollection<ElementId> windows = new FilteredElementCollector(doc, activeView.Id).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().ToElementIds();\n    \n    foreach (ElementId windowId in windows)\n    {\n        activeView.SetElementOverrides(windowId, ogs);\n    }\n}"}
{"prompt":"Obtén una lista de los nombres de todos los materiales.","completion":"List<Material> materials = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().ToList();\nList<string> materialNames = new List<string>();\nforeach(Material m in materials)\n{\n    materialNames.Add(m.Name);\n}\n"}
{"prompt":"Add a tag to the column closest to the origin.","completion":"using (Transaction t = new Transaction(doc, \"Tag Column\"))\n{\n    t.Start();\n    View activeView = doc.ActiveView;\n    FamilyInstance column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().Cast<FamilyInstance>().OrderBy(c => {\n        LocationPoint lp = c.Location as LocationPoint;\n        return lp != null ? lp.Point.DistanceTo(XYZ.Zero) : double.MaxValue;\n    }).FirstOrDefault();\n\n    if (activeView != null && column != null)\n    {\n        LocationPoint loc = column.Location as LocationPoint;\n        if (loc != null)\n        {\n            IndependentTag.Create(doc, activeView.Id, new Reference(column), true, TagMode.TM_ADDBY_CATEGORY, TagOrientation.Horizontal, loc.Point);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create a new door type named 'FR-90 Door' and set its fire rating to '90 min'.","completion":"using (Transaction t = new Transaction(doc, \"Create Door Type\"))\n{\n    t.Start();\n    string newTypeName = \"FR-90 Door\";\n    FamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n    if (doorTypeToDuplicate != null)\n    {\n        FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\n        if (newDoorType != null)\n        {\n            Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n            if(fireRatingParam != null && !fireRatingParam.IsReadOnly)\n            {\n                fireRatingParam.Set(\"90 min\");\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Build a detail group with the selected detail items.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds != null && selectedIds.Count > 0)\n{\n    List<ElementId> detailIds = new List<ElementId>();\n    foreach(ElementId id in selectedIds)\n    {\n        Element elem = doc.GetElement(id);\n        if (elem != null && elem.Category != null && elem.Category.CategoryType == CategoryType.Annotation)\n        {\n            detailIds.Add(id);\n        }\n    }\n\n    if (detailIds.Count > 0)\n    {\n        Group group = doc.Create.NewGroup(detailIds);\n        if (group != null)\n        {\n            group.Name = \"Typical Detail 1\";\n        }\n    }\n}"}
{"prompt":"Set the sill height of all windows to 1 meter.","completion":"using (Transaction t = new Transaction(doc, \"Set Sill Height\"))\n{\n    t.Start();\n    double sillHeight = 1 \/ 0.3048;\n    List<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\n    foreach(FamilyInstance window in windows)\n    {\n        Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n        if (sillHeightParam != null && !sillHeightParam.IsReadOnly)\n        {\n            sillHeightParam.Set(sillHeight);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Rotate a selected element 92 degrees around its Z-axis.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select an element to rotate\");\nElement elem = doc.GetElement(pickedRef.ElementId);\nLocationPoint lp = elem.Location as LocationPoint;\nLine axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\nElementTransformUtils.RotateElement(doc, elem.Id, axis, Math.PI \/ 92);"}
{"prompt":"Change the detail level of the current view to 'Coarse'.","completion":"View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.DetailLevel = ViewDetailLevel.Coarse;\n}"}
{"prompt":"Aplica aislamiento térmico de 25mm a todas las tuberías de agua caliente.","completion":"PipeInsulationType insulationType = new FilteredElementCollector(doc).OfClass(typeof(PipeInsulationType)).FirstOrDefault() as PipeInsulationType;\nPipingSystemType hotWaterSystem = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).Cast<PipingSystemType>().FirstOrDefault(s => s.Name.Contains(\"Hot Water\") || s.Name.Contains(\"Agua Caliente\"));\n\nif (insulationType != null && hotWaterSystem != null)\n{\n    List<Pipe> pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast<Pipe>().Where(p => \n    {\n        Parameter systemParam = p.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM);\n        return systemParam != null && systemParam.HasValue && systemParam.AsElementId() == hotWaterSystem.Id;\n    }).ToList();\n    \n    foreach(Pipe p in pipes)\n    {\n        PipeInsulation.Create(doc, p.Id, insulationType.Id, UnitUtils.ConvertToInternalUnits(25, UnitTypeId.Millimeters));\n    }\n}"}
{"prompt":"Copia el tipo de muro 'Genérico - 145mm' y nómbralo 'Interior - 14cm Yeso'.","completion":"string originalName = \"Genérico - 145mm\";\nstring newName = \"Interior - 14cm Yeso\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif(originalType!=null)\n    originalType.Duplicate(newName);"}
{"prompt":"Create an extrusion roof with a 10% slope.","completion":"using (Transaction t = new Transaction(doc, \"Create Extrusion Roof\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    RoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n\n    if (level != null && roofType != null)\n    {\n        CurveArray profile = new CurveArray();\n        profile.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(10 \/ 0.3048, 0, 1 \/ 0.3048)));\n        \n        Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisY, XYZ.Zero);\n        ReferencePlane refPlane = doc.Create.NewReferencePlane(plane.Origin, plane.Origin + XYZ.BasisX, plane.Normal, doc.ActiveView);\n        \n        if (refPlane != null)\n        {\n            doc.Create.NewExtrusionRoof(profile, refPlane, level, roofType, 0, 10 \/ 0.3048);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Coloca un mueble en las coordenadas (2,3).","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null && furnitureSymbol != null)\n{\n    if (!furnitureSymbol.IsActive)\n    {\n        furnitureSymbol.Activate();\n    }\n    doc.Create.NewFamilyInstance(new XYZ(2, 3, 0), furnitureSymbol, level, StructuralType.NonStructural);\n}"}
{"prompt":"Create a detail group with the selected detail items.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds != null && selectedIds.Count > 0)\n{\n    List<ElementId> detailIds = new List<ElementId>();\n    foreach(ElementId id in selectedIds)\n    {\n        Element elem = doc.GetElement(id);\n        if (elem != null && elem.Category != null && elem.Category.CategoryType == CategoryType.Annotation)\n        {\n            detailIds.Add(id);\n        }\n    }\n\n    if (detailIds.Count > 0)\n    {\n        Group group = doc.Create.NewGroup(detailIds);\n        if (group != null)\n        {\n            group.Name = \"Typical Detail 1\";\n        }\n    }\n}"}
{"prompt":"Place the 'Level 1' view in the center of the active sheet.","completion":"ViewPlan viewToPlace = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v => v.Name == \"Level 1\") as ViewPlan;\nViewSheet activeSheet = doc.ActiveView as ViewSheet;\n\nif (viewToPlace != null && activeSheet != null)\n{\n    BoundingBoxUV sheetBox = activeSheet.Outline;\n    XYZ centerPoint = new XYZ((sheetBox.Min.U + sheetBox.Max.U) \/ 2, (sheetBox.Min.V + sheetBox.Max.V) \/ 2, 0);\n    Viewport.Create(doc, activeSheet.Id, viewToPlace.Id, centerPoint);\n}"}
{"prompt":"Crea un techo por extrusión con una pendiente del 10%.","completion":"using (Transaction t = new Transaction(doc, \"Create Extrusion Roof\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    RoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n\n    if (level != null && roofType != null)\n    {\n        CurveArray profile = new CurveArray();\n        profile.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(10 \/ 0.3048, 0, 1 \/ 0.3048)));\n        \n        Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisY, XYZ.Zero);\n        ReferencePlane refPlane = doc.Create.NewReferencePlane(plane.Origin, plane.Origin + XYZ.BasisX, plane.Normal, doc.ActiveView);\n        \n        if (refPlane != null)\n        {\n            doc.Create.NewExtrusionRoof(profile, refPlane, level, roofType, 0, 10 \/ 0.3048);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Build a new level named 'Mezzanine' at 7.5 meters elevation.","completion":"string levelName = \"Mezzanine\";\ndouble elevation = UnitUtils.ConvertToInternalUnits(7.5, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Paint the interior face of exterior walls with 'White Paint'.","completion":"using (Transaction t = new Transaction(doc, \"Paint Walls\"))\n{\n    t.Start();\n    Material paintMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m => m.Name == \"White Paint\");\n    var exteriorWalls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Cast<Wall>().Where(w => w.WallType.Function == WallFunction.Exterior).ToList();\n\n    if (paintMaterial != null)\n    {\n        foreach (Wall w in exteriorWalls)\n        {\n            IList<Reference> interiorFaceRefs = HostObjectUtils.GetSideFaces(w, ShellLayerType.Interior);\n            if(interiorFaceRefs.Count > 0)\n            {\n                Face interiorFace = w.GetGeometryObjectFromReference(interiorFaceRefs.First()) as Face;\n                if (interiorFace != null)\n                {\n                    doc.Paint(w.Id, interiorFace, paintMaterial.Id);\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Build a text note with a leader pointing to a given element and location.","completion":"using (Transaction t = new Transaction(doc, \"Create Text Note\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference target = localUidoc.Selection.PickObject(ObjectType.Element, \"Select an element to annotate\");\n    XYZ textLocation = localUidoc.Selection.PickPoint(\"Choose the text location\");\n\n    View activeView = doc.ActiveView;\n    ElementId defaultTypeId = doc.GetDefaultElementTypeId(ElementTypeGroup.TextNoteType);\n\n    if (target != null && textLocation != null && activeView != null && defaultTypeId != ElementId.InvalidElementId)\n    {\n        TextNoteOptions opts = new TextNoteOptions(defaultTypeId);\n        opts.HorizontalAlignment = HorizontalTextAlignment.Left;\n        TextNote note = TextNote.Create(doc, activeView.Id, textLocation, \"Review this element\", opts);\n        if (note != null)\n        {\n            Leader leader = note.AddLeader(TextNoteLeaderTypes.TNLT_STRAIGHT_L);\n            leader.End = target.GlobalPoint;\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create a stair between Level 1 and Level 2.","completion":"\/\/ This is a complex operation that requires multiple steps and\/or user interaction and is not supported by the agent."}
{"prompt":"Build a wall on Level 1 from (0,0,0) to (5,0,0) with a height of 5 meters.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (level1 != null && wallType != null)\n{\n    Line wallCurve = Line.CreateBound(new XYZ(0, 0, 0), new XYZ(5, 0, 0));\n    double height = UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters);\n    Wall.Create(doc, wallCurve, wallType.Id, level1.Id, height, 0.0, false, false);\n}"}
{"prompt":"Plasma una región rellena con patrón diagonal.","completion":"using (Transaction t = new Transaction(doc, \"Draw Filled Region\"))\n{\n    t.Start();\n    View activeView = doc.ActiveView;\n    FillPatternElement fillPattern = new FilteredElementCollector(doc).OfClass(typeof(FillPatternElement)).Cast<FillPatternElement>().FirstOrDefault(p => !p.GetFillPattern().IsSolidFill);\n\n    if (activeView != null && fillPattern != null)\n    {\n        FilledRegionType filledRegionType = new FilteredElementCollector(doc, activeView.Id).OfClass(typeof(FilledRegionType)).FirstOrDefault() as FilledRegionType;\n        if (filledRegionType != null)\n        {\n            FilledRegionType newType = filledRegionType.Duplicate(\"Temp Diagonal Region\") as FilledRegionType;\n            if (newType != null)\n            {\n                newType.ForegroundPatternId = fillPattern.Id;\n                XYZ p1 = new XYZ(0,0,0);\n                XYZ p2 = new XYZ(5 \/ 0.3048,0,0);\n                XYZ p3 = new XYZ(5 \/ 0.3048,5 \/ 0.3048,0);\n                XYZ p4 = new XYZ(0,5 \/ 0.3048,0);\n                CurveLoop profile = new CurveLoop();\n                profile.Append(Line.CreateBound(p1,p2));\n                profile.Append(Line.CreateBound(p2,p3));\n                profile.Append(Line.CreateBound(p3,p4));\n                profile.Append(Line.CreateBound(p4,p1));\n                FilledRegion.Create(doc, newType.Id, activeView.Id, new List<CurveLoop>{profile});\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Inserta una instancia de la familia 'Mesa de Oficina' en el centro de la habitación 'Despacho 99'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 99\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Mesa de Oficina\") as FamilySymbol;\nif(furnitureSymbol != null && !furnitureSymbol.IsActive) furnitureSymbol.Activate();\nif(room != null)\n{\n    LocationPoint roomCenter = room.Location as LocationPoint;\n    if(roomCenter != null && furnitureSymbol != null && room.Level != null)\n    {\n        doc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Encuentra todas las puertas del Nivel 2 que sean de la familia 'Puerta Sencilla'.","completion":"Level level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel 2\");\nList<Element> doors = new List<Element>();\n\nif (level2 != null)\n{\n    ElementCategoryFilter catFilter = new ElementCategoryFilter(BuiltInCategory.OST_Doors);\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level2.Id);\n    FilterableValueProvider provider = new ParameterValueProvider(new ElementId(BuiltInParameter.ELEM_FAMILY_PARAM));\n    FilterStringRuleEvaluator evaluator = new FilterStringEquals();\n    FilterRule famNameRule = new FilterStringRule(provider, evaluator, \"Puerta Sencilla\");\n    ElementParameterFilter famFilter = new ElementParameterFilter(famNameRule);\n    LogicalAndFilter andFilter = new LogicalAndFilter(new List<ElementFilter> { catFilter, levelFilter, famFilter });\n    doors = new FilteredElementCollector(doc).WherePasses(andFilter).ToList();\n}"}
{"prompt":"Build a 'Roof Terrace' level at 10m.","completion":"string levelName = \"Roof Terrace\";\ndouble elev = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elev);\nnewLevel.Name = levelName;\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Pin the selected element so it cannot be moved.","completion":"UIDocument uidoc = new UIDocument(doc);\nElementId selectedId = uidoc.Selection.GetElementIds().FirstOrDefault();\n\nif (selectedId != ElementId.InvalidElementId)\n{\n    Element elementToPin = doc.GetElement(selectedId);\n    if (elementToPin != null)\n    {\n        elementToPin.Pinned = true;\n    }\n}"}
{"prompt":"Sitúa una instancia de la familia 'Mesa de Oficina' en el centro de la habitación 'Despacho 96'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 96\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Mesa de Oficina\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);"}
{"prompt":"Assign all walls to the 'Structure' workset.","completion":"using (Transaction t = new Transaction(doc, \"Assign to Workset\"))\n{\n    t.Start();\n    if (doc.IsWorkshared)\n    {\n        Workset ws = new FilteredWorksetCollector(doc).OfKind(WorksetKind.UserWorkset).FirstOrDefault(w => w.Name == \"Structure\");\n        if (ws != null)\n        {\n            FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType();\n            foreach (Element e in collector)\n            {\n                Parameter p = e.get_Parameter(BuiltInParameter.ELEM_PARTITION_PARAM);\n                if (p != null && !p.IsReadOnly)\n                {\n                    p.Set(ws.Id.IntegerValue);\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea un nuevo tipo de muro de 25cm llamado 'Muro Estructural 25cm'.","completion":"string newTypeName = \"Muro Estructural 25cm\";\nWallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif (oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(newTypeName) as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(25, UnitTypeId.Centimeters));\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n}"}
{"prompt":"Inserta un rociador en las coordenadas (9,1,1).","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol sprinklerSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Sprinklers).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (level != null && sprinklerSymbol != null)\n{\n    if (!sprinklerSymbol.IsActive) sprinklerSymbol.Activate();\n    XYZ placementPoint = new XYZ(UnitUtils.ConvertToInternalUnits(9, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters));\n    doc.Create.NewFamilyInstance(placementPoint, sprinklerSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n}"}
{"prompt":"Encuentra el tipo de columna estructural llamado \"300 x 450mm\" y colócalo en X=-8, Y=12.","completion":"string columnTypeName = \"300 x 450mm\";\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(s => s.Name == columnTypeName);\n\nif (level != null && columnSymbol != null)\n{\n    if (!columnSymbol.IsActive) { columnSymbol.Activate(); }\n    doc.Create.NewFamilyInstance(new XYZ(UnitUtils.ConvertToInternalUnits(-8, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(12, UnitTypeId.Meters), 0), columnSymbol, level, StructuralType.Column);\n}"}
{"prompt":"Find all section views in the project.","completion":"List<ViewSection> sectionViews = new FilteredElementCollector(doc).OfClass(typeof(ViewSection)).Cast<ViewSection>().ToList();"}
{"prompt":"Ajusta todas las ventanas para que la altura del antepecho sea 1 metro.","completion":"using (Transaction t = new Transaction(doc, \"Set Sill Height\"))\n{\n    t.Start();\n    double sillHeight = 1 \/ 0.3048;\n    List<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\n    foreach(FamilyInstance window in windows)\n    {\n        Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n        if (sillHeightParam != null && !sillHeightParam.IsReadOnly)\n        {\n            sillHeightParam.Set(sillHeight);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Obtén las coordenadas del punto base y del punto de reconocimiento.","completion":"BasePoint surveyPoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(p => p.IsShared);\nBasePoint projectBasePoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(p => !p.IsShared);\n\nXYZ surveyCoords = null;\nif (surveyPoint != null) surveyCoords = surveyPoint.get_BoundingBox(null).Min;\n\nXYZ projectCoords = null;\nif (projectBasePoint != null) projectCoords = projectBasePoint.get_BoundingBox(null).Min;"}
{"prompt":"Copy all walls from Level 1 to Level 2.","completion":"using (Transaction t = new Transaction(doc, \"Copy Walls\"))\n{\n    t.Start();\n    Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 1\");\n    Level level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 2\");\n\n    if (level1 != null && level2 != null)\n    {\n        ICollection<ElementId> wallsToCopy = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Where(e => (e as Wall) != null && (e as Wall).LevelId.Equals(level1.Id)).Select(e => e.Id).ToList();\n        double elevationDiff = level2.ProjectElevation - level1.ProjectElevation;\n        XYZ translation = new XYZ(0, 0, elevationDiff);\n        if (wallsToCopy.Count > 0)\n        {\n            ElementTransformUtils.CopyElements(doc, wallsToCopy, translation);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Actualiza el tipo de la ventana seleccionada al tipo 'Fija 120x60'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una ventana\");\nFamilySymbol newType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name == \"Fija 120x60\");\nif (pickedRef != null && newType != null)\n{\n    FamilyInstance window = doc.GetElement(pickedRef.ElementId) as FamilyInstance;\n    if (window != null)\n    {\n        window.Symbol = newType;\n    }\n}"}
{"prompt":"Sitúa las vistas 'Planta Nivel 1' y 'Planta Nivel 2' en el plano 'A-101'.","completion":"ViewSheet sheet = new FilteredElementCollector(doc).OfClass(typeof(ViewSheet)).Cast<ViewSheet>().FirstOrDefault(s => s.SheetNumber == \"A-101\");\nView view1 = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().FirstOrDefault(v => v.Name == \"Planta Nivel 1\");\nView view2 = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().FirstOrDefault(v => v.Name == \"Planta Nivel 2\");\nif (sheet != null && view1 != null && view2 != null)\n{\n    XYZ insertPoint1 = new XYZ(1.0, 1.0, 0);\n    Viewport.Create(doc, sheet.Id, view1.Id, insertPoint1);\n    XYZ insertPoint2 = new XYZ(1.0, 2.0, 0);\n    Viewport.Create(doc, sheet.Id, view2.Id, insertPoint2);\n}"}
{"prompt":"Find all walls taller than 4 meters.","completion":"double heightThreshold = UnitUtils.ConvertToInternalUnits(4, UnitTypeId.Meters);\nParameterValueProvider pvp = new ParameterValueProvider(new ElementId(BuiltInParameter.WALL_USER_HEIGHT_PARAM));\nFilterRule rule = new FilterDoubleRule(pvp, new FilterNumericGreater(), heightThreshold, 1e-6);\nList<Element> tallWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(new ElementParameterFilter(rule)).ToList();"}
{"prompt":"Ubica la vista 'Planta Baja' en el centro de la hoja activa.","completion":"ViewPlan viewToPlace = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v => v.Name == \"Planta Baja\") as ViewPlan;\nViewSheet activeSheet = doc.ActiveView as ViewSheet;\n\nif (viewToPlace != null && activeSheet != null)\n{\n    BoundingBoxUV sheetBox = activeSheet.Outline;\n    XYZ centerPoint = new XYZ((sheetBox.Min.U + sheetBox.Max.U) \/ 2, (sheetBox.Min.V + sheetBox.Max.V) \/ 2, 0);\n    Viewport.Create(doc, activeSheet.Id, viewToPlace.Id, centerPoint);\n}"}
{"prompt":"Ajusta el tipo de la ventana seleccionada al tipo 'Fija 124x60'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una ventana\");\nFamilySymbol newType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name == \"Fija 124x60\");\nif (pickedRef != null && newType != null)\n{\n    FamilyInstance window = doc.GetElement(pickedRef.ElementId) as FamilyInstance;\n    if (window != null)\n    {\n        window.Symbol = newType;\n    }\n}"}
{"prompt":"Import a CAD file named 'BasePlan.dwg' into the current view.","completion":"string filePath = \"C:\/CAD\/BasePlan.dwg\";\nDWGImportOptions options = new DWGImportOptions();\noptions.Placement = ImportPlacement.Origin;\nElementId importId;\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    doc.Import(filePath, options, activeView, out importId);\n}"}
{"prompt":"Move the selected elements 3 meters up.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds != null && selectedIds.Count > 0)\n{\n    XYZ translation = new XYZ(0, 0, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters));\n    ElementTransformUtils.MoveElements(doc, selectedIds, translation);\n}"}
{"prompt":"Inserta un punto de referencia en las coordenadas (1,2,1) dentro del editor de familias.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(1,2,1));"}
{"prompt":"Crea una apertura de hueco (shaft) que atraviese desde el Nivel 1 al Nivel 3.","completion":"using (Transaction t = new Transaction(doc, \"Create Shaft Opening\"))\n{\n    t.Start();\n    Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel 1\");\n    Level topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel 3\");\n\n    if (bottomLevel != null && topLevel != null)\n    {\n        XYZ p1 = new XYZ(5 \/ 0.3048, 5 \/ 0.3048,0);\n        XYZ p2 = new XYZ(8 \/ 0.3048, 5 \/ 0.3048,0);\n        XYZ p3 = new XYZ(8 \/ 0.3048, 8 \/ 0.3048,0);\n        XYZ p4 = new XYZ(5 \/ 0.3048, 8 \/ 0.3048,0);\n        CurveArray profile = new CurveArray();\n        profile.Append(Line.CreateBound(p1,p2));\n        profile.Append(Line.CreateBound(p2,p3));\n        profile.Append(Line.CreateBound(p3,p4));\n        profile.Append(Line.CreateBound(p4,p1));\n        Opening shaft = doc.Create.NewOpening(bottomLevel, topLevel, profile);\n    }\n    t.Commit();\n}"}
{"prompt":"Replicate level 1 with a 7m offset and name it 'Mezzanine'.","completion":"string levelName = \"Mezzanine\";\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\n\nif (level1 != null)\n{\n    double newElevation = level1.ProjectElevation + UnitUtils.ConvertToInternalUnits(7, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, newElevation);\n    if (newLevel != null)\n    {\n        newLevel.Name = levelName;\n    }\n}"}
{"prompt":"Set the sill height of all windows to 4 meter.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits(4, UnitTypeId.Meters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Set the sill height of all windows to 1 meter.","completion":"using (Transaction t = new Transaction(doc, \"Set Sill Height\"))\n{\n    t.Start();\n    double sillHeight = 1 \/ 0.3048;\n    List<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\n    foreach(FamilyInstance window in windows)\n    {\n        Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n        if (sillHeightParam != null && !sillHeightParam.IsReadOnly)\n        {\n            sillHeightParam.Set(sillHeight);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea un nuevo panel en la cinta de opciones llamado 'Mis Herramientas' con un botón.","completion":""}
{"prompt":"Crea una vista 3D con la caja de sección activada.","completion":"string viewName = \"Vista 3D con Caja de Sección\";\nViewFamilyType vft3D = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft3D != null)\n{\n    View3D view3d = View3D.CreateIsometric(doc, vft3D.Id);\n    if (view3d != null)\n    {\n        view3d.Name = viewName;\n        view3d.IsSectionBoxActive = true;\n    }\n}"}
{"prompt":"Find the structural column type named \"295 x 452mm\" and place it at X=1, Y=12.4","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(s => s.Name == \"295 x 452mm\");\nif (level != null && columnSymbol != null)\n{\n    if (!columnSymbol.IsActive) { columnSymbol.Activate(); }\n    XYZ point = new XYZ(1, 12.4, 0);\n    doc.Create.NewFamilyInstance(point, columnSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n}"}
{"prompt":"Copia el nivel 4 con un desfase de 2m y llámalo 'Mezanine'.","completion":"string levelName = \"Nivel 4\";\nLevel levelToCopy = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (levelToCopy != null)\n{\n    double offset = UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, levelToCopy.Elevation + offset);\n    newLevel.Name = \"Mezanine\";\n}"}
{"prompt":"Clone level 1 with a 7m offset and name it 'Mezzanine'.","completion":"string levelName = \"Mezzanine\";\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\n\nif (level1 != null)\n{\n    double newElevation = level1.ProjectElevation + UnitUtils.ConvertToInternalUnits(7, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, newElevation);\n    if (newLevel != null)\n    {\n        newLevel.Name = levelName;\n    }\n}"}
{"prompt":"Ubica una instancia de la familia 'Puerta Sencilla' en el centro de la habitación 'Despacho 96'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 96\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Puerta Sencilla\") as FamilySymbol;\nif(furnitureSymbol != null && !furnitureSymbol.IsActive) furnitureSymbol.Activate();\nif(room != null)\n{\n    LocationPoint roomCenter = room.Location as LocationPoint;\n    if(roomCenter != null && furnitureSymbol != null && room.Level != null)\n    {\n        doc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Sitúa una instancia de la familia 'Mesa de Oficina' en el centro de la habitación 'Despacho 100'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 100\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Mesa de Oficina\") as FamilySymbol;\nif(furnitureSymbol != null && !furnitureSymbol.IsActive) furnitureSymbol.Activate();\nif(room != null)\n{\n    LocationPoint roomCenter = room.Location as LocationPoint;\n    if(roomCenter != null && furnitureSymbol != null && room.Level != null)\n    {\n        doc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Calcula el volumen total de hormigón de todas las zapatas de cimentación.","completion":"double totalVolume = 0.0;\nList<FamilyInstance> footings = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFoundation).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach (FamilyInstance footing in footings)\n{\n    Parameter volumeParam = footing.get_Parameter(BuiltInParameter.HOST_VOLUME_COMPUTED);\n    if (volumeParam != null && volumeParam.HasValue)\n    {\n        totalVolume += volumeParam.AsDouble();\n    }\n}\n\/\/ El volumen está en pies cúbicos. El orquestador puede convertirlo a metros cúbicos."}
{"prompt":"Copia el tipo de muro 'Genérico - 135mm' y nómbralo 'Interior - 15cm Yeso'.","completion":"string originalName = \"Genérico - 135mm\";\nstring newName = \"Interior - 15cm Yeso\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif (originalType != null)\n{\n    WallType newType = originalType.Duplicate(newName) as WallType;\n}"}
{"prompt":"Encuentra todas las vistas que no tienen una plantilla de vista asignada.","completion":"List<View> viewsWithoutTemplate = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().Where(v => v.CanBePrinted && !v.IsTemplate && v.ViewTemplateId.Equals(ElementId.InvalidElementId)).ToList();"}
{"prompt":"Encuentra el tipo de columna estructural llamado \"300 x 450mm\" y colócalo en X=-8, Y=12.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(s => s.Name == \"300 x 450mm\");\nif (level != null && columnSymbol != null)\n{\n    if (!columnSymbol.IsActive) { columnSymbol.Activate(); }\n    XYZ point = new XYZ(-8, 12, 0);\n    doc.Create.NewFamilyInstance(point, columnSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n}"}
{"prompt":"Ubica una instancia de la familia 'M_Chair-Breuer' en el centro de la habitación 'Despacho 99'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 99\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"M_Chair-Breuer\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);"}
{"prompt":"Synchronize the local model with the central model, adding the comment 'Design update'.","completion":"if (doc.IsWorkshared)\n{\n    TransactWithCentralOptions tco = new TransactWithCentralOptions();\n    SynchronizeWithCentralOptions swcOpts = new SynchronizeWithCentralOptions();\n    swcOpts.Comment = \"Design update\";\n    swcOpts.SaveLocalAfter = true;\n    doc.SynchronizeWithCentral(tco, swcOpts);\n}"}
{"prompt":"Genera ocho ejes horizontales con una separación de 10m.","completion":"double separation = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\nfor(int i = 0; i < 8; i++)\n{\n    Line line = Line.CreateBound(new XYZ(0, i * separation, 0), new XYZ(50, i * separation, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Create 4 vertical grids spaced 10 meters apart.","completion":"double separation = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\nfor(int i=0; i<4; i++)\n{\n    Line line = Line.CreateBound(new XYZ(i * separation, 0, 0), new XYZ(i * separation, 40, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Clona el nivel 7 con un desfase de 3m y llámalo 'Mezanine'.","completion":"string levelName = \"Nivel 7\";\nLevel levelToCopy = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (levelToCopy != null)\n{\n    double offset = UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, levelToCopy.Elevation + offset);\n    newLevel.Name = \"Mezanine\";\n}"}
{"prompt":"Obtain all rooms on Level 3.","completion":"Level level3 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 3\") as Level;\nList<Element> roomsOnLevel3 = new List<Element>();\n\nif (level3 != null)\n{\n    roomsOnLevel3 = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Where(r => r.LevelId == level3.Id).ToList();\n}"}
{"prompt":"Draw a filled region with a diagonal pattern.","completion":"using (Transaction t = new Transaction(doc, \"Draw Filled Region\"))\n{\n    t.Start();\n    View activeView = doc.ActiveView;\n    FillPatternElement fillPattern = new FilteredElementCollector(doc).OfClass(typeof(FillPatternElement)).Cast<FillPatternElement>().FirstOrDefault(p => !p.GetFillPattern().IsSolidFill);\n\n    if (activeView != null && fillPattern != null)\n    {\n        FilledRegionType filledRegionType = new FilteredElementCollector(doc, activeView.Id).OfClass(typeof(FilledRegionType)).FirstOrDefault() as FilledRegionType;\n        if (filledRegionType != null)\n        {\n            FilledRegionType newType = filledRegionType.Duplicate(\"Temp Diagonal Region\") as FilledRegionType;\n            if (newType != null)\n            {\n                newType.ForegroundPatternId = fillPattern.Id;\n                XYZ p1 = new XYZ(0,0,0);\n                XYZ p2 = new XYZ(5 \/ 0.3048,0,0);\n                XYZ p3 = new XYZ(5 \/ 0.3048,5 \/ 0.3048,0);\n                XYZ p4 = new XYZ(0,5 \/ 0.3048,0);\n                CurveLoop profile = new CurveLoop();\n                profile.Append(Line.CreateBound(p1,p2));\n                profile.Append(Line.CreateBound(p2,p3));\n                profile.Append(Line.CreateBound(p3,p4));\n                profile.Append(Line.CreateBound(p4,p1));\n                FilledRegion.Create(doc, newType.Id, activeView.Id, new List<CurveLoop>{profile});\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea una vista 3D con la caja de sección activada.","completion":"string viewName = \"Vista 3D con Caja de Sección\";\nViewFamilyType vft3D = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft3D != null)\n{\n    View3D view3d = View3D.CreateIsometric(doc, vft3D.Id);\n    if (view3d != null)\n    {\n        view3d.Name = viewName;\n        view3d.IsSectionBoxActive = true;\n    }\n}"}
{"prompt":"Recupera el número total de advertencias en el proyecto.","completion":"int totalWarnings = doc.GetWarnings().Count;\n"}
{"prompt":"Spin a selected element 92 degrees around its Z-axis.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select an element to rotate\");\nElement elem = doc.GetElement(pickedRef.ElementId);\nLocationPoint lp = elem.Location as LocationPoint;\nLine axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\nElementTransformUtils.RotateElement(doc, elem.Id, axis, Math.PI \/ 92);"}
{"prompt":"Cambia el nivel de detalle de la vista actual a 'Bajo'.","completion":"View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.DetailLevel = ViewDetailLevel.Coarse;\n}"}
{"prompt":"Append a reference point at coordinates (4,1,3) inside the family editor.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(4,1,3));"}
{"prompt":"Generate a new wall type 'Generic Wall 322mm' with a thickness of 30cm.","completion":"string newTypeName = \"Generic Wall 322mm\";\nWallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif (oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(newTypeName) as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(30, UnitTypeId.Centimeters));\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n}"}
{"prompt":"Generate a floor plan view for 'Level 1'.","completion":"string levelName = \"Level 1\";\nLevel level3 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.FloorPlan);\n\nif (level3 != null && vft != null)\n{\n    ViewPlan viewPlan = ViewPlan.Create(doc, vft.Id, level3.Id);\n}"}
{"prompt":"Change the wall type of an existing wall to one containing 'Thermal Insulation'.","completion":"Wall wallToChange = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nWallType newType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(x => x.Name.Contains(\"Thermal Insulation\"));\n\nif (wallToChange != null && newType != null)\n{\n    wallToChange.ChangeTypeId(newType.Id);\n}"}
{"prompt":"Set the 'Mark' parameter of all selected walls to 'W-EXT-01'.","completion":"using (Transaction t = new Transaction(doc, \"Set Wall Mark\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    ICollection<ElementId> selectedIds = localUidoc.Selection.GetElementIds();\n\n    if (selectedIds != null && selectedIds.Count > 0)\n    {\n        foreach(ElementId id in selectedIds)\n        {\n            Element elem = doc.GetElement(id);\n            if(elem is Wall)\n            {\n                Parameter markParam = elem.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n                if (markParam != null && !markParam.IsReadOnly) markParam.Set(\"W-EXT-01\");\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Coloca un rociador en las coordenadas (10,8,1).","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol sprinklerSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Sprinklers).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (level != null && sprinklerSymbol != null)\n{\n    if (!sprinklerSymbol.IsActive) sprinklerSymbol.Activate();\n    XYZ placementPoint = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters));\n    doc.Create.NewFamilyInstance(placementPoint, sprinklerSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n}"}
{"prompt":"Modifica el estilo visual de la vista activa a 'Línea Oculta'.","completion":"View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.DisplayStyle = DisplayStyle.HLR;\n}"}
{"prompt":"Delete all detail lines in the active view.","completion":"using (Transaction t = new Transaction(doc, \"Delete Detail Lines\"))\n{\n    t.Start();\n    if (doc.ActiveView != null)\n    {\n        ICollection<ElementId> detailLines = new FilteredElementCollector(doc, doc.ActiveView.Id).OfClass(typeof(DetailCurve)).ToElementIds();\n        if (detailLines.Count > 0)\n        {\n            doc.Delete(detailLines);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Generate a new Level named 'Level 6' at an elevation of 14 meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(14, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Level 6\";\n}"}
{"prompt":"Ajusta el nombre de la vista activa a 'Plano de Fontanería'.","completion":"string newName = \"Plano de Fontanería\";\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.Name = newName;\n}"}
{"prompt":"Incorpora un nivel llamado 'Nivel Azotea' a 16.0 metros.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(16.0, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Nivel Azotea\";\n}"}
{"prompt":"Generate a floor plan view for 'Level 3'.","completion":"string levelName = \"Level 3\";\nLevel level3 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.FloorPlan);\n\nif (level3 != null && vft != null)\n{\n    ViewPlan viewPlan = ViewPlan.Create(doc, vft.Id, level3.Id);\n}"}
{"prompt":"Aplica aislamiento térmico de 25mm a todas las tuberías de agua caliente.","completion":"PipeInsulationType insulationType = new FilteredElementCollector(doc).OfClass(typeof(PipeInsulationType)).FirstOrDefault() as PipeInsulationType;\nPipingSystemType hotWaterSystem = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).Cast<PipingSystemType>().FirstOrDefault(s => s.Name.Contains(\"Hot Water\") || s.Name.Contains(\"Agua Caliente\"));\n\nif (insulationType != null && hotWaterSystem != null)\n{\n    List<Pipe> pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast<Pipe>().Where(p => \n    {\n        Parameter systemParam = p.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM);\n        return systemParam != null && systemParam.HasValue && systemParam.AsElementId() == hotWaterSystem.Id;\n    }).ToList();\n    \n    foreach(Pipe p in pipes)\n    {\n        PipeInsulation.Create(doc, p.Id, insulationType.Id, UnitUtils.ConvertToInternalUnits(25, UnitTypeId.Millimeters));\n    }\n}"}
{"prompt":"Generate an MEP space for each room on Level 1","completion":"string levelName = \"Level 1\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    FilteredElementCollector roomCollector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WherePasses(new ElementLevelFilter(targetLevel.Id));\n    foreach (Room room in roomCollector.ToElements().Cast<Room>())\n    {\n        LocationPoint locPoint = room.Location as LocationPoint;\n        if (locPoint != null)\n        {\n            UV point = new UV(locPoint.Point.X, locPoint.Point.Y);\n            doc.Create.NewSpace(targetLevel, point);\n        }\n    }\n}"}
{"prompt":"Create a new level named 'Basement Floor' at an elevation of -4.5 meters.","completion":"double elevationInternal = UnitUtils.ConvertToInternalUnits(-4.5, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevationInternal);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Basement Floor\";\n}"}
{"prompt":"Cambia el tipo de la ventana seleccionada al tipo 'Fija 122x60'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una ventana\");\nFamilySymbol newType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name == \"Fija 122x60\");\nif (pickedRef != null && newType != null)\n{\n    FamilyInstance window = doc.GetElement(pickedRef.ElementId) as FamilyInstance;\n    if (window != null)\n    {\n        window.Symbol = newType;\n    }\n}"}
{"prompt":"Find a wall by searching for the value 'W-01' in its Mark parameter.","completion":"string markValue = \"W-01\";\nElementId markParamId = new ElementId(BuiltInParameter.ALL_MODEL_MARK);\nParameterValueProvider pvp = new ParameterValueProvider(markParamId);\nFilterStringRuleEvaluator evaluator = new FilterStringEquals();\nFilterRule rule = new FilterStringRule(pvp, evaluator, markValue);\nElementFilter filter = new ElementParameterFilter(rule);\nWall wall = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().WherePasses(filter).FirstOrDefault() as Wall;"}
{"prompt":"Aplica el estilo visual 'Rayos X' a la vista 3D activa.","completion":"View3D view3D = doc.ActiveView as View3D;\nif (view3D != null && !view3D.IsTemplate)\n{\n    view3D.DisplayStyle = DisplayStyle.Wireframe; \/\/ Simula el efecto 'Rayos X'\n}"}
{"prompt":"Crea un conducto eléctrico de 1 pulgada de diámetro.","completion":"using (Transaction t = new Transaction(doc, \"Create Conduit\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    ElementId conduitTypeId = new FilteredElementCollector(doc).OfClass(typeof(ConduitType)).FirstElementId();\n\n    if (level != null && conduitTypeId != null && conduitTypeId != ElementId.InvalidElementId)\n    {\n        XYZ start = new XYZ(0, 0, 3 \/ 0.3048);\n        XYZ end = new XYZ(5 \/ 0.3048, 0, 3 \/ 0.3048);\n        Conduit conduit = Conduit.Create(doc, conduitTypeId, start, end, level.Id);\n\n        if (conduit != null)\n        {\n            Parameter diameterParam = conduit.get_Parameter(BuiltInParameter.RBS_CONDUIT_DIAMETER_PARAM);\n            if (diameterParam != null && !diameterParam.IsReadOnly)\n            {\n                diameterParam.Set(1.0 \/ 12.0);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea 8 ejes horizontales separados por 10.3 metros.","completion":"double separation = UnitUtils.ConvertToInternalUnits(10.3, UnitTypeId.Meters);\nfor(int i = 0; i < 8; i++)\n{\n    \/\/ Create a default 50ft long grid line\n    Line line = Line.CreateBound(new XYZ(0, i * separation, 0), new XYZ(50, i * separation, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Sitúa un rociador en las coordenadas (8,1,2).","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol sprinklerSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Sprinklers).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (level != null && sprinklerSymbol != null)\n{\n    if (!sprinklerSymbol.IsActive) sprinklerSymbol.Activate();\n    XYZ placementPoint = new XYZ(UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters));\n    doc.Create.NewFamilyInstance(placementPoint, sprinklerSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n}"}
{"prompt":"Export the current 3D view to NWC for Navisworks.","completion":"View3D view3d = doc.ActiveView as View3D;\n\nif (view3d != null)\n{\n    string folderPath = \"C:\/RevitExports\/\";\n    string fileName = view3d.Name + \".nwc\";\n    NavisworksExportOptions options = new NavisworksExportOptions();\n    options.ExportScope = NavisworksExportScope.View;\n    options.ViewId = view3d.Id;\n    doc.Export(folderPath, fileName, options);\n}"}
{"prompt":"Pinta la cara interior de los muros exteriores con 'Pintura Blanca'.","completion":"using(Transaction t = new Transaction(doc, \"Paint Walls\"))\n{\n    t.Start();\n    Material paintMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m => m.Name == \"Pintura Blanca\");\n    var exteriorWalls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Cast<Wall>().Where(w => w.WallType.Function == WallFunction.Exterior).ToList();\n    if(paintMaterial != null)\n    {\n        foreach (Wall w in exteriorWalls)\n        {\n            IList<Reference> interiorFaceRefs = HostObjectUtils.GetSideFaces(w, ShellLayerType.Interior);\n            if(interiorFaceRefs.Count > 0)\n            {\n                Face interiorFace = w.GetGeometryObjectFromReference(interiorFaceRefs.First()) as Face;\n                if (interiorFace != null)\n                {\n                    doc.Paint(w.Id, interiorFace, paintMaterial.Id);\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Add a reference point at coordinates (1,1,6) inside the family editor.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(1,1,6));"}
{"prompt":"Coloca una instancia de la familia 'Silla 115x60' en el centro de la habitación 'Despacho 97'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 115\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Ventana Fija 97x60\") as FamilySymbol;\nif(furnitureSymbol != null && !furnitureSymbol.IsActive) furnitureSymbol.Activate();\nif(room != null)\n{\n    LocationPoint roomCenter = room.Location as LocationPoint;\n    if(roomCenter != null && furnitureSymbol != null && room.Level != null)\n    {\n        doc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Obtén el tipo de sistema de una tubería seleccionada.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una tubería\");\n\nPipingSystemType systemType = null;\nif (pickedRef != null)\n{\n    Pipe pipe = doc.GetElement(pickedRef.ElementId) as Pipe;\n    if (pipe != null)\n    {\n        Parameter systemTypeParam = pipe.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM);\n        if (systemTypeParam != null && systemTypeParam.HasValue)\n        {\n            systemType = doc.GetElement(systemTypeParam.AsElementId()) as PipingSystemType;\n        }\n    }\n}\n"}
{"prompt":"Select all walls on 'Level 7' and change their comment to 'REVIEW INSULATION'.","completion":"string levelName = \"Level 7\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(targetLevel.Id);\n    FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(levelFilter);\n    foreach (Element wall in collector)\n    {\n        Parameter commentsParam = wall.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n        if (commentsParam != null && !commentsParam.IsReadOnly) { commentsParam.Set(\"REVIEW INSULATION\"); }\n    }\n}"}
{"prompt":"Build a global length parameter named 'CorridorWidth' with a value of 1.7m.","completion":"string paramName = \"CorridorWidth\";\nGlobalParameter gp = GlobalParameter.Create(doc, paramName, SpecTypeId.Length);\n\nif (gp != null)\n{\n    gp.SetValue(new DoubleParameterValue(UnitUtils.ConvertToInternalUnits(1.7, UnitTypeId.Meters)));\n}"}
{"prompt":"Averigua quién es el propietario de un elemento seleccionado.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un elemento\");\n\nWorksharingTooltipInfo info = null;\nif (pickedRef != null)\n{\n    info = WorksharingUtils.GetWorksharingTooltipInfo(doc, pickedRef.ElementId);\n}\n"}
{"prompt":"Añade una línea de rejilla horizontal a un muro cortina a 1.5 metros de altura.","completion":"using (Transaction t = new Transaction(doc, \"Add Curtain Grid Line\"))\n{\n    t.Start();\n    Wall cw = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Cast<Wall>().FirstOrDefault(w => w.CurtainGrid != null);\n\n    if (cw != null)\n    {\n        CurtainGrid cg = cw.CurtainGrid;\n        if (cg != null)\n        {\n            LocationCurve locCurve = cw.Location as LocationCurve;\n            if(locCurve != null)\n            {\n                 XYZ startPoint = locCurve.Curve.GetEndPoint(0);\n                 XYZ endPoint = locCurve.Curve.GetEndPoint(1);\n                 XYZ midPoint = (startPoint + endPoint) \/ 2;\n                 XYZ gridLinePoint = new XYZ(midPoint.X, midPoint.Y, 1.5 \/ 0.3048);\n                 cg.AddGridLine(false, gridLinePoint, false);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Hide all annotation elements in the active view.","completion":"if (doc.ActiveView != null)\n{\n    List<BuiltInCategory> annotationCategories = new List<BuiltInCategory>\n    {\n        BuiltInCategory.OST_GenericAnnotation,\n        BuiltInCategory.OST_TextNotes,\n        BuiltInCategory.OST_Tags,\n        BuiltInCategory.OST_Dimensions,\n        BuiltInCategory.OST_DetailComponents\n    };\n    ElementMulticategoryFilter multiCategoryFilter = new ElementMulticategoryFilter(annotationCategories);\n    ICollection<ElementId> elementsToHide = new FilteredElementCollector(doc, doc.ActiveView.Id).WherePasses(multiCategoryFilter).ToElementIds();\n    if(elementsToHide.Any())\n    {\n        doc.ActiveView.HideElements(elementsToHide);\n    }\n}"}
{"prompt":"Gira un elemento seleccionado 91 grados sobre su eje Z.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un elemento para rotar\");\nElement elem = doc.GetElement(pickedRef.ElementId);\nLocationPoint lp = elem.Location as LocationPoint;\nLine axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\nElementTransformUtils.RotateElement(doc, elem.Id, axis, Math.PI \/ 91);"}
{"prompt":"Vincula un archivo DWG como referencia en la vista activa.","completion":"string filePath = \"C:\/CAD_Files\/Base_Plan.dwg\";\nDWGImportOptions options = new DWGImportOptions();\noptions.ColorMode = ImportColorMode.Preserved;\nElementId linkedFileId;\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    doc.Link(filePath, options, activeView, out linkedFileId);\n}"}
{"prompt":"Crea un nuevo tipo de puerta llamado 'Puerta RF-90' y establece su resistencia al fuego a '90 min'.","completion":"string newTypeName = \"Puerta RF-90\";\nFamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (doorTypeToDuplicate != null)\n{\n    FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\n    if (newDoorType != null)\n    {\n        Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n        if (fireRatingParam != null && !fireRatingParam.IsReadOnly) fireRatingParam.Set(\"90 min\");\n    }\n}"}
{"prompt":"Add a reference point at coordinates (4,5,6) inside the family editor.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(4,5,6));"}
{"prompt":"Change the type of a selected floor to 'Concrete 18cm'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a floor\");\n\nif (pickedRef != null)\n{\n    Floor floorToChange = doc.GetElement(pickedRef) as Floor;\n    FloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name == \"Concrete 18cm\");\n    \n    if (floorToChange != null && newType != null)\n    {\n        floorToChange.ChangeTypeId(newType.Id);\n    }\n}"}
{"prompt":"Crea un suelo con un contorno de 10 por 8 metros.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\n\nif (level != null && floorType != null)\n{\n    double width = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\n    double length = UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters);\n    XYZ p1 = new XYZ(0, 0, 0);\n    XYZ p2 = new XYZ(width, 0, 0);\n    XYZ p3 = new XYZ(width, length, 0);\n    XYZ p4 = new XYZ(0, length, 0);\n    CurveLoop loop = new CurveLoop();\n    loop.Append(Line.CreateBound(p1, p2));\n    loop.Append(Line.CreateBound(p2, p3));\n    loop.Append(Line.CreateBound(p3, p4));\n    loop.Append(Line.CreateBound(p4, p1));\n    Floor.Create(doc, new List<CurveLoop> { loop }, floorType.Id, level.Id);\n}"}
{"prompt":"Obtain all instances of the Furniture category.","completion":"List<Element> furnitureInstances = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsNotElementType().ToList();"}
{"prompt":"Get a list of all family type names from the 'Furniture' category.","completion":"List<Element> furnitureTypes = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().ToList();\nList<string> typeNames = new List<string>();\nforeach(Element type in furnitureTypes)\n{\n    typeNames.Add(type.Name);\n}\n"}
{"prompt":"Duplicate the 'Generic - 148mm' wall type and name it 'Interior - 10cm Plaster'.","completion":"string originalName = \"Generic - 148mm\";\nstring newName = \"Interior - 10cm Plaster\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif(originalType!=null)\n    originalType.Duplicate(newName);"}
{"prompt":"Duplicate the 'Generic - 141mm' wall type and name it 'Interior - 15cm Plaster'.","completion":"string originalName = \"Generic - 141mm\";\nstring newName = \"Interior - 15cm Plaster\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif(originalType!=null)\n    originalType.Duplicate(newName);"}
{"prompt":"Put lighting posts every 10m along a 100m path.","completion":"FamilySymbol lightSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsElementType().FirstOrDefault(s => s.Name.Contains(\"Post\") || s.Name.Contains(\"Pole\")) as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (lightSymbol != null && level != null)\n{\n    if (!lightSymbol.IsActive)\n    {\n        lightSymbol.Activate();\n    }\n    double spacing = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\n    double pathLength = UnitUtils.ConvertToInternalUnits(100, UnitTypeId.Meters);\n    int postCount = (int)(pathLength \/ spacing);\n    for (int i = 0; i <= postCount; i++)\n    {\n        XYZ point = new XYZ(i * spacing, 0, 0);\n        doc.Create.NewFamilyInstance(point, lightSymbol, level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Copia el nivel 2 con un desfase de 3m y llámalo 'Mezanine'.","completion":"string levelName = \"Nivel 2\";\nLevel levelToCopy = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (levelToCopy != null)\n{\n    double offset = UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, levelToCopy.Elevation + offset);\n    newLevel.Name = \"Mezanine\";\n}"}
{"prompt":"Cambia el nivel de detalle de la vista activa a 'Medio'.","completion":"View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.DetailLevel = ViewDetailLevel.Medium;\n}"}
{"prompt":"Primero, crea un nuevo tipo de muro de 18cm llamado 'Muro Interior Acústico', y luego úsalo para crear un muro de 8m en el Nivel 1.","completion":"string newTypeName = \"Muro Interior Acústico\";\nWallType newWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Name == newTypeName) as WallType;\n\nif (newWallType == null)\n{\n    WallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n    if (wallTypeToDuplicate != null)\n    {\n        newWallType = wallTypeToDuplicate.Duplicate(newTypeName) as WallType;\n        if (newWallType != null)\n        {\n            CompoundStructure cs = newWallType.GetCompoundStructure();\n            if (cs != null)\n            {\n                cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(18, UnitTypeId.Centimeters));\n                newWallType.SetCompoundStructure(cs);\n            }\n        }\n    }\n}\n\nif (newWallType != null)\n{\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\n    if (level != null)\n    {\n        Line wallCurve = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters), 0, 0));\n        \/\/ Use a default height of 10ft as it's not specified in the prompt\n        double height = 10.0;\n        Wall.Create(doc, wallCurve, newWallType.Id, level.Id, height, 0, false, false);\n    }\n}"}
{"prompt":"Crea una vista 3D con la caja de sección activada.","completion":"string viewName = \"Vista 3D con Caja de Sección\";\nViewFamilyType vft3D = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft3D != null)\n{\n    View3D view3d = View3D.CreateIsometric(doc, vft3D.Id);\n    if (view3d != null)\n    {\n        view3d.Name = viewName;\n        view3d.IsSectionBoxActive = true;\n    }\n}"}
{"prompt":"Crea una nueva tabla de planificación para Pilares Estructurales.","completion":"string scheduleName = \"Tabla de Pilares Estructurales\";\nElementId categoryId = new ElementId(BuiltInCategory.OST_StructuralColumns);\nViewSchedule schedule = ViewSchedule.CreateSchedule(doc, categoryId);\nschedule.Name = scheduleName;"}
{"prompt":"Desune la geometría de dos elementos dados.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference ref1 = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona el primer elemento\");\nReference ref2 = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona el segundo elemento\");\n\nif (ref1 != null && ref2 != null)\n{\n    Element e1 = doc.GetElement(ref1.ElementId);\n    Element e2 = doc.GetElement(ref2.ElementId);\n    if (e1 != null && e2 != null)\n    {\n        JoinGeometryUtils.UnjoinGeometry(doc, e1, e2);\n    }\n}"}
{"prompt":"Create a new pipe type with Copper material.","completion":"string newTypeName = \"Copper Pipe\";\nPipeType pipeTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(PipeType)).FirstOrDefault() as PipeType;\nMaterial copper = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name.Contains(\"Copper\")) as Material;\n\nif (pipeTypeToDuplicate != null && copper != null)\n{\n    PipeType newType = pipeTypeToDuplicate.Duplicate(newTypeName) as PipeType;\n    if (newType != null)\n    {\n        Parameter materialParam = newType.get_Parameter(BuiltInParameter.MATERIAL_ID_PARAM);\n        if (materialParam != null && !materialParam.IsReadOnly) materialParam.Set(copper.Id);\n    }\n}"}
{"prompt":"Crea un suelo en la habitación 'Oficina 101' usando el tipo de piso 'Genérico 150mm'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Oficina 101\") as Room;\n\nif (room != null)\n{\n    Level level = room.Level;\n    FloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault(ft => ft.Name == \"Genérico 150mm\") as FloorType;\n\n    if (level != null && floorType != null)\n    {\n        SpatialElementBoundaryOptions options = new SpatialElementBoundaryOptions();\n        IList<IList<BoundarySegment>> boundarySegments = room.GetBoundarySegments(options);\n        IList<BoundarySegment> outerBoundary = boundarySegments.FirstOrDefault();\n\n        if (outerBoundary != null && outerBoundary.Any())\n        {\n            CurveLoop curveLoop = new CurveLoop();\n            foreach (BoundarySegment segment in outerBoundary)\n            {\n                curveLoop.Append(segment.GetCurve());\n            }\n            Floor.Create(doc, new List<CurveLoop> { curveLoop }, floorType.Id, level.Id);\n        }\n    }\n}"}
{"prompt":"Actualiza el tipo de una losa por uno que contenga 'Concreto'.","completion":"Floor floorToChange = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault() as Floor;\nif(floorToChange != null)\n{\n    FloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name.Contains(\"Concreto\") || ft.Name.Contains(\"Concrete\"));\n    if(newType!=null)\n        floorToChange.ChangeTypeId(newType.Id);\n}"}
{"prompt":"Create a 30cm 'Double-Wall' type and then create a wall of that type.","completion":"string newTypeName = \"Double-Wall\";\nWallType newWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == newTypeName) as WallType;\nif (newWallType == null)\n{\n    WallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n    if(wallTypeToDuplicate != null)\n    {\n        newWallType = wallTypeToDuplicate.Duplicate(newTypeName) as WallType;\n        if(newWallType!=null)\n        {\n            CompoundStructure cs = newWallType.GetCompoundStructure();\n            if(cs != null)\n            {\n                cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(0.3, UnitTypeId.Meters));\n                newWallType.SetCompoundStructure(cs);\n            }\n        }\n    }\n}\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nLine wallCurve = Line.CreateBound(XYZ.Zero, new XYZ(10,0,0));\nWall.Create(doc, wallCurve, newWallType.Id, level.Id, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0, false, false);"}
{"prompt":"Duplicate the 'Generic - 191mm' wall type and name it 'Interior - 15cm Plaster'.","completion":"string originalName = \"Generic - 191mm\";\nstring newName = \"Interior - 15cm Plaster\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif(originalType!=null)\n    originalType.Duplicate(newName);"}
{"prompt":"Crea un nuevo tipo de texto de 5mm de color verde.","completion":"using (Transaction t = new Transaction(doc, \"Create Green Text Type\"))\n{\n    t.Start();\n    string newTypeName = \"5mm Verde\";\n    TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\n    if (defaultType != null)\n    {\n        TextNoteType newType = defaultType.Duplicate(newTypeName) as TextNoteType;\n        if (newType != null)\n        {\n            Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n            if (textSizeParam != null && !textSizeParam.IsReadOnly)\n            {\n                textSizeParam.Set(5 \/ 304.8);\n            }\n            Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n            if (lineColorParam != null && !lineColorParam.IsReadOnly)\n            {\n                 lineColorParam.Set(65280);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Copy the 'Generic - 146mm' wall type and name it 'Interior - 20cm Plaster'.","completion":"string originalName = \"Generic - 146mm\";\nstring newName = \"Interior - 20cm Plaster\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif (originalType != null)\n{\n    WallType newType = originalType.Duplicate(newName) as WallType;\n}"}
{"prompt":"Crea los worksets 'Arquitectura', 'Estructura' y 'MEP'.","completion":"if (doc.IsWorkshared)\n{\n    Workset.Create(doc, \"Arquitectura\");\n    Workset.Create(doc, \"Estructura\");\n    Workset.Create(doc, \"MEP\");\n}"}
{"prompt":"Set the sill height of all windows to 900mm.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits(900, UnitTypeId.Millimeters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Create 4 vertical grids spaced 10 meters apart.","completion":"double separation = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\nfor(int i=0; i<4; i++)\n{\n    Line line = Line.CreateBound(new XYZ(i * separation, 0, 0), new XYZ(i * separation, 40, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Clona el tipo de muro 'Genérico - 131mm' y nómbralo 'Interior - 15cm Yeso'.","completion":"string originalName = \"Genérico - 131mm\";\nstring newName = \"Interior - 15cm Yeso\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif (originalType != null)\n{\n    WallType newType = originalType.Duplicate(newName) as WallType;\n}"}
{"prompt":"Duplica la vista de planta 'Nivel 2' y conviértela en una plantilla de vista.","completion":"using (Transaction t = new Transaction(doc, \"Create View Template\"))\n{\n    t.Start();\n    ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().FirstOrDefault(v => v.Name == \"Nivel 2\");\n    string templateName = \"Plantilla Nivel 2\";\n\n    if (viewToDuplicate != null)\n    {\n        ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n        View newView = doc.GetElement(newViewId) as View;\n        if (newView != null)\n        {\n           \/\/ Direct conversion to a template may not be available in older APIs.\n           \/\/ A common workaround is to set the IsTemplate property if available and writable, \n           \/\/ which is not the case here. This is left as a comment for conceptual understanding.\n           \/\/ newView.IsTemplate = true;\n            newView.Name = templateName;\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create a vertical shaft opening from the base level to the top level.","completion":"using (Transaction t = new Transaction(doc, \"Create Shaft\"))\n{\n    t.Start();\n    Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderBy(l => l.ProjectElevation).FirstOrDefault();\n    Level topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderByDescending(l => l.ProjectElevation).FirstOrDefault();\n\n    if (bottomLevel != null && topLevel != null)\n    {\n        XYZ p1 = new XYZ(2 \/ 0.3048, 2 \/ 0.3048,0);\n        XYZ p2 = new XYZ(5 \/ 0.3048, 2 \/ 0.3048,0);\n        XYZ p3 = new XYZ(5 \/ 0.3048, 5 \/ 0.3048,0);\n        XYZ p4 = new XYZ(2 \/ 0.3048, 5 \/ 0.3048,0);\n        CurveArray profile = new CurveArray();\n        profile.Append(Line.CreateBound(p1,p2));\n        profile.Append(Line.CreateBound(p2,p3));\n        profile.Append(Line.CreateBound(p3,p4));\n        profile.Append(Line.CreateBound(p4,p1));\n        doc.Create.NewOpening(bottomLevel, topLevel, profile);\n    }\n    t.Commit();\n}"}
{"prompt":"Modifica el parámetro 'Función' de todos los muros seleccionados a 'CW 100-25'.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nif (selectedIds.Count > 0)\n{\n    foreach(ElementId id in selectedIds)\n    {\n        Wall wall = doc.GetElement(id) as Wall;\n        if (wall != null)\n        {\n            Parameter funcParam = wall.get_Parameter(BuiltInParameter.FUNCTION_PARAM);\n            if (funcParam != null && !funcParam.IsReadOnly)\n            {\n                funcParam.Set(1); \/\/ 1 corresponde a CW 100-25\n            }\n        }\n    }\n}"}
{"prompt":"Mueve un muro 5 metros a la derecha.","completion":"Wall wall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\n\nif (wall != null)\n{\n    XYZ translation = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters),0,0);\n    ElementTransformUtils.MoveElement(doc, wall.Id, translation);\n}"}
{"prompt":"Crea una vista de planta para el 'Nivel 1'.","completion":"string levelName = \"Nivel 1\";\nLevel level3 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.FloorPlan);\n\nif (level3 != null && vft != null)\n{\n    ViewPlan viewPlan = ViewPlan.Create(doc, vft.Id, level3.Id);\n}"}
{"prompt":"Cambia el tipo de todas las ventanas de 'Fijo' a 'Abatible'.","completion":"FamilySymbol newType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name.Contains(\"Abatible\"));\nFamilySymbol oldType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name.Contains(\"Fijo\"));\n\nif (newType != null && oldType != null)\n{\n    List<FamilyInstance> windowsToChange = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().Where(fi => fi.Symbol.Id == oldType.Id).ToList();\n    foreach (FamilyInstance window in windowsToChange)\n    {\n        window.Symbol = newType;\n    }\n}"}
{"prompt":"Create a new Ribbon panel named 'My Tools' with a button.","completion":""}
{"prompt":"Load the 'Table.rfa' family and place it at (9,8,1) on Level 2","completion":"string levelName = \"Level 2\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nstring familyName = \"Table\";\nFamilySymbol symbol = new FilteredElementCollector(doc).OfClass(typeof(FamilySymbol)).Cast<FamilySymbol>().FirstOrDefault(fs => fs.Family.Name == familyName);\nif (symbol != null && targetLevel != null)\n{\n    if (!symbol.IsActive) { symbol.Activate(); doc.Regenerate(); }\n    XYZ location = new XYZ(9, 8, 1);\n    doc.Create.NewFamilyInstance(location, symbol, targetLevel, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n}"}
{"prompt":"Put a window 1m wide and 1.2m high into a wall.","completion":"FamilySymbol originalSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nWall hostWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\n\nif (originalSymbol != null && hostWall != null)\n{\n    string newTypeName = \"Window 1.0m x 1.2m\";\n    FamilySymbol newSymbol = originalSymbol.Duplicate(newTypeName) as FamilySymbol;\n    if (newSymbol == null) return;\n\n    if (!newSymbol.IsActive)\n    {\n        newSymbol.Activate();\n    }\n\n    Parameter widthParam = newSymbol.get_Parameter(BuiltInParameter.WINDOW_WIDTH);\n    Parameter heightParam = newSymbol.get_Parameter(BuiltInParameter.WINDOW_HEIGHT);\n\n    if (widthParam != null && heightParam != null && !widthParam.IsReadOnly && !heightParam.IsReadOnly)\n    {\n        widthParam.Set(UnitUtils.ConvertToInternalUnits(1.0, UnitTypeId.Meters));\n        heightParam.Set(UnitUtils.ConvertToInternalUnits(1.2, UnitTypeId.Meters));\n    }\n\n    Level level = doc.GetElement(hostWall.LevelId) as Level;\n    LocationCurve locationCurve = hostWall.Location as LocationCurve;\n    if (level != null && locationCurve != null)\n    {\n        XYZ insertionPoint = locationCurve.Curve.Evaluate(0.5, true);\n        doc.Create.NewFamilyInstance(insertionPoint, newSymbol, hostWall, level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Encuentra todos los pilares estructurales en el Nivel 3 que sean de hormigón.","completion":"string levelName = \"Nivel 3\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().WherePasses(new ElementLevelFilter(targetLevel.Id));\n    List<ElementId> concreteColumnIds = new List<ElementId>();\n    foreach (Element column in collector)\n    {\n        Parameter materialParam = column.get_Parameter(BuiltInParameter.STRUCTURAL_MATERIAL_PARAM);\n        if (materialParam != null && materialParam.HasValue)\n        {\n            ElementId materialId = materialParam.AsElementId();\n            if (materialId != ElementId.InvalidElementId)\n            {\n                Material material = doc.GetElement(materialId) as Material;\n                if (material != null && material.Name.ToLower().Contains(\"hormigón\"))\n                {\n                    concreteColumnIds.Add(column.Id);\n                }\n            }\n        }\n    }\n    uidoc.Selection.SetElementIds(concreteColumnIds);\n}"}
{"prompt":"Generate a new level named 'Mezzanine' at 7.6 meters elevation.","completion":"string levelName = \"Mezzanine\";\ndouble elevation = UnitUtils.ConvertToInternalUnits(7.6, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Configure the visibility of the 'Furniture' category to false in the active view.","completion":"Category furnitureCat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Furniture);\nif (furnitureCat != null && doc.ActiveView != null)\n{\n    doc.ActiveView.SetCategoryHidden(furnitureCat.Id, true);\n}"}
{"prompt":"Create a roof by footprint on the 'Roof Level'.","completion":"using (Transaction t = new Transaction(doc, \"Create Roof\"))\n{\n    t.Start();\n    Level roofLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Roof Level\");\n    RoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n\n    if (roofLevel != null && roofType != null)\n    {\n        CurveArray roofProfile = new CurveArray();\n        roofProfile.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(20 \/ 0.3048,0,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(20 \/ 0.3048,0,0), new XYZ(20 \/ 0.3048,30 \/ 0.3048,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(20 \/ 0.3048,30 \/ 0.3048,0), new XYZ(0,30 \/ 0.3048,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(0,30 \/ 0.3048,0), new XYZ(0,0,0)));\n        ModelCurveArray mapping = new ModelCurveArray();\n        doc.Create.NewFootPrintRoof(roofProfile, roofLevel, roofType, out mapping);\n    }\n    t.Commit();\n}"}
{"prompt":"Build a grid of 5 horizontal and 5 vertical grids, spaced 6 meters apart.","completion":"double spacing = UnitUtils.ConvertToInternalUnits(6, UnitTypeId.Meters);\nint count = 5;\nfor (int i = 0; i < count; i++)\n{\n    Line line = Line.CreateBound(new XYZ(0, i * spacing, 0), new XYZ((count - 1) * spacing, i * spacing, 0));\n    Grid.Create(doc, line);\n}\nfor (int i = 0; i < count; i++)\n{\n    Line line = Line.CreateBound(new XYZ(i * spacing, 0, 0), new XYZ(i * spacing, (count - 1) * spacing, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Assign the 'Comments' parameter for all doors on Level 1 to 'Fire Rating - 92 min'.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\n\nif (level1 != null)\n{\n    List<FamilyInstance> doorsOnLevel1 = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsNotElementType().Cast<FamilyInstance>().Where(fi => fi.LevelId == level1.Id).ToList();\n    foreach(FamilyInstance door in doorsOnLevel1)\n    {\n        Parameter commentsParam = door.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n        if (commentsParam != null && !commentsParam.IsReadOnly) commentsParam.Set(\"Fire Rating - 92 min\");\n    }\n}"}
{"prompt":"Carga la familia 'Mesa.rfa' y colócala en (5,5,0) en el Nivel 1.","completion":"string familyPath = \"C:\/Rutas\/Comunes\/Mesa.rfa\";\nFamily deskFamily = null;\nbool familyLoaded = doc.LoadFamily(familyPath, out deskFamily);\n\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\n\nif (familyLoaded && deskFamily != null && level1 != null)\n{\n    FamilySymbol deskSymbol = doc.GetElement(deskFamily.GetFamilySymbolIds().FirstOrDefault()) as FamilySymbol;\n    if (deskSymbol != null)\n    {\n        if (!deskSymbol.IsActive) deskSymbol.Activate();\n        XYZ point = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0);\n        doc.Create.NewFamilyInstance(point, deskSymbol, level1, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Construct 10 architectural worksets.","completion":"List<string> worksetNames = new List<string> { \"TAD_ARQ_WALLS\", \"TAD_ARQ_FINISHES\", \"TAD_ARQ_CEILINGS\", \"TAD_ARQ_FLOORS\", \"TAD_ARQ_RAILINGS\", \"TAD_ARQ_WINDOWS\", \"TAD_ARQ_CARPENTRY\", \"TAD_ARQ_FURNITURE\", \"TAD_ARQ_PLUMBING\", \"TAD_ARQ_EXTERIOR\" };\nforeach(string name in worksetNames)\n{\n    Workset.Create(doc, name);\n}"}
{"prompt":"Turn a selected element 93 degrees around its Z-axis.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select an element to rotate\");\nElement elem = doc.GetElement(pickedRef.ElementId);\nLocationPoint lp = elem.Location as LocationPoint;\nLine axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\nElementTransformUtils.RotateElement(doc, elem.Id, axis, Math.PI \/ 93);"}
{"prompt":"Copy level 4 with a 3m offset and name it 'Mezzanine'.","completion":"string levelName = \"Level 4\";\nLevel levelToCopy = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (levelToCopy != null)\n{\n    double offset = UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, levelToCopy.Elevation + offset);\n    newLevel.Name = \"Mezzanine\";\n}"}
{"prompt":"Sitúa una ventana de 1x1.2 metros en la pared más cercana.","completion":"FamilySymbol originalSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nWall hostWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\n\nif (originalSymbol != null && hostWall != null)\n{\n    string newTypeName = \"Window 1.0m x 1.2m\";\n    FamilySymbol newSymbol = originalSymbol.Duplicate(newTypeName) as FamilySymbol;\n    if (newSymbol == null) return;\n\n    if (!newSymbol.IsActive)\n    {\n        newSymbol.Activate();\n    }\n\n    Parameter widthParam = newSymbol.get_Parameter(BuiltInParameter.WINDOW_WIDTH);\n    Parameter heightParam = newSymbol.get_Parameter(BuiltInParameter.WINDOW_HEIGHT);\n\n    if (widthParam != null && heightParam != null && !widthParam.IsReadOnly && !heightParam.IsReadOnly)\n    {\n        widthParam.Set(UnitUtils.ConvertToInternalUnits(1.0, UnitTypeId.Meters));\n        heightParam.Set(UnitUtils.ConvertToInternalUnits(1.2, UnitTypeId.Meters));\n    }\n\n    Level level = doc.GetElement(hostWall.LevelId) as Level;\n    LocationCurve locationCurve = hostWall.Location as LocationCurve;\n    if (level != null && locationCurve != null)\n    {\n        XYZ insertionPoint = locationCurve.Curve.Evaluate(0.5, true);\n        doc.Create.NewFamilyInstance(insertionPoint, newSymbol, hostWall, level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Generate a group from the current selection and move it 10 meters to the right.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds != null && selectedIds.Count > 0)\n{\n    Group group = doc.Create.NewGroup(selectedIds);\n    if (group != null)\n    {\n        XYZ translation = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), 0, 0);\n        ElementTransformUtils.MoveElement(doc, group.Id, translation);\n    }\n}"}
{"prompt":"Load a DWG link, preserving its colors.","completion":"string filePath = \"C:\/CAD\/Plans.dwg\";\nDWGImportOptions opts = new DWGImportOptions();\nopts.ColorMode = ImportColorMode.Preserved;\nElementId linkId;\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    doc.Link(filePath, opts, activeView, out linkId);\n}"}
{"prompt":"Crea una vista 3D con la caja de sección activada.","completion":"string viewName = \"Vista 3D con Caja de Sección\";\nViewFamilyType vft3D = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft3D != null)\n{\n    View3D view3d = View3D.CreateIsometric(doc, vft3D.Id);\n    if (view3d != null)\n    {\n        view3d.Name = viewName;\n        view3d.IsSectionBoxActive = true;\n    }\n}"}
{"prompt":"Aplica aislamiento térmico de 25mm a todas las tuberías de agua caliente.","completion":"PipeInsulationType insulationType = new FilteredElementCollector(doc).OfClass(typeof(PipeInsulationType)).FirstOrDefault() as PipeInsulationType;\nPipingSystemType hotWaterSystem = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).Cast<PipingSystemType>().FirstOrDefault(s => s.Name.Contains(\"Hot Water\") || s.Name.Contains(\"Agua Caliente\"));\n\nif (insulationType != null && hotWaterSystem != null)\n{\n    List<Pipe> pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast<Pipe>().Where(p => \n    {\n        Parameter systemParam = p.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM);\n        return systemParam != null && systemParam.HasValue && systemParam.AsElementId() == hotWaterSystem.Id;\n    }).ToList();\n    \n    foreach(Pipe p in pipes)\n    {\n        PipeInsulation.Create(doc, p.Id, insulationType.Id, UnitUtils.ConvertToInternalUnits(25, UnitTypeId.Millimeters));\n    }\n}"}
{"prompt":"Create a 'Roof Terrace' level at 19m.","completion":"string levelName = \"Roof Terrace\";\ndouble elev = UnitUtils.ConvertToInternalUnits(19, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elev);\nnewLevel.Name = levelName;\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Create a wall 5 meters long and 3 meters high.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (level != null && wallType != null)\n{\n    Line line = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0, 0));\n    Wall.Create(doc, line, wallType.Id, level.Id, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0.0, false, false);\n}"}
{"prompt":"Obtain the MEP space associated with the room 'Office 100'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Cast<Room>().FirstOrDefault(r => r.Name == \"Office 100\");\nList<Space> spaces = new List<Space>();\n\nif (room != null)\n{\n    spaces = new FilteredElementCollector(doc).OfClass(typeof(Space)).Cast<Space>().Where(s => s.Room != null && s.Room.Id == room.Id).ToList();\n}"}
{"prompt":"Ubica una instancia de la familia 'M_Chair-Breuer' en el centro de la habitación 'Despacho 101'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 101\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"M_Chair-Breuer\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);"}
{"prompt":"Retrieve all door families loaded in the project.","completion":"List<Family> doorFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.Id.IntegerValue == (int)BuiltInCategory.OST_Doors).ToList();"}
{"prompt":"Include a reference point at coordinates (1,1,5) inside the family editor.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(1,1,5));"}
{"prompt":"Create a new A2 sheet with the number 'A-201'.","completion":"string sheetNumber = \"A-201\";\nFamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (titleBlock != null)\n{\n    ViewSheet sheet = ViewSheet.Create(doc, titleBlock.Id);\n    if (sheet != null)\n    {\n        sheet.Name = \"Construction Details\";\n        sheet.SheetNumber = sheetNumber;\n    }\n}"}
{"prompt":"Rota un elemento seleccionado 94 grados sobre su eje Z.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un elemento para rotar\");\nElement elem = doc.GetElement(pickedRef.ElementId);\nLocationPoint lp = elem.Location as LocationPoint;\nLine axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\nElementTransformUtils.RotateElement(doc, elem.Id, axis, Math.PI \/ 94);"}
{"prompt":"Fetch the total number of warnings in the project.","completion":"int totalWarnings = doc.GetWarnings().Count;\n"}
{"prompt":"Clona el tipo de muro 'Genérico - 205mm' y nómbralo 'Interior - 15cm Yeso'.","completion":"string originalName = \"Genérico - 205mm\";\nstring newName = \"Interior - 15cm Yeso\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif(originalType!=null)\n    originalType.Duplicate(newName);"}
{"prompt":"Load a DWG link, preserving its colors.","completion":"string filePath = \"C:\/CAD\/Plans.dwg\";\nDWGImportOptions opts = new DWGImportOptions();\nopts.ColorMode = ImportColorMode.Preserved;\nElementId linkId;\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    doc.Link(filePath, opts, activeView, out linkId);\n}"}
{"prompt":"Copy the 'Generic - 163mm' wall type and name it 'Interior - 15cm Plaster'.","completion":"string originalName = \"Generic - 163mm\";\nstring newName = \"Interior - 15cm Plaster\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif(originalType!=null)\n    originalType.Duplicate(newName);"}
{"prompt":"Create a new revision and apply it to the active sheet.","completion":"Revision rev = Revision.Create(doc);\nViewSheet sheet = doc.ActiveView as ViewSheet;\n\nif (rev != null && sheet != null)\n{\n    rev.Description = \"Issued for Construction\";\n    rev.RevisionDate = DateTime.Now.ToString(\"yyyy-MM-dd\");\n    rev.IssuedBy = \"BIM Department\";\n    \n    ICollection<ElementId> revisions = sheet.GetAdditionalRevisionIds();\n    revisions.Add(rev.Id);\n    sheet.SetAdditionalRevisionIds(revisions);\n}"}
{"prompt":"Duplicate level 6 with a 2m offset and name it 'Mezzanine'.","completion":"string levelName = \"Level 6\";\nLevel levelToCopy = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (levelToCopy != null)\n{\n    double offset = UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, levelToCopy.Elevation + offset);\n    newLevel.Name = \"Mezzanine\";\n}"}
{"prompt":"Crea una vista de planta para el 'Nivel 3'.","completion":"string levelName = \"Nivel 3\";\nLevel level3 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.FloorPlan);\n\nif (level3 != null && vft != null)\n{\n    ViewPlan viewPlan = ViewPlan.Create(doc, vft.Id, level3.Id);\n}"}
{"prompt":"Encuentra todos los muros con más de 4 metros de altura.","completion":"double heightThreshold = UnitUtils.ConvertToInternalUnits(4, UnitTypeId.Meters);\nParameterValueProvider pvp = new ParameterValueProvider(new ElementId(BuiltInParameter.WALL_USER_HEIGHT_PARAM));\nFilterRule rule = new FilterDoubleRule(pvp, new FilterNumericGreater(), heightThreshold, 1e-6);\nList<Element> tallWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(new ElementParameterFilter(rule)).ToList();"}
{"prompt":"Create a new door type named 'FR-90 Door' and set its fire rating to '90 min'.","completion":"using (Transaction t = new Transaction(doc, \"Create Door Type\"))\n{\n    t.Start();\n    string newTypeName = \"FR-90 Door\";\n    FamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n    if (doorTypeToDuplicate != null)\n    {\n        FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\n        if (newDoorType != null)\n        {\n            Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n            if(fireRatingParam != null && !fireRatingParam.IsReadOnly)\n            {\n                fireRatingParam.Set(\"90 min\");\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Obtén el elemento anfitrión de la primera ventana que encuentres.","completion":"FamilyInstance windowInstance = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\n\nif (windowInstance != null)\n{\n    Element hostElement = windowInstance.Host;\n}"}
{"prompt":"Añade un punto al Path of Travel seleccionado.","completion":"\/\/ PathOfTravel related methods are likely inaccessible in this environment.\n\/\/ The following code is a placeholder to show the intent.\n\/*\nusing (Transaction t = new Transaction(doc, \"Update Path of Travel\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference pickedRef = localUidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un Path of Travel\");\n\n    if (pickedRef != null)\n    {\n        PathOfTravel pot = doc.GetElement(pickedRef) as PathOfTravel;\n        if (pot != null)\n        {\n            IList<XYZ> points = pot.GetPath();\n            if (points != null && points.Count >= 2)\n            {\n                XYZ midPoint = (points[0] + points[1]) \/ 2;\n                points.Insert(1, midPoint); \n                pot.Update(points);\n            }\n        }\n    }\n    t.Commit();\n}\n*\/"}
{"prompt":"Obtén todas las instancias de la categoría Mobiliario.","completion":"List<Element> furnitureInstances = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsNotElementType().ToList();"}
{"prompt":"Crea una nota de texto con una flecha apuntando a un elemento y una ubicación dadas.","completion":"using (Transaction t = new Transaction(doc, \"Create Text Note\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference target = localUidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un elemento para anotar\");\n    XYZ textLocation = localUidoc.Selection.PickPoint(\"Elige la ubicación del texto\");\n\n    View activeView = doc.ActiveView;\n    ElementId defaultTypeId = doc.GetDefaultElementTypeId(ElementTypeGroup.TextNoteType);\n\n    if (target != null && textLocation != null && activeView != null && defaultTypeId != ElementId.InvalidElementId)\n    {\n        TextNoteOptions opts = new TextNoteOptions(defaultTypeId);\n        opts.HorizontalAlignment = HorizontalTextAlignment.Left;\n        TextNote note = TextNote.Create(doc, activeView.Id, textLocation, \"Revisar este elemento\", opts);\n        if (note != null)\n        {\n            Leader leader = note.AddLeader(TextNoteLeaderTypes.TNLT_STRAIGHT_L);\n            leader.End = target.GlobalPoint;\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create a pipe with a 150mm diameter.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nPipeType pipeType = new FilteredElementCollector(doc).OfClass(typeof(PipeType)).FirstOrDefault() as PipeType;\nPipingSystemType systemType = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).FirstOrDefault() as PipingSystemType;\n\nif (level != null && pipeType != null && systemType != null)\n{\n    \/\/ Create a default 10ft long pipe as the prompt is not specific\n    XYZ p1 = new XYZ(0, 0, 0);\n    XYZ p2 = new XYZ(10, 0, 0);\n    Pipe pipe = Pipe.Create(doc, systemType.Id, pipeType.Id, level.Id, p1, p2);\n\n    if (pipe != null)\n    {\n        Parameter diameterParam = pipe.get_Parameter(BuiltInParameter.RBS_PIPE_DIAMETER_PARAM);\n        if (diameterParam != null && !diameterParam.IsReadOnly)\n        {\n            diameterParam.Set(UnitUtils.ConvertToInternalUnits(150, UnitTypeId.Millimeters));\n        }\n    }\n}"}
{"prompt":"Append a reference point at coordinates (5,1,1) inside the family editor.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(5,1,1));"}
{"prompt":"Encuentra todos los muros con más de 4 metros de altura.","completion":"double heightThreshold = UnitUtils.ConvertToInternalUnits(4, UnitTypeId.Meters);\nParameterValueProvider pvp = new ParameterValueProvider(new ElementId(BuiltInParameter.WALL_USER_HEIGHT_PARAM));\nFilterRule rule = new FilterDoubleRule(pvp, new FilterNumericGreater(), heightThreshold, 1e-6);\nList<Element> tallWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(new ElementParameterFilter(rule)).ToList();"}
{"prompt":"Adjust the view's crop region to a rectangle from (0,0) to (20,20).","completion":"using (Transaction t = new Transaction(doc, \"Adjust Crop Region\"))\n{\n    t.Start();\n    View view = doc.ActiveView;\n\n    if (view != null && view.CropBoxActive)\n    {\n        BoundingBoxXYZ cropBox = view.CropBox;\n        if (cropBox != null)\n        {\n            XYZ minPoint = new XYZ(0, 0, cropBox.Min.Z);\n            XYZ maxPoint = new XYZ(20 \/ 0.3048, 20 \/ 0.3048, cropBox.Max.Z);\n            cropBox.Min = minPoint;\n            cropBox.Max = maxPoint;\n            view.CropBox = cropBox;\n            view.CropBoxVisible = true;\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Aísla los elementos seleccionados en la vista.","completion":"ICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nView activeView = doc.ActiveView;\n\nif (activeView != null && selectedIds.Any())\n{\n    activeView.IsolateElementsTemporary(selectedIds);\n}"}
{"prompt":"Construye una cuadrícula de columnas 5x5 con separación de 8 metros.","completion":"FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (columnSymbol != null && level != null)\n{\n    if(!columnSymbol.IsActive) columnSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters);\n    for(int i=0; i<5; i++)\n    {\n        for(int j=0; j<5; j++)\n        {\n            doc.Create.NewFamilyInstance(new XYZ(i*spacing, j*spacing, 0), columnSymbol, level, StructuralType.Column);\n        }\n    }\n}"}
{"prompt":"Duplicate the 'Level 2' plan view and make it a view template.","completion":"using (Transaction t = new Transaction(doc, \"Create View Template\"))\n{\n    t.Start();\n    ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().FirstOrDefault(v => v.Name == \"Level 2\");\n    string templateName = \"Level 2 Template\";\n\n    if (viewToDuplicate != null)\n    {\n        ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n        View newView = doc.GetElement(newViewId) as View;\n        if (newView != null)\n        {\n           \/\/ Direct conversion to a template may not be available in older APIs.\n           \/\/ A common workaround is to set the IsTemplate property if available and writable, \n           \/\/ which is not the case here. This is left as a comment for conceptual understanding.\n           \/\/ newView.IsTemplate = true;\n            newView.Name = templateName;\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Build a new Level named 'Level 6' at an elevation of 10 meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\nif (newLevel != null)\n{\n    try { newLevel.Name = \"Level 6\"; } catch {}\n}"}
{"prompt":"Apply 30mm thermal insulation to all hot water pipes.","completion":"PipeInsulationType insulationType = new FilteredElementCollector(doc).OfClass(typeof(PipeInsulationType)).FirstOrDefault() as PipeInsulationType;\nPipingSystemType hotWaterSystem = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).Cast<PipingSystemType>().FirstOrDefault(s => s.Name.Contains(\"Hot Water\"));\n\nif (insulationType != null && hotWaterSystem != null)\n{\n    List<Pipe> pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast<Pipe>().Where(p => \n    {\n        Parameter systemParam = p.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM);\n        return systemParam != null && systemParam.HasValue && systemParam.AsElementId() == hotWaterSystem.Id;\n    }).ToList();\n    \n    foreach(Pipe p in pipes)\n    {\n        PipeInsulation.Create(doc, p.Id, insulationType.Id, UnitUtils.ConvertToInternalUnits(30, UnitTypeId.Millimeters));\n    }\n}"}
{"prompt":"Reproduce el nivel 4 con un desfase de 4m y llámalo 'Mezanine'.","completion":"string levelName = \"Nivel 4\";\nLevel levelToCopy = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (levelToCopy != null)\n{\n    double offset = UnitUtils.ConvertToInternalUnits(4, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, levelToCopy.Elevation + offset);\n    newLevel.Name = \"Mezanine\";\n}"}
{"prompt":"Inserta una instancia de la familia 'Puerta Sencilla' en el centro de la habitación 'Despacho 101'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 101\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Puerta Sencilla\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);"}
{"prompt":"Create a 30cm 'Double-Wall' type and then create a wall of that type.","completion":"string newTypeName = \"Double-Wall\";\nWallType newWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == newTypeName) as WallType;\nif (newWallType == null)\n{\n    WallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n    if (wallTypeToDuplicate != null)\n    {\n        newWallType = wallTypeToDuplicate.Duplicate(newTypeName) as WallType;\n        if (newWallType != null)\n        {\n            CompoundStructure cs = newWallType.GetCompoundStructure();\n            if (cs != null)\n            {\n                cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(30, UnitTypeId.Centimeters));\n                newWallType.SetCompoundStructure(cs);\n            }\n        }\n    }\n}\n\nif (newWallType != null)\n{\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    if (level != null)\n    {\n        \/\/ Create a default 10ft long wall with a default 10ft height\n        Line wallCurve = Line.CreateBound(XYZ.Zero, new XYZ(10, 0, 0));\n        Wall.Create(doc, wallCurve, newWallType.Id, level.Id, 10.0, 0, false, false);\n    }\n}"}
{"prompt":"Gira un elemento seleccionado 87 grados sobre su eje Z.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un elemento para rotar\");\nElement elem = doc.GetElement(pickedRef.ElementId);\nLocationPoint lp = elem.Location as LocationPoint;\nLine axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\nElementTransformUtils.RotateElement(doc, elem.Id, axis, Math.PI \/ 87);"}
{"prompt":"Select all walls on 'Level 1' and change their comment to 'REVIEW INSULATION'.","completion":"string levelName = \"Level 1\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(targetLevel.Id);\n    FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(levelFilter);\n    foreach (Element wall in collector)\n    {\n        Parameter commentsParam = wall.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n        if (commentsParam != null && !commentsParam.IsReadOnly) { commentsParam.Set(\"REVIEW INSULATION\"); }\n    }\n}"}
{"prompt":"Move the project base point 100 meters to the north.","completion":"using (Transaction t = new Transaction(doc, \"Move Project Base Point\"))\n{\n    t.Start();\n    BasePoint projectBasePoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(bp => !bp.IsShared);\n\n    if (projectBasePoint != null)\n    {\n        XYZ translation = new XYZ(0, 100 \/ 0.3048, 0);\n        ElementTransformUtils.MoveElement(doc, projectBasePoint.Id, translation);\n    }\n    t.Commit();\n}"}
{"prompt":"Clona el tipo de muro 'Genérico - 201mm' y nómbralo 'Interior - 15cm Yeso'.","completion":"string originalName = \"Genérico - 201mm\";\nstring newName = \"Interior - 15cm Yeso\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif(originalType!=null)\n    originalType.Duplicate(newName);"}
{"prompt":"Clone the 'Level 4' view as a dependent view.","completion":"ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v => v.Name == \"Level 4\") as ViewPlan;\n\nif (viewToDuplicate != null)\n{\n    ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n}"}
{"prompt":"Modela una bandeja de cables entre dos puntos.","completion":"CableTrayType trayType = new FilteredElementCollector(doc).OfClass(typeof(CableTrayType)).FirstOrDefault() as CableTrayType;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(trayType != null && level != null)\n{\n    XYZ start = new XYZ(0, 0, 10);\n    XYZ end = new XYZ(15, 0, 10);\n    CableTray.Create(doc, trayType.Id, start, end, level.Id);\n}"}
{"prompt":"Crea un tipo de muro 'Muro-Doble' de 30cm y luego crea un muro de ese tipo.","completion":"using (Transaction t = new Transaction(doc, \"Create Wall Type and Wall\"))\n{\n    t.Start();\n    string newTypeName = \"Muro-Doble\";\n    WallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n    WallType newWallType = null;\n    if (wallTypeToDuplicate != null)\n    {\n        newWallType = wallTypeToDuplicate.Duplicate(newTypeName) as WallType;\n        if (newWallType != null)\n        {\n            CompoundStructure cs = newWallType.GetCompoundStructure();\n            if (cs != null && cs.LayerCount > 0)\n            {\n                cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), 0.3 \/ 0.3048);\n                newWallType.SetCompoundStructure(cs);\n            }\n        }\n    }\n    if (newWallType != null)\n    {\n        Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n        Line wallCurve = Line.CreateBound(XYZ.Zero, new XYZ(10 \/ 0.3048, 0, 0));\n        double height = 3 \/ 0.3048;\n        if (level != null)\n        {\n            Wall.Create(doc, wallCurve, newWallType.Id, level.Id, height, 0, false, false);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Exporta el modelo actual a un archivo NWC.","completion":"string folderPath = \"C:\/exports\/\";\nstring fileName = doc.Title + \".nwc\";\nNavisworksExportOptions options = new NavisworksExportOptions();\noptions.ExportScope = NavisworksExportScope.Model;\ndoc.Export(folderPath, fileName, options);"}
{"prompt":"Recupera todas las familias de puertas cargadas en el proyecto.","completion":"List<Family> doorFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.Id.IntegerValue == (int)BuiltInCategory.OST_Doors).ToList();"}
{"prompt":"Include a reference point at coordinates (6,6,3) inside the family editor.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(6,6,3));"}
{"prompt":"Get all subcategories from the Walls category.","completion":"Category wallCat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Walls);\nCategoryNameMap subcategories = wallCat.SubCategories;"}
{"prompt":"Localiza todos los muros con un parámetro 'Marca' vacío y asigna 'WM-01'.","completion":"List<Wall> walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>().ToList();\nforeach(var w in walls)\n{\n  Parameter p = w.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n  if(p != null && !p.IsReadOnly && string.IsNullOrEmpty(p.AsString()))\n  {\n      p.Set(\"WM-01\");\n  }\n}"}
{"prompt":"Append reinforcement to a column.","completion":"RebarBarType barType = new FilteredElementCollector(doc).OfClass(typeof(RebarBarType)).FirstOrDefault() as RebarBarType;\nRebarShape shape = new FilteredElementCollector(doc).OfClass(typeof(RebarShape)).FirstOrDefault() as RebarShape;\nFamilyInstance column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\n\nif (barType != null && shape != null && column != null)\n{\n    Rebar.CreateFromRebarShape(doc, shape, barType, column, column.GetTransform().Origin, XYZ.BasisX, XYZ.BasisY);\n}"}
{"prompt":"Crea una nueva hoja A2 con el número 'A-201'.","completion":"string sheetNumber = \"A-201\";\nFamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (titleBlock != null)\n{\n    ViewSheet sheet = ViewSheet.Create(doc, titleBlock.Id);\n    if (sheet != null)\n    {\n        sheet.Name = \"Detalles Constructivos\";\n        sheet.SheetNumber = sheetNumber;\n    }\n}"}
{"prompt":"Assign the sill height of all windows to 6 meter.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits(6, UnitTypeId.Meters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Assign the 'Comments' parameter for all doors on Level 1 to 'Fire Rating - 91 min'.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\n\nif (level1 != null)\n{\n    List<FamilyInstance> doorsOnLevel1 = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsNotElementType().Cast<FamilyInstance>().Where(fi => fi.LevelId == level1.Id).ToList();\n    foreach(FamilyInstance door in doorsOnLevel1)\n    {\n        Parameter commentsParam = door.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n        if (commentsParam != null && !commentsParam.IsReadOnly) commentsParam.Set(\"Fire Rating - 91 min\");\n    }\n}"}
{"prompt":"Incorpora un nivel llamado 'Nivel Azotea' a 14.9 metros.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(14.9, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Nivel Azotea\";\n}"}
{"prompt":"Crea una nueva tabla de planificación para ventanas que incluya Marca de Tipo, Ancho y Alto.","completion":"string scheduleName = \"Tabla de Ventanas\";\nViewSchedule schedule = ViewSchedule.CreateSchedule(doc, new ElementId(BuiltInCategory.OST_Windows));\n\nif (schedule != null)\n{\n    schedule.Name = scheduleName;\n    ScheduleDefinition def = schedule.Definition;\n    if (def != null)\n    {\n        SchedulableField typeMarkField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.ALL_MODEL_TYPE_MARK);\n        SchedulableField widthField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.FAMILY_WIDTH_PARAM);\n        SchedulableField heightField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.FAMILY_HEIGHT_PARAM);\n        \n        if (typeMarkField != null) def.AddField(typeMarkField);\n        if (widthField != null) def.AddField(widthField);\n        if (heightField != null) def.AddField(heightField);\n    }\n}"}
{"prompt":"Configure the sill height of all windows to 3 meter.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Encuentra todos los pilares estructurales en el Nivel 4 que sean de hormigón.","completion":"string levelName = \"Nivel 4\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().WherePasses(new ElementLevelFilter(targetLevel.Id));\n    List<ElementId> concreteColumnIds = new List<ElementId>();\n    foreach (Element column in collector)\n    {\n        Parameter materialParam = column.get_Parameter(BuiltInParameter.STRUCTURAL_MATERIAL_PARAM);\n        if (materialParam != null && materialParam.HasValue)\n        {\n            ElementId materialId = materialParam.AsElementId();\n            if (materialId != ElementId.InvalidElementId)\n            {\n                Material material = doc.GetElement(materialId) as Material;\n                if (material != null && material.Name.ToLower().Contains(\"hormigón\"))\n                {\n                    concreteColumnIds.Add(column.Id);\n                }\n            }\n        }\n    }\n    uidoc.Selection.SetElementIds(concreteColumnIds);\n}"}
{"prompt":"Duplicate level 1 with a 4m offset and name it 'Mezzanine'.","completion":"string levelName = \"Mezzanine\";\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\n\nif (level1 != null)\n{\n    double newElevation = level1.ProjectElevation + UnitUtils.ConvertToInternalUnits(4, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, newElevation);\n    if (newLevel != null)\n    {\n        newLevel.Name = levelName;\n    }\n}"}
{"prompt":"Modifica el nombre de todas las tablas que contienen 'Puertas' por 'Listado de Puertas'.","completion":"List<ViewSchedule> schedules = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().Where(vs => vs.Name.Contains(\"Puertas\")).ToList();\nforeach(ViewSchedule schedule in schedules)\n{\n    schedule.Name = schedule.Name.Replace(\"Puertas\", \"Listado de Puertas\");\n}"}
{"prompt":"Create a beam system on a selected floor slab.","completion":""}
{"prompt":"Ajusta todas las ventanas para que tengan la altura del antepecho a 895mm.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits(895, UnitTypeId.Millimeters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Put an instance of the 'Office Desk' family in the center of the 'Office 96' room.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Office 96\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Office Desk\") as FamilySymbol;\nif(furnitureSymbol != null && !furnitureSymbol.IsActive) furnitureSymbol.Activate();\nif(room != null)\n{\n    LocationPoint roomCenter = room.Location as LocationPoint;\n    if(roomCenter != null && furnitureSymbol != null && room.Level != null)\n    {\n        doc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Sitúa un rociador en las coordenadas (1,9,1).","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol sprinklerSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Sprinklers).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (level != null && sprinklerSymbol != null)\n{\n    if (!sprinklerSymbol.IsActive) sprinklerSymbol.Activate();\n    XYZ placementPoint = new XYZ(UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(9, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters));\n    doc.Create.NewFamilyInstance(placementPoint, sprinklerSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n}"}
{"prompt":"Carga la familia 'Mesa.rfa' y colócala en (7,3,5) en el Nivel 1","completion":"string levelName = \"Nivel 1\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nstring familyName = \"Mesa\";\nFamilySymbol symbol = new FilteredElementCollector(doc).OfClass(typeof(FamilySymbol)).Cast<FamilySymbol>().FirstOrDefault(fs => fs.Family.Name == familyName);\nif (symbol != null && targetLevel != null)\n{\n    if (!symbol.IsActive) { symbol.Activate(); doc.Regenerate(); }\n    XYZ location = new XYZ(7, 3, 5);\n    doc.Create.NewFamilyInstance(location, symbol, targetLevel, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n}"}
{"prompt":"Haz una lista con los nombres de todos los tipos de tubería.","completion":"FilteredElementCollector collector = new FilteredElementCollector(doc).OfClass(typeof(PipeType));\nList<string> pipeTypeNames = collector.Select(e => e.Name).ToList();"}
{"prompt":"Rellena el parámetro de material de todos los muros con 'Concreto'.","completion":"Material concreteMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name.Contains(\"Concreto\")) as Material;\nif(concreteMaterial != null)\n{\n    var walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>().ToList();\n    foreach(Wall w in walls)\n    {\n        Parameter materialParam = w.get_Parameter(BuiltInParameter.STRUCTURAL_MATERIAL_PARAM);\n        if(materialParam != null && !materialParam.IsReadOnly) materialParam.Set(concreteMaterial.Id);\n    }\n}"}
{"prompt":"Create a structural beam between (1,1,1) and (9,5,1) on Level 2","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 2\") as Level;\nFamilySymbol beamType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (beamType != null && level != null)\n{\n    if(!beamType.IsActive) beamType.Activate();\n    XYZ start = new XYZ(1, 1, 1);\n    XYZ end = new XYZ(9, 5, 1);\n    if (start.IsAlmostEqualTo(end)) return;\n    Line beamCurve = Line.CreateBound(start, end);\n    doc.Create.NewFamilyInstance(beamCurve, beamType, level, Autodesk.Revit.DB.Structure.StructuralType.Beam);\n}"}
{"prompt":"Attach a reference point at coordinates (5,1,3) inside the family editor.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(5,1,3));"}
{"prompt":"Crea una nota de texto con un texto, una ubicación y un elemento de destino dados.","completion":"using (Transaction t = new Transaction(doc, \"Create Text Note\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference targetRef = localUidoc.Selection.PickObject(ObjectType.Element, \"Selecciona el elemento a anotar\");\n    XYZ textLocation = localUidoc.Selection.PickPoint(\"Elige la ubicación del texto\");\n\n    View activeView = doc.ActiveView;\n    ElementId defaultTypeId = doc.GetDefaultElementTypeId(ElementTypeGroup.TextNoteType);\n\n    if (targetRef != null && textLocation != null && activeView != null && defaultTypeId != ElementId.InvalidElementId)\n    {\n        TextNoteOptions opts = new TextNoteOptions(defaultTypeId);\n        TextNote note = TextNote.Create(doc, activeView.Id, textLocation, \"REVISAR CLASH\", opts);\n        if (note != null)\n        {\n            Leader leader = note.AddLeader(TextNoteLeaderTypes.TNLT_STRAIGHT_L);\n            leader.End = targetRef.GlobalPoint;\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Replicate the 'Generic - 150mm' wall type and name it 'Interior - 15cm Plaster'.","completion":"string originalName = \"Generic - 150mm\";\nstring newName = \"Interior - 15cm Plaster\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif(originalType!=null)\n    originalType.Duplicate(newName);"}
{"prompt":"Modela un barandal en una escalera existente.","completion":"RailingType railingType = new FilteredElementCollector(doc).OfClass(typeof(RailingType)).FirstOrDefault() as RailingType;\nStairs stairs = new FilteredElementCollector(doc).OfClass(typeof(Stairs)).FirstOrDefault() as Stairs;\n\nif (railingType != null && stairs != null)\n{\n    Railing.Create(doc, stairs.Id, railingType.Id, RailingPlacementPosition.Treads);\n}"}
{"prompt":"Create a new level 'Level 1' at an elevation of 7 meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(7, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\nif (newLevel != null)\n{\n    try { newLevel.Name = \"Level 1\"; } catch {}\n}"}
{"prompt":"Añade el prefijo 'PLANTA-' a todas las vistas de plano.","completion":"string prefix = \"PLANTA-\";\nList<ViewPlan> planViews = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().Where(v => !v.IsTemplate).ToList();\nforeach(ViewPlan view in planViews)\n{\n    if(!view.Name.StartsWith(prefix))\n    {\n        view.Name = prefix + view.Name;\n    }\n}"}
{"prompt":"Define the 'Mark' parameter of all selected walls to 'W-EXT-3'.","completion":"using (Transaction t = new Transaction(doc, \"Set Wall Mark\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    ICollection<ElementId> selectedIds = localUidoc.Selection.GetElementIds();\n\n    if (selectedIds != null && selectedIds.Count > 3)\n    {\n        foreach(ElementId id in selectedIds)\n        {\n            Element elem = doc.GetElement(id);\n            if(elem is Wall)\n            {\n                Parameter p = elem.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n                if (p != null && !p.IsReadOnly)\n                {\n                    p.Set(\"W-EXT-01\");\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Copy level 5 with a 7m offset and name it 'Mezzanine'.","completion":"string levelName = \"Level 5\";\nLevel levelToCopy = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (levelToCopy != null)\n{\n    double offset = UnitUtils.ConvertToInternalUnits(7, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, levelToCopy.Elevation + offset);\n    newLevel.Name = \"Mezzanine\";\n}"}
{"prompt":"Obtén el número total de advertencias en el proyecto.","completion":"int totalWarnings = doc.GetWarnings().Count;\n"}
{"prompt":"Find the structural framing element with the mark 'B-101'.","completion":"string markValue = \"B-101\";\nElement framingElement = new FilteredElementCollector(doc)\n    .OfCategory(BuiltInCategory.OST_StructuralFraming)\n    .WhereElementIsNotElementType()\n    .FirstOrDefault(e => {\n        Parameter p = e.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n        return p != null && p.AsString() == markValue;\n    });"}
{"prompt":"Inserta los campos 'Nivel 1', 'Marca' y 'Volumen' a la tabla de pilares.","completion":"ViewSchedule schedule = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().FirstOrDefault(s => s.Name.Contains(\"Pilares\") || s.Name.Contains(\"Column\"));\nif (schedule != null)\n{\n    ScheduleDefinition def = schedule.Definition;\n    SchedulableField levelField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.FAMILY_LEVEL_PARAM);\n    if (levelField != null) def.AddField(levelField);\n    SchedulableField markField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.ALL_MODEL_MARK);\n    if (markField != null) def.AddField(markField);\n    SchedulableField volumeField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.HOST_VOLUME_COMPUTED);\n    if (volumeField != null) def.AddField(volumeField);\n}"}
{"prompt":"Construye un piso rectangular de 10×8 metros.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\nif (level != null && floorType != null)\n{\n    double width = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\n    double length = UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters);\n    XYZ p1 = XYZ.Zero;\n    XYZ p2 = new XYZ(width, 0, 0);\n    XYZ p3 = new XYZ(width, length, 0);\n    XYZ p4 = new XYZ(0, length, 0);\n    CurveLoop profile = new CurveLoop();\n    profile.Append(Line.CreateBound(p1, p2));\n    profile.Append(Line.CreateBound(p2, p3));\n    profile.Append(Line.CreateBound(p3, p4));\n    profile.Append(Line.CreateBound(p4, p1));\n    Floor.Create(doc, new List<CurveLoop> { profile }, floorType.Id, level.Id);\n}"}
{"prompt":"Construct a structural beam between (1,4,6) and (1,4,3) on Level 2","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 2\") as Level;\nFamilySymbol beamType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (beamType != null && level != null)\n{\n    if(!beamType.IsActive) beamType.Activate();\n    XYZ start = new XYZ(1, 4, 6);\n    XYZ end = new XYZ(1, 4, 3);\n    if (start.IsAlmostEqualTo(end)) return;\n    Line beamCurve = Line.CreateBound(start, end);\n    doc.Create.NewFamilyInstance(beamCurve, beamType, level, Autodesk.Revit.DB.Structure.StructuralType.Beam);\n}"}
{"prompt":"Create 5 worksets for engineering disciplines.","completion":"List<string> worksetNames = new List<string> { \"MEP_HVAC\", \"MEP_Plumbing\", \"MEP_Electrical\", \"STRUCT_Framing\", \"STRUCT_Foundations\" };\nforeach(string name in worksetNames)\n{\n    Workset newWorkset = Workset.Create(doc, name);\n}"}
{"prompt":"Create a new 5mm text type in green color.","completion":"using (Transaction t = new Transaction(doc, \"Create Green Text Type\"))\n{\n    t.Start();\n    string newTypeName = \"5mm Green\";\n    TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\n    if (defaultType != null)\n    {\n        TextNoteType newType = defaultType.Duplicate(newTypeName) as TextNoteType;\n        if (newType != null)\n        {\n            Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n            if (textSizeParam != null && !textSizeParam.IsReadOnly)\n            {\n                textSizeParam.Set(5 \/ 304.8);\n            }\n            Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n            if (lineColorParam != null && !lineColorParam.IsReadOnly)\n            {\n                 lineColorParam.Set(65280);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Agrupa una tabla de planificación de habitaciones por Nivel.","completion":"using (Transaction t = new Transaction(doc, \"Group Schedule\"))\n{\n    t.Start();\n    ViewSchedule schedule = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().FirstOrDefault(vs => vs.Definition.CategoryId.IntegerValue == (int)BuiltInCategory.OST_Rooms);\n\n    if (schedule != null)\n    {\n        ScheduleDefinition def = schedule.Definition;\n        if (def != null)\n        {\n            SchedulableField schedulableField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.ROOM_LEVEL_ID);\n            if (schedulableField != null)\n            {\n                ScheduleField field = def.AddField(schedulableField);\n                ScheduleSortGroupField sortGroupField = new ScheduleSortGroupField(field.FieldId);\n                sortGroupField.ShowHeader = true;\n                def.AddSortGroupField(sortGroupField);\n                def.IsItemized = false;\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Configure the sill height of all windows to 1 meter.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Place a camera in the active view.","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(f => f.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft != null)\n{\n    View3D cameraView = View3D.CreatePerspective(doc, vft.Id);\n    if (cameraView != null)\n    {\n        cameraView.Name = \"New Camera View\";\n        \/\/ Default position as it is not specified in prompt\n        XYZ eyePos = new XYZ(30, -30, 20);\n        XYZ upDir = XYZ.BasisZ;\n        XYZ forwardDir = new XYZ(-1, 1, -0.5);\n        ViewOrientation3D orientation = new ViewOrientation3D(eyePos, upDir, forwardDir);\n        cameraView.SetOrientation(orientation);\n    }\n}"}
{"prompt":"Position an instance of the 'Office Desk' family in the center of the 'Office 104' room.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Office 104\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Office Desk\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);"}
{"prompt":"Apply the 'Architectural Template' view template to the active view.","completion":"View activeView = doc.ActiveView;\nView viewTemplate = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().FirstOrDefault(v => v.IsTemplate && v.Name == \"Architectural Template\");\n\nif (activeView != null && viewTemplate != null)\n{\n    activeView.ViewTemplateId = viewTemplate.Id;\n}"}
{"prompt":"Encuentra todas las puertas del Nivel 3 que sean de la familia 'Puerta Sencilla'.","completion":"string levelName = \"Nivel 3\";\nstring familyName = \"Puerta Sencilla\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WherePasses(new ElementLevelFilter(targetLevel.Id));\n    List<ElementId> doorIds = new List<ElementId>();\n    foreach (Element door in collector)\n    {\n        FamilyInstance fi = door as FamilyInstance;\n        if (fi != null && fi.Symbol.Family.Name == familyName)\n        {\n            doorIds.Add(door.Id);\n        }\n    }\n    uidoc.Selection.SetElementIds(doorIds);\n}"}
{"prompt":"Modela una bandeja de cables entre dos puntos.","completion":"CableTrayType trayType = new FilteredElementCollector(doc).OfClass(typeof(CableTrayType)).FirstOrDefault() as CableTrayType;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(trayType != null && level != null)\n{\n    XYZ start = new XYZ(0,10,3);\n    XYZ end = new XYZ(15,10,3);\n    CableTray.Create(doc, trayType.Id, start, end, level.Id);\n}"}
{"prompt":"Construct a new level named 'Mezzanine' at 7.3 meters elevation.","completion":"string levelName = \"Mezzanine\";\ndouble elevation = UnitUtils.ConvertToInternalUnits(7.3, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Generate a vertical shaft opening from the base level to the top level.","completion":"using (Transaction t = new Transaction(doc, \"Create Shaft\"))\n{\n    t.Start();\n    Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderBy(l => l.ProjectElevation).FirstOrDefault();\n    Level topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderByDescending(l => l.ProjectElevation).FirstOrDefault();\n\n    if (bottomLevel != null && topLevel != null)\n    {\n        XYZ p1 = new XYZ(2 \/ 0.3048, 2 \/ 0.3048,0);\n        XYZ p2 = new XYZ(5 \/ 0.3048, 2 \/ 0.3048,0);\n        XYZ p3 = new XYZ(5 \/ 0.3048, 5 \/ 0.3048,0);\n        XYZ p4 = new XYZ(2 \/ 0.3048, 5 \/ 0.3048,0);\n        CurveArray profile = new CurveArray();\n        profile.Append(Line.CreateBound(p1,p2));\n        profile.Append(Line.CreateBound(p2,p3));\n        profile.Append(Line.CreateBound(p3,p4));\n        profile.Append(Line.CreateBound(p4,p1));\n        doc.Create.NewOpening(bottomLevel, topLevel, profile);\n    }\n    t.Commit();\n}"}
{"prompt":"Import a CAD file named 'BasePlan.dwg' into the current view.","completion":"string filePath = \"C:\/CAD\/BasePlan.dwg\";\nDWGImportOptions options = new DWGImportOptions();\noptions.Placement = ImportPlacement.Origin;\nElementId importId;\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    doc.Import(filePath, options, activeView, out importId);\n}"}
{"prompt":"Change the type of a floor to one that contains 'Concrete'.","completion":"Floor floorToChange = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault() as Floor;\nFloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name.Contains(\"Concrete\"));\n\nif (floorToChange != null && newType != null)\n{\n    floorToChange.ChangeTypeId(newType.Id);\n}"}
{"prompt":"Adjust the type of a selected floor to 'Concrete 11cm'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a floor\");\n\nif (pickedRef != null)\n{\n    Floor floorToChange = doc.GetElement(pickedRef) as Floor;\n    FloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name == \"Concrete 11cm\");\n    \n    if (floorToChange != null && newType != null)\n    {\n        floorToChange.ChangeTypeId(newType.Id);\n    }\n}"}
{"prompt":"Update the type of a selected floor to 'Concrete 15cm'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a floor\");\n\nif (pickedRef != null)\n{\n    Floor floorToChange = doc.GetElement(pickedRef) as Floor;\n    FloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name == \"Concrete 15cm\");\n    \n    if (floorToChange != null && newType != null)\n    {\n        floorToChange.ChangeTypeId(newType.Id);\n    }\n}"}
{"prompt":"Paint the interior face of exterior walls with 'White Paint'.","completion":"using (Transaction t = new Transaction(doc, \"Paint Walls\"))\n{\n    t.Start();\n    Material paintMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m => m.Name == \"White Paint\");\n    var exteriorWalls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Cast<Wall>().Where(w => w.WallType.Function == WallFunction.Exterior).ToList();\n\n    if (paintMaterial != null)\n    {\n        foreach (Wall w in exteriorWalls)\n        {\n            IList<Reference> interiorFaceRefs = HostObjectUtils.GetSideFaces(w, ShellLayerType.Interior);\n            if(interiorFaceRefs.Count > 0)\n            {\n                Face interiorFace = w.GetGeometryObjectFromReference(interiorFaceRefs.First()) as Face;\n                if (interiorFace != null)\n                {\n                    doc.Paint(w.Id, interiorFace, paintMaterial.Id);\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea una apertura rectangular de 1x1 metros en el centro del suelo seleccionado.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un suelo\");\nif (pickedRef != null)\n{\n    Floor floor = doc.GetElement(pickedRef.ElementId) as Floor;\n    if (floor != null)\n    {\n        BoundingBoxXYZ bbox = floor.get_BoundingBox(null);\n        XYZ center = (bbox.Min + bbox.Max) \/ 2.0;\n        double size = UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters);\n        XYZ p1 = new XYZ(center.X - size\/2, center.Y - size\/2, 0);\n        XYZ p2 = new XYZ(center.X + size\/2, center.Y - size\/2, 0);\n        XYZ p3 = new XYZ(center.X + size\/2, center.Y + size\/2, 0);\n        XYZ p4 = new XYZ(center.X - size\/2, center.Y + size\/2, 0);\n        CurveArray profile = new CurveArray();\n        profile.Append(Line.CreateBound(p1, p2));\n        profile.Append(Line.CreateBound(p2, p3));\n        profile.Append(Line.CreateBound(p3, p4));\n        profile.Append(Line.CreateBound(p4, p1));\n        doc.Create.NewOpening(floor, profile, false);\n    }\n}"}
{"prompt":"Pin all selected elements.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nif (selectedIds.Count > 0)\n{\n    foreach (ElementId id in selectedIds)\n    {\n        Element elem = doc.GetElement(id);\n        if (elem != null && !elem.Pinned)\n        {\n            elem.Pinned = true;\n        }\n    }\n}"}
{"prompt":"Reproduce la vista 'Nivel 4' como una vista dependiente.","completion":"ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v => v.Name == \"Nivel 4\") as ViewPlan;\n\nif (viewToDuplicate != null)\n{\n    ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n}"}
{"prompt":"Obtén la tabla de planificación 'Muros' y exporta sus datos a un archivo CSV.","completion":"ViewSchedule schedule = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().FirstOrDefault(s=>s.Name==\"Muros\");\n\nif (schedule != null)\n{\n    string folderPath = \"C:\/RevitExports\/\";\n    ViewScheduleExportOptions options = new ViewScheduleExportOptions() { FieldDelimiter = \",\" };\n    schedule.Export(folderPath, \"Muros.csv\", options);\n}"}
{"prompt":"Alinea la cara de un muro con la cara de otro.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference ref1 = uidoc.Selection.PickObject(ObjectType.Face, \"Selecciona la cara de destino (estática)\");\nReference ref2 = uidoc.Selection.PickObject(ObjectType.Face, \"Selecciona la cara a mover\");\nView activeView = doc.ActiveView;\n\nif (ref1 != null && ref2 != null && activeView != null)\n{\n    doc.Create.NewAlignment(activeView, ref1, ref2);\n}"}
{"prompt":"Construct a new Level named 'Level 7' at an elevation of 14 meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(14, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\nif (newLevel != null)\n{\n    try { newLevel.Name = \"Level 7\"; } catch {}\n}"}
{"prompt":"Crea una superficie topográfica a partir de una lista de 4 puntos.","completion":"IList<XYZ> points = new List<XYZ>\n{\n    new XYZ(0, 0, 0),\n    new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), 0, UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters)),\n    new XYZ(0, UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters)),\n    new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters))\n};\nTopographySurface.Create(doc, points);"}
{"prompt":"Representa una región rellena con patrón diagonal.","completion":"using (Transaction t = new Transaction(doc, \"Draw Filled Region\"))\n{\n    t.Start();\n    View activeView = doc.ActiveView;\n    FillPatternElement fillPattern = new FilteredElementCollector(doc).OfClass(typeof(FillPatternElement)).Cast<FillPatternElement>().FirstOrDefault(p => !p.GetFillPattern().IsSolidFill);\n\n    if (activeView != null && fillPattern != null)\n    {\n        FilledRegionType filledRegionType = new FilteredElementCollector(doc, activeView.Id).OfClass(typeof(FilledRegionType)).FirstOrDefault() as FilledRegionType;\n        if (filledRegionType != null)\n        {\n            FilledRegionType newType = filledRegionType.Duplicate(\"Temp Diagonal Region\") as FilledRegionType;\n            if (newType != null)\n            {\n                newType.ForegroundPatternId = fillPattern.Id;\n                XYZ p1 = new XYZ(0,0,0);\n                XYZ p2 = new XYZ(5 \/ 0.3048,0,0);\n                XYZ p3 = new XYZ(5 \/ 0.3048,5 \/ 0.3048,0);\n                XYZ p4 = new XYZ(0,5 \/ 0.3048,0);\n                CurveLoop profile = new CurveLoop();\n                profile.Append(Line.CreateBound(p1,p2));\n                profile.Append(Line.CreateBound(p2,p3));\n                profile.Append(Line.CreateBound(p3,p4));\n                profile.Append(Line.CreateBound(p4,p1));\n                FilledRegion.Create(doc, newType.Id, activeView.Id, new List<CurveLoop>{profile});\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Replicate level 1 with a 4m offset and name it 'Mezzanine'.","completion":"string levelName = \"Mezzanine\";\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\n\nif (level1 != null)\n{\n    double newElevation = level1.ProjectElevation + UnitUtils.ConvertToInternalUnits(4, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, newElevation);\n    if (newLevel != null)\n    {\n        newLevel.Name = levelName;\n    }\n}"}
{"prompt":"Place a material tag on a wall face.","completion":"using (Transaction t = new Transaction(doc, \"Place Material Tag\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference faceRef = localUidoc.Selection.PickObject(ObjectType.Face, \"Select a face to tag\");\n    XYZ point = localUidoc.Selection.PickPoint(\"Select the tag location\");\n    View activeView = doc.ActiveView;\n\n    if (faceRef != null && point != null && activeView != null)\n    {\n        IndependentTag.Create(doc, activeView.Id, faceRef, true, TagMode.TM_ADDBY_MATERIAL, TagOrientation.Horizontal, point);\n    }\n    t.Commit();\n}"}
{"prompt":"Copia el nivel 2 con un desfase de 6m y llámalo 'Mezanine'.","completion":"string levelName = \"Nivel 2\";\nLevel levelToCopy = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (levelToCopy != null)\n{\n    double offset = UnitUtils.ConvertToInternalUnits(6, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, levelToCopy.Elevation + offset);\n    newLevel.Name = \"Mezanine\";\n}"}
{"prompt":"Create a 30cm 'Double-Wall' type and then create a wall of that type.","completion":"using (Transaction t = new Transaction(doc, \"Create Wall Type and Wall\"))\n{\n    t.Start();\n    string newTypeName = \"Double-Wall\";\n    WallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n    WallType newWallType = null;\n    if (wallTypeToDuplicate != null)\n    {\n        newWallType = wallTypeToDuplicate.Duplicate(newTypeName) as WallType;\n        if (newWallType != null)\n        {\n            CompoundStructure cs = newWallType.GetCompoundStructure();\n            if (cs != null && cs.LayerCount > 0)\n            {\n                cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), 0.3 \/ 0.3048);\n                newWallType.SetCompoundStructure(cs);\n            }\n        }\n    }\n    if (newWallType != null)\n    {\n        Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n        Line wallCurve = Line.CreateBound(XYZ.Zero, new XYZ(10 \/ 0.3048, 0, 0));\n        double height = 3 \/ 0.3048;\n        if (level != null)\n        {\n            Wall.Create(doc, wallCurve, newWallType.Id, level.Id, height, 0, false, false);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create an MEP space for each room on Level 1","completion":"string levelName = \"Level 1\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    FilteredElementCollector roomCollector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WherePasses(new ElementLevelFilter(targetLevel.Id));\n    foreach (Room room in roomCollector.ToElements().Cast<Room>())\n    {\n        LocationPoint locPoint = room.Location as LocationPoint;\n        if (locPoint != null)\n        {\n            UV point = new UV(locPoint.Point.X, locPoint.Point.Y);\n            doc.Create.NewSpace(targetLevel, point);\n        }\n    }\n}"}
{"prompt":"Annotate all rooms with their area.","completion":"using (Transaction t = new Transaction(doc, \"Tag All Rooms\"))\n{\n    t.Start();\n    View activeView = doc.ActiveView;\n\n    if (activeView != null)\n    {\n        List<Room> rooms = new FilteredElementCollector(doc, activeView.Id).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>().ToList();\n        foreach(Room room in rooms)\n        {\n            LocationPoint locPoint = room.Location as LocationPoint;\n            if(locPoint != null)\n            {\n                doc.Create.NewRoomTag(new LinkElementId(room.Id), new UV(locPoint.Point.X, locPoint.Point.Y), activeView.Id);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Añade un nivel llamado 'Nivel Azotea' a 15.0 metros.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(15.0, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Nivel Azotea\";\n}"}
{"prompt":"Crea una puerta de 0.9m de ancho y 2.1m de alto en el muro.","completion":"Wall hostWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nFamilySymbol originalSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (originalSymbol != null && hostWall != null)\n{\n    \/\/ Duplica el tipo para no modificar el original y asegura un nombre único\n    string newTypeName = $\"Door {UnitUtils.ConvertFromInternalUnits(UnitUtils.ConvertToInternalUnits(0.9, UnitTypeId.Meters), UnitTypeId.Meters)}m x {UnitUtils.ConvertFromInternalUnits(UnitUtils.ConvertToInternalUnits(2.1, UnitTypeId.Meters), UnitTypeId.Meters)}m - {Guid.NewGuid().ToString().Substring(0, 4)}\";\n    FamilySymbol newSymbol = originalSymbol.Duplicate(newTypeName) as FamilySymbol;\n\n    if (!newSymbol.IsActive)\n    {\n        newSymbol.Activate();\n    }\n\n    \/\/ Establece las dimensiones en el nuevo tipo\n    Parameter widthParam = newSymbol.LookupParameter(\"Width\");\n    Parameter heightParam = newSymbol.LookupParameter(\"Height\");\n\n    if (widthParam != null && heightParam != null)\n    {\n        widthParam.Set(UnitUtils.ConvertToInternalUnits(0.9, UnitTypeId.Meters));\n        heightParam.Set(UnitUtils.ConvertToInternalUnits(2.1, UnitTypeId.Meters));\n    }\n\n    Level level = doc.GetElement(hostWall.LevelId) as Level;\n    LocationCurve locationCurve = hostWall.Location as LocationCurve;\n    if (level != null && locationCurve != null)\n    {\n        XYZ insertionPoint = locationCurve.Curve.Evaluate(0.5, true);\n        doc.Create.NewFamilyInstance(insertionPoint, newSymbol, hostWall, level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Pivot a selected element 87 degrees around its Z-axis.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select an element to rotate\");\nElement elem = doc.GetElement(pickedRef.ElementId);\nLocationPoint lp = elem.Location as LocationPoint;\nLine axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\nElementTransformUtils.RotateElement(doc, elem.Id, axis, Math.PI \/ 87);"}
{"prompt":"Aplica un color rojo a todas las ventanas en la vista activa.","completion":"View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    OverrideGraphicSettings ogs = new OverrideGraphicSettings();\n    ogs.SetProjectionLineColor(new Color(255, 0, 0));\n    ICollection<ElementId> windows = new FilteredElementCollector(doc, activeView.Id).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().ToElementIds();\n    \n    foreach (ElementId windowId in windows)\n    {\n        activeView.SetElementOverrides(windowId, ogs);\n    }\n}"}
{"prompt":"Genera una cuadrícula de columnas 5x5 con separación de 8 metros.","completion":"FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (columnSymbol != null && level != null)\n{\n    if(!columnSymbol.IsActive) columnSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters);\n    for(int i=0; i<5; i++)\n    {\n        for(int j=0; j<5; j++)\n        {\n            doc.Create.NewFamilyInstance(new XYZ(i*spacing, j*spacing, 0), columnSymbol, level, StructuralType.Column);\n        }\n    }\n}"}
{"prompt":"Fetch all door families loaded in the project.","completion":"List<Family> doorFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.Id.IntegerValue == (int)BuiltInCategory.OST_Doors).ToList();"}
{"prompt":"Get the IDs of all 3D views starting with 'Coord' for export.","completion":"List<ElementId> viewsToExport = new FilteredElementCollector(doc).OfClass(typeof(View3D)).Cast<View3D>().Where(v => v.Name.StartsWith(\"Coord\") && !v.IsTemplate).Select(v => v.Id).ToList();\n"}
{"prompt":"Crea un muro de 5 metros de largo y 3 metros de alto.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (level != null && wallType != null)\n{\n    Line line = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0, 0));\n    Wall.Create(doc, line, wallType.Id, level.Id, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0.0, false, false);\n}"}
{"prompt":"Remove all unused wall types in the project.","completion":"ICollection<ElementId> allWallTypes = new FilteredElementCollector(doc).OfClass(typeof(WallType)).ToElementIds();\nICollection<ElementId> usedWallTypes = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Select(w => w.GetTypeId()).Distinct().ToList();\nList<ElementId> unusedWallTypes = allWallTypes.Except(usedWallTypes).ToList();\ndoc.Delete(unusedWallTypes);"}
{"prompt":"Place lighting posts every 10m along a 100m path.","completion":"FamilySymbol lightSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsElementType().FirstOrDefault(s => s.Name.Contains(\"Post\") || s.Name.Contains(\"Pole\")) as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (lightSymbol != null && level != null)\n{\n    if(!lightSymbol.IsActive) lightSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\n    for(int i = 0; i <= 10; i++)\n    {\n        XYZ point = new XYZ(i * spacing, 0, 0);\n        doc.Create.NewFamilyInstance(point, lightSymbol, level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Añade una línea de rejilla horizontal a un muro cortina a 1.5 metros de altura.","completion":"using (Transaction t = new Transaction(doc, \"Add Curtain Grid Line\"))\n{\n    t.Start();\n    Wall cw = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Cast<Wall>().FirstOrDefault(w => w.CurtainGrid != null);\n\n    if (cw != null)\n    {\n        CurtainGrid cg = cw.CurtainGrid;\n        if (cg != null)\n        {\n            LocationCurve locCurve = cw.Location as LocationCurve;\n            if(locCurve != null)\n            {\n                 XYZ startPoint = locCurve.Curve.GetEndPoint(0);\n                 XYZ endPoint = locCurve.Curve.GetEndPoint(1);\n                 XYZ midPoint = (startPoint + endPoint) \/ 2;\n                 XYZ gridLinePoint = new XYZ(midPoint.X, midPoint.Y, 1.5 \/ 0.3048);\n                 cg.AddGridLine(false, gridLinePoint, false);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Encuentra el tipo de columna estructural llamado \"297 x 454mm\" y colócalo en X=1, Y=11.7","completion":"string columnTypeName = \"297 x 454mm\";\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(s => s.Name == columnTypeName);\n\nif (level != null && columnSymbol != null)\n{\n    if (!columnSymbol.IsActive)\n    {\n        columnSymbol.Activate();\n    }\n    doc.Create.NewFamilyInstance(new XYZ(1, 11.7, 0), columnSymbol, level, StructuralType.Column);\n}"}
{"prompt":"Update the type of a selected floor to 'Concrete 11cm'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a floor\");\n\nif (pickedRef != null)\n{\n    Floor floorToChange = doc.GetElement(pickedRef) as Floor;\n    FloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name == \"Concrete 11cm\");\n    \n    if (floorToChange != null && newType != null)\n    {\n        floorToChange.ChangeTypeId(newType.Id);\n    }\n}"}
{"prompt":"Retrieve a list of all plan views in the project.","completion":"List<ViewPlan> planViews = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().Where(v => !v.IsTemplate).ToList();"}
{"prompt":"Extrae todas las habitaciones que están en el Nivel 2","completion":"string levelName = \"Nivel 2\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(targetLevel.Id);\n    FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WherePasses(levelFilter);\n    uidoc.Selection.SetElementIds(collector.ToElementIds());\n}"}
{"prompt":"Find all views that do not have an assigned view template.","completion":"List<View> viewsWithoutTemplate = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().Where(v => v.CanBePrinted && !v.IsTemplate && v.ViewTemplateId.Equals(ElementId.InvalidElementId)).ToList();"}
{"prompt":"Create a beam system on a selected floor slab.","completion":""}
{"prompt":"Fetch all rooms on Level 4","completion":"string levelName = \"Level 4\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(targetLevel.Id);\n    FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WherePasses(levelFilter);\n    uidoc.Selection.SetElementIds(collector.ToElementIds());\n}"}
{"prompt":"Crea un muro cortina de 6 metros de ancho y 4 metros de alto.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nWallType cwType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Kind == WallKind.Curtain);\n\nif (level != null && cwType != null)\n{\n    Line baseLine = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits(6, UnitTypeId.Meters), 0, 0));\n    Wall.Create(doc, baseLine, cwType.Id, level.Id, UnitUtils.ConvertToInternalUnits(4.0, UnitTypeId.Meters), 0.0, false, false);\n}"}
{"prompt":"Encuentra todas las familias de anotación y cuenta cuántas hay.","completion":"List<Family> annotationFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.CategoryType == CategoryType.Annotation).ToList();\nint count = annotationFamilies.Count;\n"}
{"prompt":"Encuentra todas las familias de anotación y cuenta cuántas hay.","completion":"List<Family> annotationFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.CategoryType == CategoryType.Annotation).ToList();\nint count = annotationFamilies.Count;\n"}
{"prompt":"Fetch all rooms on Level 3","completion":"string levelName = \"Level 3\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(targetLevel.Id);\n    FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WherePasses(levelFilter);\n    uidoc.Selection.SetElementIds(collector.ToElementIds());\n}"}
{"prompt":"Coloca una instancia de la familia 'Mesa de Oficina' en el centro de la habitación 'Despacho 99'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 99\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Mesa de Oficina\") as FamilySymbol;\nif(furnitureSymbol != null && !furnitureSymbol.IsActive) furnitureSymbol.Activate();\nif(room != null)\n{\n    LocationPoint roomCenter = room.Location as LocationPoint;\n    if(roomCenter != null && furnitureSymbol != null && room.Level != null)\n    {\n        doc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Create a new door type named 'FR-60 Door' and set the 'Fire Rating' parameter to '60 min'.","completion":"string newTypeName = \"FR-60 Door\";\nFamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (doorTypeToDuplicate != null)\n{\n    FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\n    if (newDoorType != null)\n    {\n        Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n        if (fireRatingParam != null && !fireRatingParam.IsReadOnly) fireRatingParam.Set(\"60 min\");\n    }\n}"}
{"prompt":"Build a new level named 'Mezzanine' at 7.8 meters elevation.","completion":"string levelName = \"Mezzanine\";\ndouble elevation = UnitUtils.ConvertToInternalUnits(7.8, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Generate a 3D view oriented from the southeast.","completion":"string viewName = \"3D View Southeast\";\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft != null)\n{\n    View3D view3d = View3D.CreateIsometric(doc, vft.Id);\n    if (view3d != null)\n    {\n        XYZ eye = new XYZ(1, -1, 1);\n        XYZ up = new XYZ(0, 0, 1);\n        XYZ forward = new XYZ(-1, 1, -1);\n        view3d.SetOrientation(new ViewOrientation3D(eye, up, forward));\n        view3d.Name = viewName;\n    }\n}"}
{"prompt":"Crea un circuito eléctrico conectando luminarias a un panel.","completion":"using (Transaction t = new Transaction(doc, \"Create Electrical Circuit\"))\n{\n    t.Start();\n    FamilyInstance panel = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_ElectricalEquipment).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\n    List<ElementId> fixtureIds = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsNotElementType().ToElementIds().ToList();\n\n    if (panel != null && fixtureIds.Count > 0)\n    {\n        ElectricalSystem electricalSystem = ElectricalSystem.Create(doc, fixtureIds, ElectricalSystemType.PowerCircuit);\n        if(electricalSystem != null)\n        {\n            electricalSystem.SelectPanel(panel);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Set the 'Mark' parameter of all selected walls to 'W-EXT-2'.","completion":"using (Transaction t = new Transaction(doc, \"Set Wall Mark\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    ICollection<ElementId> selectedIds = localUidoc.Selection.GetElementIds();\n\n    if (selectedIds != null && selectedIds.Count > 2)\n    {\n        foreach(ElementId id in selectedIds)\n        {\n            Element elem = doc.GetElement(id);\n            if(elem is Wall)\n            {\n                Parameter p = elem.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n                if (p != null && !p.IsReadOnly)\n                {\n                    p.Set(\"W-EXT-01\");\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Move a wall 5 meters to the right.","completion":"Wall wall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\n\nif (wall != null)\n{\n    XYZ translation = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters),0,0);\n    ElementTransformUtils.MoveElement(doc, wall.Id, translation);\n}"}
{"prompt":"Configure the 'Mark' parameter of all selected walls to 'W-EXT-2'.","completion":"using (Transaction t = new Transaction(doc, \"Set Wall Mark\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    ICollection<ElementId> selectedIds = localUidoc.Selection.GetElementIds();\n\n    if (selectedIds != null && selectedIds.Count > 2)\n    {\n        foreach(ElementId id in selectedIds)\n        {\n            Element elem = doc.GetElement(id);\n            if(elem is Wall)\n            {\n                Parameter p = elem.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n                if (p != null && !p.IsReadOnly)\n                {\n                    p.Set(\"W-EXT-01\");\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create a 30cm 'Double-Wall' type and then create a wall of that type.","completion":"using (Transaction t = new Transaction(doc, \"Create Wall Type and Wall\"))\n{\n    t.Start();\n    string newTypeName = \"Double-Wall\";\n    WallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n    WallType newWallType = null;\n    if (wallTypeToDuplicate != null)\n    {\n        newWallType = wallTypeToDuplicate.Duplicate(newTypeName) as WallType;\n        if (newWallType != null)\n        {\n            CompoundStructure cs = newWallType.GetCompoundStructure();\n            if (cs != null && cs.LayerCount > 0)\n            {\n                cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), 0.3 \/ 0.3048);\n                newWallType.SetCompoundStructure(cs);\n            }\n        }\n    }\n    if (newWallType != null)\n    {\n        Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n        Line wallCurve = Line.CreateBound(XYZ.Zero, new XYZ(10 \/ 0.3048, 0, 0));\n        double height = 3 \/ 0.3048;\n        if (level != null)\n        {\n            Wall.Create(doc, wallCurve, newWallType.Id, level.Id, height, 0, false, false);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Construct a new room on Level 1 at point (9, 7).","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\n\nif (level1 != null)\n{\n    UV point = new UV(9, 7);\n    Room room = doc.Create.NewRoom(level1, point);\n}"}
{"prompt":"Get the IDs of all 3D views starting with 'Coord' for export.","completion":"List<ElementId> viewsToExport = new FilteredElementCollector(doc).OfClass(typeof(View3D)).Cast<View3D>().Where(v => v.Name.StartsWith(\"Coord\") && !v.IsTemplate).Select(v => v.Id).ToList();\n"}
{"prompt":"Crea una nota de texto con un texto, una ubicación y un elemento de destino dados.","completion":"using (Transaction t = new Transaction(doc, \"Create Text Note\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference targetRef = localUidoc.Selection.PickObject(ObjectType.Element, \"Selecciona el elemento a anotar\");\n    XYZ textLocation = localUidoc.Selection.PickPoint(\"Elige la ubicación del texto\");\n\n    View activeView = doc.ActiveView;\n    ElementId defaultTypeId = doc.GetDefaultElementTypeId(ElementTypeGroup.TextNoteType);\n\n    if (targetRef != null && textLocation != null && activeView != null && defaultTypeId != ElementId.InvalidElementId)\n    {\n        TextNoteOptions opts = new TextNoteOptions(defaultTypeId);\n        TextNote note = TextNote.Create(doc, activeView.Id, textLocation, \"REVISAR CLASH\", opts);\n        if (note != null)\n        {\n            note.AddLeader(TextNoteLeaderTypes.TNLT_STRAIGHT_L).End = targetRef.GlobalPoint;\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea un DirectShape esférico con un radio de 5 metros.","completion":"using (Transaction t = new Transaction(doc, \"Create Sphere DirectShape\"))\n{\n    t.Start();\n    double radius = 5 \/ 0.3048;\n    List<GeometryObject> solids = new List<GeometryObject>();\n    Frame frame = new Frame(XYZ.Zero, XYZ.BasisX, XYZ.BasisY, XYZ.BasisZ);\n    Arc arc = Arc.Create(frame.Origin, radius, 0, Math.PI, frame.BasisX, frame.BasisY);\n    Line line = Line.CreateBound(arc.GetEndPoint(1), arc.GetEndPoint(0));\n    CurveLoop profile = CurveLoop.Create(new List<Curve> { arc, line });\n    Solid sphere = GeometryCreationUtilities.CreateRevolvedGeometry(frame, new List<CurveLoop> { profile }, 0, 2 * Math.PI);\n    solids.Add(sphere);\n    DirectShape ds = DirectShape.CreateElement(doc, new ElementId(BuiltInCategory.OST_GenericModel));\n\n    if (ds != null)\n    {\n        ds.SetShape(solids);\n        ds.Name = \"Esfera DirectShape\";\n    }\n    t.Commit();\n}"}
{"prompt":"Turn a selected element 90 degrees around its Z-axis.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select an element to rotate\");\nElement elem = doc.GetElement(pickedRef.ElementId);\nLocationPoint lp = elem.Location as LocationPoint;\nLine axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\nElementTransformUtils.RotateElement(doc, elem.Id, axis, Math.PI \/ 2.0);"}
{"prompt":"Align the centerlines of two user-selected walls.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference r1 = uidoc.Selection.PickObject(ObjectType.Element, \"Select the first wall (the one that will move)\");\nReference r2 = uidoc.Selection.PickObject(ObjectType.Element, \"Select the second wall (the reference)\");\n\nif (r1 != null && r2 != null)\n{\n    Wall w1 = doc.GetElement(r1) as Wall;\n    Wall w2 = doc.GetElement(r2) as Wall;\n    View activeView = doc.ActiveView;\n\n    if (w1 != null && w2 != null && activeView != null)\n    {\n        LocationCurve lc1 = w1.Location as LocationCurve;\n        LocationCurve lc2 = w2.Location as LocationCurve;\n        if (lc1 != null && lc2 != null)\n        {\n            doc.Create.NewAlignment(activeView, lc1.Curve.Reference, lc2.Curve.Reference);\n        }\n    }\n}"}
{"prompt":"Sitúa la vista 'Nivel 1' en el centro de la hoja activa.","completion":"ViewPlan viewToPlace = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v => v.Name == \"Nivel 1\") as ViewPlan;\nViewSheet activeSheet = doc.ActiveView as ViewSheet;\n\nif (viewToPlace != null && activeSheet != null)\n{\n    BoundingBoxUV sheetBox = activeSheet.Outline;\n    XYZ centerPoint = new XYZ((sheetBox.Min.U + sheetBox.Max.U) \/ 2, (sheetBox.Min.V + sheetBox.Max.V) \/ 2, 0);\n    Viewport.Create(doc, activeSheet.Id, viewToPlace.Id, centerPoint);\n}"}
{"prompt":"Agrega un nivel llamado 'Nivel Azotea' a 15.2 metros.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(15.2, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Nivel Azotea\";\n}"}
{"prompt":"Obtén una lista de todas las vistas de planta del proyecto.","completion":"List<ViewPlan> planViews = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().Where(v => !v.IsTemplate).ToList();"}
{"prompt":"Coloca una nota de texto con 'Revisar' en la vista actual.","completion":"View activeView = doc.ActiveView;\nElementId defaultTypeId = doc.GetDefaultElementTypeId(ElementTypeGroup.TextNoteType);\n\nif (activeView != null && defaultTypeId != ElementId.InvalidElementId)\n{\n    \/\/ Place note at a default position as none was specified\n    XYZ position = new XYZ(5, 5, 0);\n    TextNote.Create(doc, activeView.Id, position, \"Revisar\", defaultTypeId);\n}"}
{"prompt":"Crea un espacio MEP para cada habitación en el Nivel 1","completion":"string levelName = \"Nivel 1\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    FilteredElementCollector roomCollector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WherePasses(new ElementLevelFilter(targetLevel.Id));\n    foreach (Room room in roomCollector.ToElements().Cast<Room>())\n    {\n        LocationPoint locPoint = room.Location as LocationPoint;\n        if (locPoint != null)\n        {\n            UV point = new UV(locPoint.Point.X, locPoint.Point.Y);\n            doc.Create.NewSpace(targetLevel, point);\n        }\n    }\n}"}
{"prompt":"Gira un elemento seleccionado 86 grados sobre su eje Z.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un elemento para rotar\");\nElement elem = doc.GetElement(pickedRef.ElementId);\nLocationPoint lp = elem.Location as LocationPoint;\nLine axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\nElementTransformUtils.RotateElement(doc, elem.Id, axis, Math.PI \/ 86);"}
{"prompt":"Generate a new material named 'Reflective Glass' and assign it a base color.","completion":"string materialName = \"Reflective Glass\";\nElementId materialId = Material.Create(doc, materialName);\n\nif (materialId != ElementId.InvalidElementId)\n{\n    Material material = doc.GetElement(materialId) as Material;\n    if (material != null)\n    {\n        material.Color = new Color(210, 230, 240); \/\/ A light bluish color for glass\n        material.Transparency = 80;\n    }\n}"}
{"prompt":"Generate a new schedule for Structural Columns.","completion":"string scheduleName = \"Structural Column Schedule\";\nElementId categoryId = new ElementId(BuiltInCategory.OST_StructuralColumns);\nViewSchedule schedule = ViewSchedule.CreateSchedule(doc, categoryId);\nschedule.Name = scheduleName;"}
{"prompt":"Attach reinforcement to a column.","completion":"RebarBarType barType = new FilteredElementCollector(doc).OfClass(typeof(RebarBarType)).FirstOrDefault() as RebarBarType;\nRebarShape shape = new FilteredElementCollector(doc).OfClass(typeof(RebarShape)).FirstOrDefault() as RebarShape;\nFamilyInstance column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\n\nif (barType != null && shape != null && column != null)\n{\n    Rebar.CreateFromRebarShape(doc, shape, barType, column, column.GetTransform().Origin, XYZ.BasisX, XYZ.BasisY);\n}"}
{"prompt":"Define the sill height of all windows to 905mm.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits(905, UnitTypeId.Millimeters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Load the family from the path \"C:\\Libraries\\Main Door.rfa\".","completion":"string familyPath = @\"C:\\Libraries\\Main Door.rfa\";\nFamily loadedFamily = null;\ndoc.LoadFamily(familyPath, out loadedFamily);"}
{"prompt":"Crea una nueva habitación en el Nivel 1 en el punto (9, 5).","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\n\nif (level1 != null)\n{\n    UV point = new UV(9, 5);\n    Room room = doc.Create.NewRoom(level1, point);\n}"}
{"prompt":"Genera una cuadrícula de columnas 5x5 con separación de 8 metros.","completion":"FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (columnSymbol != null && level != null)\n{\n    if(!columnSymbol.IsActive) columnSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters);\n    for(int i=0; i<5; i++)\n    {\n        for(int j=0; j<5; j++)\n        {\n            doc.Create.NewFamilyInstance(new XYZ(i*spacing, j*spacing, 0), columnSymbol, level, StructuralType.Column);\n        }\n    }\n}"}
{"prompt":"Generate an electrical panel at X=1,Y=1.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol panelSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_ElectricalEquipment).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null && panelSymbol != null)\n{\n    XYZ point = new XYZ(UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters), 0);\n    doc.Create.NewFamilyInstance(point, panelSymbol, level, StructuralType.NonStructural);\n}"}
{"prompt":"Encuentra todos los pilares estructurales en el Nivel 1 que sean de hormigón.","completion":"string levelName = \"Nivel 1\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().WherePasses(new ElementLevelFilter(targetLevel.Id));\n    List<ElementId> concreteColumnIds = new List<ElementId>();\n    foreach (Element column in collector)\n    {\n        Parameter materialParam = column.get_Parameter(BuiltInParameter.STRUCTURAL_MATERIAL_PARAM);\n        if (materialParam != null && materialParam.HasValue)\n        {\n            ElementId materialId = materialParam.AsElementId();\n            if (materialId != ElementId.InvalidElementId)\n            {\n                Material material = doc.GetElement(materialId) as Material;\n                if (material != null && material.Name.ToLower().Contains(\"hormigón\"))\n                {\n                    concreteColumnIds.Add(column.Id);\n                }\n            }\n        }\n    }\n    uidoc.Selection.SetElementIds(concreteColumnIds);\n}"}
{"prompt":"Crea un nuevo tipo de muro de 22cm llamado 'Muro Estructural 21cm'.","completion":"string newTypeName = \"Muro Estructural 21cm\";\nWallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(newTypeName) as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(22, UnitTypeId.Centimeters));\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n}"}
{"prompt":"Build a new workset named 'Structure'.","completion":"string wsName = \"Structure\";\nWorkset newWorkset = Workset.Create(doc, wsName);\n"}
{"prompt":"Agrega un punto de referencia en las coordenadas (1,7,5) dentro del editor de familias.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(1,7,5));"}
{"prompt":"Crea un techo por extrusión con un perfil en arco.","completion":"using (Transaction t = new Transaction(doc, \"Create Extrusion Roof\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    RoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n\n    if (level != null && roofType != null && doc.ActiveView != null)\n    {\n        CurveArray profile = new CurveArray();\n        profile.Append(Arc.Create(new XYZ(-10,0,0), new XYZ(10,0,0), new XYZ(0,5,0)));\n        Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisY, XYZ.Zero);\n        ReferencePlane refPlane = doc.Create.NewReferencePlane(plane.Origin, plane.Origin + XYZ.BasisX, plane.Normal, doc.ActiveView);\n        if(refPlane != null)\n            doc.Create.NewExtrusionRoof(profile, refPlane, level, roofType, 0, 20);\n    }\n    t.Commit();\n}"}
{"prompt":"Inserta un nivel llamado 'Nivel Azotea' a 15.8 metros.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(15.8, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Nivel Azotea\";\n}"}
{"prompt":"Activate all FamilySymbols in the project.","completion":"List<FamilySymbol> symbols = new FilteredElementCollector(doc).OfClass(typeof(FamilySymbol)).Cast<FamilySymbol>().ToList();\nforeach (FamilySymbol sym in symbols)\n{\n    if (!sym.IsActive)\n    {\n        sym.Activate();\n    }\n}"}
{"prompt":"Export the geometry of a selected element to an SAT file.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select an element to export\");\n\nif (pickedRef != null)\n{\n    Element elem = doc.GetElement(pickedRef.ElementId);\n    if (elem != null)\n    {\n        string folderPath = \"C:\/RevitExports\/\";\n        string fileName = elem.Name + \".sat\";\n        SATExportOptions options = new SATExportOptions();\n        doc.Export(folderPath, fileName, new List<ElementId>{elem.Id}, options);\n    }\n}"}
{"prompt":"Une la geometría de una columna y un suelo que se cruzan.","completion":"Element column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().FirstOrDefault();\nElement floor = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault();\nif (column != null && floor != null)\n{\n    JoinGeometryUtils.JoinGeometry(doc, column, floor);\n}"}
{"prompt":"Inserta una instancia de la familia 'Mesa de Oficina' en el centro de la habitación 'Despacho 106'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 106\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Mesa de Oficina\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);"}
{"prompt":"Crea un techo por contorno en el 'Nivel de Cubierta'.","completion":"using (Transaction t = new Transaction(doc, \"Create Roof\"))\n{\n    t.Start();\n    Level roofLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel de Cubierta\");\n    RoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n    if(roofLevel != null && roofType != null)\n    {\n        CurveArray roofProfile = new CurveArray();\n        roofProfile.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(20,0,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(20,0,0), new XYZ(20,30,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(20,30,0), new XYZ(0,30,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(0,30,0), new XYZ(0,0,0)));\n        ModelCurveArray mapping = new ModelCurveArray();\n        doc.Create.NewFootPrintRoof(roofProfile, roofLevel, roofType, out mapping);\n    }\n    t.Commit();\n}"}
{"prompt":"Coloca una cota de elevación en el Nivel 1.","completion":"using (Transaction t = new Transaction(doc, \"Place Spot Elevation\"))\n{\n    t.Start();\n    Level lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel 1\");\n    View activeView = doc.ActiveView;\n\n    if (lvl1 != null && activeView != null)\n    {\n        Reference levelRef = new Reference(lvl1);\n        XYZ origin = new XYZ(5\/0.3048, 5\/0.3048, lvl1.Elevation);\n        XYZ leaderEnd = origin + new XYZ(2\/0.3048, 2\/0.3048, 0);\n        doc.Create.NewSpotElevation(activeView, levelRef, origin, origin, leaderEnd, origin, true);\n    }\n    t.Commit();\n}"}
{"prompt":"Build a stair between Level 5 and Level 3","completion":"\/\/ This is a complex operation that requires multiple steps and\/or user interaction and is not supported by the agent."}
{"prompt":"Generate a 'Roof Terrace' level at 19m.","completion":"string levelName = \"Roof Terrace\";\ndouble elev = UnitUtils.ConvertToInternalUnits(19, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elev);\nnewLevel.Name = levelName;\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Cambia el tipo de una losa por uno que contenga 'Concreto'.","completion":"Floor floorToChange = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault() as Floor;\nif(floorToChange != null)\n{\n    FloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name.Contains(\"Concreto\") || ft.Name.Contains(\"Concrete\"));\n    if(newType!=null)\n        floorToChange.ChangeTypeId(newType.Id);\n}"}
{"prompt":"Replicate the 'Generic - 146mm' wall type and name it 'Interior - 19cm Plaster'.","completion":"string originalName = \"Generic - 146mm\";\nstring newName = \"Interior - 19cm Plaster\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif (originalType != null)\n{\n    WallType newType = originalType.Duplicate(newName) as WallType;\n}"}
{"prompt":"Apply tags to every door visible in the active view.","completion":"View activeView = doc.ActiveView;\nif (activeView == null) return;\n\nFilteredElementCollector collector = new FilteredElementCollector(doc, activeView.Id)\n    .OfCategory(BuiltInCategory.OST_Doors)\n    .WhereElementIsNotElementType();\n\nIList<Element> elementsToTag = collector.ToElements();\n\nif (elementsToTag.Any())\n{\n    foreach (Element elem in elementsToTag)\n    {\n        Reference elemRef = new Reference(elem);\n        BoundingBoxXYZ bbox = elem.get_BoundingBox(activeView);\n        if (bbox == null) continue;\n\n        XYZ tagLocation = (bbox.Min + bbox.Max) \/ 2.0;\n        IndependentTag.Create(doc, activeView.Id, elemRef, true, TagMode.TM_ADDBY_CATEGORY, TagOrientation.Horizontal, tagLocation);\n    }\n}"}
{"prompt":"Retrieve the MEP space associated with the room 'Office 106'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Cast<Room>().FirstOrDefault(r => r.Name == \"Office 106\");\nList<Space> spaces = new List<Space>();\n\nif (room != null)\n{\n    spaces = new FilteredElementCollector(doc).OfClass(typeof(Space)).Cast<Space>().Where(s => s.Room != null && s.Room.Id == room.Id).ToList();\n}"}
{"prompt":"Encuentra todas las puertas en el Nivel 1 usando un filtro combinado.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\nList<Element> doors = new List<Element>();\n\nif (level1 != null)\n{\n    ElementCategoryFilter categoryFilter = new ElementCategoryFilter(BuiltInCategory.OST_Doors);\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level1.Id);\n    LogicalAndFilter combinedFilter = new LogicalAndFilter(categoryFilter, levelFilter);\n    doors = new FilteredElementCollector(doc).WherePasses(combinedFilter).ToList();\n}"}
{"prompt":"Build an extrusion roof with an arc profile.","completion":"using (Transaction t = new Transaction(doc, \"Create Extrusion Roof\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    RoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n\n    if (level != null && roofType != null && doc.ActiveView != null)\n    {\n        CurveArray profile = new CurveArray();\n        profile.Append(Arc.Create(new XYZ(-10,0,0), new XYZ(10,0,0), new XYZ(0,5,0)));\n        Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisY, XYZ.Zero);\n        ReferencePlane refPlane = doc.Create.NewReferencePlane(plane.Origin, plane.Origin + XYZ.BasisX, plane.Normal, doc.ActiveView);\n        if(refPlane != null)\n            doc.Create.NewExtrusionRoof(profile, refPlane, level, roofType, 0, 20);\n    }\n    t.Commit();\n}"}
{"prompt":"Gira un elemento seleccionado 85 grados sobre su eje Z.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un elemento para rotar\");\nElement elem = doc.GetElement(pickedRef.ElementId);\nLocationPoint lp = elem.Location as LocationPoint;\nLine axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\nElementTransformUtils.RotateElement(doc, elem.Id, axis, Math.PI \/ 85);"}
{"prompt":"Build a new level named 'Basement Floor' at an elevation of -4.5 meters.","completion":"double elevationInternal = UnitUtils.ConvertToInternalUnits(-4.5, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevationInternal);\nif(newLevel != null)\n{\n    try { newLevel.Name = \"Basement Floor\"; } catch {}\n}"}
{"prompt":"Set the 'Mark' parameter of all selected walls to 'W-EXT-6'.","completion":"using (Transaction t = new Transaction(doc, \"Set Wall Mark\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    ICollection<ElementId> selectedIds = localUidoc.Selection.GetElementIds();\n\n    if (selectedIds != null && selectedIds.Count > 6)\n    {\n        foreach(ElementId id in selectedIds)\n        {\n            Element elem = doc.GetElement(id);\n            if(elem is Wall)\n            {\n                Parameter markParam = elem.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n                if (markParam != null && !markParam.IsReadOnly) markParam.Set(\"W-EXT-01\");\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create a 'Roof Terrace' level at 15m.","completion":"string levelName = \"Roof Terrace\";\ndouble elev = UnitUtils.ConvertToInternalUnits(15, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elev);\nnewLevel.Name = levelName;\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Position a window 1m wide and 1.2m high into a wall.","completion":"Wall hostWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nFamilySymbol originalSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (originalSymbol != null && hostWall != null)\n{\n    string newTypeName = \"Window 1.0m x 1.2m\";\n    FamilySymbol newSymbol = null;\n    try { newSymbol = originalSymbol.Duplicate(newTypeName) as FamilySymbol; } catch {}\n    if (newSymbol == null) { newSymbol = new FilteredElementCollector(doc).OfClass(typeof(FamilySymbol)).Cast<FamilySymbol>().FirstOrDefault(s => s.Name == newTypeName); }\n    if(newSymbol != null)\n    {\n        if (!newSymbol.IsActive) { newSymbol.Activate(); }\n        Parameter widthParam = newSymbol.LookupParameter(\"Width\");\n        if (widthParam != null) widthParam.Set(UnitUtils.ConvertToInternalUnits(1.0, UnitTypeId.Meters));\n        Parameter heightParam = newSymbol.LookupParameter(\"Height\");\n        if (heightParam != null) heightParam.Set(UnitUtils.ConvertToInternalUnits(1.2, UnitTypeId.Meters));\n        Level level = doc.GetElement(hostWall.LevelId) as Level;\n        LocationCurve locationCurve = hostWall.Location as LocationCurve;\n        if (level != null && locationCurve != null)\n        {\n            XYZ insertionPoint = locationCurve.Curve.Evaluate(0.5, true);\n            doc.Create.NewFamilyInstance(insertionPoint, newSymbol, hostWall, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n        }\n    }\n}"}
{"prompt":"Ubica un rociador en las coordenadas (7,4,4).","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol sprinklerSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Sprinklers).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (level != null && sprinklerSymbol != null)\n{\n    if (!sprinklerSymbol.IsActive) sprinklerSymbol.Activate();\n    XYZ placementPoint = new XYZ(UnitUtils.ConvertToInternalUnits(7, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(4, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(4, UnitTypeId.Meters));\n    doc.Create.NewFamilyInstance(placementPoint, sprinklerSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n}"}
{"prompt":"Create a default 3D view.","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft != null)\n{\n    View3D view3d = View3D.CreateIsometric(doc, vft.Id);\n}"}
{"prompt":"Crea un nuevo tipo de muro de 30cm llamado 'Interiores'.","completion":"string newTypeName = \"Interiores\";\nWallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif (oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(newTypeName) as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(30, UnitTypeId.Centimeters));\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n}"}
{"prompt":"Crea un nuevo tipo de cota lineal con texto azul y tamaño 2mm.","completion":"using (Transaction t = new Transaction(doc, \"Create Dimension Type\"))\n{\n    t.Start();\n    string newTypeName = \"Cota Azul 2mm\";\n    DimensionType linearDimType = new FilteredElementCollector(doc).OfClass(typeof(DimensionType)).Cast<DimensionType>().FirstOrDefault(dt => dt.StyleType == DimensionStyleType.Linear);\n\n    if (linearDimType != null)\n    {\n        DimensionType newDimType = linearDimType.Duplicate(newTypeName) as DimensionType;\n        if (newDimType != null)\n        {\n            Parameter colorParam = newDimType.get_Parameter(BuiltInParameter.LINE_COLOR);\n            if (colorParam != null && !colorParam.IsReadOnly) colorParam.Set(255);\n            Parameter textSizeParam = newDimType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n            if (textSizeParam != null && !textSizeParam.IsReadOnly) textSizeParam.Set(2 \/ 304.8);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create an MEP space for each room on Level 2","completion":"string levelName = \"Level 2\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    FilteredElementCollector roomCollector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WherePasses(new ElementLevelFilter(targetLevel.Id));\n    foreach (Room room in roomCollector.ToElements().Cast<Room>())\n    {\n        LocationPoint locPoint = room.Location as LocationPoint;\n        if (locPoint != null)\n        {\n            UV point = new UV(locPoint.Point.X, locPoint.Point.Y);\n            doc.Create.NewSpace(targetLevel, point);\n        }\n    }\n}"}
{"prompt":"Cambia el tipo de una losa seleccionada a 'Concreto 16cm'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una losa\");\n\nif (pickedRef != null)\n{\n    Floor floorToChange = doc.GetElement(pickedRef) as Floor;\n    FloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name == \"Concreto 16cm\");\n    \n    if (floorToChange != null && newType != null)\n    {\n        floorToChange.ChangeTypeId(newType.Id);\n    }\n}"}
{"prompt":"Ajusta el tipo de una losa por uno que contenga 'Concreto'.","completion":"Floor floorToChange = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault() as Floor;\nFloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name.Contains(\"Concreto\") || ft.Name.Contains(\"Concrete\"));\n\nif (floorToChange != null && newType != null)\n{\n    floorToChange.ChangeTypeId(newType.Id);\n}"}
{"prompt":"Generate a new wall type 'Generic Wall 320mm' with a thickness of 32cm.","completion":"WallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif(oldWallType != null)\n{\n    WallType newWallType = null;\n    try { newWallType = oldWallType.Duplicate(\"Generic Wall 320mm\") as WallType; } catch {}\n    if(newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if(cs != null && cs.GetLayers().Any())\n        {\n            int coreLayerIndex = cs.GetFirstCoreLayerIndex();\n            if(coreLayerIndex != -1) \n            {\n                cs.SetLayerWidth(coreLayerIndex, UnitUtils.ConvertToInternalUnits(32, UnitTypeId.Centimeters));\n                newWallType.SetCompoundStructure(cs);\n            }\n        }\n    }\n}"}
{"prompt":"Vira un elemento seleccionado 89 grados sobre su eje Z.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un elemento para rotar\");\nElement elem = doc.GetElement(pickedRef.ElementId);\nLocationPoint lp = elem.Location as LocationPoint;\nLine axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\nElementTransformUtils.RotateElement(doc, elem.Id, axis, Math.PI \/ 89);"}
{"prompt":"Ajusta el tipo de una losa seleccionada a 'Concreto 19cm'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una losa\");\n\nif (pickedRef != null)\n{\n    Floor floorToChange = doc.GetElement(pickedRef) as Floor;\n    FloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name == \"Concreto 19cm\");\n    \n    if (floorToChange != null && newType != null)\n    {\n        floorToChange.ChangeTypeId(newType.Id);\n    }\n}"}
{"prompt":"Create a structural beam between (0,0,3) and (5,0,3) on Level 2.","completion":"FamilySymbol beamType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (beamType != null && level != null)\n{\n    if(!beamType.IsActive) beamType.Activate();\n    XYZ start = new XYZ(0, 0, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters));\n    XYZ end = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters));\n    Line beamCurve = Line.CreateBound(start, end);\n    doc.Create.NewFamilyInstance(beamCurve, beamType, level, StructuralType.Beam);\n}"}
{"prompt":"Create a default 3D view.","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft != null)\n{\n    View3D view3d = View3D.CreateIsometric(doc, vft.Id);\n}"}
{"prompt":"Turn the given element 45 degrees about its center.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select an element to rotate\");\n\nif (pickedRef != null)\n{\n    Element elem = doc.GetElement(pickedRef.ElementId);\n    if (elem != null)\n    {\n        LocationPoint lp = elem.Location as LocationPoint;\n        if (lp != null)\n        {\n            Line axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\n            double angle = 45 * Math.PI \/ 180.0;\n            ElementTransformUtils.RotateElement(doc, elem.Id, axis, angle);\n        }\n    }\n}"}
{"prompt":"Clone the 'Generic - 204mm' wall type and name it 'Interior - 15cm Plaster'.","completion":"string originalName = \"Generic - 204mm\";\nstring newName = \"Interior - 15cm Plaster\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif (originalType != null)\n{\n    WallType newType = originalType.Duplicate(newName) as WallType;\n}"}
{"prompt":"Copia la vista de planta 'Losa 100' y conviértela en una plantilla de vista.","completion":"using (Transaction t = new Transaction(doc, \"Create View Template\"))\n{\n    t.Start();\n    ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().FirstOrDefault(v => v.Name == \"Losa 100\");\n    string templateName = \"Plantilla Losa 100\";\n\n    if (viewToDuplicate != null)\n    {\n        ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n        View newView = doc.GetElement(newViewId) as View;\n        if (newView != null)\n        {\n           \/\/ Direct conversion to a template may not be available in older APIs.\n           \/\/ A common workaround is to set the IsTemplate property if available and writable, \n           \/\/ which is not the case here. This is left as a comment for conceptual understanding.\n           \/\/ newView.IsTemplate = true;\n            newView.Name = templateName;\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Assign the sill height of all windows to 905mm.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits(905, UnitTypeId.Millimeters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Crea una columna estructural en la posición X=10, Y=5.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null && columnSymbol != null)\n{\n    if (!columnSymbol.IsActive)\n    {\n        columnSymbol.Activate();\n    }\n    doc.Create.NewFamilyInstance(new XYZ(10, 5, 0), columnSymbol, level, StructuralType.Column);\n}"}
{"prompt":"Reproduce el tipo de muro 'Genérico - 149mm' y nómbralo 'Interior - 14cm Yeso'.","completion":"string originalName = \"Genérico - 149mm\";\nstring newName = \"Interior - 14cm Yeso\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif (originalType != null)\n{\n    WallType newType = originalType.Duplicate(newName) as WallType;\n}"}
{"prompt":"Ubica una instancia de la familia 'Mesa de Oficina' en el centro de la habitación 'Despacho 102'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 102\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Mesa de Oficina\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);"}
{"prompt":"Create a default 3D view.","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft != null)\n{\n    View3D view3d = View3D.CreateIsometric(doc, vft.Id);\n}"}
{"prompt":"Find all doors on Level 1 using a combined filter.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nList<Element> doors = new List<Element>();\n\nif (level1 != null)\n{\n    ElementCategoryFilter categoryFilter = new ElementCategoryFilter(BuiltInCategory.OST_Doors);\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level1.Id);\n    LogicalAndFilter combinedFilter = new LogicalAndFilter(categoryFilter, levelFilter);\n    doors = new FilteredElementCollector(doc).WherePasses(combinedFilter).ToList();\n}"}
{"prompt":"Build a stair between Level 1 and Level 1","completion":"\/\/ This is a complex operation that requires multiple steps and\/or user interaction and is not supported by the agent."}
{"prompt":"Change the wall type of an existing wall to one containing 'Thermal Insulation'.","completion":"Wall wallToChange = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nWallType newType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(x => x.Name.Contains(\"Thermal Insulation\"));\n\nif (wallToChange != null && newType != null)\n{\n    wallToChange.ChangeTypeId(newType.Id);\n}"}
{"prompt":"Generate a pipe with a 150mm diameter.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nPipeType pipeType = new FilteredElementCollector(doc).OfClass(typeof(PipeType)).FirstOrDefault() as PipeType;\nPipingSystemType systemType = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).FirstOrDefault() as PipingSystemType;\n\nif (level != null && pipeType != null && systemType != null)\n{\n    \/\/ Create a default 10ft long pipe as the prompt is not specific\n    XYZ p1 = new XYZ(0, 0, 0);\n    XYZ p2 = new XYZ(10, 0, 0);\n    Pipe pipe = Pipe.Create(doc, systemType.Id, pipeType.Id, level.Id, p1, p2);\n\n    if (pipe != null)\n    {\n        Parameter diameterParam = pipe.get_Parameter(BuiltInParameter.RBS_PIPE_DIAMETER_PARAM);\n        if (diameterParam != null && !diameterParam.IsReadOnly)\n        {\n            diameterParam.Set(UnitUtils.ConvertToInternalUnits(150, UnitTypeId.Millimeters));\n        }\n    }\n}"}
{"prompt":"Obtén una lista de todas las vistas de planta del proyecto.","completion":"List<ViewPlan> planViews = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().Where(v => !v.IsTemplate).ToList();"}
{"prompt":"Añade el prefijo 'ARQ-' a todos los nombres de materiales.","completion":"string prefix = \"ARQ-\";\nIList<Material> materials = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().ToList();\n\nif (materials.Any())\n{\n    HashSet<string> existingNames = new HashSet<string>(materials.Select(m => m.Name));\n    foreach (Material mat in materials)\n    {\n        if (!mat.Name.StartsWith(prefix))\n        {\n            string newName = prefix + mat.Name;\n            string finalName = newName;\n            int i = 1;\n            while (existingNames.Contains(finalName))\n            {\n                finalName = $\"{newName}_{i++}\";\n            }\n            mat.Name = finalName;\n            existingNames.Add(finalName);\n        }\n    }\n}"}
{"prompt":"Encuentra todas las familias de anotación y cuenta cuántas hay.","completion":"List<Family> annotationFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.CategoryType == CategoryType.Annotation).ToList();"}
{"prompt":"Generate a 'Roof Terrace' level at 20m.","completion":"string levelName = \"Roof Terrace\";\ndouble elev = UnitUtils.ConvertToInternalUnits(20, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elev);\nnewLevel.Name = levelName;\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Add a point to the selected Path of Travel.","completion":"\/\/ PathOfTravel related methods like GetPath and Update are likely inaccessible in this environment.\n\/\/ The following code is a placeholder to show the intent.\n\/*\nusing (Transaction t = new Transaction(doc, \"Update Path of Travel\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference pickedRef = localUidoc.Selection.PickObject(ObjectType.Element, \"Select a Path of Travel\");\n\n    if (pickedRef != null)\n    {\n        PathOfTravel pot = doc.GetElement(pickedRef) as PathOfTravel;\n        if (pot != null)\n        {\n            IList<XYZ> points = pot.GetPath();\n            if (points != null && points.Count >= 2)\n            {\n                XYZ midPoint = (points[0] + points[1]) \/ 2;\n                points.Insert(1, midPoint);\n                pot.Update(points);\n            }\n        }\n    }\n    t.Commit();\n}\n*\/"}
{"prompt":"Selecciona todos los muros con una resistencia al fuego de 85 minutos.","completion":"ElementId fireRatingParamId = new ElementId(BuiltInParameter.FIRE_RATING);\nParameterValueProvider pvp = new ParameterValueProvider(fireRatingParamId);\nFilterStringRuleEvaluator evaluator = new FilterStringEquals();\nFilterRule rule = new FilterStringRule(pvp, evaluator, \"985 min\");\nElementParameterFilter filter = new ElementParameterFilter(rule);\nICollection<ElementId> wallsToSelect = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(filter).ToElementIds();\nif (wallsToSelect.Count > 0)\n{\n    new UIDocument(doc).Selection.SetElementIds(wallsToSelect);\n}"}
{"prompt":"Obtén todas las habitaciones que están en el Nivel 3","completion":"string levelName = \"Nivel 3\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(targetLevel.Id);\n    FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WherePasses(levelFilter);\n    uidoc.Selection.SetElementIds(collector.ToElementIds());\n}"}
{"prompt":"Crea los siguientes planos: 'A-101' con nombre 'Losa 100', y 'A-102' con nombre 'Planta Alta'.","completion":"FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (titleBlock != null)\n{\n    ViewSheet sheet1 = ViewSheet.Create(doc, titleBlock.Id);\n    sheet1.SheetNumber = \"A-101\";\n    sheet1.Name = \"Losa 100\";\n    ViewSheet sheet2 = ViewSheet.Create(doc, titleBlock.Id);\n    sheet2.SheetNumber = \"A-102\";\n    sheet2.Name = \"Planta Alta\";\n}"}
{"prompt":"Create a Reflected Ceiling Plan view for Level 1.","completion":"string levelName = \"Level 1\";\nstring viewName = \"Level 1 Ceiling Plan\";\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.CeilingPlan);\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\n\nif (vft != null && level1 != null)\n{\n    ViewPlan rcp = ViewPlan.Create(doc, vft.Id, level1.Id);\n    if (rcp != null)\n    {\n        rcp.Name = viewName;\n    }\n}"}
{"prompt":"Modifica el tipo de la ventana seleccionada al tipo 'Fija 125x60'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una ventana\");\nFamilySymbol newType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name == \"Fija 125x60\");\nif (pickedRef != null && newType != null)\n{\n    FamilyInstance window = doc.GetElement(pickedRef.ElementId) as FamilyInstance;\n    if (window != null)\n    {\n        window.Symbol = newType;\n    }\n}"}
{"prompt":"Sitúa una instancia de la familia 'Mesa de Oficina' en el centro de la habitación 'Despacho 105'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 105\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Mesa de Oficina\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);"}
{"prompt":"Añade un punto de referencia en las coordenadas (1,2,1) dentro del editor de familias.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(1,2,1));"}
{"prompt":"Retrieve the MEP space associated with the room 'Office 97'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Cast<Room>().FirstOrDefault(r => r.Name == \"Office 97\");\nList<Space> spaces = new List<Space>();\n\nif (room != null)\n{\n    spaces = new FilteredElementCollector(doc).OfClass(typeof(Space)).Cast<Space>().Where(s => s.Room != null && s.Room.Id == room.Id).ToList();\n}"}
{"prompt":"Recarga el vínculo de Revit 'Estructura_LINK.rvt'.","completion":"RevitLinkType linkType = new FilteredElementCollector(doc).OfClass(typeof(RevitLinkType)).Cast<RevitLinkType>().FirstOrDefault(lt => lt.Name == \"Estructura_LINK.rvt\");\nif(linkType != null)\n{\n    linkType.Reload();\n}"}
{"prompt":"Cambia el nombre de la vista activa a 'Vista de Trabajo'.","completion":"string newName = \"Vista de Trabajo\";\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.Name = newName;\n}"}
{"prompt":"Extrae el espacio MEP asociado a la habitación 'Oficina 97'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Cast<Room>().FirstOrDefault(r => r.Name == \"Oficina 97\");\nList<Space> spaces = new List<Space>();\n\nif (room != null)\n{\n    spaces = new FilteredElementCollector(doc).OfClass(typeof(Space)).Cast<Space>().Where(s => s.Room != null && s.Room.Id == room.Id).ToList();\n}"}
{"prompt":"Situa un terminal de aire en el extremo de un conducto.","completion":"Duct duct = new FilteredElementCollector(doc).OfClass(typeof(Duct)).FirstOrDefault() as Duct;\nFamilySymbol terminalSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_DuctTerminal).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (duct != null && terminalSymbol != null)\n{\n    if(!terminalSymbol.IsActive) terminalSymbol.Activate();\n    LocationCurve locCurve = duct.Location as LocationCurve;\n    if (locCurve != null)\n    {\n        Connector endConnector = duct.ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault(c => c.Origin.IsAlmostEqualTo(locCurve.Curve.GetEndPoint(1)));\n        if (endConnector != null)\n        {\n            doc.Create.NewFamilyInstance(endConnector.Origin, terminalSymbol, duct, StructuralType.NonStructural);\n        }\n    }\n}"}
{"prompt":"Include a reference point at coordinates (1,1,6) inside the family editor.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(1,1,6));"}
{"prompt":"Generate a new pipe type named 'Steel Pipe' with 'Steel, Carbon' material.","completion":"string newTypeName = \"Steel Pipe\";\nPipeType pipeTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(PipeType)).FirstOrDefault() as PipeType;\nMaterial steel = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name == \"Steel, Carbon\") as Material;\n\nif (pipeTypeToDuplicate != null && steel != null)\n{\n    PipeType newType = pipeTypeToDuplicate.Duplicate(newTypeName) as PipeType;\n    if (newType != null)\n    {\n        Parameter materialParam = newType.get_Parameter(BuiltInParameter.MATERIAL_ID_PARAM);\n        if (materialParam != null && !materialParam.IsReadOnly) materialParam.Set(steel.Id);\n    }\n}"}
{"prompt":"Create an electrical conduit with a 1-inch diameter.","completion":"using (Transaction t = new Transaction(doc, \"Create Conduit\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    ElementId conduitTypeId = new FilteredElementCollector(doc).OfClass(typeof(ConduitType)).FirstElementId();\n\n    if (level != null && conduitTypeId != null && conduitTypeId != ElementId.InvalidElementId)\n    {\n        XYZ start = new XYZ(0, 0, 3 \/ 0.3048);\n        XYZ end = new XYZ(5 \/ 0.3048, 0, 3 \/ 0.3048);\n        Conduit conduit = Conduit.Create(doc, conduitTypeId, start, end, level.Id);\n\n        if (conduit != null)\n        {\n            Parameter diameterParam = conduit.get_Parameter(BuiltInParameter.RBS_CONDUIT_DIAMETER_PARAM);\n            if (diameterParam != null && !diameterParam.IsReadOnly)\n            {\n                diameterParam.Set(1.0 \/ 12.0);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Build a new Level named 'Level 1' at an elevation of 11 meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(11, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Level 1\";\n}"}
{"prompt":"Inserta una instancia de la familia 'Mesa de Oficina' en el centro de la habitación 'Despacho 98'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 98\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Mesa de Oficina\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);"}
{"prompt":"Define the sill height of all windows to 896mm.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits(896, UnitTypeId.Millimeters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Crea una apertura de hueco (shaft) que atraviese desde el Nivel 1 al Nivel 3.","completion":"using (Transaction t = new Transaction(doc, \"Create Shaft Opening\"))\n{\n    t.Start();\n    Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel 1\");\n    Level topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel 3\");\n\n    if (bottomLevel != null && topLevel != null)\n    {\n        XYZ p1 = new XYZ(5 \/ 0.3048, 5 \/ 0.3048,0);\n        XYZ p2 = new XYZ(8 \/ 0.3048, 5 \/ 0.3048,0);\n        XYZ p3 = new XYZ(8 \/ 0.3048, 8 \/ 0.3048,0);\n        XYZ p4 = new XYZ(5 \/ 0.3048, 8 \/ 0.3048,0);\n        CurveArray profile = new CurveArray();\n        profile.Append(Line.CreateBound(p1,p2));\n        profile.Append(Line.CreateBound(p2,p3));\n        profile.Append(Line.CreateBound(p3,p4));\n        profile.Append(Line.CreateBound(p4,p1));\n        Opening shaft = doc.Create.NewOpening(bottomLevel, topLevel, profile);\n    }\n    t.Commit();\n}"}
{"prompt":"Get a list of all families and their types.","completion":"List<string> familyAndTypeNames = new List<string>();\nList<Family> families = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().ToList();\nforeach (Family fam in families)\n{\n    familyAndTypeNames.Add($\"Family: {fam.Name}\");\n    foreach (ElementId symbolId in fam.GetFamilySymbolIds())\n    {\n        FamilySymbol sym = doc.GetElement(symbolId) as FamilySymbol;\n        if (sym != null)\n        {\n            familyAndTypeNames.Add($\"\\tType: {sym.Name}\");\n        }\n    }\n}"}
{"prompt":"Create a stair between Level 1 and Level 2","completion":"\/\/ This is a complex operation that requires multiple steps and\/or user interaction and is not supported by the agent."}
{"prompt":"Modify the visual style of the active view to 'Hidden Line'.","completion":"View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.DisplayStyle = DisplayStyle.HLR;\n}"}
{"prompt":"Create a new A3 sheet and place a legend on it.","completion":"using (Transaction t = new Transaction(doc, \"Create Sheet with Legend\"))\n{\n    t.Start();\n    FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(tb => tb.Name.Contains(\"A3\"));\n    View legendView = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().FirstOrDefault(v => v.ViewType == ViewType.Legend);\n\n    if (titleBlock != null && legendView != null)\n    {\n        ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n        if (newSheet != null)\n        {\n            BoundingBoxUV sheetBox = newSheet.Outline;\n            UV centerUv = (sheetBox.Min + sheetBox.Max) \/ 2.0;\n            XYZ centerPoint = new XYZ(centerUv.U, centerUv.V, 0);\n            Viewport.Create(doc, newSheet.Id, legendView.Id, centerPoint);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Ubica una instancia de la familia 'Mesa de Oficina' en el centro de la habitación 'Despacho 97'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 97\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Mesa de Oficina\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);"}
{"prompt":"Find all doors on Level 5 using a combined filter.","completion":"string levelName = \"Nivel 5\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    ElementCategoryFilter categoryFilter = new ElementCategoryFilter(BuiltInCategory.OST_Doors);\n    ElementLevelFilter levelFilter = new ElementLevelFilter(targetLevel.Id);\n    LogicalAndFilter combinedFilter = new LogicalAndFilter(levelFilter, categoryFilter);\n    FilteredElementCollector collector = new FilteredElementCollector(doc).WherePasses(combinedFilter);\n    uidoc.Selection.SetElementIds(collector.ToElementIds());\n}"}
{"prompt":"Crea una nota de texto con una flecha apuntando a un elemento y una ubicación dadas.","completion":"using (Transaction t = new Transaction(doc, \"Create Text Note\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference target = localUidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un elemento para anotar\");\n    XYZ textLocation = localUidoc.Selection.PickPoint(\"Elige la ubicación del texto\");\n\n    View activeView = doc.ActiveView;\n    ElementId defaultTypeId = doc.GetDefaultElementTypeId(ElementTypeGroup.TextNoteType);\n\n    if (target != null && textLocation != null && activeView != null && defaultTypeId != ElementId.InvalidElementId)\n    {\n        TextNoteOptions opts = new TextNoteOptions(defaultTypeId);\n        opts.HorizontalAlignment = HorizontalTextAlignment.Left;\n        TextNote note = TextNote.Create(doc, activeView.Id, textLocation, \"Revisar este elemento\", opts);\n        if (note != null)\n        {\n            Leader leader = note.AddLeader(TextNoteLeaderTypes.TNLT_STRAIGHT_L);\n            leader.End = target.GlobalPoint;\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea un grupo de detalles con los elementos de detalle seleccionados.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds != null && selectedIds.Count > 0)\n{\n    List<ElementId> detailIds = new List<ElementId>();\n    foreach(ElementId id in selectedIds)\n    {\n        Element elem = doc.GetElement(id);\n        if (elem != null && elem.Category != null && elem.Category.CategoryType == CategoryType.Annotation)\n        {\n            detailIds.Add(id);\n        }\n    }\n\n    if (detailIds.Count > 0)\n    {\n        Group group = doc.Create.NewGroup(detailIds);\n        if (group != null)\n        {\n            group.Name = \"Detalle Típico 1\";\n        }\n    }\n}"}
{"prompt":"Mueve los elementos seleccionados 3 metros hacia arriba.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds != null && selectedIds.Count > 0)\n{\n    XYZ translation = new XYZ(0, 0, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters));\n    ElementTransformUtils.MoveElements(doc, selectedIds, translation);\n}"}
{"prompt":"Conecta dos tuberías con un codo.","completion":"List<Pipe> pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast<Pipe>().ToList();\nif (pipes.Count >= 2)\n{\n    Connector c1 = pipes[0].ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n    Connector c2 = pipes[1].ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n    if (c1 != null && c2 != null)\n    {\n        doc.Create.NewElbowFitting(c1, c2);\n    }\n}"}
{"prompt":"Construct a new level named 'Mezzanine' at 6.9 meters elevation.","completion":"string levelName = \"Mezzanine\";\ndouble elevation = UnitUtils.ConvertToInternalUnits(6.9, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Set the 'Mark' parameter of all selected walls to 'W-EXT-1'.","completion":"using (Transaction t = new Transaction(doc, \"Set Wall Mark\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    ICollection<ElementId> selectedIds = localUidoc.Selection.GetElementIds();\n\n    if (selectedIds != null && selectedIds.Count > 1)\n    {\n        foreach(ElementId id in selectedIds)\n        {\n            Element elem = doc.GetElement(id);\n            if(elem is Wall)\n            {\n                Parameter p = elem.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n                if (p != null && !p.IsReadOnly)\n                {\n                    p.Set(\"W-EXT-01\");\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Duplica la vista 'Nivel 3' .","completion":"ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v => v.Name == \"Nivel 3\") as ViewPlan;\n\nif (viewToDuplicate != null)\n{\n    ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n}"}
{"prompt":"Crea un suelo con un contorno de 10 por 8 metros.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\n\nif (level != null && floorType != null)\n{\n    double width = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\n    double length = UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters);\n    CurveLoop loop = new CurveLoop();\n    loop.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(width,0,0)));\n    loop.Append(Line.CreateBound(new XYZ(width,0,0), new XYZ(width,length,0)));\n    loop.Append(Line.CreateBound(new XYZ(width,length,0), new XYZ(0,length,0)));\n    loop.Append(Line.CreateBound(new XYZ(0,length,0), new XYZ(0,0,0)));\n    Floor.Create(doc, new List<CurveLoop> { loop }, floorType.Id, level.Id);\n}"}
{"prompt":"Ubica postes de iluminación cada 10m en un camino de 100m.","completion":"FamilySymbol lightSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsElementType().FirstOrDefault(s => s.Name.Contains(\"Post\") || s.Name.Contains(\"Pole\")) as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (lightSymbol != null && level != null)\n{\n    if (!lightSymbol.IsActive)\n    {\n        lightSymbol.Activate();\n    }\n    double spacing = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\n    double pathLength = UnitUtils.ConvertToInternalUnits(100, UnitTypeId.Meters);\n    int postCount = (int)(pathLength \/ spacing);\n    for (int i = 0; i <= postCount; i++)\n    {\n        XYZ point = new XYZ(i * spacing, 0, 0);\n        doc.Create.NewFamilyInstance(point, lightSymbol, level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Add reinforcement to a column.","completion":"RebarBarType barType = new FilteredElementCollector(doc).OfClass(typeof(RebarBarType)).FirstOrDefault() as RebarBarType;\nRebarShape shape = new FilteredElementCollector(doc).OfClass(typeof(RebarShape)).FirstOrDefault() as RebarShape;\nFamilyInstance column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\n\nif (barType != null && shape != null && column != null)\n{\n    Rebar.CreateFromRebarShape(doc, shape, barType, column, column.GetTransform().Origin, XYZ.BasisX, XYZ.BasisY);\n}"}
{"prompt":"Inserta un mueble en las coordenadas (2,3).","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null && furnitureSymbol != null)\n{\n    if (!furnitureSymbol.IsActive)\n    {\n        furnitureSymbol.Activate();\n    }\n    doc.Create.NewFamilyInstance(new XYZ(2, 3, 0), furnitureSymbol, level, StructuralType.NonStructural);\n}"}
{"prompt":"Create a new 5mm text type in green color.","completion":"using (Transaction t = new Transaction(doc, \"Create Green Text Type\"))\n{\n    t.Start();\n    string newTypeName = \"5mm Green\";\n    TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\n    if (defaultType != null)\n    {\n        TextNoteType newType = defaultType.Duplicate(newTypeName) as TextNoteType;\n        if (newType != null)\n        {\n            Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n            if (textSizeParam != null && !textSizeParam.IsReadOnly)\n            {\n                textSizeParam.Set(5 \/ 304.8);\n            }\n            Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n            if (lineColorParam != null && !lineColorParam.IsReadOnly)\n            {\n                 lineColorParam.Set(65280);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Modifica el tipo de todos los muros seleccionados a 'Muro Exterior'.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nWallType targetWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Name == \"Muro Exterior\");\n\nif (selectedIds.Count > 0 && targetWallType != null)\n{\n    foreach(ElementId id in selectedIds)\n    {\n        Wall wall = doc.GetElement(id) as Wall;\n        if(wall != null) wall.ChangeTypeId(targetWallType.Id);\n    }\n}"}
{"prompt":"Etiqueta todas las habitaciones con su área.","completion":"using (Transaction t = new Transaction(doc, \"Tag All Rooms\"))\n{\n    t.Start();\n    View activeView = doc.ActiveView;\n\n    if (activeView != null)\n    {\n        List<Room> rooms = new FilteredElementCollector(doc, activeView.Id).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>().ToList();\n        foreach(Room room in rooms)\n        {\n            LocationPoint locPoint = room.Location as LocationPoint;\n            if(locPoint != null)\n            {\n                doc.Create.NewRoomTag(new LinkElementId(room.Id), new UV(locPoint.Point.X, locPoint.Point.Y), activeView.Id);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create a stair between Level 2 and Level 3","completion":"\/\/ This is a complex operation that requires multiple steps and\/or user interaction and is not supported by the agent."}
{"prompt":"Build a default 3D view.","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft != null)\n{\n    View3D view3d = View3D.CreateIsometric(doc, vft.Id);\n}"}
{"prompt":"Obtain all rooms on Level 3","completion":"string levelName = \"Level 3\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(targetLevel.Id);\n    FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WherePasses(levelFilter);\n    uidoc.Selection.SetElementIds(collector.ToElementIds());\n}"}
{"prompt":"Create a section view between points (0,0,0) and (10,10,0).","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.Section);\n\nif (vft != null)\n{\n    XYZ p1 = new XYZ(0,0,0);\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),0);\n    XYZ midPoint = (p1 + p2) \/ 2;\n    XYZ direction = (p2 - p1).Normalize();\n    XYZ up = XYZ.BasisZ;\n    XYZ viewdir = up.CrossProduct(direction);\n    \n    BoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\n    Transform t = Transform.Identity;\n    t.Origin = midPoint;\nt.BasisX = direction;\nt.BasisY = up;\nt.BasisZ = viewdir;\nsectionBox.Transform = t;\nsectionBox.Min = new XYZ(UnitUtils.ConvertToInternalUnits(-p1.DistanceTo(p2)\/2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(-10, UnitTypeId.Meters), 0);\nsectionBox.Max = new XYZ(UnitUtils.ConvertToInternalUnits(p1.DistanceTo(p2)\/2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(20, UnitTypeId.Meters));\n    \n    ViewSection.CreateSection(doc, vft.Id, sectionBox);\n}"}
{"prompt":"Construct an in-place family for a custom reception desk using an extrusion.","completion":""}
{"prompt":"Inicia y confirma una transacción para 'Modificar Proyecto'.","completion":""}
{"prompt":"Duplicate the active view and name it 'Working Copy'.","completion":"View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    ElementId newViewId = activeView.Duplicate(ViewDuplicateOption.Duplicate);\n    View newView = doc.GetElement(newViewId) as View;\n    if (newView != null)\n    {\n        newView.Name = \"Working Copy\";\n    }\n}"}
{"prompt":"Load the 'Table.rfa' family and place it at (8,1,1) on Level 7","completion":"string levelName = \"Level 7\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nstring familyName = \"Table\";\nFamilySymbol symbol = new FilteredElementCollector(doc).OfClass(typeof(FamilySymbol)).Cast<FamilySymbol>().FirstOrDefault(fs => fs.Family.Name == familyName);\nif (symbol != null && targetLevel != null)\n{\n    if (!symbol.IsActive) { symbol.Activate(); doc.Regenerate(); }\n    XYZ location = new XYZ(8, 1, 1);\n    doc.Create.NewFamilyInstance(location, symbol, targetLevel, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n}"}
{"prompt":"Set the 'Mark' parameter of all selected walls to 'W-EXT-01'.","completion":"using (Transaction t = new Transaction(doc, \"Set Wall Mark\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    ICollection<ElementId> selectedIds = localUidoc.Selection.GetElementIds();\n\n    if (selectedIds != null && selectedIds.Count > 0)\n    {\n        foreach(ElementId id in selectedIds)\n        {\n            Element elem = doc.GetElement(id);\n            if(elem is Wall)\n            {\n                Parameter p = elem.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n                if (p != null && !p.IsReadOnly)\n                {\n                    p.Set(\"W-EXT-01\");\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea un muro del tipo específico 'Exterior - Ladrillo sobre Bloque' de 10 metros.","completion":"string wallTypeName = \"Exterior - Ladrillo sobre Bloque\";\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Name == wallTypeName);\n\nif (level != null && wallType != null)\n{\n    Line line = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), 0, 0));\n    Wall.Create(doc, line, wallType.Id, level.Id, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0.0, false, false);\n}"}
{"prompt":"Create a section view named 'Longitudinal Section'.","completion":"ViewFamilyType sectionType = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.Section);\n\nif (sectionType != null)\n{\n    \/\/ Create a default bounding box as none was specified in the prompt\n    BoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\n    sectionBox.Min = new XYZ(-50, -5, 0);\n    sectionBox.Max = new XYZ(50, 5, 20);\n    ViewSection sectionView = ViewSection.CreateSection(doc, sectionType.Id, sectionBox);\n    \n    if (sectionView != null)\n    {\n        sectionView.Name = \"Longitudinal Section\";\n    }\n}"}
{"prompt":"Set the 'Mark' parameter of all selected walls to 'W-EXT-4'.","completion":"using (Transaction t = new Transaction(doc, \"Set Wall Mark\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    ICollection<ElementId> selectedIds = localUidoc.Selection.GetElementIds();\n\n    if (selectedIds != null && selectedIds.Count > 4)\n    {\n        foreach(ElementId id in selectedIds)\n        {\n            Element elem = doc.GetElement(id);\n            if(elem is Wall)\n            {\n                Parameter p = elem.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n                if (p != null && !p.IsReadOnly)\n                {\n                    p.Set(\"W-EXT-01\");\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Copy all walls from Level 1 to Level 2.","completion":"using (Transaction t = new Transaction(doc, \"Copy Walls\"))\n{\n    t.Start();\n    Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 1\");\n    Level level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 2\");\n\n    if (level1 != null && level2 != null)\n    {\n        ICollection<ElementId> wallsToCopy = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Where(e => (e as Wall) != null && (e as Wall).LevelId.Equals(level1.Id)).Select(e => e.Id).ToList();\n        double elevationDiff = level2.ProjectElevation - level1.ProjectElevation;\n        XYZ translation = new XYZ(0, 0, elevationDiff);\n        if (wallsToCopy.Count > 0)\n        {\n            ElementTransformUtils.CopyElements(doc, wallsToCopy, translation);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Rota el elemento dado 45 grados alrededor de su centro.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un elemento para rotar\");\n\nif (pickedRef != null)\n{\n    Element elem = doc.GetElement(pickedRef.ElementId);\n    if (elem != null)\n    {\n        LocationPoint lp = elem.Location as LocationPoint;\n        if (lp != null)\n        {\n            Line axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\n            double angle = 45 * Math.PI \/ 180.0;\n            ElementTransformUtils.RotateElement(doc, elem.Id, axis, angle);\n        }\n    }\n}"}
{"prompt":"Assign the sill height of all windows to 1 meter.","completion":"using (Transaction t = new Transaction(doc, \"Set Sill Height\"))\n{\n    t.Start();\n    double sillHeight = 1 \/ 0.3048;\n    List<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\n    foreach(FamilyInstance window in windows)\n    {\n        Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n        if (sillHeightParam != null && !sillHeightParam.IsReadOnly)\n        {\n            sillHeightParam.Set(sillHeight);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Ajusta todas las ventanas para que la altura del antepecho sea 2 metro.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Create a door 0.9m wide and 2.1m high in the wall.","completion":"Wall hostWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nFamilySymbol originalSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (originalSymbol != null && hostWall != null)\n{\n    string newTypeName = \"Door 0.9m x 2.1m\";\n    FamilySymbol newSymbol = originalSymbol.Duplicate(newTypeName) as FamilySymbol;\n    if (newSymbol == null) return;\n\n    if (!newSymbol.IsActive)\n    {\n        newSymbol.Activate();\n    }\n\n    Parameter widthParam = newSymbol.get_Parameter(BuiltInParameter.FAMILY_WIDTH_PARAM);\n    Parameter heightParam = newSymbol.get_Parameter(BuiltInParameter.FAMILY_HEIGHT_PARAM);\n\n    if (widthParam != null && heightParam != null && !widthParam.IsReadOnly && !heightParam.IsReadOnly)\n    {\n        widthParam.Set(UnitUtils.ConvertToInternalUnits(0.9, UnitTypeId.Meters));\n        heightParam.Set(UnitUtils.ConvertToInternalUnits(2.1, UnitTypeId.Meters));\n    }\n\n    Level level = doc.GetElement(hostWall.LevelId) as Level;\n    LocationCurve locationCurve = hostWall.Location as LocationCurve;\n    if (level != null && locationCurve != null)\n    {\n        XYZ insertionPoint = locationCurve.Curve.Evaluate(0.5, true);\n        doc.Create.NewFamilyInstance(insertionPoint, newSymbol, hostWall, level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Create an extrusion roof with an arc profile.","completion":"using (Transaction t = new Transaction(doc, \"Create Extrusion Roof\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    RoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n\n    if (level != null && roofType != null && doc.ActiveView != null)\n    {\n        CurveArray profile = new CurveArray();\n        profile.Append(Arc.Create(new XYZ(-10,0,0), new XYZ(10,0,0), new XYZ(0,5,0)));\n        Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisY, XYZ.Zero);\n        ReferencePlane refPlane = doc.Create.NewReferencePlane(plane.Origin, plane.Origin + XYZ.BasisX, plane.Normal, doc.ActiveView);\n        if(refPlane != null)\n            doc.Create.NewExtrusionRoof(profile, refPlane, level, roofType, 0, 20);\n    }\n    t.Commit();\n}"}
{"prompt":"Añade un nivel llamado 'Nivel Azotea' a 15.2 metros.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(15.2, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Nivel Azotea\";\n}"}
{"prompt":"Import a topography from a CSV file.","completion":"using (Transaction t = new Transaction(doc, \"Create Topography\"))\n{\n    t.Start();\n    \/\/ CSV file reading is not directly supported by a single API call.\n    \/\/ You would typically read the file line by line, parse the XYZ coordinates,\n    \/\/ and then use the TopographySurface.Create method with a list of points.\n    \/\/ As a placeholder, here's how to create a simple topography from a list of points:\n    IList<XYZ> points = new List<XYZ>();\n    points.Add(new XYZ(0, 0, 0));\n    points.Add(new XYZ(10, 0, 0));\n    points.Add(new XYZ(0, 10, 0));\n    points.Add(new XYZ(10, 10, 5));\n    TopographySurface.Create(doc, points);\n    t.Commit();\n}"}
{"prompt":"Recupera todas las habitaciones que están en el Nivel 3","completion":"string levelName = \"Nivel 3\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(targetLevel.Id);\n    FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WherePasses(levelFilter);\n    uidoc.Selection.SetElementIds(collector.ToElementIds());\n}"}
{"prompt":"Crea un espacio MEP para cada habitación en el Nivel 1.","completion":"using (Transaction t = new Transaction(doc, \"Create MEP Spaces\"))\n{\n    t.Start();\n    Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel 1\");\n\n    if (level1 != null)\n    {\n        List<Room> roomsOnLevel1 = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Where(e => (e as Room) != null && (e as Room).LevelId.Equals(level1.Id)).Cast<Room>().ToList();\n        foreach(Room room in roomsOnLevel1)\n        {\n           \/\/ The direct creation of MEP spaces from rooms might not be available in this specific API version.\n           \/\/ Placeholder comment for the intended logic.\n           \/\/ Space.Create(doc, room, null);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Ubica una instancia de la familia 'Mesa de Oficina' en el centro de la habitación 'Despacho 106'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 106\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Mesa de Oficina\") as FamilySymbol;\nif(furnitureSymbol != null && !furnitureSymbol.IsActive) furnitureSymbol.Activate();\nif(room != null)\n{\n    LocationPoint roomCenter = room.Location as LocationPoint;\n    if(roomCenter != null && furnitureSymbol != null && room.Level != null)\n    {\n        doc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Coloca una instancia de la familia 'Mesa de Oficina' en el centro de la habitación 'Despacho 99'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 99\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Mesa de Oficina\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);"}
{"prompt":"Create a global length parameter named 'CorridorWidth' with a value of 1.4m.","completion":"string paramName = \"CorridorWidth\";\nGlobalParameter gp = GlobalParameter.Create(doc, paramName, SpecTypeId.Length);\n\nif (gp != null)\n{\n    gp.SetValue(new DoubleParameterValue(UnitUtils.ConvertToInternalUnits(1.4, UnitTypeId.Meters)));\n}"}
{"prompt":"Etiqueta todos los muros en la vista actual por su tipo.","completion":"View activeView = doc.ActiveView;\nFilteredElementCollector wallsInView = new FilteredElementCollector(doc, activeView.Id).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType();\nforeach (Element wall in wallsInView)\n{\n    LocationCurve locCurve = (wall as Wall).Location as LocationCurve;\n    if (locCurve != null)\n    {\n        XYZ midPoint = locCurve.Curve.Evaluate(0.5, true);\n        IndependentTag.Create(doc, activeView.Id, new Reference(wall), true, TagMode.TM_ADDBY_CATEGORY, TagOrientation.Horizontal, midPoint);\n    }\n}"}
{"prompt":"Set the sill height of all windows to 902mm.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits(902, UnitTypeId.Millimeters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Open a family, add a type parameter 'Material Code', and save it.","completion":""}
{"prompt":"Crea una vista de sección entre los puntos (0,0,0) y (10,10,0).","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.Section);\n\nif (vft != null)\n{\n    XYZ p1 = new XYZ(0,0,0);\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),0);\n    XYZ midPoint = (p1 + p2) \/ 2;\n    XYZ direction = (p2 - p1).Normalize();\n    XYZ up = XYZ.BasisZ;\n    XYZ viewdir = up.CrossProduct(direction);\n    \n    BoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\n    Transform t = Transform.Identity;\n    t.Origin = midPoint;\nt.BasisX = direction;\nt.BasisY = up;\nt.BasisZ = viewdir;\nsectionBox.Transform = t;\nsectionBox.Min = new XYZ(UnitUtils.ConvertToInternalUnits(-p1.DistanceTo(p2)\/2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(-10, UnitTypeId.Meters), 0);\nsectionBox.Max = new XYZ(UnitUtils.ConvertToInternalUnits(p1.DistanceTo(p2)\/2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(20, UnitTypeId.Meters));\n    \n    ViewSection.CreateSection(doc, vft.Id, sectionBox);\n}"}
{"prompt":"Join the geometry of an intersecting column and floor.","completion":"Element column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().FirstOrDefault();\nElement floor = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault();\n\nif (column != null && floor != null)\n{\n    JoinGeometryUtils.JoinGeometry(doc, column, floor);\n}"}
{"prompt":"Añade un nivel llamado 'Nivel Azotea' a 16.0 metros.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(16.0, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Nivel Azotea\";\n}"}
{"prompt":"Export the current model to an NWC file.","completion":"string folderPath = \"C:\/exports\/\";\nstring fileName = doc.Title + \".nwc\";\nNavisworksExportOptions options = new NavisworksExportOptions();\noptions.ExportScope = NavisworksExportScope.Model;\ndoc.Export(folderPath, fileName, options);"}
{"prompt":"Generate a new door type named 'FR-90 Door' and set its fire rating to '90 min'.","completion":"string newTypeName = \"FR-90 Door\";\nFamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nFamilySymbol newDoorType = null;\nif (doorTypeToDuplicate != null)\n{\n    newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\n    if (newDoorType != null)\n    {\n        Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n        if (fireRatingParam != null && !fireRatingParam.IsReadOnly)\n        {\n            fireRatingParam.Set(\"90 min\");\n        }\n    }\n}"}
{"prompt":"Replicate the 'Level 5' view as a dependent view.","completion":"ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v => v.Name == \"Level 5\") as ViewPlan;\n\nif (viewToDuplicate != null)\n{\n    ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n}"}
{"prompt":"Construct a floor plan view for 'Level 5'.","completion":"string levelName = \"Level 5\";\nLevel level3 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.FloorPlan);\n\nif (level3 != null && vft != null)\n{\n    ViewPlan viewPlan = ViewPlan.Create(doc, vft.Id, level3.Id);\n}"}
{"prompt":"Place an instance of the 'Office Desk' family in the center of the 'Office 101' room.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Office 101\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Office Desk\") as FamilySymbol;\nif(furnitureSymbol != null && !furnitureSymbol.IsActive) furnitureSymbol.Activate();\nif(room != null)\n{\n    LocationPoint roomCenter = room.Location as LocationPoint;\n    if(roomCenter != null && furnitureSymbol != null && room.Level != null)\n    {\n        doc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Pon un pilar estructural en las coordenadas 10,5.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null && columnSymbol != null)\n{\n    doc.Create.NewFamilyInstance(new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0), columnSymbol, level, StructuralType.Column);\n}"}
{"prompt":"Isolate the selected elements in the view.","completion":"ICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nView activeView = doc.ActiveView;\n\nif (activeView != null && selectedIds.Any())\n{\n    activeView.IsolateElementsTemporary(selectedIds);\n}"}
{"prompt":"Encuentra todas las puertas del Nivel 6 que sean de la familia 'M_Chair-Breuer'.","completion":"string levelName = \"Nivel 6\";\nstring familyName = \"M_Chair-Breuer\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WherePasses(new ElementLevelFilter(targetLevel.Id));\n    List<ElementId> doorIds = new List<ElementId>();\n    foreach (Element door in collector)\n    {\n        FamilyInstance fi = door as FamilyInstance;\n        if (fi != null && fi.Symbol.Family.Name == familyName)\n        {\n            doorIds.Add(door.Id);\n        }\n    }\n    uidoc.Selection.SetElementIds(doorIds);\n}"}
{"prompt":"Create an electrical circuit connecting light fixtures to a panel.","completion":"using (Transaction t = new Transaction(doc, \"Create Electrical Circuit\"))\n{\n    t.Start();\n    FamilyInstance panel = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_ElectricalEquipment).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\n    List<ElementId> fixtureIds = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsNotElementType().ToElementIds().ToList();\n\n    if (panel != null && fixtureIds.Count > 0)\n    {\n        ElectricalSystem electricalSystem = ElectricalSystem.Create(doc, fixtureIds, ElectricalSystemType.PowerCircuit);\n        if(electricalSystem != null)\n        {\n            electricalSystem.SelectPanel(panel);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Ajusta el tipo de la ventana seleccionada al tipo 'Ventana Fija 122x60'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una ventana\");\nFamilySymbol newType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name == \"Ventana Fija 122x60\");\nif (pickedRef != null && newType != null)\n{\n    FamilyInstance window = doc.GetElement(pickedRef.ElementId) as FamilyInstance;\n    if (window != null)\n    {\n        window.Symbol = newType;\n    }\n}"}
{"prompt":"Oculta todas las categorías de anotación en la vista activa.","completion":"using (Transaction t = new Transaction(doc, \"Hide Annotation Categories\"))\n{\n    t.Start();\n    Categories categories = doc.Settings.Categories;\n    View activeView = doc.ActiveView;\n\n    if (activeView != null)\n    {\n        foreach(Category cat in categories)\n        {\n            if(cat.CategoryType == CategoryType.Annotation && cat.get_AllowsVisibilityControl(activeView))\n            {\n                 activeView.SetCategoryHidden(cat.Id, true);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create a grid of 5 horizontal and 5 vertical grids, spaced 6 meters apart.","completion":"double spacing = UnitUtils.ConvertToInternalUnits(6, UnitTypeId.Meters);\nint count = 5;\nfor (int i = 0; i < count; i++)\n{\n    Line line = Line.CreateBound(new XYZ(0, i * spacing, 0), new XYZ((count - 1) * spacing, i * spacing, 0));\n    Grid.Create(doc, line);\n}\nfor (int i = 0; i < count; i++)\n{\n    Line line = Line.CreateBound(new XYZ(i * spacing, 0, 0), new XYZ(i * spacing, (count - 1) * spacing, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Ajusta la región de recorte de la vista a un rectángulo de (0,0) a (20,20).","completion":"using (Transaction t = new Transaction(doc, \"Adjust Crop Region\"))\n{\n    t.Start();\n    View view = doc.ActiveView;\n\n    if (view != null && view.CropBoxActive)\n    {\n        BoundingBoxXYZ cropBox = view.CropBox;\n        if (cropBox != null)\n        {\n            XYZ minPoint = new XYZ(0, 0, cropBox.Min.Z);\n            XYZ maxPoint = new XYZ(20 \/ 0.3048, 20 \/ 0.3048, cropBox.Max.Z);\n            cropBox.Min = minPoint;\n            cropBox.Max = maxPoint;\n            view.CropBox = cropBox;\n            view.CropBoxVisible = true;\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Construct a new material named 'Reflective Glass' and assign it a base color.","completion":"string materialName = \"Reflective Glass\";\nElementId materialId = Material.Create(doc, materialName);\n\nif (materialId != ElementId.InvalidElementId)\n{\n    Material material = doc.GetElement(materialId) as Material;\n    if (material != null)\n    {\n        material.Color = new Color(210, 230, 240); \/\/ A light bluish color for glass\n        material.Transparency = 80;\n    }\n}"}
{"prompt":"Crea un nuevo tipo de muro 'Muro Genérico 300mm' con un grosor de 30cm.","completion":"using (Transaction t = new Transaction(doc, \"Create Wall Type\"))\n{\n    t.Start();\n    string newTypeName = \"Muro Genérico 300mm\";\n    WallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\n    if (oldWallType != null)\n    {\n        WallType newWallType = oldWallType.Duplicate(newTypeName) as WallType;\n        if (newWallType != null)\n        {\n            CompoundStructure cs = newWallType.GetCompoundStructure();\n            if (cs != null && cs.LayerCount > 0)\n            {\n                int coreLayerIndex = cs.GetFirstCoreLayerIndex();\n                if (coreLayerIndex >= 0 && coreLayerIndex < cs.LayerCount)\n                {\n                    cs.SetLayerWidth(coreLayerIndex, 300 \/ 304.8);\n                    newWallType.SetCompoundStructure(cs);\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Add a reference point at coordinates (6,7,6) inside the family editor.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(6,7,6));"}
{"prompt":"Duplica el nivel 5 con un desfase de 5m y llámalo 'Mezanine'.","completion":"string levelName = \"Nivel 5\";\nLevel levelToCopy = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (levelToCopy != null)\n{\n    double offset = UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, levelToCopy.Elevation + offset);\n    newLevel.Name = \"Mezanine\";\n}"}
{"prompt":"Inserta una ventana de 1 metro de ancho y 1.2 metros de alto en un muro, creando un nuevo tipo si es necesario.","completion":"Wall hostWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nFamilySymbol originalSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (originalSymbol != null && hostWall != null)\n{\n    \/\/ Duplica el tipo para no modificar el original\n    string newTypeName = $\"Window 1.0m x 1.2m - {Guid.NewGuid().ToString().Substring(0, 4)}\";\n    FamilySymbol newSymbol = originalSymbol.Duplicate(newTypeName) as FamilySymbol;\n\n    \/\/ Activa el nuevo tipo si no lo está\n    if (!newSymbol.IsActive)\n    {\n        newSymbol.Activate();\n    }\n\n    \/\/ Establece las dimensiones en el nuevo tipo\n    Parameter widthParam = newSymbol.LookupParameter(\"Width\");\n    if(widthParam != null) widthParam.Set(UnitUtils.ConvertToInternalUnits(1.0, UnitTypeId.Meters));\n\n    Parameter heightParam = newSymbol.LookupParameter(\"Height\");\n    if(heightParam != null) heightParam.Set(UnitUtils.ConvertToInternalUnits(1.2, UnitTypeId.Meters));\n\n    \/\/ Obtén la información necesaria para la inserción\n    Level level = doc.GetElement(hostWall.LevelId) as Level;\n    LocationCurve locationCurve = hostWall.Location as LocationCurve;\n    if (locationCurve != null)\n    {\n        XYZ insertionPoint = locationCurve.Curve.Evaluate(0.5, true);\n        \/\/ Inserta una instancia del NUEVO tipo\n        doc.Create.NewFamilyInstance(insertionPoint, newSymbol, hostWall, level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Obtain the MEP space associated with the room 'Office 103'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Cast<Room>().FirstOrDefault(r => r.Name == \"Office 103\");\nList<Space> spaces = new List<Space>();\n\nif (room != null)\n{\n    spaces = new FilteredElementCollector(doc).OfClass(typeof(Space)).Cast<Space>().Where(s => s.Room != null && s.Room.Id == room.Id).ToList();\n}"}
{"prompt":"Agrega un nivel llamado 'Nivel Azotea' a 14.9 metros.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(14.9, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Nivel Azotea\";\n}"}
{"prompt":"Construct a wall 5 meters long and 3 meters high.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (level != null && wallType != null)\n{\n    Line line = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0, 0));\n    Wall.Create(doc, line, wallType.Id, level.Id, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0.0, false, false);\n}"}
{"prompt":"Crea un pilar del tipo 'Concreto-Rectangular 30x60' en cada intersección de la rejilla.","completion":"using (Transaction t = new Transaction(doc, \"Create Columns at Grids\"))\n{\n    t.Start();\n    FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(s => s.Name == \"Hormigón-Rectangular 30x60\");\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderBy(l => l.Elevation).FirstOrDefault();\n    List<Grid> grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().ToList();\n    if (columnSymbol != null && level != null)\n    {\n        if (!columnSymbol.IsActive) columnSymbol.Activate();\n        for (int i = 0; i < grids.Count; i++)\n        {\n            for (int j = i + 1; j < grids.Count; j++)\n            {\n                IntersectionResultArray results;\n                if(grids[i].Curve.Intersect(grids[j].Curve, out results) == SetComparisonResult.Overlap)\n                {\n                    if (results != null && !results.IsEmpty)\n                    {\n                        foreach (IntersectionResult ir in results)\n                        {\n                            doc.Create.NewFamilyInstance(ir.XYZPoint, columnSymbol, level, StructuralType.Column);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Build a text note with given text, location, and target element.","completion":"using (Transaction t = new Transaction(doc, \"Create Text Note\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference targetRef = localUidoc.Selection.PickObject(ObjectType.Element, \"Select an element to annotate\");\n    XYZ textLocation = localUidoc.Selection.PickPoint(\"Choose the text location\");\n\n    View activeView = doc.ActiveView;\n    ElementId defaultTypeId = doc.GetDefaultElementTypeId(ElementTypeGroup.TextNoteType);\n\n    if (targetRef != null && textLocation != null && activeView != null && defaultTypeId != ElementId.InvalidElementId)\n    {\n        TextNoteOptions opts = new TextNoteOptions(defaultTypeId);\n        TextNote note = TextNote.Create(doc, activeView.Id, textLocation, \"REVIEW CLASH\", opts);\n        if (note != null)\n        {\n            note.AddLeader(TextNoteLeaderTypes.TNLT_STRAIGHT_L).End = targetRef.GlobalPoint;\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Inserta un punto de referencia en las coordenadas (4,1,8) dentro del editor de familias.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(4,1,8));"}
{"prompt":"Get all door families loaded in the project.","completion":"List<Family> doorFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.Id.IntegerValue == (int)BuiltInCategory.OST_Doors).ToList();"}
{"prompt":"Define the visibility of the 'Furniture' category to false in the active view.","completion":"Category furnitureCat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Furniture);\nView activeView = doc.ActiveView;\n\nif (furnitureCat != null && activeView != null)\n{\n    activeView.SetCategoryHidden(furnitureCat.Id, true);\n}\n"}
{"prompt":"Construct a section view named 'Longitudinal Section'.","completion":"ViewFamilyType sectionType = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.Section);\n\nif (sectionType != null)\n{\n    \/\/ Create a default bounding box as none was specified in the prompt\n    BoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\n    sectionBox.Min = new XYZ(-50, -5, 0);\n    sectionBox.Max = new XYZ(50, 5, 20);\n    ViewSection sectionView = ViewSection.CreateSection(doc, sectionType.Id, sectionBox);\n    \n    if (sectionView != null)\n    {\n        sectionView.Name = \"Longitudinal Section\";\n    }\n}"}
{"prompt":"Set the 'Mark' parameter of all selected walls to 'W-EXT-6'.","completion":"using (Transaction t = new Transaction(doc, \"Set Wall Mark\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    ICollection<ElementId> selectedIds = localUidoc.Selection.GetElementIds();\n\n    if (selectedIds != null && selectedIds.Count > 6)\n    {\n        foreach(ElementId id in selectedIds)\n        {\n            Element elem = doc.GetElement(id);\n            if(elem is Wall)\n            {\n                Parameter p = elem.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n                if (p != null && !p.IsReadOnly)\n                {\n                    p.Set(\"W-EXT-01\");\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea una vista de plano de plafón reflejado para el Nivel 1.","completion":"string levelName = \"Nivel 1\";\nstring viewName = \"Plano de Plafón Nivel 1\";\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.CeilingPlan);\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\n\nif (vft != null && level1 != null)\n{\n    ViewPlan rcp = ViewPlan.Create(doc, vft.Id, level1.Id);\n    if (rcp != null)\n    {\n        rcp.Name = viewName;\n    }\n}"}
{"prompt":"Obtén la tabla de planificación 'Muros' y exporta sus datos a un archivo CSV.","completion":"ViewSchedule schedule = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().FirstOrDefault(s=>s.Name==\"Muros\");\n\nif (schedule != null)\n{\n    string folderPath = \"C:\/RevitExports\/\";\n    ViewScheduleExportOptions options = new ViewScheduleExportOptions() { FieldDelimiter = \",\" };\n    schedule.Export(folderPath, \"Muros.csv\", options);\n}"}
{"prompt":"Añade un punto al Path of Travel seleccionado.","completion":"\/\/ PathOfTravel related methods like GetPath and Update are likely inaccessible in this environment.\n\/\/ The following code is a placeholder to show the intent.\n\/*\nusing (Transaction t = new Transaction(doc, \"Update Path of Travel\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference pickedRef = localUidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un Path of Travel\");\n\n    if (pickedRef != null)\n    {\n        PathOfTravel pot = doc.GetElement(pickedRef) as PathOfTravel;\n        if (pot != null)\n        {\n            IList<XYZ> points = pot.GetPath();\n            if (points != null && points.Count >= 2)\n            {\n                XYZ midPoint = (points[0] + points[1]) \/ 2;\n                points.Insert(1, midPoint); \n                pot.Update(points);\n            }\n        }\n    }\n    t.Commit();\n}\n*\/"}
{"prompt":"Crea un nuevo tipo de muro de 23cm llamado 'Estructura'.","completion":"WallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif(wallTypeToDuplicate != null)\n{\n    WallType newWallType = null;\n    try { newWallType = wallTypeToDuplicate.Duplicate(\"Estructura\") as WallType; } catch {}\n    if(newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if(cs != null && cs.GetLayers().Any())\n        {\n            int coreLayerIndex = cs.GetFirstCoreLayerIndex();\n            if(coreLayerIndex != -1) \n            {\n                cs.SetLayerFunction(coreLayerIndex, MaterialFunctionAssignment.Structure);\n                cs.SetLayerWidth(coreLayerIndex, UnitUtils.ConvertToInternalUnits(23, UnitTypeId.Centimeters));\n                newWallType.SetCompoundStructure(cs);\n            }\n        }\n    }\n}"}
{"prompt":"Coloca postes de iluminación cada 10m en un camino de 100m.","completion":"FamilySymbol lightSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsElementType().FirstOrDefault(s => s.Name.Contains(\"Post\") || s.Name.Contains(\"Pole\")) as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (lightSymbol != null && level != null)\n{\n    if (!lightSymbol.IsActive)\n    {\n        lightSymbol.Activate();\n    }\n    double spacing = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\n    double pathLength = UnitUtils.ConvertToInternalUnits(100, UnitTypeId.Meters);\n    int postCount = (int)(pathLength \/ spacing);\n    for (int i = 0; i <= postCount; i++)\n    {\n        XYZ point = new XYZ(i * spacing, 0, 0);\n        doc.Create.NewFamilyInstance(point, lightSymbol, level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Model a cable tray between two points.","completion":"CableTrayType trayType = new FilteredElementCollector(doc).OfClass(typeof(CableTrayType)).FirstOrDefault() as CableTrayType;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (trayType != null && level != null)\n{\n    XYZ p1 = new XYZ(0,UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters)); \n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits(15, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters));\n    CableTray.Create(doc, trayType.Id, p1, p2, level.Id);\n}"}
{"prompt":"Create an MEP space for each room on Level 1.","completion":"using (Transaction t = new Transaction(doc, \"Create MEP Spaces\"))\n{\n    t.Start();\n    Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 1\");\n\n    if (level1 != null)\n    {\n        List<Room> roomsOnLevel1 = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Where(e => (e as Room) != null && (e as Room).LevelId.Equals(level1.Id)).Cast<Room>().ToList();\n        foreach(Room room in roomsOnLevel1)\n        {\n           \/\/ The direct creation of MEP spaces from rooms might not be available in this specific API version.\n           \/\/ Placeholder comment for the intended logic.\n           \/\/ Space.Create(doc, room, null);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Ubica una instancia de la familia 'M_Chair-Breuer' en el centro de la habitación 'Despacho 106'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 106\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"M_Chair-Breuer\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);"}
{"prompt":"Put an instance of the 'Office Desk' family in the center of the 'Office 100' room.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Office 100\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Office Desk\") as FamilySymbol;\nif(furnitureSymbol != null && !furnitureSymbol.IsActive) furnitureSymbol.Activate();\nif(room != null)\n{\n    LocationPoint roomCenter = room.Location as LocationPoint;\n    if(roomCenter != null && furnitureSymbol != null && room.Level != null)\n    {\n        doc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Append a reference point at coordinates (1,6,6) inside the family editor.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(1,6,6));"}
{"prompt":"Traza una pared de 5m de largo por 3m de altura.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (level != null && wallType != null)\n{\n    Line line = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0, 0));\n    Wall.Create(doc, line, wallType.Id, level.Id, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0.0, false, false);\n}"}
{"prompt":"Ubica una instancia de la familia 'Mesa de Oficina' en el centro de la habitación 'Despacho 104'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 104\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Mesa de Oficina\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);"}
{"prompt":"Build a text note with given text, location, and target element.","completion":"using (Transaction t = new Transaction(doc, \"Create Text Note\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference targetRef = localUidoc.Selection.PickObject(ObjectType.Element, \"Select an element to annotate\");\n    XYZ textLocation = localUidoc.Selection.PickPoint(\"Choose the text location\");\n\n    View activeView = doc.ActiveView;\n    ElementId defaultTypeId = doc.GetDefaultElementTypeId(ElementTypeGroup.TextNoteType);\n\n    if (targetRef != null && textLocation != null && activeView != null && defaultTypeId != ElementId.InvalidElementId)\n    {\n        TextNoteOptions opts = new TextNoteOptions(defaultTypeId);\n        TextNote note = TextNote.Create(doc, activeView.Id, textLocation, \"REVIEW CLASH\", opts);\n        if (note != null)\n        {\n            Leader leader = note.AddLeader(TextNoteLeaderTypes.TNLT_STRAIGHT_L);\n            leader.End = targetRef.GlobalPoint;\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Inserta una armadura (truss) de 6 metros entre dos puntos.","completion":"using (Transaction t = new Transaction(doc, \"Create Truss\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    FamilySymbol trussSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Family.Name.Contains(\"Truss\"));\n\n    if (level != null && trussSymbol != null)\n    {\n        if (!trussSymbol.IsActive) { trussSymbol.Activate(); }\n        Line trussLine = Line.CreateBound(new XYZ(0, 10, 0), new XYZ(6 \/ 0.3048, 10, 0));\n        doc.Create.NewFamilyInstance(trussLine, trussSymbol, level, StructuralType.NonStructural);\n    }\n    t.Commit();\n}"}
{"prompt":"Create a Path of Travel between points (1,1) and (10,10) in the plan view.","completion":"\/\/ PathOfTravel.Create is likely inaccessible in this environment.\n\/\/ A comment is left as a placeholder for the intended functionality.\n\/*\nusing (Transaction t = new Transaction(doc, \"Create Path of Travel\"))\n{\n    t.Start();\n    ViewPlan viewPlan = doc.ActiveView as ViewPlan;\n\n    if (viewPlan != null && viewPlan.ViewType == ViewType.FloorPlan)\n    {\n        ElementId levelId = viewPlan.get_Parameter(BuiltInParameter.PLAN_VIEW_LEVEL).AsElementId();\n        Level level = doc.GetElement(levelId) as Level;\n        if (level != null)\n        {\n            XYZ startPoint = new XYZ(1 \/ 0.3048, 1 \/ 0.3048, level.Elevation);\n            XYZ endPoint = new XYZ(10 \/ 0.3048, 10 \/ 0.3048, level.Elevation);\n            \/\/ PathOfTravel.Create(viewPlan, startPoint, endPoint);\n        }\n    }\n    t.Commit();\n}\n*\/"}
{"prompt":"Crea una familia 'in-situ' para un mostrador de recepción personalizado usando una extrusión.","completion":""}
{"prompt":"Recupera todas las habitaciones que están en el Nivel 3","completion":"string levelName = \"Nivel 3\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(targetLevel.Id);\n    FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WherePasses(levelFilter);\n    uidoc.Selection.SetElementIds(collector.ToElementIds());\n}"}
{"prompt":"Attach a reference point at coordinates (5,2,1) inside the family editor.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(5,2,1));"}
{"prompt":"Crea una escalera entre Nivel 1 y Nivel 2.","completion":"Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel 1\");\nLevel topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel 2\");\n\nif (bottomLevel != null && topLevel != null)\n{\n    \/\/ TODO: Stairs.Create(doc, bottomLevel.Id, topLevel.Id); is not a valid Revit API call.\n    \/\/ Stairs creation requires using the StairsEditScope class.\n}"}
{"prompt":"Coloca un pilar estructural en (10,5), asegurándote de que el tipo de familia esté activo.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null && columnSymbol != null)\n{\n    if (!columnSymbol.IsActive)\n    {\n        columnSymbol.Activate();\n    }\n    doc.Create.NewFamilyInstance(new XYZ(10, 5, 0), columnSymbol, level, StructuralType.Column);\n}"}
{"prompt":"Construct a new wall type 'Generic Wall 285mm' with a thickness of 30cm.","completion":"string newTypeName = \"Generic Wall 285mm\";\nWallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif (oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(newTypeName) as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(30, UnitTypeId.Centimeters));\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n}"}
{"prompt":"Inserta un punto de referencia en las coordenadas (5,5,3) dentro del editor de familias.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(5,5,3));"}
{"prompt":"Copia el nivel 6 con un desfase de 8m y llámalo 'Mezanine'.","completion":"string levelName = \"Nivel 6\";\nLevel levelToCopy = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (levelToCopy != null)\n{\n    double offset = UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, levelToCopy.Elevation + offset);\n    newLevel.Name = \"Mezanine\";\n}"}
{"prompt":"Construct a new level 'Level 5' at an elevation of 10 meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Level 5\";\n}"}
{"prompt":"Oculta todas las categorías de anotación en la vista activa.","completion":"using (Transaction t = new Transaction(doc, \"Hide Annotation Categories\"))\n{\n    t.Start();\n    Categories categories = doc.Settings.Categories;\n    View activeView = doc.ActiveView;\n\n    if (activeView != null)\n    {\n        foreach(Category cat in categories)\n        {\n            if(cat.CategoryType == CategoryType.Annotation && cat.get_AllowsVisibilityControl(activeView))\n            {\n                 activeView.SetCategoryHidden(cat.Id, true);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Ajusta todas las ventanas para que tengan la altura del antepecho a 900mm.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits(900, UnitTypeId.Millimeters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Generate a new room on Level 1 at point (14, 12).","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nif (level1 != null)\n{\n    UV point = new UV(14, 12);\n    Room room = doc.Create.NewRoom(level1, point);\n}"}
{"prompt":"Select all walls on 'Level 6' and change their comment to 'REVIEW INSULATION'.","completion":"string levelName = \"Level 6\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(targetLevel.Id);\n    FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(levelFilter);\n    foreach (Element wall in collector)\n    {\n        Parameter commentsParam = wall.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n        if (commentsParam != null && !commentsParam.IsReadOnly) { commentsParam.Set(\"REVIEW INSULATION\"); }\n    }\n}"}
{"prompt":"Crea un nuevo parámetro de proyecto compartido de texto llamado 'Notas Adicionales' para muros y puertas.","completion":"string paramName = \"Notas Adicionales\";\nstring originalFile = doc.Application.SharedParametersFilename;\nstring tempFile = System.IO.Path.GetTempFileName() + \".txt\";\nusing (System.IO.File.Create(tempFile)) { }\ndoc.Application.SharedParametersFilename = tempFile;\ntry\n{\n    DefinitionFile defFile = doc.Application.OpenSharedParameterFile();\n    if (defFile != null)\n    {\n        DefinitionGroup group = defFile.Groups.Create(\"General\");\n        if (group != null)\n        {\n            ExternalDefinitionCreationOptions options = new ExternalDefinitionCreationOptions(paramName, SpecTypeId.String.Text);\n            Definition definition = group.Definitions.Create(options);\n            if (definition != null)\n            {\n                CategorySet categories = doc.Application.Create.NewCategorySet();\n                categories.Insert(doc.Settings.Categories.get_Item(BuiltInCategory.OST_Walls));\n                categories.Insert(doc.Settings.Categories.get_Item(BuiltInCategory.OST_Doors));\n                InstanceBinding binding = doc.Application.Create.NewInstanceBinding(categories);\n                doc.ParameterBindings.Insert(definition, binding, GroupTypeId.Data);\n            }\n        }\n    }\n}\nfinally\n{\n    doc.Application.SharedParametersFilename = originalFile;\n    System.IO.File.Delete(tempFile);\n}"}
{"prompt":"Muestra un cuadro de diálogo con opciones 'Sí' y 'No'.","completion":""}
{"prompt":"Construct a new Level named 'Level 6' at an elevation of 16 meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(16, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Level 6\";\n}"}
{"prompt":"Define the 'Comments' parameter for all doors on Level 1 to 'Fire Rating - 88 min'.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\n\nif (level1 != null)\n{\n    List<FamilyInstance> doorsOnLevel1 = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsNotElementType().Cast<FamilyInstance>().Where(fi => fi.LevelId == level1.Id).ToList();\n    foreach(FamilyInstance door in doorsOnLevel1)\n    {\n        Parameter commentsParam = door.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n        if (commentsParam != null && !commentsParam.IsReadOnly) commentsParam.Set(\"Fire Rating - 88 min\");\n    }\n}"}
{"prompt":"Create a floor with a circular hole in the center.","completion":"using (Transaction t = new Transaction(doc, \"Create Floor with Hole\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    FloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\n\n    if (level != null && floorType != null)\n    {\n        XYZ p1 = new XYZ(-10 \/ 0.3048, -10 \/ 0.3048, 0);\n        XYZ p2 = new XYZ(10 \/ 0.3048, -10 \/ 0.3048, 0);\n        XYZ p3 = new XYZ(10 \/ 0.3048, 10 \/ 0.3048, 0);\n        XYZ p4 = new XYZ(-10 \/ 0.3048, 10 \/ 0.3048, 0);\n        CurveLoop outerLoop = new CurveLoop();\n        outerLoop.Append(Line.CreateBound(p1, p2));\n        outerLoop.Append(Line.CreateBound(p2, p3));\n        outerLoop.Append(Line.CreateBound(p3, p4));\n        outerLoop.Append(Line.CreateBound(p4, p1));\n\n        XYZ center = XYZ.Zero;\n        double radius = 2 \/ 0.3048;\n        CurveLoop innerLoop = new CurveLoop();\n        innerLoop.Append(Arc.Create(center - XYZ.BasisX * radius, center + XYZ.BasisX * radius, center + XYZ.BasisY * radius));\n        innerLoop.Append(Arc.Create(center + XYZ.BasisX * radius, center - XYZ.BasisX * radius, center - XYZ.BasisY * radius));\n\n        Floor.Create(doc, new List<CurveLoop> { outerLoop, innerLoop }, floorType.Id, level.Id);\n    }\n    t.Commit();\n}"}
{"prompt":"Create a new pipe type named 'Steel Pipe' with 'Steel, Carbon' material.","completion":"string newTypeName = \"Steel Pipe\";\nPipeType pipeTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(PipeType)).FirstOrDefault() as PipeType;\nMaterial steel = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name == \"Steel, Carbon\") as Material;\n\nif (pipeTypeToDuplicate != null && steel != null)\n{\n    PipeType newType = pipeTypeToDuplicate.Duplicate(newTypeName) as PipeType;\n    if (newType != null)\n    {\n        Parameter materialParam = newType.get_Parameter(BuiltInParameter.MATERIAL_ID_PARAM);\n        if (materialParam != null && !materialParam.IsReadOnly) materialParam.Set(steel.Id);\n    }\n}"}
{"prompt":"Actualiza el tipo de una losa seleccionada a 'Concreto 15cm'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una losa\");\n\nif (pickedRef != null)\n{\n    Floor floorToChange = doc.GetElement(pickedRef) as Floor;\n    FloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name == \"Concreto 15cm\");\n    \n    if (floorToChange != null && newType != null)\n    {\n        floorToChange.ChangeTypeId(newType.Id);\n    }\n}"}
{"prompt":"Draw a filled region with a diagonal pattern.","completion":"using (Transaction t = new Transaction(doc, \"Draw Filled Region\"))\n{\n    t.Start();\n    View activeView = doc.ActiveView;\n    FillPatternElement fillPattern = new FilteredElementCollector(doc).OfClass(typeof(FillPatternElement)).Cast<FillPatternElement>().FirstOrDefault(p => !p.GetFillPattern().IsSolidFill);\n\n    if (activeView != null && fillPattern != null)\n    {\n        FilledRegionType filledRegionType = new FilteredElementCollector(doc, activeView.Id).OfClass(typeof(FilledRegionType)).FirstOrDefault() as FilledRegionType;\n        if (filledRegionType != null)\n        {\n            FilledRegionType newType = filledRegionType.Duplicate(\"Temp Diagonal Region\") as FilledRegionType;\n            if (newType != null)\n            {\n                newType.ForegroundPatternId = fillPattern.Id;\n                XYZ p1 = new XYZ(0,0,0);\n                XYZ p2 = new XYZ(5 \/ 0.3048,0,0);\n                XYZ p3 = new XYZ(5 \/ 0.3048,5 \/ 0.3048,0);\n                XYZ p4 = new XYZ(0,5 \/ 0.3048,0);\n                CurveLoop profile = new CurveLoop();\n                profile.Append(Line.CreateBound(p1,p2));\n                profile.Append(Line.CreateBound(p2,p3));\n                profile.Append(Line.CreateBound(p3,p4));\n                profile.Append(Line.CreateBound(p4,p1));\n                FilledRegion.Create(doc, newType.Id, activeView.Id, new List<CurveLoop>{profile});\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Get the 'Walls' schedule and export its data to CSV.","completion":"ViewSchedule schedule = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().FirstOrDefault(s=>s.Name==\"Walls\");\n\nif (schedule != null)\n{\n    string folderPath = \"C:\/RevitExports\/\";\n    ViewScheduleExportOptions options = new ViewScheduleExportOptions() { FieldDelimiter = \",\" };\n    schedule.Export(folderPath, \"Walls.csv\", options);\n}"}
{"prompt":"Create a detail group with the selected detail items.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds != null && selectedIds.Count > 0)\n{\n    List<ElementId> detailIds = new List<ElementId>();\n    foreach(ElementId id in selectedIds)\n    {\n        Element elem = doc.GetElement(id);\n        if (elem != null && elem.Category != null && elem.Category.CategoryType == CategoryType.Annotation)\n        {\n            detailIds.Add(id);\n        }\n    }\n\n    if (detailIds.Count > 0)\n    {\n        Group group = doc.Create.NewGroup(detailIds);\n        if (group != null)\n        {\n            group.Name = \"Typical Detail 1\";\n        }\n    }\n}"}
{"prompt":"Crea un nuevo tipo de muro de 28cm llamado 'Estructura'.","completion":"string newTypeName = \"Estructura\";\nWallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(newTypeName) as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(28, UnitTypeId.Centimeters));\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n}"}
{"prompt":"Create a floor plan view for 'Level 3'.","completion":"string levelName = \"Level 3\";\nLevel level3 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.FloorPlan);\n\nif (level3 != null && vft != null)\n{\n    ViewPlan viewPlan = ViewPlan.Create(doc, vft.Id, level3.Id);\n}"}
{"prompt":"Create a topography surface from a list of 4 points.","completion":"IList<XYZ> points = new List<XYZ>\n{\n    new XYZ(0, 0, 0),\n    new XYZ(10, 0, 1),\n    new XYZ(0, 10, 2),\n    new XYZ(10, 10, 1)\n};\nElementId toposolidTypeId = new FilteredElementCollector(doc).OfClass(typeof(ToposolidType)).FirstElementId();\nif(toposolidTypeId != null && toposolidTypeId != ElementId.InvalidElementId)\n{\n    Toposolid.Create(doc, points, toposolidTypeId, ElementId.InvalidElementId);\n}"}
{"prompt":"Clone level 1 with a 5m offset and name it 'Mezzanine'.","completion":"string levelName = \"Mezzanine\";\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\n\nif (level1 != null)\n{\n    double newElevation = level1.ProjectElevation + UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, newElevation);\n    if (newLevel != null)\n    {\n        newLevel.Name = levelName;\n    }\n}"}
{"prompt":"Generate a new wall type 'Generic Wall 300mm' with a thickness of 30cm.","completion":"using (Transaction t = new Transaction(doc, \"Create Wall Type\"))\n{\n    t.Start();\n    string newTypeName = \"Generic Wall 300mm\";\n    WallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\n    if (oldWallType != null)\n    {\n        WallType newWallType = oldWallType.Duplicate(newTypeName) as WallType;\n        if (newWallType != null)\n        {\n            CompoundStructure cs = newWallType.GetCompoundStructure();\n            if (cs != null && cs.LayerCount > 0)\n            {\n                int coreLayerIndex = cs.GetFirstCoreLayerIndex();\n                if (coreLayerIndex >= 0 && coreLayerIndex < cs.LayerCount)\n                {\n                    cs.SetLayerWidth(coreLayerIndex, 300 \/ 304.8);\n                    newWallType.SetCompoundStructure(cs);\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea un nuevo tipo de puerta llamado 'Puerta RF-90' y establece su resistencia al fuego a '90 min'.","completion":"string newTypeName = \"Puerta RF-90\";\nFamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nFamilySymbol newDoorType = null;\nif (doorTypeToDuplicate != null)\n{\n    newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\n    if (newDoorType != null)\n    {\n        Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n        if (fireRatingParam != null && !fireRatingParam.IsReadOnly)\n        {\n            fireRatingParam.Set(\"90 min\");\n        }\n    }\n}"}
{"prompt":"Assign the 'Comments' parameter for all doors on Level 4 to 'Fire Rating - 92 min'.","completion":"string levelName = \"Level 4\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(targetLevel.Id);\n    FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WherePasses(levelFilter);\n    foreach (Element door in collector)\n    {\n        Parameter commentsParam = door.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n        if (commentsParam != null && !commentsParam.IsReadOnly) { commentsParam.Set(\"Fire Rating - 92 min\"); }\n    }\n}"}
{"prompt":"Build a rectangular opening in a floor.","completion":"using (Transaction t = new Transaction(doc, \"Create Opening\"))\n{\n    t.Start();\n    Floor floor = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault() as Floor;\n\n    if (floor != null)\n    {\n        XYZ p1 = new XYZ(1 \/ 0.3048, 1 \/ 0.3048, 0);\n        XYZ p2 = new XYZ(3 \/ 0.3048, 1 \/ 0.3048, 0);\n        XYZ p3 = new XYZ(3 \/ 0.3048, 3 \/ 0.3048, 0);\n        XYZ p4 = new XYZ(1 \/ 0.3048, 3 \/ 0.3048, 0);\n        CurveArray profile = new CurveArray();\n        profile.Append(Line.CreateBound(p1, p2));\n        profile.Append(Line.CreateBound(p2, p3));\n        profile.Append(Line.CreateBound(p3, p4));\n        profile.Append(Line.CreateBound(p4, p1));\n        doc.Create.NewOpening(floor, profile, true);\n    }\n    t.Commit();\n}"}
{"prompt":"Une la geometría de una columna y un suelo que se cruzan.","completion":"Element column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().FirstOrDefault();\nElement floor = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault();\n\nif (column != null && floor != null)\n{\n    JoinGeometryUtils.JoinGeometry(doc, column, floor);\n}"}
{"prompt":"Create a new workset named 'Structure'.","completion":"string wsName = \"Structure\";\nWorkset newWorkset = Workset.Create(doc, wsName);\n"}
{"prompt":"Insert an instance of the 'Office Desk' family in the center of the 'Office 103' room.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Office 103\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Office Desk\") as FamilySymbol;\nif(furnitureSymbol != null && !furnitureSymbol.IsActive) furnitureSymbol.Activate();\nif(room != null)\n{\n    LocationPoint roomCenter = room.Location as LocationPoint;\n    if(roomCenter != null && furnitureSymbol != null && room.Level != null)\n    {\n        doc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Crea un nuevo Nivel llamado 'Nivel 3' a una elevación de 16 metros.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(16, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Nivel 3\";\n}"}
{"prompt":"Inserta una instancia de la familia 'Mesa de Oficina' en el centro de la habitación 'Despacho 102'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 102\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Mesa de Oficina\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);"}
{"prompt":"Crea un tipo de muro 'Muro-Doble' de 30cm y luego crea un muro de ese tipo.","completion":"string newTypeName = \"Muro-Doble\";\nWallType newWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == newTypeName) as WallType;\nif (newWallType == null)\n{\n    WallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n    if(wallTypeToDuplicate != null)\n    {\n        newWallType = wallTypeToDuplicate.Duplicate(newTypeName) as WallType;\n        if(newWallType!=null)\n        {\n            CompoundStructure cs = newWallType.GetCompoundStructure();\n            if(cs != null)\n            {\n                cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(0.3, UnitTypeId.Meters));\n                newWallType.SetCompoundStructure(cs);\n            }\n        }\n    }\n}\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nLine wallCurve = Line.CreateBound(XYZ.Zero, new XYZ(10,0,0));\nWall.Create(doc, wallCurve, newWallType.Id, level.Id, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0, false, false);"}
{"prompt":"Create 10 architectural worksets.","completion":"List<string> worksetNames = new List<string> { \"TAD_ARQ_WALLS\", \"TAD_ARQ_FINISHES\", \"TAD_ARQ_CEILINGS\", \"TAD_ARQ_FLOORS\", \"TAD_ARQ_RAILINGS\", \"TAD_ARQ_WINDOWS\", \"TAD_ARQ_CARPENTRY\", \"TAD_ARQ_FURNITURE\", \"TAD_ARQ_PLUMBING\", \"TAD_ARQ_EXTERIOR\" };\nforeach(string name in worksetNames)\n{\n    Workset newWorkset = Workset.Create(doc, name);\n}"}
{"prompt":"Abre una familia, añade un parámetro de tipo 'Código de Material' y guárdala.","completion":""}
{"prompt":"Fetch all subcategories from the Doors category.","completion":"Category doorCat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Doors);\nCategoryNameMap subcategories = doorCat.SubCategories;"}
{"prompt":"Create a floor plan view for 'Level 3'.","completion":"string levelName = \"Level 3\";\nLevel level3 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.FloorPlan);\n\nif (level3 != null && vft != null)\n{\n    ViewPlan viewPlan = ViewPlan.Create(doc, vft.Id, level3.Id);\n}"}
{"prompt":"Crea un nuevo tipo de muro de 20cm llamado 'Muro Estructural 23cm'.","completion":"string newTypeName = \"Muro Estructural 23cm\";\nWallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif (oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(newTypeName) as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(20, UnitTypeId.Centimeters));\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n}"}
{"prompt":"Selecciona todos los muros del 'Nivel 2' y cambia su comentario a 'REVISAR AISLAMIENTO'.","completion":"Level level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 2\") as Level;\nList<Wall> wallsOnLevel2 = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Where(w => w.LevelId == level2.Id).Cast<Wall>().ToList();\nforeach(Wall wall in wallsOnLevel2)\n{\n    wall.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS).Set(\"REVISAR AISLAMIENTO\");\n}"}
{"prompt":"Elimina todas las puertas del Nivel 1.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\nif (level1 != null)\n{\n    ElementCategoryFilter categoryFilter = new ElementCategoryFilter(BuiltInCategory.OST_Doors);\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level1.Id);\n    LogicalAndFilter andFilter = new LogicalAndFilter(categoryFilter, levelFilter);\n    ICollection<ElementId> doorsToDelete = new FilteredElementCollector(doc).WherePasses(andFilter).ToElementIds();\n    if (doorsToDelete.Count > 0)\n    {\n        doc.Delete(doorsToDelete);\n    }\n}"}
{"prompt":"Encuentra el tipo de columna estructural llamado \"299 x 446mm\" y colócalo en X=1, Y=12.6","completion":"string columnTypeName = \"299 x 446mm\";\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(s => s.Name == columnTypeName);\n\nif (level != null && columnSymbol != null)\n{\n    if (!columnSymbol.IsActive)\n    {\n        columnSymbol.Activate();\n    }\n    doc.Create.NewFamilyInstance(new XYZ(1, 12.6, 0), columnSymbol, level, StructuralType.Column);\n}"}
{"prompt":"Gira un elemento seleccionado 92 grados sobre su eje Z.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un elemento para rotar\");\nElement elem = doc.GetElement(pickedRef.ElementId);\nLocationPoint lp = elem.Location as LocationPoint;\nLine axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\nElementTransformUtils.RotateElement(doc, elem.Id, axis, Math.PI \/ 92);"}
{"prompt":"Duplicate the 'Generic - 150mm' wall type and name it 'Interior - 15cm Plaster'.","completion":"string originalName = \"Generic - 150mm\";\nstring newName = \"Interior - 15cm Plaster\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif(originalType!=null)\n    originalType.Duplicate(newName);"}
{"prompt":"Crea columnas en cada intersección de ejes.","completion":"FamilySymbol colSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nList<Grid> grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().ToList();\n\nif (colSymbol != null && level != null && grids.Count >= 2)\n{\n    for (int i = 0; i < grids.Count; i++)\n    {\n        for (int j = i + 1; j < grids.Count; j++)\n        {\n            IntersectionResultArray results = null;\n            grids[i].Curve.Intersect(grids[j].Curve, out results);\n            if(results != null)\n            {\n                 foreach (IntersectionResult ir in results)\n                 {\n                     doc.Create.NewFamilyInstance(ir.XYZPoint, colSymbol, level, StructuralType.Column);\n                 }\n            }\n        }\n    }\n}"}
{"prompt":"Crea una nueva cota de nivel llamada 'Nivel 7' a una elevación de 13 metros.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(13, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\nif (newLevel != null)\n{\n    try { newLevel.Name = \"Nivel 7\"; } catch {}\n}"}
{"prompt":"Inserta un nivel llamado 'Nivel Azotea' a 16.0 metros.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(16.0, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Nivel Azotea\";\n}"}
{"prompt":"Align the face of one wall with the face of another.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference ref1 = uidoc.Selection.PickObject(ObjectType.Face, \"Select the target face (stationary)\");\nReference ref2 = uidoc.Selection.PickObject(ObjectType.Face, \"Select the face to move\");\nView activeView = doc.ActiveView;\n\nif (ref1 != null && ref2 != null && activeView != null)\n{\n    doc.Create.NewAlignment(activeView, ref1, ref2);\n}"}
{"prompt":"Find the structural column type named \"295 x 453mm\" and place it at X=1, Y=12.8","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(s => s.Name == \"295 x 453mm\");\nif (level != null && columnSymbol != null)\n{\n    if (!columnSymbol.IsActive) { columnSymbol.Activate(); }\n    XYZ point = new XYZ(1, 12.8, 0);\n    doc.Create.NewFamilyInstance(point, columnSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n}"}
{"prompt":"Clone level 1 with a 4m offset and name it 'Mezzanine'.","completion":"string levelName = \"Mezzanine\";\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\n\nif (level1 != null)\n{\n    double newElevation = level1.ProjectElevation + UnitUtils.ConvertToInternalUnits(4, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, newElevation);\n    if (newLevel != null)\n    {\n        newLevel.Name = levelName;\n    }\n}"}
{"prompt":"Apply the 'Wireframe' visual style to the active 3D view.","completion":"View3D view3D = doc.ActiveView as View3D;\nif (view3D != null && !view3D.IsTemplate)\n{\n    view3D.DisplayStyle = DisplayStyle.Wireframe;\n}"}
{"prompt":"Crea una nota de texto con un texto, una ubicación y un elemento de destino dados.","completion":"using (Transaction t = new Transaction(doc, \"Create Text Note\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference targetRef = localUidoc.Selection.PickObject(ObjectType.Element, \"Selecciona el elemento a anotar\");\n    XYZ textLocation = localUidoc.Selection.PickPoint(\"Elige la ubicación del texto\");\n\n    View activeView = doc.ActiveView;\n    ElementId defaultTypeId = doc.GetDefaultElementTypeId(ElementTypeGroup.TextNoteType);\n\n    if (targetRef != null && textLocation != null && activeView != null && defaultTypeId != ElementId.InvalidElementId)\n    {\n        TextNoteOptions opts = new TextNoteOptions(defaultTypeId);\n        TextNote note = TextNote.Create(doc, activeView.Id, textLocation, \"REVISAR CLASH\", opts);\n        if (note != null)\n        {\n            note.AddLeader(TextNoteLeaderTypes.TNLT_STRAIGHT_L).End = targetRef.GlobalPoint;\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Oculta los elementos seleccionados en la vista activa.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> idsToHide = uidoc.Selection.GetElementIds();\nView activeView = doc.ActiveView;\n\nif (activeView != null && idsToHide.Count > 0)\n{\n    activeView.HideElements(idsToHide);\n}"}
{"prompt":"Extrae todos los muros del Nivel 1 que son estructurales.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\nif (level1 != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level1.Id);\n    ElementCategoryFilter categoryFilter = new ElementCategoryFilter(BuiltInCategory.OST_Walls);\n    ParameterValueProvider pvp = new ParameterValueProvider(new ElementId(BuiltInParameter.WALL_STRUCTURAL_SIGNIFICANT));\n    FilterIntegerRule rule = new FilterIntegerRule(pvp, new FilterNumericEquals(), 1);\n    ElementParameterFilter structuralFilter = new ElementParameterFilter(rule);\n    LogicalAndFilter andFilter = new LogicalAndFilter(new List<ElementFilter> { levelFilter, categoryFilter, structuralFilter });\n    List<Element> structuralWalls = new FilteredElementCollector(doc).WherePasses(andFilter).ToList();\n}"}
{"prompt":"Estima la longitud total de todos los ductos de Suministro de Aire.","completion":"List<Duct> ducts = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_DuctCurves).WhereElementIsNotElementType().Cast<Duct>().Where(d => d.get_Parameter(BuiltInParameter.RBS_SYSTEM_CLASSIFICATION_PARAM).AsString() == \"SupplyAir\").ToList();\ndouble totalLength = 0.0;\nforeach (Duct d in ducts)\n{\n    totalLength += d.get_Parameter(BuiltInParameter.CURVE_ELEM_LENGTH).AsDouble();\n}"}
{"prompt":"Permite al usuario seleccionar un muro y obtén su ElementId.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un muro\");\nElementId selectedWallId = ElementId.InvalidElementId;\nif (pickedRef != null)\n{\n    selectedWallId = pickedRef.ElementId;\n}"}
{"prompt":"Construct an MEP space for each room on Level 1","completion":"string levelName = \"Level 1\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    FilteredElementCollector roomCollector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WherePasses(new ElementLevelFilter(targetLevel.Id));\n    foreach (Room room in roomCollector.ToElements().Cast<Room>())\n    {\n        LocationPoint locPoint = room.Location as LocationPoint;\n        if (locPoint != null)\n        {\n            UV point = new UV(locPoint.Point.X, locPoint.Point.Y);\n            doc.Create.NewSpace(targetLevel, point);\n        }\n    }\n}"}
{"prompt":"Elimina todos los tipos de muro no utilizados en el proyecto.","completion":"ICollection<ElementId> allWallTypes = new FilteredElementCollector(doc).OfClass(typeof(WallType)).ToElementIds();\nICollection<ElementId> usedWallTypes = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Select(w => w.GetTypeId()).Distinct().ToList();\nList<ElementId> unusedWallTypes = allWallTypes.Except(usedWallTypes).ToList();\ndoc.Delete(unusedWallTypes);"}
{"prompt":"Select all walls on 'Level 2' and change their comment to 'REVIEW INSULATION'.","completion":"Level level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 2\") as Level;\nList<Wall> wallsOnLevel2 = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Where(w => w.LevelId == level2.Id).Cast<Wall>().ToList();\nforeach(Wall wall in wallsOnLevel2)\n{\n    wall.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS).Set(\"REVIEW INSULATION\");\n}"}
{"prompt":"Establece la visibilidad de la categoría 'Mobiliario' en falso en la vista activa.","completion":"Category furnitureCat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Furniture);\nView activeView = doc.ActiveView;\n\nif (furnitureCat != null && activeView != null)\n{\n    activeView.SetCategoryHidden(furnitureCat.Id, true);\n}"}
{"prompt":"Encuentra todas las puertas del Nivel 2 que sean de la familia 'Puerta Sencilla'.","completion":"Level level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel 2\");\nList<Element> doors = new List<Element>();\n\nif (level2 != null)\n{\n    ElementCategoryFilter catFilter = new ElementCategoryFilter(BuiltInCategory.OST_Doors);\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level2.Id);\n    FilterableValueProvider provider = new ParameterValueProvider(new ElementId(BuiltInParameter.ELEM_FAMILY_PARAM));\n    FilterStringRuleEvaluator evaluator = new FilterStringEquals();\n    FilterRule famNameRule = new FilterStringRule(provider, evaluator, \"Puerta Sencilla\");\n    ElementParameterFilter famFilter = new ElementParameterFilter(famNameRule);\n    LogicalAndFilter andFilter = new LogicalAndFilter(new List<ElementFilter> { catFilter, levelFilter, famFilter });\n    doors = new FilteredElementCollector(doc).WherePasses(andFilter).ToList();\n}"}
{"prompt":"Recarga el vínculo de Revit 'Estructura_LINK.rvt'.","completion":"RevitLinkType linkType = new FilteredElementCollector(doc).OfClass(typeof(RevitLinkType)).Cast<RevitLinkType>().FirstOrDefault(lt => lt.Name == \"Estructura_LINK.rvt\");\nif(linkType != null)\n{\n    linkType.Reload();\n}"}
{"prompt":"Obtain a list of all annotation families.","completion":"List<Family> annotationFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.CategoryType == CategoryType.Annotation).ToList();\n"}
{"prompt":"Aplica aislamiento térmico de 29mm a todas las tuberías de agua caliente.","completion":"PipeInsulationType insulationType = new FilteredElementCollector(doc).OfClass(typeof(PipeInsulationType)).FirstOrDefault() as PipeInsulationType;\nPipingSystemType hotWaterSystem = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).Cast<PipingSystemType>().FirstOrDefault(s => s.Name.Contains(\"Hot Water\") || s.Name.Contains(\"Agua Caliente\"));\n\nif (insulationType != null && hotWaterSystem != null)\n{\n    List<Pipe> pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast<Pipe>().Where(p => \n    {\n        Parameter systemParam = p.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM);\n        return systemParam != null && systemParam.HasValue && systemParam.AsElementId() == hotWaterSystem.Id;\n    }).ToList();\n    \n    foreach(Pipe p in pipes)\n    {\n        PipeInsulation.Create(doc, p.Id, insulationType.Id, UnitUtils.ConvertToInternalUnits(29, UnitTypeId.Millimeters));\n    }\n}"}
{"prompt":"Carga la familia 'Mesa.rfa' y colócala en (5,5,0) en el Nivel 1.","completion":"string familyPath = \"C:\/Rutas\/Comunes\/Mesa.rfa\";\nFamily deskFamily = null;\nbool familyLoaded = doc.LoadFamily(familyPath, out deskFamily);\n\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\n\nif (familyLoaded && deskFamily != null && level1 != null)\n{\n    FamilySymbol deskSymbol = doc.GetElement(deskFamily.GetFamilySymbolIds().FirstOrDefault()) as FamilySymbol;\n    if (deskSymbol != null)\n    {\n        if (!deskSymbol.IsActive) deskSymbol.Activate();\n        XYZ point = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0);\n        doc.Create.NewFamilyInstance(point, deskSymbol, level1, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Build a new wall type 'Generic Wall 334mm' with a thickness of 30cm.","completion":"string newTypeName = \"Generic Wall 334mm\";\nWallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif (oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(newTypeName) as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(30, UnitTypeId.Centimeters));\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n}"}
{"prompt":"Create a new 5mm text type in green color.","completion":"using (Transaction t = new Transaction(doc, \"Create Green Text Type\"))\n{\n    t.Start();\n    string newTypeName = \"5mm Green\";\n    TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\n    if (defaultType != null)\n    {\n        TextNoteType newType = defaultType.Duplicate(newTypeName) as TextNoteType;\n        if (newType != null)\n        {\n            Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n            if (textSizeParam != null && !textSizeParam.IsReadOnly)\n            {\n                textSizeParam.Set(5 \/ 304.8);\n            }\n            Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n            if (lineColorParam != null && !lineColorParam.IsReadOnly)\n            {\n                 lineColorParam.Set(65280);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create a 3D view oriented from the southeast.","completion":"string viewName = \"3D View Southeast\";\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft != null)\n{\n    View3D view3d = View3D.CreateIsometric(doc, vft.Id);\n    if (view3d != null)\n    {\n        XYZ eye = new XYZ(1, -1, 1);\n        XYZ up = new XYZ(0, 0, 1);\n        XYZ forward = new XYZ(-1, 1, -1);\n        view3d.SetOrientation(new ViewOrientation3D(eye, up, forward));\n        view3d.Name = viewName;\n    }\n}"}
{"prompt":"Generate a new level named 'Mezzanine' at 6.6 meters elevation.","completion":"string levelName = \"Mezzanine\";\ndouble elevation = UnitUtils.ConvertToInternalUnits(6.6, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Clona el nivel 1 con un desfase de 6m y llámalo 'Mezanine'.","completion":"string levelName = \"Mezanine\";\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\n\nif (level1 != null)\n{\n    double newElevation = level1.ProjectElevation + UnitUtils.ConvertToInternalUnits(6, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, newElevation);\n    if (newLevel != null)\n    {\n        newLevel.Name = levelName;\n    }\n}"}
{"prompt":"Crea una nueva tabla de planificación para Pilares Estructurales.","completion":"string scheduleName = \"Tabla de Pilares Estructurales\";\nElementId categoryId = new ElementId(BuiltInCategory.OST_StructuralColumns);\nViewSchedule schedule = ViewSchedule.CreateSchedule(doc, categoryId);\nschedule.Name = scheduleName;"}
{"prompt":"Find all doors on Level 2 that belong to the 'Single-Flush' family.","completion":"Level level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 2\");\nList<Element> doors = new List<Element>();\n\nif (level2 != null)\n{\n    ElementCategoryFilter catFilter = new ElementCategoryFilter(BuiltInCategory.OST_Doors);\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level2.Id);\n    FilterableValueProvider provider = new ParameterValueProvider(new ElementId(BuiltInParameter.ELEM_FAMILY_PARAM));\n    FilterStringRuleEvaluator evaluator = new FilterStringEquals();\n    FilterRule famNameRule = new FilterStringRule(provider, evaluator, \"Single-Flush\");\n    ElementParameterFilter famFilter = new ElementParameterFilter(famNameRule);\n    LogicalAndFilter andFilter = new LogicalAndFilter(new List<ElementFilter> { catFilter, levelFilter, famFilter });\n    doors = new FilteredElementCollector(doc).WherePasses(andFilter).ToList();\n}"}
{"prompt":"Create a new level named 'Mezzanine' at 7.7 meters elevation.","completion":"string levelName = \"Mezzanine\";\ndouble elevation = UnitUtils.ConvertToInternalUnits(7.7, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Build 4 vertical grids spaced 10 meters apart.","completion":"double separation = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\nfor(int i=0; i<4; i++)\n{\n    Line line = Line.CreateBound(new XYZ(i * separation, 0, 0), new XYZ(i * separation, 40, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Build a new level named 'Basement Floor' at an elevation of -4.5 meters.","completion":"double elevationInternal = UnitUtils.ConvertToInternalUnits(-4.5, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevationInternal);\nif(newLevel != null)\n{\n    try { newLevel.Name = \"Basement Floor\"; } catch {}\n}"}
{"prompt":"Generate an MEP space for each room on Level 1","completion":"string levelName = \"Level 1\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    FilteredElementCollector roomCollector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WherePasses(new ElementLevelFilter(targetLevel.Id));\n    foreach (Room room in roomCollector.ToElements().Cast<Room>())\n    {\n        LocationPoint locPoint = room.Location as LocationPoint;\n        if (locPoint != null)\n        {\n            UV point = new UV(locPoint.Point.X, locPoint.Point.Y);\n            doc.Create.NewSpace(targetLevel, point);\n        }\n    }\n}"}
{"prompt":"Get the total number of warnings in the project.","completion":"int totalWarnings = doc.GetWarnings().Count;\n"}
{"prompt":"Create an in-place family for a custom reception desk using an extrusion.","completion":""}
{"prompt":"Cambia el tipo de todos los muros seleccionados a 'Muro Exterior'.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nWallType targetWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Name == \"Muro Exterior\");\n\nif (selectedIds.Count > 0 && targetWallType != null)\n{\n    foreach(ElementId id in selectedIds)\n    {\n        Wall wall = doc.GetElement(id) as Wall;\n        if(wall != null) wall.ChangeTypeId(targetWallType.Id);\n    }\n}"}
{"prompt":"Crea un nuevo panel en la cinta de opciones llamado 'Mis Herramientas' con un botón.","completion":""}
{"prompt":"Construct an axonometric 3D view oriented to the Northwest.","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft != null)\n{\n    View3D view3d = View3D.CreateIsometric(doc, vft.Id);\n    if (view3d != null)\n    {\n        XYZ eye = new XYZ(-1, 1, 1);\n        XYZ up = new XYZ(0, 0, 1);\n        XYZ forward = new XYZ(1, -1, -1);\n        view3d.SetOrientation(new ViewOrientation3D(eye, up, forward));\n        view3d.Name = \"3D View Northwest\";\n    }\n}"}
{"prompt":"Duplicate the 'Generic - 145mm' wall type and name it 'Interior - 16cm Plaster'.","completion":"string originalName = \"Generic - 145mm\";\nstring newName = \"Interior - 16cm Plaster\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif (originalType != null)\n{\n    WallType newType = originalType.Duplicate(newName) as WallType;\n}"}
{"prompt":"Ubica una instancia de la familia 'Mesa de Oficina' en el centro de la habitación 'Despacho 98'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 98\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Mesa de Oficina\") as FamilySymbol;\nif(furnitureSymbol != null && !furnitureSymbol.IsActive) furnitureSymbol.Activate();\nif(room != null)\n{\n    LocationPoint roomCenter = room.Location as LocationPoint;\n    if(roomCenter != null && furnitureSymbol != null && room.Level != null)\n    {\n        doc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Construct a new wall type 'Generic Wall 353mm' with a thickness of 30cm.","completion":"WallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif(oldWallType != null)\n{\n    WallType newWallType = null;\n    try { newWallType = oldWallType.Duplicate(\"Generic Wall 353mm\") as WallType; } catch {}\n    if(newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if(cs != null && cs.GetLayers().Any())\n        {\n            int coreLayerIndex = cs.GetFirstCoreLayerIndex();\n            if(coreLayerIndex != -1)\n            {\n                cs.SetLayerWidth(coreLayerIndex, UnitUtils.ConvertToInternalUnits(30, UnitTypeId.Centimeters));\n                newWallType.SetCompoundStructure(cs);\n            }\n        }\n    }\n}"}
{"prompt":"Create a structural beam between (0,0,3) and (5,0,3) on Level 2.","completion":"FamilySymbol beamType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (beamType != null && level != null)\n{\n    if(!beamType.IsActive) beamType.Activate();\n    XYZ start = new XYZ(0, 0, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters));\n    XYZ end = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters));\n    Line beamCurve = Line.CreateBound(start, end);\n    doc.Create.NewFamilyInstance(beamCurve, beamType, level, StructuralType.Beam);\n}"}
{"prompt":"Crea una nueva revisión y aplícala a la hoja activa.","completion":"Revision rev = Revision.Create(doc);\nViewSheet sheet = doc.ActiveView as ViewSheet;\n\nif (rev != null && sheet != null)\n{\n    rev.Description = \"Emitido para Construcción\";\n    rev.RevisionDate = DateTime.Now.ToString(\"yyyy-MM-dd\");\n    rev.IssuedBy = \"Departamento BIM\";\n    \n    ICollection<ElementId> revisions = sheet.GetAdditionalRevisionIds();\n    revisions.Add(rev.Id);\n    sheet.SetAdditionalRevisionIds(revisions);\n}"}
{"prompt":"Move a selected element to position (1,1).","completion":"ICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds.Any())\n{\n    foreach (ElementId id in selectedIds)\n    {\n        Element elem = doc.GetElement(id);\n        if (elem != null)\n        {\n            LocationPoint lp = elem.Location as LocationPoint;\n            if (lp != null)\n            {\n                XYZ newPosition = new XYZ(1, 1, lp.Point.Z);\n                lp.Point = newPosition;\n            }\n        }\n    }\n}"}
{"prompt":"Incorpora un plano de referencia horizontal llamado 'Eje Central A'.","completion":"using (Transaction t = new Transaction(doc, \"Add Reference Plane\"))\n{\n    t.Start();\n    string rpName = \"Eje Central A\";\n    View activeView = doc.ActiveView;\n\n    if (activeView != null)\n    {\n        XYZ bubbleEnd = new XYZ(0, 10, 0);\n        XYZ freeEnd = new XYZ(10, 10, 0);\n        XYZ cutVec = XYZ.BasisZ;\n        ReferencePlane rp = doc.Create.NewReferencePlane(bubbleEnd, freeEnd, cutVec, activeView);\n        if (rp != null)\n        {\n            rp.Name = rpName;\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Establece el parámetro 'Marca' de todos los muros seleccionados a 'M-EXT-3'.","completion":"using (Transaction t = new Transaction(doc, \"Set Wall Mark\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    ICollection<ElementId> selectedIds = localUidoc.Selection.GetElementIds();\n\n    if (selectedIds != null && selectedIds.Count > 3)\n    {\n        foreach(ElementId id in selectedIds)\n        {\n            Element elem = doc.GetElement(id);\n            if(elem is Wall)\n            {\n                Parameter markParam = elem.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n                if (markParam != null && !markParam.IsReadOnly) markParam.Set(\"M-EXT-01\");\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Cambia el tipo de una losa seleccionada a 'Concreto 12cm'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una losa\");\n\nif (pickedRef != null)\n{\n    Floor floorToChange = doc.GetElement(pickedRef) as Floor;\n    FloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name == \"Concreto 12cm\");\n    \n    if (floorToChange != null && newType != null)\n    {\n        floorToChange.ChangeTypeId(newType.Id);\n    }\n}"}
{"prompt":"Crea una vista 3D orientada desde el sureste.","completion":"string viewName = \"Vista 3D Sureste\";\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft != null)\n{\n    View3D view3d = View3D.CreateIsometric(doc, vft.Id);\n    if (view3d != null)\n    {\n        XYZ eye = new XYZ(1, -1, 1);\n        XYZ up = new XYZ(0, 0, 1);\n        XYZ forward = new XYZ(-1, 1, -1);\n        view3d.SetOrientation(new ViewOrientation3D(eye, up, forward));\n        view3d.Name = viewName;\n    }\n}"}
{"prompt":"Ajusta el tipo de la ventana seleccionada al tipo 'Ventana Fija 119x60'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una ventana\");\nFamilySymbol newType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name == \"Ventana Fija 119x60\");\nif (pickedRef != null && newType != null)\n{\n    FamilyInstance window = doc.GetElement(pickedRef.ElementId) as FamilyInstance;\n    if (window != null)\n    {\n        window.Symbol = newType;\n    }\n}"}
{"prompt":"Obtén el espacio MEP asociado a la habitación 'Oficina 99'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Cast<Room>().FirstOrDefault(r => r.Name == \"Oficina 99\");\nList<Space> spaces = new List<Space>();\n\nif (room != null)\n{\n    spaces = new FilteredElementCollector(doc).OfClass(typeof(Space)).Cast<Space>().Where(s => s.Room != null && s.Room.Id == room.Id).ToList();\n}"}
{"prompt":"Ubica todos los elementos seleccionados en el workset 'Fachada'.","completion":"using (Transaction t = new Transaction(doc, \"Assign to Workset\"))\n{\n    t.Start();\n    if(doc.IsWorkshared)\n    {\n        UIDocument localUidoc = uidoc;\n        ICollection<ElementId> selectedIds = localUidoc.Selection.GetElementIds();\n        \n        Workset workset = new FilteredWorksetCollector(doc).OfKind(WorksetKind.UserWorkset).FirstOrDefault(ws => ws.Name == \"Fachada\");\n        if(workset == null) workset = Workset.Create(doc, \"Fachada\");\n\n        if (selectedIds != null && selectedIds.Count > 0 && workset != null)\n        {\n            foreach(ElementId id in selectedIds)\n            {\n                Element elem = doc.GetElement(id);\n                Parameter wsparam = elem.get_Parameter(BuiltInParameter.ELEM_PARTITION_PARAM);\n                if(wsparam != null && !wsparam.IsReadOnly) wsparam.Set(workset.Id.IntegerValue);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Rotate project north 30 degrees clockwise.","completion":"using (Transaction t = new Transaction(doc, \"Rotate Project North\"))\n{\n    t.Start();\n    BasePoint projectBasePoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(bp => !bp.IsShared);\n\n    if (projectBasePoint != null)\n    {\n        double angleInDegrees = 30.0;\n        double angleInRadians = -(angleInDegrees * Math.PI \/ 180.0);\n        using (var bbox = projectBasePoint.get_BoundingBox(null))\n        {\n          if (bbox != null)\n          {\n            XYZ center = bbox.Min;\n            Line axis = Line.CreateBound(center, center + XYZ.BasisZ);\n            ElementTransformUtils.RotateElement(doc, projectBasePoint.Id, axis, angleInRadians);\n          }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Copy the 'Generic - 161mm' wall type and name it 'Interior - 15cm Plaster'.","completion":"string originalName = \"Generic - 161mm\";\nstring newName = \"Interior - 15cm Plaster\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif (originalType != null)\n{\n    WallType newType = originalType.Duplicate(newName) as WallType;\n}"}
{"prompt":"Recupera el espacio MEP asociado a la habitación 'Oficina 97'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Cast<Room>().FirstOrDefault(r => r.Name == \"Oficina 97\");\nList<Space> spaces = new List<Space>();\n\nif (room != null)\n{\n    spaces = new FilteredElementCollector(doc).OfClass(typeof(Space)).Cast<Space>().Where(s => s.Room != null && s.Room.Id == room.Id).ToList();\n}"}
{"prompt":"Create a global length parameter named 'CorridorWidth' with a value of 1.2m.","completion":"string paramName = \"CorridorWidth\";\nGlobalParameter gp = GlobalParameter.Create(doc, paramName, SpecTypeId.Length);\n\nif (gp != null)\n{\n    gp.SetValue(new DoubleParameterValue(UnitUtils.ConvertToInternalUnits(1.2, UnitTypeId.Meters)));\n}"}
{"prompt":"Crea un nuevo tipo de muro de 22cm llamado 'Muro Estructural 30cm'.","completion":"string newTypeName = \"Muro Estructural 30cm\";\nWallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif (oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(newTypeName) as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(22, UnitTypeId.Centimeters));\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n}"}
{"prompt":"Create a new elevation view looking south.","completion":"using (Transaction t = new Transaction(doc, \"Create South Elevation\"))\n{\n    t.Start();\n    ViewFamilyType elevationVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(vft => vft.ViewFamily == ViewFamily.Elevation);\n    View activeView = doc.ActiveView;\n\n    if (elevationVFT != null && activeView != null)\n    {\n        ElevationMarker marker = ElevationMarker.CreateElevationMarker(doc, elevationVFT.Id, new XYZ(0, -20 \/ 0.3048, 0), 100);\n        \n        if (marker != null)\n        {\n            View aev = marker.CreateElevation(doc, activeView.Id, 0);\n            if (aev != null)\n            {\n                aev.Name = \"South Elevation\";\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Sincroniza el modelo local con el central, añadiendo el comentario 'Actualización de diseño'.","completion":"if (doc.IsWorkshared)\n{\n    TransactWithCentralOptions tco = new TransactWithCentralOptions();\n    SynchronizeWithCentralOptions swcOpts = new SynchronizeWithCentralOptions();\n    swcOpts.Comment = \"Actualización de diseño\";\n    swcOpts.SaveLocalAfter = true;\n    doc.SynchronizeWithCentral(tco, swcOpts);\n}"}
{"prompt":"Calculate the total area of all rooms.","completion":"double totalArea = 0.0;\nList<Room> rooms = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>().ToList();\nforeach (Room room in rooms)\n{\n    totalArea += room.Area;\n}"}
{"prompt":"Place a piece of furniture at coordinates (2,3).","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null && furnitureSymbol != null)\n{\n    if (!furnitureSymbol.IsActive)\n    {\n        furnitureSymbol.Activate();\n    }\n    doc.Create.NewFamilyInstance(new XYZ(2, 3, 0), furnitureSymbol, level, StructuralType.NonStructural);\n}"}
{"prompt":"Model a ceiling at a height of 2.8 meters on Level 1.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nCeilingType ceilingType = new FilteredElementCollector(doc).OfClass(typeof(CeilingType)).FirstOrDefault() as CeilingType;\n\nif (level != null && ceilingType != null)\n{\n    \/\/ Create a default 10ft x 10ft rectangular profile as the prompt is not specific\n    CurveLoop profile = new CurveLoop();\n    profile.Append(Line.CreateBound(new XYZ(0, 0, 0), new XYZ(10, 0, 0)));\n    profile.Append(Line.CreateBound(new XYZ(10, 0, 0), new XYZ(10, 10, 0)));\n    profile.Append(Line.CreateBound(new XYZ(10, 10, 0), new XYZ(0, 10, 0)));\n    profile.Append(Line.CreateBound(new XYZ(0, 10, 0), new XYZ(0, 0, 0)));\n\n    Ceiling ceiling = Ceiling.Create(doc, new List<CurveLoop> { profile }, ceilingType.Id, level.Id);\n    if (ceiling != null)\n    {\n        Parameter heightParam = ceiling.get_Parameter(BuiltInParameter.CEILING_HEIGHTABOVELEVEL_PARAM);\n        if (heightParam != null && !heightParam.IsReadOnly)\n        {\n            heightParam.Set(UnitUtils.ConvertToInternalUnits(2.8, UnitTypeId.Meters));\n        }\n    }\n}"}
{"prompt":"Duplica la vista de planta 'Nivel 2' y conviértela en una plantilla de vista.","completion":"using (Transaction t = new Transaction(doc, \"Create View Template\"))\n{\n    t.Start();\n    ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().FirstOrDefault(v => v.Name == \"Nivel 2\");\n    string templateName = \"Plantilla Nivel 2\";\n\n    if (viewToDuplicate != null)\n    {\n        ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n        View newView = doc.GetElement(newViewId) as View;\n        if (newView != null)\n        {\n           \/\/ In older APIs, direct conversion to a template may not be available.\n           \/\/ A common workaround is to set the IsTemplate property if available and writable, \n           \/\/ which is not the case here. This is left as a comment for conceptual understanding.\n           \/\/ newView.IsTemplate = true;\n            newView.Name = templateName;\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Modela una bandeja de cables entre dos puntos.","completion":"CableTrayType trayType = new FilteredElementCollector(doc).OfClass(typeof(CableTrayType)).FirstOrDefault() as CableTrayType;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(trayType != null && level != null)\n{\n    XYZ start = new XYZ(0,10,3);\n    XYZ end = new XYZ(15,10,3);\n    CableTray.Create(doc, trayType.Id, start, end, level.Id);\n}"}
{"prompt":"Coloca una instancia de la familia 'Ventana Fija 120x60' en el centro de la habitación 'Despacho 101'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 101\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Ventana Fija 120x60\") as FamilySymbol;\nif(furnitureSymbol != null && !furnitureSymbol.IsActive) furnitureSymbol.Activate();\nif(room != null)\n{\n    LocationPoint roomCenter = room.Location as LocationPoint;\n    if(roomCenter != null && furnitureSymbol != null && room.Level != null)\n    {\n        doc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Create a new Level named 'Level 6' at an elevation of 14 meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(14, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\nif (newLevel != null)\n{\n    try { newLevel.Name = \"Level 6\"; } catch {}\n}"}
{"prompt":"Pon un pilar estructural en las coordenadas 10,5.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (level != null && columnSymbol != null)\n{\n    if (!columnSymbol.IsActive) { columnSymbol.Activate(); }\n    XYZ point = new XYZ(10, 5, 0);\n    doc.Create.NewFamilyInstance(point, columnSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n}"}
{"prompt":"Create a new revision and apply it to the active sheet.","completion":"Revision rev = Revision.Create(doc);\nViewSheet sheet = doc.ActiveView as ViewSheet;\n\nif (rev != null && sheet != null)\n{\n    rev.Description = \"Issued for Construction\";\n    rev.RevisionDate = DateTime.Now.ToString(\"yyyy-MM-dd\");\n    rev.IssuedBy = \"BIM Department\";\n    \n    ICollection<ElementId> revisions = sheet.GetAdditionalRevisionIds();\n    revisions.Add(rev.Id);\n    sheet.SetAdditionalRevisionIds(revisions);\n}"}
{"prompt":"Reproduce el tipo de muro 'Genérico - 147mm' y nómbralo 'Interior - 18cm Yeso'.","completion":"string originalName = \"Genérico - 147mm\";\nstring newName = \"Interior - 18cm Yeso\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif (originalType != null)\n{\n    WallType newType = originalType.Duplicate(newName) as WallType;\n}"}
{"prompt":"Create a grid of 5 horizontal and 5 vertical grids, spaced 6 meters apart.","completion":"double spacing = UnitUtils.ConvertToInternalUnits(6, UnitTypeId.Meters);\nint count = 5;\nfor (int i = 0; i < count; i++)\n{\n    Line line = Line.CreateBound(new XYZ(0, i * spacing, 0), new XYZ((count - 1) * spacing, i * spacing, 0));\n    Grid.Create(doc, line);\n}\nfor (int i = 0; i < count; i++)\n{\n    Line line = Line.CreateBound(new XYZ(i * spacing, 0, 0), new XYZ(i * spacing, (count - 1) * spacing, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Include a point to the selected Path of Travel.","completion":"\/\/ PathOfTravel related methods are likely inaccessible in this environment.\n\/\/ The following code is a placeholder to show the intent.\n\/*\nusing (Transaction t = new Transaction(doc, \"Update Path of Travel\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference pickedRef = localUidoc.Selection.PickObject(ObjectType.Element, \"Select a Path of Travel\");\n\n    if (pickedRef != null)\n    {\n        PathOfTravel pot = doc.GetElement(pickedRef) as PathOfTravel;\n        if (pot != null)\n        {\n            IList<XYZ> points = pot.GetPath();\n            if (points != null && points.Count >= 2)\n            {\n                XYZ midPoint = (points[0] + points[1]) \/ 2;\n                points.Insert(1, midPoint);\n                pot.Update(points);\n            }\n        }\n    }\n    t.Commit();\n}\n*\/"}
{"prompt":"Add a point to the selected Path of Travel.","completion":"\/\/ PathOfTravel related methods are likely inaccessible in this environment.\n\/\/ The following code is a placeholder to show the intent.\n\/*\nusing (Transaction t = new Transaction(doc, \"Update Path of Travel\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference pickedRef = localUidoc.Selection.PickObject(ObjectType.Element, \"Select a Path of Travel\");\n\n    if (pickedRef != null)\n    {\n        PathOfTravel pot = doc.GetElement(pickedRef) as PathOfTravel;\n        if (pot != null)\n        {\n            IList<XYZ> points = pot.GetPath();\n            if (points != null && points.Count >= 2)\n            {\n                XYZ midPoint = (points[0] + points[1]) \/ 2;\n                points.Insert(1, midPoint);\n                pot.Update(points);\n            }\n        }\n    }\n    t.Commit();\n}\n*\/"}
{"prompt":"Find the structural column type named \"297 x 454mm\" and place it at X=1, Y=12.6","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(s => s.Name == \"297 x 454mm\");\nif (level != null && columnSymbol != null)\n{\n    if (!columnSymbol.IsActive) { columnSymbol.Activate(); }\n    XYZ point = new XYZ(1, 12.6, 0);\n    doc.Create.NewFamilyInstance(point, columnSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n}"}
{"prompt":"Rename all schedules containing 'Doors' to 'Door Schedule'.","completion":"List<ViewSchedule> schedules = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().Where(vs => vs.Name.Contains(\"Doors\")).ToList();\nforeach(ViewSchedule schedule in schedules)\n{\n    schedule.Name = schedule.Name.Replace(\"Doors\", \"Door Schedule\");\n}"}
{"prompt":"Create an extrusion roof with a 10% slope.","completion":"using (Transaction t = new Transaction(doc, \"Create Extrusion Roof\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    RoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n\n    if (level != null && roofType != null)\n    {\n        CurveArray profile = new CurveArray();\n        profile.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(10 \/ 0.3048, 0, 1 \/ 0.3048)));\n        \n        Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisY, XYZ.Zero);\n        ReferencePlane refPlane = doc.Create.NewReferencePlane(plane.Origin, plane.Origin + XYZ.BasisX, plane.Normal, doc.ActiveView);\n        \n        if (refPlane != null)\n        {\n            doc.Create.NewExtrusionRoof(profile, refPlane, level, roofType, 0, 10 \/ 0.3048);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea un nivel 'Roof Terrace' a 18m.","completion":"string levelName = \"Roof Terrace\";\ndouble elev = UnitUtils.ConvertToInternalUnits(18, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elev);\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Clona la vista 'Nivel 4' como una vista dependiente.","completion":"ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v => v.Name == \"Nivel 4\") as ViewPlan;\n\nif (viewToDuplicate != null)\n{\n    ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n}"}
{"prompt":"Generate a rectangular floor of 10x8 meters.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\nif (level != null && floorType != null)\n{\n    double width = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\n    double length = UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters);\n    XYZ p1 = XYZ.Zero;\n    XYZ p2 = new XYZ(width, 0, 0);\n    XYZ p3 = new XYZ(width, length, 0);\n    XYZ p4 = new XYZ(0, length, 0);\n    CurveLoop profile = new CurveLoop();\n    profile.Append(Line.CreateBound(p1, p2));\n    profile.Append(Line.CreateBound(p2, p3));\n    profile.Append(Line.CreateBound(p3, p4));\n    profile.Append(Line.CreateBound(p4, p1));\n    Floor.Create(doc, new List<CurveLoop> { profile }, floorType.Id, level.Id);\n}"}
{"prompt":"Clona el nivel 5 con un desfase de 2m y llámalo 'Mezanine'.","completion":"string levelName = \"Nivel 5\";\nLevel levelToCopy = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (levelToCopy != null)\n{\n    double offset = UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, levelToCopy.Elevation + offset);\n    newLevel.Name = \"Mezanine\";\n}"}
{"prompt":"Duplicate the active view and name it 'Working Copy'.","completion":"View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    ElementId newViewId = activeView.Duplicate(ViewDuplicateOption.Duplicate);\n    View newView = doc.GetElement(newViewId) as View;\n    if (newView != null)\n    {\n        newView.Name = \"Working Copy\";\n    }\n}"}
{"prompt":"Build a floor plan view for 'Level 7'.","completion":"string levelName = \"Level 7\";\nLevel level3 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.FloorPlan);\n\nif (level3 != null && vft != null)\n{\n    ViewPlan viewPlan = ViewPlan.Create(doc, vft.Id, level3.Id);\n}"}
{"prompt":"Generate a rectangular floor of 10x8 meters.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\n\nif (level != null && floorType != null)\n{\n    double width = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\n    double length = UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters);\n    XYZ p1 = new XYZ(0, 0, 0);\n    XYZ p2 = new XYZ(width, 0, 0);\n    XYZ p3 = new XYZ(width, length, 0);\n    XYZ p4 = new XYZ(0, length, 0);\n    CurveLoop loop = new CurveLoop();\n    loop.Append(Line.CreateBound(p1, p2));\n    loop.Append(Line.CreateBound(p2, p3));\n    loop.Append(Line.CreateBound(p3, p4));\n    loop.Append(Line.CreateBound(p4, p1));\n    Floor.Create(doc, new List<CurveLoop> { loop }, floorType.Id, level.Id);\n}"}
{"prompt":"Agrega un punto de referencia en las coordenadas (1,5,1) dentro del editor de familias.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(1,5,1));"}
{"prompt":"Exporta el modelo a NWC en la carpeta @\"C:\\Users\\enriq\\OneDrive\\Escritorio\\TAD\"","completion":"string folderPath = @\"C:\\Users\\enriq\\OneDrive\\Escritorio\\TAD\";\nstring fileName = doc.Title + \".nwc\";\nNavisworksExportOptions options = new NavisworksExportOptions();\noptions.ExportScope = NavisworksExportScope.Model;\ndoc.Export(folderPath, fileName, options);"}
{"prompt":"Set the sill height of all windows to 6 meter.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits(6, UnitTypeId.Meters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Genera un reporte con el área de todas las habitaciones del proyecto.","completion":"List<Room> rooms = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>().ToList();"}
{"prompt":"Conecta dos tuberías seleccionadas por el usuario con un codo.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference ref1 = uidoc.Selection.PickObject(ObjectType.Element, \"Select the first pipe\");\nReference ref2 = uidoc.Selection.PickObject(ObjectType.Element, \"Select the second pipe\");\nif (ref1 != null && ref2 != null)\n{\n    Pipe pipe1 = doc.GetElement(ref1) as Pipe;\n    Pipe pipe2 = doc.GetElement(ref2) as Pipe;\n    if (pipe1 != null && pipe2 != null)\n    {\n        Connector c1 = pipe1.ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n        Connector c2 = pipe2.ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n        if (c1 != null && c2 != null)\n        {\n            doc.Create.NewElbowFitting(c1, c2);\n        }\n    }\n}"}
{"prompt":"Ajusta todas las ventanas para que tengan la altura del antepecho a 900mm.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits(900, UnitTypeId.Millimeters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Create a new 3D view oriented from point (10,10,10) looking at the origin.","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v=>v.ViewFamily==ViewFamily.ThreeDimensional);\n\nif (vft != null)\n{\n    View3D view = View3D.CreateIsometric(doc, vft.Id);\n    if (view != null)\n    {\n        XYZ eyePos = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters));\n        XYZ upDir = XYZ.BasisZ;\n        XYZ forwardDir = XYZ.Zero - eyePos;\n        ViewOrientation3D vo = new ViewOrientation3D(eyePos, upDir, forwardDir);\n        view.SetOrientation(vo);\n        view.Name = \"View from (10,10,10)\";\n    }\n}"}
{"prompt":"Construct a new room on Level 4 at point (5, 11).","completion":"string levelName = \"Level 4\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    UV point = new UV(5, 11);\n    Room newRoom = doc.Create.NewRoom(targetLevel, point);\n}"}
{"prompt":"Inserta una línea de rejilla horizontal a un muro cortina a 1.5 metros de altura.","completion":"using (Transaction t = new Transaction(doc, \"Add Curtain Grid Line\"))\n{\n    t.Start();\n    Wall cw = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Cast<Wall>().FirstOrDefault(w => w.CurtainGrid != null);\n\n    if (cw != null)\n    {\n        CurtainGrid cg = cw.CurtainGrid;\n        if (cg != null)\n        {\n            LocationCurve locCurve = cw.Location as LocationCurve;\n            if(locCurve != null)\n            {\n                 XYZ startPoint = locCurve.Curve.GetEndPoint(0);\n                 XYZ endPoint = locCurve.Curve.GetEndPoint(1);\n                 XYZ midPoint = (startPoint + endPoint) \/ 2;\n                 XYZ gridLinePoint = new XYZ(midPoint.X, midPoint.Y, 1.5 \/ 0.3048);\n                 cg.AddGridLine(false, gridLinePoint, false);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Put a text note with 'Review' in the current view.","completion":"View activeView = doc.ActiveView;\nElementId defaultTypeId = doc.GetDefaultElementTypeId(ElementTypeGroup.TextNoteType);\n\nif (activeView != null && defaultTypeId != ElementId.InvalidElementId)\n{\n    \/\/ Place note at a default position as none was specified\n    XYZ position = new XYZ(5, 5, 0);\n    TextNote.Create(doc, activeView.Id, position, \"Review\", defaultTypeId);\n}"}
{"prompt":"Crea 5 worksets para las disciplinas de ingeniería.","completion":"List<string> worksetNames = new List<string> { \"MEP_HVAC\", \"MEP_Plumbing\", \"MEP_Electrical\", \"STRUCT_Framing\", \"STRUCT_Foundations\" };\nforeach(string name in worksetNames)\n{\n    Workset newWorkset = Workset.Create(doc, name);\n}"}
{"prompt":"Sitúa una instancia de la familia 'Mesa de Oficina' en el centro de la habitación 'Despacho 106'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 106\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Mesa de Oficina\") as FamilySymbol;\nif(furnitureSymbol != null && !furnitureSymbol.IsActive) furnitureSymbol.Activate();\nif(room != null)\n{\n    LocationPoint roomCenter = room.Location as LocationPoint;\n    if(roomCenter != null && furnitureSymbol != null && room.Level != null)\n    {\n        doc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Crea una vista de planta para el 'Nivel 3'.","completion":"string levelName = \"Nivel 3\";\nLevel level3 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.FloorPlan);\n\nif (level3 != null && vft != null)\n{\n    ViewPlan viewPlan = ViewPlan.Create(doc, vft.Id, level3.Id);\n}"}
{"prompt":"Create a new material named 'Dark Oak' with a wood surface pattern.","completion":"string materialName = \"Dark Oak\";\nElementId materialId = Material.Create(doc, materialName);\n\nif (materialId != ElementId.InvalidElementId)\n{\n    Material material = doc.GetElement(materialId) as Material;\n    FillPatternElement fillPattern = new FilteredElementCollector(doc).OfClass(typeof(FillPatternElement)).FirstOrDefault(p => p.Name.Contains(\"Wood\") || p.Name.Contains(\"Madera\")) as FillPatternElement;\n    \n    if (material != null && fillPattern != null)\n    {\n        material.SurfaceForegroundPatternId = fillPattern.Id;\n        material.Color = new Color(139, 69, 19);\n    }\n}"}
{"prompt":"Genera ocho ejes horizontales con una separación de 10m.","completion":"double separation = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\nfor(int i = 0; i < 8; i++)\n{\n    Line line = Line.CreateBound(new XYZ(0, i * separation, 0), new XYZ(50, i * separation, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Ajusta todas las ventanas para que la altura del antepecho sea 1 metro.","completion":"using (Transaction t = new Transaction(doc, \"Set Sill Height\"))\n{\n    t.Start();\n    double sillHeight = 1 \/ 0.3048;\n    List<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\n    foreach(FamilyInstance window in windows)\n    {\n        Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n        if (sillHeightParam != null && !sillHeightParam.IsReadOnly)\n        {\n            sillHeightParam.Set(sillHeight);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Construct a global length parameter named 'CorridorWidth' with a value of 0.7m.","completion":"string paramName = \"CorridorWidth\";\nGlobalParameter gp = GlobalParameter.Create(doc, paramName, SpecTypeId.Length);\n\nif (gp != null)\n{\n    gp.SetValue(new DoubleParameterValue(UnitUtils.ConvertToInternalUnits(0.7, UnitTypeId.Meters)));\n}"}
{"prompt":"Cambia la escala de la vista activa a 1:50.","completion":"View activeView = doc.ActiveView;\nif (activeView != null)\n{\n    activeView.Scale = 50;\n}"}
{"prompt":"Reproduce la vista 'Nivel 1' como una vista dependiente.","completion":"ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v => v.Name == \"Nivel 1\") as ViewPlan;\n\nif (viewToDuplicate != null)\n{\n    ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n}"}
{"prompt":"Build a 'Roof Terrace' level at 12m.","completion":"string levelName = \"Roof Terrace\";\ndouble elev = UnitUtils.ConvertToInternalUnits(12, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elev);\nnewLevel.Name = levelName;\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Fetch all rooms on Level 6","completion":"string levelName = \"Level 6\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(targetLevel.Id);\n    FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WherePasses(levelFilter);\n    uidoc.Selection.SetElementIds(collector.ToElementIds());\n}"}
{"prompt":"Agrega el prefijo 'PLANTA-' a todas las vistas de plano.","completion":"string prefix = \"PLANTA-\";\nList<ViewPlan> planViews = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().Where(v => !v.IsTemplate).ToList();\nforeach(ViewPlan view in planViews)\n{\n    if (view != null)\n    {\n        view.Name = prefix + view.Name;\n    }\n}"}
{"prompt":"Configure the 'Comments' parameter for all doors on Level 1 to 'Fire Rating - 91 min'.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\n\nif (level1 != null)\n{\n    List<FamilyInstance> doorsOnLevel1 = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsNotElementType().Cast<FamilyInstance>().Where(fi => fi.LevelId == level1.Id).ToList();\n    foreach(FamilyInstance door in doorsOnLevel1)\n    {\n        Parameter commentsParam = door.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n        if (commentsParam != null && !commentsParam.IsReadOnly) commentsParam.Set(\"Fire Rating - 91 min\");\n    }\n}"}
{"prompt":"Cambia el nivel de detalle de la vista actual a 'Bajo'.","completion":"View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.DetailLevel = ViewDetailLevel.Coarse;\n}"}
{"prompt":"Create a new door type named 'FR-90 Door' and set its fire rating to '90 min'.","completion":"using (Transaction t = new Transaction(doc, \"Create Door Type\"))\n{\n    t.Start();\n    string newTypeName = \"FR-90 Door\";\n    FamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n    if (doorTypeToDuplicate != null)\n    {\n        FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\n        if (newDoorType != null)\n        {\n            Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n            if(fireRatingParam != null && !fireRatingParam.IsReadOnly)\n            {\n                fireRatingParam.Set(\"90 min\");\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Coloca una instancia de la familia 'Ventana Fija 116x60' en el centro de la habitación 'Despacho 99'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 116\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Ventana Fija 99x60\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);"}
{"prompt":"Construct a floor plan view for 'Level 8'.","completion":"string levelName = \"Level 8\";\nLevel level3 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.FloorPlan);\n\nif (level3 != null && vft != null)\n{\n    ViewPlan viewPlan = ViewPlan.Create(doc, vft.Id, level3.Id);\n}"}
{"prompt":"Reproduce el tipo de muro 'Basic Wall' y renómbralo.","completion":"string typeToDuplicate = \"Basic Wall\";\nstring newTypeName = \"Basic Wall Copy\";\nWallType wt = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(w=>w.Name==typeToDuplicate);\n\nif (wt != null)\n{\n    WallType newWt = wt.Duplicate(newTypeName) as WallType;\n}"}
{"prompt":"Hide all annotation categories in the active view.","completion":"using (Transaction t = new Transaction(doc, \"Hide Annotation Categories\"))\n{\n    t.Start();\n    Categories categories = doc.Settings.Categories;\n    View activeView = doc.ActiveView;\n\n    if (activeView != null)\n    {\n        foreach(Category cat in categories)\n        {\n            if(cat.CategoryType == CategoryType.Annotation && cat.get_AllowsVisibilityControl(activeView))\n            {\n                 activeView.SetCategoryHidden(cat.Id, true);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Obtén todas las instancias de la categoría Mobiliario.","completion":"List<Element> furnitureInstances = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsNotElementType().ToList();"}
{"prompt":"Crea una tubería con un diámetro de 150mm.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nPipeType pipeType = new FilteredElementCollector(doc).OfClass(typeof(PipeType)).FirstOrDefault() as PipeType;\nPipingSystemType systemType = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).FirstOrDefault() as PipingSystemType;\n\nif (level != null && pipeType != null && systemType != null)\n{\n    XYZ p1 = new XYZ(0,0,0);\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters),0,0);\n    Pipe pipe = Pipe.Create(doc, systemType.Id, pipeType.Id, level.Id, p1, p2);\n\n    if (pipe != null)\n    {\n        Parameter diameterParam = pipe.get_Parameter(BuiltInParameter.RBS_PIPE_DIAMETER_PARAM);\n        if (diameterParam != null) {\n            diameterParam.Set(UnitUtils.ConvertToInternalUnits(150, UnitTypeId.Millimeters));\n        }\n    }\n}"}
{"prompt":"Activate all FamilySymbols in the project.","completion":"List<FamilySymbol> symbols = new FilteredElementCollector(doc).OfClass(typeof(FamilySymbol)).Cast<FamilySymbol>().ToList();\nforeach (FamilySymbol sym in symbols)\n{\n    if (!sym.IsActive)\n    {\n        sym.Activate();\n    }\n}"}
{"prompt":"Reproduce el tipo de muro 'Genérico - 150mm' y nómbralo 'Interior - 15cm Yeso'.","completion":"string originalName = \"Genérico - 150mm\";\nstring newName = \"Interior - 15cm Yeso\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif (originalType != null)\n{\n    WallType newType = originalType.Duplicate(newName) as WallType;\n}"}
{"prompt":"Ubica un rociador en las coordenadas (1,2,5).","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol sprinklerSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Sprinklers).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (level != null && sprinklerSymbol != null)\n{\n    if (!sprinklerSymbol.IsActive) sprinklerSymbol.Activate();\n    XYZ placementPoint = new XYZ(UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters));\n    doc.Create.NewFamilyInstance(placementPoint, sprinklerSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n}"}
{"prompt":"Create a grid of 5 horizontal and 5 vertical grids, spaced 6 meters apart.","completion":"double spacing = UnitUtils.ConvertToInternalUnits(6, UnitTypeId.Meters);\nint count = 5;\nfor (int i = 0; i < count; i++)\n{\n    Line line = Line.CreateBound(new XYZ(0, i * spacing, 0), new XYZ((count - 1) * spacing, i * spacing, 0));\n    Grid.Create(doc, line);\n}\nfor (int i = 0; i < count; i++)\n{\n    Line line = Line.CreateBound(new XYZ(i * spacing, 0, 0), new XYZ(i * spacing, (count - 1) * spacing, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Crea un DirectShape esférico con un radio de 5 metros.","completion":"using (Transaction t = new Transaction(doc, \"Create Sphere DirectShape\"))\n{\n    t.Start();\n    double radius = 5 \/ 0.3048;\n    List<GeometryObject> solids = new List<GeometryObject>();\n    Frame frame = new Frame(XYZ.Zero, XYZ.BasisX, XYZ.BasisY, XYZ.BasisZ);\n    Arc arc = Arc.Create(frame.Origin, radius, 0, Math.PI, frame.BasisX, frame.BasisY);\n    Line line = Line.CreateBound(arc.GetEndPoint(1), arc.GetEndPoint(0));\n    CurveLoop profile = CurveLoop.Create(new List<Curve> { arc, line });\n    Solid sphere = GeometryCreationUtilities.CreateRevolvedGeometry(frame, new List<CurveLoop> { profile }, 0, 2 * Math.PI);\n    solids.Add(sphere);\n    DirectShape ds = DirectShape.CreateElement(doc, new ElementId(BuiltInCategory.OST_GenericModel));\n\n    if (ds != null)\n    {\n        ds.SetShape(solids);\n        ds.Name = \"Esfera DirectShape\";\n    }\n    t.Commit();\n}"}
{"prompt":"Crea un pilar del tipo 'Hormigón-Rectangular 30x60' en cada intersección de la rejilla.","completion":"using (Transaction t = new Transaction(doc, \"Create Columns at Grids\"))\n{\n    t.Start();\n    FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(s => s.Name == \"Hormigón-Rectangular 30x60\");\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderBy(l => l.Elevation).FirstOrDefault();\n    List<Grid> grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().ToList();\n    if (columnSymbol != null && level != null)\n    {\n        if (!columnSymbol.IsActive) columnSymbol.Activate();\n        for (int i = 0; i < grids.Count; i++)\n        {\n            for (int j = i + 1; j < grids.Count; j++)\n            {\n                IntersectionResultArray results;\n                if(grids[i].Curve.Intersect(grids[j].Curve, out results) == SetComparisonResult.Overlap)\n                {\n                    if (results != null && !results.IsEmpty)\n                    {\n                        foreach (IntersectionResult ir in results)\n                        {\n                            doc.Create.NewFamilyInstance(ir.XYZPoint, columnSymbol, level, StructuralType.Column);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create a new wall type 'Generic Wall 300mm' with a thickness of 30cm.","completion":"using (Transaction t = new Transaction(doc, \"Create Wall Type\"))\n{\n    t.Start();\n    string newTypeName = \"Generic Wall 300mm\";\n    WallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\n    if (oldWallType != null)\n    {\n        WallType newWallType = oldWallType.Duplicate(newTypeName) as WallType;\n        if (newWallType != null)\n        {\n            CompoundStructure cs = newWallType.GetCompoundStructure();\n            if (cs != null && cs.LayerCount > 0)\n            {\n                int coreLayerIndex = cs.GetFirstCoreLayerIndex();\n                if (coreLayerIndex >= 0 && coreLayerIndex < cs.LayerCount)\n                {\n                    cs.SetLayerWidth(coreLayerIndex, 300 \/ 304.8);\n                    newWallType.SetCompoundStructure(cs);\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create a new material named 'Reflective Glass' and assign it a base color.","completion":"string materialName = \"Reflective Glass\";\nElementId materialId = Material.Create(doc, materialName);\n\nif (materialId != ElementId.InvalidElementId)\n{\n    Material material = doc.GetElement(materialId) as Material;\n    if (material != null)\n    {\n        material.Color = new Color(210, 230, 240); \/\/ A light bluish color for glass\n        material.Transparency = 80;\n    }\n}"}
{"prompt":"Duplica la vista activa y ponle el nombre 'Vista Duplicada'.","completion":"View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    ElementId newViewId = activeView.Duplicate(ViewDuplicateOption.Duplicate);\n    View newView = doc.GetElement(newViewId) as View;\n    if (newView != null)\n    {\n        newView.Name = \"Vista Duplicada\";\n    }\n}"}
{"prompt":"Extrae todas las habitaciones en el Nivel 'Losa 105'.","completion":"Level groundFloor = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Losa 105\") as Level;\nList<Element> roomsOnGround = new List<Element>();\n\nif (groundFloor != null)\n{\n    roomsOnGround = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Where(r => r.LevelId == groundFloor.Id).ToList();\n}"}
{"prompt":"Duplicate the 'Level 4' view as a dependent view.","completion":"ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v => v.Name == \"Level 4\") as ViewPlan;\n\nif (viewToDuplicate != null)\n{\n    ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n}"}
{"prompt":"Obtén una lista de todas las advertencias del proyecto.","completion":"IList<FailureMessage> warnings = doc.GetWarnings();\nList<string> warningDescriptions = warnings.Select(w => w.GetDescriptionText()).ToList();\n"}
{"prompt":"Extrae todas las habitaciones en el Nivel 'Losa 97'.","completion":"Level groundFloor = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Losa 97\") as Level;\nList<Element> roomsOnGround = new List<Element>();\n\nif (groundFloor != null)\n{\n    roomsOnGround = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Where(r => r.LevelId == groundFloor.Id).ToList();\n}"}
{"prompt":"Modifica el tipo de una losa seleccionada a 'Concreto 19cm'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una losa\");\n\nif (pickedRef != null)\n{\n    Floor floorToChange = doc.GetElement(pickedRef) as Floor;\n    FloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name == \"Concreto 19cm\");\n    \n    if (floorToChange != null && newType != null)\n    {\n        floorToChange.ChangeTypeId(newType.Id);\n    }\n}"}
{"prompt":"Crea un nuevo nivel llamado 'Mezzanine' a 7.8 metros de elevación.","completion":"string levelName = \"Mezzanine\";\ndouble elevation = UnitUtils.ConvertToInternalUnits(7.8, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Duplica el nivel 1 con un desfase de 3m y llámalo 'Mezanine'.","completion":"string levelName = \"Mezanine\";\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\n\nif (level1 != null)\n{\n    double newElevation = level1.ProjectElevation + UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, newElevation);\n    if (newLevel != null)\n    {\n        newLevel.Name = levelName;\n    }\n}"}
{"prompt":"Obtén el espacio MEP asociado a la habitación 'Oficina 101'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Cast<Room>().FirstOrDefault(r => r.Name == \"Oficina 101\");\nList<Space> spaces = new List<Space>();\n\nif (room != null)\n{\n    spaces = new FilteredElementCollector(doc).OfClass(typeof(Space)).Cast<Space>().Where(s => s.Room != null && s.Room.Id == room.Id).ToList();\n}"}
{"prompt":"Rename all loaded families containing 'Metric' to 'Imperial'.","completion":"List<Family> familiesToRename = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.Name.Contains(\"Metric\")).ToList();\nforeach(Family fam in familiesToRename)\n{\n    fam.Name = fam.Name.Replace(\"Metric\", \"Imperial\");\n}"}
{"prompt":"Aplica el estilo visual 'Wireframe' a la vista 3D activa.","completion":"View3D view3D = doc.ActiveView as View3D;\nif (view3D != null && !view3D.IsTemplate)\n{\n    view3D.DisplayStyle = DisplayStyle.Wireframe;\n}"}
{"prompt":"Generate a new room on Level 4 at point (14, 11).","completion":"string levelName = \"Level 4\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    UV point = new UV(14, 11);\n    Room newRoom = doc.Create.NewRoom(targetLevel, point);\n}"}
{"prompt":"Crea una nueva habitación en el Nivel 3 en el punto (8, 9).","completion":"string levelName = \"Nivel 3\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    UV point = new UV(8, 9);\n    Room newRoom = doc.Create.NewRoom(targetLevel, point);\n}"}
{"prompt":"Cambia el tipo de una losa seleccionada a 'Concreto 20cm'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una losa\");\n\nif (pickedRef != null)\n{\n    Floor floorToChange = doc.GetElement(pickedRef) as Floor;\n    FloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name == \"Concreto 20cm\");\n    \n    if (floorToChange != null && newType != null)\n    {\n        floorToChange.ChangeTypeId(newType.Id);\n    }\n}"}
{"prompt":"Añade un punto de referencia en las coordenadas (1,2,3) dentro del editor de familias.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(1,2,3));"}
{"prompt":"Append a horizontal grid line to a curtain wall at a height of 1.5 meters.","completion":"using (Transaction t = new Transaction(doc, \"Add Curtain Grid Line\"))\n{\n    t.Start();\n    Wall cw = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Cast<Wall>().FirstOrDefault(w => w.CurtainGrid != null);\n\n    if (cw != null)\n    {\n        CurtainGrid cg = cw.CurtainGrid;\n        if (cg != null)\n        {\n            LocationCurve locCurve = cw.Location as LocationCurve;\n            if(locCurve != null)\n            {\n                 XYZ startPoint = locCurve.Curve.GetEndPoint(0);\n                 XYZ endPoint = locCurve.Curve.GetEndPoint(1);\n                 XYZ midPoint = (startPoint + endPoint) \/ 2;\n                 XYZ gridLinePoint = new XYZ(midPoint.X, midPoint.Y, 1.5 \/ 0.3048);\n                 cg.AddGridLine(false, gridLinePoint, false);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea una nueva hoja A1 y coloca la vista 'Planta Baja' en ella.","completion":"using (Transaction t = new Transaction(doc, \"Create Sheet\"))\n{\n    t.Start();\n    string sheetNumber = \"A-101\";\n    FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(tb => tb.Name.Contains(\"A1\"));\n    View viewToPlace = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<View>().FirstOrDefault(v => v.Name == \"Planta Baja\");\n\n    if (titleBlock != null && viewToPlace != null)\n    {\n        ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n        if (newSheet != null)\n        {\n            newSheet.Name = \"Planta Arquitectónica - Planta Baja\";\n            newSheet.SheetNumber = sheetNumber;\n            BoundingBoxUV sheetBox = newSheet.Outline;\n            UV centerUv = (sheetBox.Min + sheetBox.Max) \/ 2;\n            XYZ centerPoint = new XYZ(centerUv.U, centerUv.V, 0);\n            Viewport.Create(doc, newSheet.Id, viewToPlace.Id, centerPoint);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Ajusta todas las ventanas para que la altura del antepecho sea 1 metro.","completion":"using (Transaction t = new Transaction(doc, \"Set Sill Height\"))\n{\n    t.Start();\n    double sillHeight = 1 \/ 0.3048;\n    List<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\n    foreach(FamilyInstance window in windows)\n    {\n        Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n        if (sillHeightParam != null && !sillHeightParam.IsReadOnly)\n        {\n            sillHeightParam.Set(sillHeight);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Configure the 'Mark' parameter of all selected walls to 'W-EXT-6'.","completion":"using (Transaction t = new Transaction(doc, \"Set Wall Mark\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    ICollection<ElementId> selectedIds = localUidoc.Selection.GetElementIds();\n\n    if (selectedIds != null && selectedIds.Count > 6)\n    {\n        foreach(ElementId id in selectedIds)\n        {\n            Element elem = doc.GetElement(id);\n            if(elem is Wall)\n            {\n                Parameter p = elem.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n                if (p != null && !p.IsReadOnly)\n                {\n                    p.Set(\"W-EXT-01\");\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Build a structural grid 100 by 60 feet, with longitudinal lines every 25 ft and transverse lines every 20 ft.","completion":"double length = 100.0;\ndouble width = 60.0;\ndouble spacingX = 25.0;\ndouble spacingY = 20.0;\n\n\/\/ Create transverse grids (Y direction)\nfor (double y = 0; y <= width; y += spacingY)\n{\n    Line line = Line.CreateBound(new XYZ(0, y, 0), new XYZ(length, y, 0));\n    Grid.Create(doc, line);\n}\n\n\/\/ Create longitudinal grids (X direction)\nfor (double x = 0; x <= length; x += spacingX)\n{\n    Line line = Line.CreateBound(new XYZ(x, 0, 0), new XYZ(x, width, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Ajusta el tipo de la ventana seleccionada al tipo 'Ventana Fija 124x60'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una ventana\");\nFamilySymbol newType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name == \"Ventana Fija 124x60\");\nif (pickedRef != null && newType != null)\n{\n    FamilyInstance window = doc.GetElement(pickedRef.ElementId) as FamilyInstance;\n    if (window != null)\n    {\n        window.Symbol = newType;\n    }\n}"}
{"prompt":"Carga la familia 'Mesa.rfa' y colócala en (3,6,1) en el Nivel 0.5","completion":"string levelName = \"Nivel 0.5\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nstring familyName = \"Mesa\";\nFamilySymbol symbol = new FilteredElementCollector(doc).OfClass(typeof(FamilySymbol)).Cast<FamilySymbol>().FirstOrDefault(fs => fs.Family.Name == familyName);\nif (symbol != null && targetLevel != null)\n{\n    if (!symbol.IsActive) { symbol.Activate(); doc.Regenerate(); }\n    XYZ location = new XYZ(3, 6, 1);\n    doc.Create.NewFamilyInstance(location, symbol, targetLevel, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n}"}
{"prompt":"Place all selected elements on the 'Facade' workset.","completion":"using (Transaction t = new Transaction(doc, \"Assign to Workset\"))\n{\n    t.Start();\n    if(doc.IsWorkshared)\n    {\n        UIDocument localUidoc = uidoc;\n        ICollection<ElementId> selectedIds = localUidoc.Selection.GetElementIds();\n        \n        Workset workset = new FilteredWorksetCollector(doc).OfKind(WorksetKind.UserWorkset).FirstOrDefault(ws => ws.Name == \"Facade\");\n        if(workset == null) workset = Workset.Create(doc, \"Facade\");\n\n        if (selectedIds != null && selectedIds.Count > 0 && workset != null)\n        {\n            foreach(ElementId id in selectedIds)\n            {\n                Element elem = doc.GetElement(id);\n                Parameter wsparam = elem.get_Parameter(BuiltInParameter.ELEM_PARTITION_PARAM);\n                if(wsparam != null && !wsparam.IsReadOnly) wsparam.Set(workset.Id.IntegerValue);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Coloca postes de iluminación cada 10m en un camino de 100m.","completion":"FamilySymbol lightSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsElementType().FirstOrDefault(s => s.Name.Contains(\"Post\") || s.Name.Contains(\"Pole\")) as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (lightSymbol != null && level != null)\n{\n    if(!lightSymbol.IsActive) lightSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\n    for(int i = 0; i <= 10; i++)\n    {\n        XYZ point = new XYZ(i * spacing, 0, 0);\n        doc.Create.NewFamilyInstance(point, lightSymbol, level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Asigna todos los muros al workset 'Estructura'.","completion":"using (Transaction t = new Transaction(doc, \"Assign to Workset\"))\n{\n    t.Start();\n    if (doc.IsWorkshared)\n    {\n        Workset ws = new FilteredWorksetCollector(doc).OfKind(WorksetKind.UserWorkset).FirstOrDefault(w => w.Name == \"Estructura\");\n        if (ws != null)\n        {\n            FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType();\n            foreach (Element e in collector)\n            {\n                Parameter p = e.get_Parameter(BuiltInParameter.ELEM_PARTITION_PARAM);\n                if (p != null && !p.IsReadOnly)\n                {\n                    p.Set(ws.Id.IntegerValue);\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Coloca un rociador en las coordenadas (4,4,4).","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol sprinklerSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Sprinklers).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (level != null && sprinklerSymbol != null)\n{\n    if (!sprinklerSymbol.IsActive) sprinklerSymbol.Activate();\n    XYZ placementPoint = new XYZ(UnitUtils.ConvertToInternalUnits(4, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(4, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(4, UnitTypeId.Meters));\n    doc.Create.NewFamilyInstance(placementPoint, sprinklerSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n}"}
{"prompt":"Construct a spherical DirectShape with a 5-meter radius.","completion":"using (Transaction t = new Transaction(doc, \"Create Sphere DirectShape\"))\n{\n    t.Start();\n    double radius = 5 \/ 0.3048;\n    List<GeometryObject> solids = new List<GeometryObject>();\n    Frame frame = new Frame(XYZ.Zero, XYZ.BasisX, XYZ.BasisY, XYZ.BasisZ);\n    Arc arc = Arc.Create(frame.Origin, radius, 0, Math.PI, frame.BasisX, frame.BasisY);\n    Line line = Line.CreateBound(arc.GetEndPoint(1), arc.GetEndPoint(0));\n    CurveLoop profile = CurveLoop.Create(new List<Curve> { arc, line });\n    Solid sphere = GeometryCreationUtilities.CreateRevolvedGeometry(frame, new List<CurveLoop> { profile }, 0, 2 * Math.PI);\n    solids.Add(sphere);\n    DirectShape ds = DirectShape.CreateElement(doc, new ElementId(BuiltInCategory.OST_GenericModel));\n\n    if (ds != null)\n    {\n        ds.SetShape(solids);\n        ds.Name = \"Sphere DirectShape\";\n    }\n    t.Commit();\n}"}
{"prompt":"Export each schedule to an individual CSV file.","completion":"string exportPath = \"C:\/RevitExports\/\";\nList<ViewSchedule> schedules = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().Where(vs => !vs.IsTemplate).ToList();\nViewScheduleExportOptions options = new ViewScheduleExportOptions();\noptions.FieldDelimiter = \",\";\nforeach(ViewSchedule schedule in schedules)\n{\n    schedule.Export(exportPath, schedule.Name + \".csv\", options);\n}"}
{"prompt":"Duplicate level 6 with a 6m offset and name it 'Mezzanine'.","completion":"string levelName = \"Level 6\";\nLevel levelToCopy = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (levelToCopy != null)\n{\n    double offset = UnitUtils.ConvertToInternalUnits(6, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, levelToCopy.Elevation + offset);\n    newLevel.Name = \"Mezzanine\";\n}"}
{"prompt":"Find all walls with the comment 'Review'.","completion":"ElementId commentParamId = new ElementId(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\nParameterValueProvider pvp = new ParameterValueProvider(commentParamId);\nFilterStringRuleEvaluator evaluator = new FilterStringContains();\nFilterRule rule = new FilterStringRule(pvp, evaluator, \"Review\");\nElementFilter filter = new ElementParameterFilter(rule);\nList<Element> wallsToReview = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(filter).ToList();"}
{"prompt":"Create a structural beam between (2,1,6) and (1,1,8) on Level 2","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 2\") as Level;\nFamilySymbol beamType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (beamType != null && level != null)\n{\n    if(!beamType.IsActive) beamType.Activate();\n    XYZ start = new XYZ(2, 1, 6);\n    XYZ end = new XYZ(1, 1, 8);\n    if (start.IsAlmostEqualTo(end)) return;\n    Line beamCurve = Line.CreateBound(start, end);\n    doc.Create.NewFamilyInstance(beamCurve, beamType, level, Autodesk.Revit.DB.Structure.StructuralType.Beam);\n}"}
{"prompt":"Rota la columna seleccionada 45 grados.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una columna para rotar\");\nif (pickedRef != null)\n{\n    Element elem = doc.GetElement(pickedRef.ElementId);\n    LocationPoint lp = elem.Location as LocationPoint;\n    if (lp != null)\n    {\n        Line axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\n        double angle = 45 * Math.PI \/ 180.0;\n        ElementTransformUtils.RotateElement(doc, elem.Id, axis, angle);\n    }\n}"}
{"prompt":"Create a new Level named 'Level 9' at an elevation of 8 meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\nif (newLevel != null)\n{\n    try { newLevel.Name = \"Level 9\"; } catch {}\n}"}
{"prompt":"Extrae la geometría sólida de un elemento seleccionado.","completion":"UIDocument localUidoc = uidoc;\nReference pickedRef = localUidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un elemento para obtener su geometría\");\nif(pickedRef != null)\n{\n    Element elem = doc.GetElement(pickedRef);\n    if(elem != null)\n    {\n        Options opt = new Options() { ComputeReferences = true, DetailLevel = ViewDetailLevel.Fine };\n        GeometryElement geoElem = elem.get_Geometry(opt);\n        if(geoElem != null)\n        {\n            List<Solid> solids = geoElem.OfType<Solid>().Where(s => s.Volume > 0).ToList();\n        }\n    }\n}"}
{"prompt":"Cambia el tipo de la ventana seleccionada al tipo 'Fija 120x60'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una ventana\");\nFamilySymbol newType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name == \"Fija 120x60\");\nif (pickedRef != null && newType != null)\n{\n    FamilyInstance window = doc.GetElement(pickedRef.ElementId) as FamilyInstance;\n    if (window != null)\n    {\n        window.Symbol = newType;\n    }\n}"}
{"prompt":"Crea un espacio MEP para cada habitación en el Nivel 1.","completion":"using (Transaction t = new Transaction(doc, \"Create MEP Spaces\"))\n{\n    t.Start();\n    Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel 1\");\n\n    if (level1 != null)\n    {\n        List<Room> roomsOnLevel1 = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Where(e => (e as Room) != null && (e as Room).LevelId.Equals(level1.Id)).Cast<Room>().ToList();\n        foreach(Room room in roomsOnLevel1)\n        {\n           \/\/ The direct creation of MEP spaces from rooms might not be available in this specific API version.\n           \/\/ Placeholder comment for the intended logic.\n           \/\/ Space.Create(doc, room, null);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Get a list of all family type names from the 'Furniture' category.","completion":"List<Element> furnitureTypes = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().ToList();\nList<string> typeNames = new List<string>();\nforeach(Element type in furnitureTypes)\n{\n    typeNames.Add(type.Name);\n}\n"}
{"prompt":"Create a spherical DirectShape with a 5-meter radius.","completion":"using (Transaction t = new Transaction(doc, \"Create Sphere DirectShape\"))\n{\n    t.Start();\n    double radius = 5 \/ 0.3048;\n    List<GeometryObject> solids = new List<GeometryObject>();\n    Frame frame = new Frame(XYZ.Zero, XYZ.BasisX, XYZ.BasisY, XYZ.BasisZ);\n    Arc arc = Arc.Create(frame.Origin, radius, 0, Math.PI, frame.BasisX, frame.BasisY);\n    Line line = Line.CreateBound(arc.GetEndPoint(1), arc.GetEndPoint(0));\n    CurveLoop profile = CurveLoop.Create(new List<Curve> { arc, line });\n    Solid sphere = GeometryCreationUtilities.CreateRevolvedGeometry(frame, new List<CurveLoop> { profile }, 0, 2 * Math.PI);\n    solids.Add(sphere);\n    DirectShape ds = DirectShape.CreateElement(doc, new ElementId(BuiltInCategory.OST_GenericModel));\n\n    if (ds != null)\n    {\n        ds.SetShape(solids);\n        ds.Name = \"Sphere DirectShape\";\n    }\n    t.Commit();\n}"}
{"prompt":"Build a new door type named 'FR-90 Door' and set its fire rating to '90 min'.","completion":"string newTypeName = \"FR-90 Door\";\nFamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (doorTypeToDuplicate != null)\n{\n    FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\n    if (newDoorType != null)\n    {\n        Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n        if (fireRatingParam != null && !fireRatingParam.IsReadOnly) fireRatingParam.Set(\"90 min\");\n    }\n}"}
{"prompt":"Position lighting posts every 10m along a 100m path.","completion":"FamilySymbol lightSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsElementType().FirstOrDefault(s => s.Name.Contains(\"Post\") || s.Name.Contains(\"Pole\")) as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (lightSymbol != null && level != null)\n{\n    if (!lightSymbol.IsActive)\n    {\n        lightSymbol.Activate();\n    }\n    double spacing = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\n    double pathLength = UnitUtils.ConvertToInternalUnits(100, UnitTypeId.Meters);\n    int postCount = (int)(pathLength \/ spacing);\n    for (int i = 0; i <= postCount; i++)\n    {\n        XYZ point = new XYZ(i * spacing, 0, 0);\n        doc.Create.NewFamilyInstance(point, lightSymbol, level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Ajusta el tipo de la ventana seleccionada al tipo 'Fija 123x60'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una ventana\");\nFamilySymbol newType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name == \"Fija 123x60\");\nif (pickedRef != null && newType != null)\n{\n    FamilyInstance window = doc.GetElement(pickedRef.ElementId) as FamilyInstance;\n    if (window != null)\n    {\n        window.Symbol = newType;\n    }\n}"}
{"prompt":"Añade el prefijo 'PLANTA-' a todas las vistas de plano.","completion":"string prefix = \"PLANTA-\";\nList<ViewPlan> planViews = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().Where(v => !v.IsTemplate).ToList();\nforeach(ViewPlan view in planViews)\n{\n    if (view != null)\n    {\n        view.Name = prefix + view.Name;\n    }\n}"}
{"prompt":"Set the visibility of the 'Furniture' category to false in the active view.","completion":"Category furnitureCat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Furniture);\nView activeView = doc.ActiveView;\n\nif (furnitureCat != null && activeView != null)\n{\n    activeView.SetCategoryHidden(furnitureCat.Id, true);\n}\n"}
{"prompt":"Crea un nivel intermedio llamado 'Mezzanine' a mitad de camino entre el Nivel 1 y el Nivel 2.","completion":"string newLevelName = \"Mezzanine\";\nLevel lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Nivel 1\");\nLevel lvl2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Nivel 2\");\nif (lvl1 != null && lvl2 != null)\n{\ndouble midElevation = (lvl1.ProjectElevation + lvl2.ProjectElevation) \/ 2.0;\nLevel newLevel = Level.Create(doc, midElevation);\n    if(newLevel != null)\n    {\nnewLevel.Name = newLevelName;\n    }\n}"}
{"prompt":"Create a new level named 'Mezzanine' at 7.8 meters elevation.","completion":"string levelName = \"Mezzanine\";\ndouble elevation = UnitUtils.ConvertToInternalUnits(7.8, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Construct a SketchPlane on Level 2.","completion":"using (Transaction t = new Transaction(doc, \"Create Sketch Plane\"))\n{\n    t.Start();\n    Level level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 2\");\n\n    if (level2 != null)\n    {\n        Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisZ, new XYZ(0, 0, level2.Elevation));\n        SketchPlane skp = SketchPlane.Create(doc, plane);\n    }\n    t.Commit();\n}"}
{"prompt":"Encuentra todas las puertas del Nivel 4 que sean de la familia 'Puerta Sencilla'.","completion":"string levelName = \"Nivel 4\";\nstring familyName = \"Puerta Sencilla\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WherePasses(new ElementLevelFilter(targetLevel.Id));\n    List<ElementId> doorIds = new List<ElementId>();\n    foreach (Element door in collector)\n    {\n        FamilyInstance fi = door as FamilyInstance;\n        if (fi != null && fi.Symbol.Family.Name == familyName)\n        {\n            doorIds.Add(door.Id);\n        }\n    }\n    uidoc.Selection.SetElementIds(doorIds);\n}"}
{"prompt":"Asigna todos los muros y suelos seleccionados al workset 'Arquitectura'.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nWorkset workset = new FilteredWorksetCollector(doc).OfKind(WorksetKind.UserWorkset).FirstOrDefault(ws => ws.Name == \"Arquitectura\");\nif (selectedIds.Count > 0 && workset != null)\n{\n    int worksetId = workset.Id.IntegerValue;\n    foreach (ElementId id in selectedIds)\n    {\n        Element elem = doc.GetElement(id);\n        Parameter wsparam = elem.get_Parameter(BuiltInParameter.ELEM_PARTITION_PARAM);\n        if (wsparam != null && !wsparam.IsReadOnly) wsparam.Set(worksetId);\n    }\n}"}
{"prompt":"Create a 'Generic - 200mm' wall on 'Level 1' from (0,0) to (10,5).","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == \"Generic - 200mm\") as WallType;\nXYZ startPoint = new XYZ(0, 0, 0);\nXYZ endPoint = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0);\nLine wallCurve = Line.CreateBound(startPoint, endPoint);\ndouble height = UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\nWall.Create(doc, wallCurve, wallType.Id, level.Id, height, 0, false, false);"}
{"prompt":"Copia la vista activa y ponle el nombre 'Vista Duplicada'.","completion":"View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    ElementId newViewId = activeView.Duplicate(ViewDuplicateOption.Duplicate);\n    View newView = doc.GetElement(newViewId) as View;\n    if (newView != null)\n    {\n        newView.Name = \"Vista Duplicada\";\n    }\n}"}
{"prompt":"Crea una vista de sección entre los puntos (0,0,0) y (10,10,0).","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.Section);\n\nif (vft != null)\n{\n    XYZ p1 = new XYZ(0,0,0);\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),0);\n    XYZ midPoint = (p1 + p2) \/ 2;\n    XYZ direction = (p2 - p1).Normalize();\n    XYZ up = XYZ.BasisZ;\n    XYZ viewdir = up.CrossProduct(direction);\n    \n    BoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\n    Transform t = Transform.Identity;\n    t.Origin = midPoint;\nt.BasisX = direction;\nt.BasisY = up;\nt.BasisZ = viewdir;\nsectionBox.Transform = t;\nsectionBox.Min = new XYZ(UnitUtils.ConvertToInternalUnits(-p1.DistanceTo(p2)\/2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(-10, UnitTypeId.Meters), 0);\nsectionBox.Max = new XYZ(UnitUtils.ConvertToInternalUnits(p1.DistanceTo(p2)\/2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(20, UnitTypeId.Meters));\n    \n    ViewSection.CreateSection(doc, vft.Id, sectionBox);\n}"}
{"prompt":"Create a new workset named 'Structure'.","completion":"string wsName = \"Structure\";\nWorkset newWorkset = Workset.Create(doc, wsName);\n"}
{"prompt":"Localiza todos los muros con un parámetro 'Marca' vacío y asigna 'WM-01'.","completion":"List<Wall> walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>().ToList();\nforeach(var w in walls)\n{\n  Parameter p = w.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n  if(p != null && !p.IsReadOnly && string.IsNullOrEmpty(p.AsString()))\n  {\n      p.Set(\"WM-01\");\n  }\n}"}
{"prompt":"Add reinforcement to a column.","completion":"RebarBarType barType = new FilteredElementCollector(doc).OfClass(typeof(RebarBarType)).FirstOrDefault() as RebarBarType;\nRebarShape shape = new FilteredElementCollector(doc).OfClass(typeof(RebarShape)).FirstOrDefault() as RebarShape;\nFamilyInstance column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\n\nif (barType != null && shape != null && column != null)\n{\n    Rebar.CreateFromRebarShape(doc, shape, barType, column, column.GetTransform().Origin, XYZ.BasisX, XYZ.BasisY);\n}"}
{"prompt":"Create an extrusion roof with an arc profile.","completion":"using (Transaction t = new Transaction(doc, \"Create Extrusion Roof\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    RoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n\n    if (level != null && roofType != null && doc.ActiveView != null)\n    {\n        CurveArray profile = new CurveArray();\n        profile.Append(Arc.Create(new XYZ(-10,0,0), new XYZ(10,0,0), new XYZ(0,5,0)));\n        Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisY, XYZ.Zero);\n        ReferencePlane refPlane = doc.Create.NewReferencePlane(plane.Origin, plane.Origin + XYZ.BasisX, plane.Normal, doc.ActiveView);\n        if(refPlane != null)\n            doc.Create.NewExtrusionRoof(profile, refPlane, level, roofType, 0, 20);\n    }\n    t.Commit();\n}"}
{"prompt":"Copia el tipo de muro 'Genérico - 111mm' y nómbralo 'Interior - 15cm Yeso'.","completion":"string originalName = \"Genérico - 111mm\";\nstring newName = \"Interior - 15cm Yeso\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif (originalType != null)\n{\n    WallType newType = originalType.Duplicate(newName) as WallType;\n}"}
{"prompt":"Insert a text note with 'Review' in the current view.","completion":"View activeView = doc.ActiveView;\nElementId defaultTypeId = doc.GetDefaultElementTypeId(ElementTypeGroup.TextNoteType);\nif (activeView != null && defaultTypeId != ElementId.InvalidElementId)\n{\n    XYZ position = new XYZ(5, 5, 0);\n    TextNote.Create(doc, activeView.Id, position, \"Review\", defaultTypeId);\n}"}
{"prompt":"Get the solid geometry of a selected element.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select an element to get its geometry\");\n\nList<Solid> solids = new List<Solid>();\nif (pickedRef != null)\n{\n    Element elem = doc.GetElement(pickedRef);\n    if (elem != null)\n    {\n        Options opt = new Options() { ComputeReferences = true, DetailLevel = ViewDetailLevel.Fine };\n        GeometryElement geoElem = elem.get_Geometry(opt);\n        if (geoElem != null)\n        {\n            solids = geoElem.OfType<Solid>().Where(s => s.Volume > 0).ToList();\n        }\n    }\n}"}
{"prompt":"Encuentra todas las puertas del Nivel 2 que sean de la familia 'Puerta Sencilla'.","completion":"Level level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel 2\");\nList<Element> doors = new List<Element>();\n\nif (level2 != null)\n{\n    ElementCategoryFilter catFilter = new ElementCategoryFilter(BuiltInCategory.OST_Doors);\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level2.Id);\n    FilterableValueProvider provider = new ParameterValueProvider(new ElementId(BuiltInParameter.ELEM_FAMILY_PARAM));\n    FilterStringRuleEvaluator evaluator = new FilterStringEquals();\n    FilterRule famNameRule = new FilterStringRule(provider, evaluator, \"Puerta Sencilla\");\n    ElementParameterFilter famFilter = new ElementParameterFilter(famNameRule);\n    LogicalAndFilter andFilter = new LogicalAndFilter(new List<ElementFilter> { catFilter, levelFilter, famFilter });\n    doors = new FilteredElementCollector(doc).WherePasses(andFilter).ToList();\n}"}
{"prompt":"Clone the 'Generic - 193mm' wall type and name it 'Interior - 15cm Plaster'.","completion":"string originalName = \"Generic - 193mm\";\nstring newName = \"Interior - 15cm Plaster\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif (originalType != null)\n{\n    WallType newType = originalType.Duplicate(newName) as WallType;\n}"}
{"prompt":"Temporarily isolate the selected elements in the active view.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> idsToIsolate = uidoc.Selection.GetElementIds();\nView activeView = doc.ActiveView;\n\nif (activeView != null && idsToIsolate.Count > 0)\n{\n    activeView.IsolateElementsTemporary(idsToIsolate);\n}"}
{"prompt":"Coloca todos los elementos seleccionados en el workset 'Fachada'.","completion":"using (Transaction t = new Transaction(doc, \"Assign to Workset\"))\n{\n    t.Start();\n    if(doc.IsWorkshared)\n    {\n        UIDocument localUidoc = uidoc;\n        ICollection<ElementId> selectedIds = localUidoc.Selection.GetElementIds();\n        \n        Workset workset = new FilteredWorksetCollector(doc).OfKind(WorksetKind.UserWorkset).FirstOrDefault(ws => ws.Name == \"Fachada\");\n        if(workset == null) workset = Workset.Create(doc, \"Fachada\");\n\n        if (selectedIds != null && selectedIds.Count > 0 && workset != null)\n        {\n            foreach(ElementId id in selectedIds)\n            {\n                Element elem = doc.GetElement(id);\n                Parameter wsparam = elem.get_Parameter(BuiltInParameter.ELEM_PARTITION_PARAM);\n                if(wsparam != null && !wsparam.IsReadOnly) wsparam.Set(workset.Id.IntegerValue);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea una apertura de hueco (shaft) que atraviese desde el Nivel 1 al Nivel 3.","completion":"using (Transaction t = new Transaction(doc, \"Create Shaft Opening\"))\n{\n    t.Start();\n    Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel 1\");\n    Level topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel 3\");\n\n    if (bottomLevel != null && topLevel != null)\n    {\n        XYZ p1 = new XYZ(5 \/ 0.3048, 5 \/ 0.3048,0);\n        XYZ p2 = new XYZ(8 \/ 0.3048, 5 \/ 0.3048,0);\n        XYZ p3 = new XYZ(8 \/ 0.3048, 8 \/ 0.3048,0);\n        XYZ p4 = new XYZ(5 \/ 0.3048, 8 \/ 0.3048,0);\n        CurveArray profile = new CurveArray();\n        profile.Append(Line.CreateBound(p1,p2));\n        profile.Append(Line.CreateBound(p2,p3));\n        profile.Append(Line.CreateBound(p3,p4));\n        profile.Append(Line.CreateBound(p4,p1));\n        doc.Create.NewOpening(bottomLevel, topLevel, profile);\n    }\n    t.Commit();\n}"}
{"prompt":"Carga la familia desde la ruta \"C:\\Librerias\\Puerta Principal.rfa\".","completion":"string familyPath = @\"C:\\Librerias\\Puerta Principal.rfa\";\nFamily loadedFamily = null;\ndoc.LoadFamily(familyPath, out loadedFamily);"}
{"prompt":"Duplicate the 'Level 2' view as a dependent view.","completion":"ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v => v.Name == \"Level 2\") as ViewPlan;\n\nif (viewToDuplicate != null)\n{\n    ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n}"}
{"prompt":"Clone the 'Generic - 111mm' wall type and name it 'Interior - 15cm Plaster'.","completion":"string originalName = \"Generic - 111mm\";\nstring newName = \"Interior - 15cm Plaster\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif(originalType!=null)\n    originalType.Duplicate(newName);"}
{"prompt":"Apply a red color to all windows in the active view.","completion":"View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    OverrideGraphicSettings ogs = new OverrideGraphicSettings();\n    ogs.SetProjectionLineColor(new Color(255, 0, 0));\n    ICollection<ElementId> windows = new FilteredElementCollector(doc, activeView.Id).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().ToElementIds();\n    \n    foreach (ElementId windowId in windows)\n    {\n        activeView.SetElementOverrides(windowId, ogs);\n    }\n}"}
{"prompt":"Import a georeferenced survey from a LandXML file.","completion":"\/\/ The Revit API in the provided context does not support direct LandXML import.\n\/\/ This functionality typically requires additional add-ins like the Site Designer, which are not available here.\n\/\/ As a placeholder, this code will show how to create a simple topography surface from a list of points.\nusing(Transaction t = new Transaction(doc, \"Create Topography\"))\n{\n    t.Start();\n    IList<XYZ> points = new List<XYZ>();\n    points.Add(new XYZ(0, 0, 0));\n    points.Add(new XYZ(50, 0, 5));\n    points.Add(new XYZ(0, 50, 10));\n    TopographySurface.Create(doc, points);\n    t.Commit();\n}"}
{"prompt":"Create a 20x15 meter foundation slab.","completion":"using (Transaction t = new Transaction(doc, \"Create Foundation Slab\"))\n{\n    t.Start();\n    Level foundationLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderBy(l => l.Elevation).FirstOrDefault();\n    FloorType slabType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.get_Parameter(BuiltInParameter.FLOOR_PARAM_IS_STRUCTURAL).AsInteger() == 1);\n\n    if (foundationLevel != null && slabType != null)\n    {\n        XYZ p1 = new XYZ(0,0,0);\n        XYZ p2 = new XYZ(20\/0.3048, 0, 0);\n        XYZ p3 = new XYZ(20\/0.3048, 15\/0.3048, 0);\n        XYZ p4 = new XYZ(0, 15\/0.3048, 0);\n        CurveLoop profile = new CurveLoop();\n        profile.Append(Line.CreateBound(p1,p2));\n        profile.Append(Line.CreateBound(p2,p3));\n        profile.Append(Line.CreateBound(p3,p4));\n        profile.Append(Line.CreateBound(p4,p1));\n        Floor.Create(doc, new List<CurveLoop>{profile}, slabType.Id, foundationLevel.Id);\n    }\n    t.Commit();\n}"}
{"prompt":"Elimina todas las líneas de detalle en la vista activa.","completion":"View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    ICollection<ElementId> detailLines = new FilteredElementCollector(doc, activeView.Id).OfClass(typeof(DetailLine)).ToElementIds();\n    if (detailLines.Count > 0)\n    {\n        doc.Delete(detailLines);\n    }\n}"}
{"prompt":"Place a piece of furniture at coordinates (2,3).","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null && furnitureSymbol != null)\n{\n    if (!furnitureSymbol.IsActive)\n    {\n        furnitureSymbol.Activate();\n    }\n    doc.Create.NewFamilyInstance(new XYZ(2, 3, 0), furnitureSymbol, level, StructuralType.NonStructural);\n}"}
{"prompt":"Hide all annotation elements in the active view.","completion":"if (doc.ActiveView != null)\n{\n    List<BuiltInCategory> annotationCategories = new List<BuiltInCategory>\n    {\n        BuiltInCategory.OST_GenericAnnotation,\n        BuiltInCategory.OST_TextNotes,\n        BuiltInCategory.OST_Tags,\n        BuiltInCategory.OST_Dimensions,\n        BuiltInCategory.OST_DetailComponents\n    };\n    ElementMulticategoryFilter multiCategoryFilter = new ElementMulticategoryFilter(annotationCategories);\n    ICollection<ElementId> elementsToHide = new FilteredElementCollector(doc, doc.ActiveView.Id).WherePasses(multiCategoryFilter).ToElementIds();\n    if(elementsToHide.Any())\n    {\n        doc.ActiveView.HideElements(elementsToHide);\n    }\n}"}
{"prompt":"Obtén todas las habitaciones en el Nivel 'Planta Baja'.","completion":"Level groundFloor = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Planta Baja\") as Level;\nList<Element> roomsOnGround = new List<Element>();\n\nif (groundFloor != null)\n{\n    roomsOnGround = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Where(r => r.LevelId == groundFloor.Id).ToList();\n}"}
{"prompt":"Build a shaft opening that passes through from Level 1 to Level 3.","completion":"using (Transaction t = new Transaction(doc, \"Create Shaft Opening\"))\n{\n    t.Start();\n    Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 1\");\n    Level topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 3\");\n\n    if (bottomLevel != null && topLevel != null)\n    {\n        XYZ p1 = new XYZ(5 \/ 0.3048, 5 \/ 0.3048,0);\n        XYZ p2 = new XYZ(8 \/ 0.3048, 5 \/ 0.3048,0);\n        XYZ p3 = new XYZ(8 \/ 0.3048, 8 \/ 0.3048,0);\n        XYZ p4 = new XYZ(5 \/ 0.3048, 8 \/ 0.3048,0);\n        CurveArray profile = new CurveArray();\n        profile.Append(Line.CreateBound(p1,p2));\n        profile.Append(Line.CreateBound(p2,p3));\n        profile.Append(Line.CreateBound(p3,p4));\n        profile.Append(Line.CreateBound(p4,p1));\n        Opening shaft = doc.Create.NewOpening(bottomLevel, topLevel, profile);\n    }\n    t.Commit();\n}"}
{"prompt":"Coloca pilares en todos los cruces de la rejilla.","completion":"FamilySymbol colSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nList<Grid> grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().ToList();\n\nif (colSymbol != null && level != null && grids.Count >= 2)\n{\n    for (int i = 0; i < grids.Count; i++)\n    {\n        for (int j = i + 1; j < grids.Count; j++)\n        {\n            IntersectionResultArray results = null;\n            grids[i].Curve.Intersect(grids[j].Curve, out results);\n            if(results != null)\n            {\n                 foreach (IntersectionResult ir in results)\n                 {\n                     doc.Create.NewFamilyInstance(ir.XYZPoint, colSymbol, level, StructuralType.Column);\n                 }\n            }\n        }\n    }\n}"}
{"prompt":"Selecciona todos los muros con una resistencia al fuego de 89 minutos.","completion":"ElementId fireRatingParamId = new ElementId(BuiltInParameter.FIRE_RATING);\nParameterValueProvider pvp = new ParameterValueProvider(fireRatingParamId);\nFilterStringRuleEvaluator evaluator = new FilterStringEquals();\nFilterRule rule = new FilterStringRule(pvp, evaluator, \"989 min\");\nElementParameterFilter filter = new ElementParameterFilter(rule);\nICollection<ElementId> wallsToSelect = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(filter).ToElementIds();\nif (wallsToSelect.Count > 0)\n{\n    new UIDocument(doc).Selection.SetElementIds(wallsToSelect);\n}"}
{"prompt":"Comprueba si la vista activa es una vista de plano.","completion":"View activeView = doc.ActiveView;\nbool isPlanView = false;\n\nif (activeView != null)\n{\n    isPlanView = activeView.ViewType == ViewType.FloorPlan \n                 || activeView.ViewType == ViewType.CeilingPlan \n                 || activeView.ViewType == ViewType.AreaPlan \n                 || activeView.ViewType == ViewType.EngineeringPlan;\n}\n"}
{"prompt":"Duplicate level 1 with a 3m offset and name it 'Mezzanine'.","completion":"string levelName = \"Mezzanine\";\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\n\nif (level1 != null)\n{\n    double newElevation = level1.ProjectElevation + UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, newElevation);\n    if (newLevel != null)\n    {\n        newLevel.Name = levelName;\n    }\n}"}
{"prompt":"Obtén una lista de todas las familias de anotación.","completion":"List<Family> annotationFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.CategoryType == CategoryType.Annotation).ToList();\n"}
{"prompt":"Change the visual style of the active view to 'Hidden Line'.","completion":"View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.DisplayStyle = DisplayStyle.HLR;\n}"}
{"prompt":"Move a selected element to position (5,5).","completion":"ICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds.Any())\n{\n    foreach (ElementId id in selectedIds)\n    {\n        Element elem = doc.GetElement(id);\n        if (elem != null)\n        {\n            LocationPoint lp = elem.Location as LocationPoint;\n            if (lp != null)\n            {\n                XYZ newPosition = new XYZ(5, 5, lp.Point.Z);\n                lp.Point = newPosition;\n            }\n        }\n    }\n}"}
{"prompt":"Aísla temporalmente todo el mobiliario en la vista activa.","completion":"ICollection<ElementId> furnitureIds = new FilteredElementCollector(doc, doc.ActiveView.Id).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsNotElementType().ToElementIds();\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.IsolateElementsTemporary(furnitureIds);\n}"}
{"prompt":"Select all walls on 'Level 6' and change their comment to 'REVIEW INSULATION'.","completion":"string levelName = \"Level 6\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(targetLevel.Id);\n    FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(levelFilter);\n    foreach (Element wall in collector)\n    {\n        Parameter commentsParam = wall.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n        if (commentsParam != null && !commentsParam.IsReadOnly) { commentsParam.Set(\"REVIEW INSULATION\"); }\n    }\n}"}
{"prompt":"Crea un espacio MEP para cada habitación en el Nivel 2","completion":"string levelName = \"Nivel2\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    FilteredElementCollector roomCollector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WherePasses(new ElementLevelFilter(targetLevel.Id));\n    foreach (Room room in roomCollector.ToElements().Cast<Room>())\n    {\n        if (room.Location != null)\n        {\n            LocationPoint locPoint = room.Location as LocationPoint;\n            if(locPoint != null)\n            {\n                UV point = new UV(locPoint.Point.X, locPoint.Point.Y);\n                doc.Create.NewSpace(targetLevel, point);\n            }\n        }\n    }\n}"}
{"prompt":"Crea un nuevo tipo de texto de 5mm de color verde.","completion":"using (Transaction t = new Transaction(doc, \"Create Green Text Type\"))\n{\n    t.Start();\n    string newTypeName = \"5mm Verde\";\n    TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\n    if (defaultType != null)\n    {\n        TextNoteType newType = defaultType.Duplicate(newTypeName) as TextNoteType;\n        if (newType != null)\n        {\n            Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n            if (textSizeParam != null && !textSizeParam.IsReadOnly)\n            {\n                textSizeParam.Set(5 \/ 304.8);\n            }\n            Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n            if (lineColorParam != null && !lineColorParam.IsReadOnly)\n            {\n                 lineColorParam.Set(65280);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea un conducto eléctrico de 25mm de diámetro entre dos puntos.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nElementId conduitTypeId = new FilteredElementCollector(doc).OfClass(typeof(ConduitType)).FirstElementId();\nif (level != null && conduitTypeId != ElementId.InvalidElementId)\n{\n    XYZ startPoint = new XYZ(0, 0, 10);\n    XYZ endPoint = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0, 10);\n    Conduit conduit = Conduit.Create(doc, conduitTypeId, startPoint, endPoint, level.Id);\n    if (conduit != null)\n    {\n        Parameter diameterParam = conduit.get_Parameter(BuiltInParameter.RBS_CONDUIT_DIAMETER_PARAM);\n        if (diameterParam != null && !diameterParam.IsReadOnly)\n        {\n            diameterParam.Set(UnitUtils.ConvertToInternalUnits(25, UnitTypeId.Millimeters));\n        }\n    }\n}"}
{"prompt":"Adjust the family name of a selected door to 'New_Door'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a door\");\n\nif (pickedRef != null)\n{\n    FamilyInstance door = doc.GetElement(pickedRef.ElementId) as FamilyInstance;\n    if (door != null && door.Symbol != null)\n    {\n        Family family = door.Symbol.Family;\n        if (family != null)\n        {\n            family.Name = \"New_Door\";\n        }\n    }\n}"}
{"prompt":"Selecciona todos los muros con una resistencia al fuego de 87 minutos.","completion":"ElementId fireRatingParamId = new ElementId(BuiltInParameter.FIRE_RATING);\nParameterValueProvider pvp = new ParameterValueProvider(fireRatingParamId);\nFilterStringRuleEvaluator evaluator = new FilterStringEquals();\nFilterRule rule = new FilterStringRule(pvp, evaluator, \"987 min\");\nElementParameterFilter filter = new ElementParameterFilter(rule);\nICollection<ElementId> wallsToSelect = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(filter).ToElementIds();\nif (wallsToSelect.Count > 0)\n{\n    new UIDocument(doc).Selection.SetElementIds(wallsToSelect);\n}"}
{"prompt":"Sitúa una cota de elevación en una cara y un punto de vista dados.","completion":"using (Transaction t = new Transaction(doc, \"Place Spot Elevation\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference faceRef = localUidoc.Selection.PickObject(ObjectType.Face, \"Selecciona la cara superior del suelo\");\n\n    View activeView = doc.ActiveView;\n\n    if (faceRef != null && activeView != null)\n    {\n        XYZ pointOnFace = faceRef.GlobalPoint;\n        XYZ leaderEnd = pointOnFace + new XYZ(1 \/ 0.3048, 1 \/ 0.3048, 0);\n        doc.Create.NewSpotElevation(activeView, faceRef, pointOnFace, pointOnFace, leaderEnd, pointOnFace, true);\n    }\n    t.Commit();\n}"}
{"prompt":"Crea un espacio MEP para cada habitación en el Nivel 3","completion":"string levelName = \"Nivel 3\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    FilteredElementCollector roomCollector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WherePasses(new ElementLevelFilter(targetLevel.Id));\n    foreach (Room room in roomCollector.ToElements().Cast<Room>())\n    {\n        LocationPoint locPoint = room.Location as LocationPoint;\n        if (locPoint != null)\n        {\n            UV point = new UV(locPoint.Point.X, locPoint.Point.Y);\n            doc.Create.NewSpace(targetLevel, point);\n        }\n    }\n}"}
{"prompt":"Activa todos los símbolos de familia cargados en el proyecto.","completion":"List<FamilySymbol> symbols = new FilteredElementCollector(doc).OfClass(typeof(FamilySymbol)).Cast<FamilySymbol>().ToList();\nforeach (var sym in symbols)\n{\n    if (!sym.IsActive) \n    {\n        sym.Activate();\n    }\n}"}
{"prompt":"Aplica la plantilla de vista 'Vista de Trabajo' a todas las vistas de planta que contengan 'Fontanería' en su nombre.","completion":"View viewTemplate = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().FirstOrDefault(v => v.IsTemplate && v.Name == \"Vista de Trabajo\");\nif (viewTemplate != null)\n{\n    List<ViewPlan> planViews = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().Where(v => !v.IsTemplate && v.Name.Contains(\"Fontanería\")).ToList();\n    foreach (ViewPlan view in planViews)\n    {\n        view.ViewTemplateId = viewTemplate.Id;\n    }\n}"}
{"prompt":"Obtén el espacio MEP asociado a la habitación 'Oficina 101'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Cast<Room>().FirstOrDefault(r => r.Name == \"Oficina 101\");\nList<Space> spaces = new List<Space>();\n\nif (room != null)\n{\n    spaces = new FilteredElementCollector(doc).OfClass(typeof(Space)).Cast<Space>().Where(s => s.Room != null && s.Room.Id == room.Id).ToList();\n}"}
{"prompt":"Find all walls that have no base level assigned.","completion":"ElementFilter unassociatedFilter = new ElementLevelFilter(ElementId.InvalidElementId);\nList<Element> unassignedWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(unassociatedFilter).ToList();"}
{"prompt":"Turn a selected element 94 degrees around its Z-axis.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select an element to rotate\");\nElement elem = doc.GetElement(pickedRef.ElementId);\nLocationPoint lp = elem.Location as LocationPoint;\nLine axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\nElementTransformUtils.RotateElement(doc, elem.Id, axis, Math.PI \/ 94);"}
{"prompt":"Crea un suelo con un hueco circular en el centro.","completion":"using (Transaction t = new Transaction(doc, \"Create Floor with Hole\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    FloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\n\n    if (level != null && floorType != null)\n    {\n        XYZ p1 = new XYZ(-10 \/ 0.3048, -10 \/ 0.3048, 0);\n        XYZ p2 = new XYZ(10 \/ 0.3048, -10 \/ 0.3048, 0);\n        XYZ p3 = new XYZ(10 \/ 0.3048, 10 \/ 0.3048, 0);\n        XYZ p4 = new XYZ(-10 \/ 0.3048, 10 \/ 0.3048, 0);\n        CurveLoop outerLoop = new CurveLoop();\n        outerLoop.Append(Line.CreateBound(p1, p2));\n        outerLoop.Append(Line.CreateBound(p2, p3));\n        outerLoop.Append(Line.CreateBound(p3, p4));\n        outerLoop.Append(Line.CreateBound(p4, p1));\n\n        XYZ center = XYZ.Zero;\n        double radius = 2 \/ 0.3048;\n        CurveLoop innerLoop = new CurveLoop();\n        innerLoop.Append(Arc.Create(center - XYZ.BasisX * radius, center + XYZ.BasisX * radius, center + XYZ.BasisY * radius));\n        innerLoop.Append(Arc.Create(center + XYZ.BasisX * radius, center - XYZ.BasisX * radius, center - XYZ.BasisY * radius));\n\n        Floor.Create(doc, new List<CurveLoop> { outerLoop, innerLoop }, floorType.Id, level.Id);\n    }\n    t.Commit();\n}"}
{"prompt":"Generate a new Level named 'Level 1' at an elevation of 15 meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(15, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Level 1\";\n}"}
{"prompt":"Move a selected element to position (4,8).","completion":"ICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds.Any())\n{\n    foreach (ElementId id in selectedIds)\n    {\n        Element elem = doc.GetElement(id);\n        if (elem != null)\n        {\n            LocationPoint lp = elem.Location as LocationPoint;\n            if (lp != null)\n            {\n                XYZ newPosition = new XYZ(4, 8, lp.Point.Z);\n                lp.Point = newPosition;\n            }\n        }\n    }\n}"}
{"prompt":"Set the sill height of all windows to 905mm.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits(905, UnitTypeId.Millimeters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Recupera todas las habitaciones en el Nivel 'Losa 96'.","completion":"Level groundFloor = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Losa 96\") as Level;\nList<Element> roomsOnGround = new List<Element>();\n\nif (groundFloor != null)\n{\n    roomsOnGround = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Where(r => r.LevelId == groundFloor.Id).ToList();\n}"}
{"prompt":"Coloca pilares 'MLO-UC305x305x97' en cada intersección de la retícula de ejes en el 'Nivel 1'.","completion":"FamilySymbol columnType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(s => s.Name == \"MLO-UC305x305x97\");\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\n\nFilteredElementCollector gridCollector = new FilteredElementCollector(doc).OfClass(typeof(Grid));\nIList<Grid> grids = gridCollector.Cast<Grid>().ToList();\n\nif (columnType != null && level != null && grids.Count > 1)\n{\n    if (!columnType.IsActive) columnType.Activate();\n\n    for (int i = 0; i < grids.Count; i++)\n    {\n        for (int j = i + 1; j < grids.Count; j++)\n        {\n            SetComparisonResult result = grids[i].Curve.Intersect(grids[j].Curve, out IntersectionResultArray results);\n            if (result == SetComparisonResult.Overlap && results != null && !results.IsEmpty)\n            {\n                XYZ intersectionPoint = results[0].XYZPoint;\n                doc.Create.NewFamilyInstance(intersectionPoint, columnType, level, StructuralType.Column);\n            }\n        }\n    }\n}"}
{"prompt":"Update the type of a selected floor to 'Concrete 10cm'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a floor\");\n\nif (pickedRef != null)\n{\n    Floor floorToChange = doc.GetElement(pickedRef) as Floor;\n    FloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name == \"Concrete 10cm\");\n    \n    if (floorToChange != null && newType != null)\n    {\n        floorToChange.ChangeTypeId(newType.Id);\n    }\n}"}
{"prompt":"Crea un muro del tipo 'Genérico - 200mm' en el 'Nivel 1' desde (0,0) hasta (10,5).","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == \"Genérico - 200mm\") as WallType;\nXYZ startPoint = new XYZ(0, 0, 0);\nXYZ endPoint = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0);\nLine wallCurve = Line.CreateBound(startPoint, endPoint);\ndouble height = UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\nif (level != null && wallType != null)\n{\n    Wall.Create(doc, wallCurve, wallType.Id, level.Id, height, 0, false, false);\n}"}
{"prompt":"Generate a new level named 'Basement Floor' at an elevation of -4.5 meters.","completion":"double elevationInternal = UnitUtils.ConvertToInternalUnits(-4.5, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevationInternal);\nif(newLevel != null)\n{\n    try { newLevel.Name = \"Basement Floor\"; } catch {}\n}"}
{"prompt":"Fetch a list of all families and their types.","completion":"List<string> familyAndTypeNames = new List<string>();\nList<Family> families = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().ToList();\nforeach (Family fam in families)\n{\n    familyAndTypeNames.Add($\"Family: {fam.Name}\");\n    foreach (ElementId symbolId in fam.GetFamilySymbolIds())\n    {\n        FamilySymbol sym = doc.GetElement(symbolId) as FamilySymbol;\n        if (sym != null)\n        {\n            familyAndTypeNames.Add($\"\\tType: {sym.Name}\");\n        }\n    }\n}"}
{"prompt":"Obtain the MEP space associated with the room 'Office 99'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Cast<Room>().FirstOrDefault(r => r.Name == \"Office 99\");\nList<Space> spaces = new List<Space>();\n\nif (room != null)\n{\n    spaces = new FilteredElementCollector(doc).OfClass(typeof(Space)).Cast<Space>().Where(s => s.Room != null && s.Room.Id == room.Id).ToList();\n}"}
{"prompt":"Hide all annotation elements in the active view.","completion":"if (doc.ActiveView != null)\n{\n    List<BuiltInCategory> annotationCategories = new List<BuiltInCategory>\n    {\n        BuiltInCategory.OST_GenericAnnotation,\n        BuiltInCategory.OST_TextNotes,\n        BuiltInCategory.OST_Tags,\n        BuiltInCategory.OST_Dimensions,\n        BuiltInCategory.OST_DetailComponents\n    };\n    ElementMulticategoryFilter multiCategoryFilter = new ElementMulticategoryFilter(annotationCategories);\n    ICollection<ElementId> elementsToHide = new FilteredElementCollector(doc, doc.ActiveView.Id).WherePasses(multiCategoryFilter).ToElementIds();\n    if(elementsToHide.Any())\n    {\n        doc.ActiveView.HideElements(elementsToHide);\n    }\n}"}
{"prompt":"Retrieve the host element of the first window found.","completion":"FamilyInstance windowInstance = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\n\nif (windowInstance != null)\n{\n    Element hostElement = windowInstance.Host;\n}"}
{"prompt":"Put an instance of the 'Office Desk' family in the center of the 'Office 98' room.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Office 98\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Office Desk\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);"}
{"prompt":"Create an electrical conduit with a 1-inch diameter.","completion":"using (Transaction t = new Transaction(doc, \"Create Conduit\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    ElementId conduitTypeId = new FilteredElementCollector(doc).OfClass(typeof(ConduitType)).FirstElementId();\n\n    if (level != null && conduitTypeId != null && conduitTypeId != ElementId.InvalidElementId)\n    {\n        XYZ start = new XYZ(0, 0, 3 \/ 0.3048);\n        XYZ end = new XYZ(5 \/ 0.3048, 0, 3 \/ 0.3048);\n        Conduit conduit = Conduit.Create(doc, conduitTypeId, start, end, level.Id);\n\n        if (conduit != null)\n        {\n            Parameter diameterParam = conduit.get_Parameter(BuiltInParameter.RBS_CONDUIT_DIAMETER_PARAM);\n            if (diameterParam != null && !diameterParam.IsReadOnly)\n            {\n                diameterParam.Set(1.0 \/ 12.0);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Replicate level 2 with a 8m offset and name it 'Mezzanine'.","completion":"string levelName = \"Level 2\";\nLevel levelToCopy = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (levelToCopy != null)\n{\n    double offset = UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, levelToCopy.Elevation + offset);\n    newLevel.Name = \"Mezzanine\";\n}"}
{"prompt":"Model a ceiling at a height of 2.8 meters on Level 1","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nCeilingType ceilingType = new FilteredElementCollector(doc).OfClass(typeof(CeilingType)).FirstOrDefault() as CeilingType;\n\nif (level != null && ceilingType != null)\n{\n    \/\/ Create a default 10ft x 10ft rectangular profile as the prompt is not specific\n    CurveLoop profile = new CurveLoop();\n    profile.Append(Line.CreateBound(new XYZ(0, 0, 0), new XYZ(10, 0, 0)));\n    profile.Append(Line.CreateBound(new XYZ(10, 0, 0), new XYZ(10, 10, 0)));\n    profile.Append(Line.CreateBound(new XYZ(10, 10, 0), new XYZ(0, 10, 0)));\n    profile.Append(Line.CreateBound(new XYZ(0, 10, 0), new XYZ(0, 0, 0)));\n\n    Ceiling ceiling = Ceiling.Create(doc, new List<CurveLoop> { profile }, ceilingType.Id, level.Id);\n    if (ceiling != null)\n    {\n        Parameter heightParam = ceiling.get_Parameter(BuiltInParameter.CEILING_HEIGHTABOVELEVEL_PARAM);\n        if (heightParam != null && !heightParam.IsReadOnly)\n        {\n            heightParam.Set(UnitUtils.ConvertToInternalUnits(2.8, UnitTypeId.Meters));\n        }\n    }\n}"}
{"prompt":"Crea una apertura rectangular de 1x1 metros en el centro del suelo seleccionado.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un suelo\");\nif (pickedRef != null)\n{\n    Floor floor = doc.GetElement(pickedRef.ElementId) as Floor;\n    if (floor != null)\n    {\n        BoundingBoxXYZ bbox = floor.get_BoundingBox(null);\n        XYZ center = (bbox.Min + bbox.Max) \/ 2.0;\n        double size = UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters);\n        XYZ p1 = new XYZ(center.X - size\/2, center.Y - size\/2, 0);\n        XYZ p2 = new XYZ(center.X + size\/2, center.Y - size\/2, 0);\n        XYZ p3 = new XYZ(center.X + size\/2, center.Y + size\/2, 0);\n        XYZ p4 = new XYZ(center.X - size\/2, center.Y + size\/2, 0);\n        CurveArray profile = new CurveArray();\n        profile.Append(Line.CreateBound(p1, p2));\n        profile.Append(Line.CreateBound(p2, p3));\n        profile.Append(Line.CreateBound(p3, p4));\n        profile.Append(Line.CreateBound(p4, p1));\n        doc.Create.NewOpening(floor, profile, false);\n    }\n}"}
{"prompt":"Put an instance of the 'Office Desk' family in the center of the 'Office 97' room.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Office 97\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Office Desk\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);"}
{"prompt":"Construct a new door type named 'FR-90 Door' and set its fire rating to '90 min'.","completion":"using (Transaction t = new Transaction(doc, \"Create Door Type\"))\n{\n    t.Start();\n    string newTypeName = \"FR-90 Door\";\n    FamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n    if (doorTypeToDuplicate != null)\n    {\n        FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\n        if (newDoorType != null)\n        {\n            Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n            if(fireRatingParam != null && !fireRatingParam.IsReadOnly)\n            {\n                fireRatingParam.Set(\"90 min\");\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Rotate a selected element 87 degrees around its Z-axis.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select an element to rotate\");\nElement elem = doc.GetElement(pickedRef.ElementId);\nLocationPoint lp = elem.Location as LocationPoint;\nLine axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\nElementTransformUtils.RotateElement(doc, elem.Id, axis, Math.PI \/ 87);"}
{"prompt":"Mueve el punto base del proyecto 100 metros hacia el norte.","completion":"using (Transaction t = new Transaction(doc, \"Move Project Base Point\"))\n{\n    t.Start();\n    BasePoint projectBasePoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(bp => !bp.IsShared);\n\n    if (projectBasePoint != null)\n    {\n        XYZ translation = new XYZ(0, 100 \/ 0.3048, 0);\n        ElementTransformUtils.MoveElement(doc, projectBasePoint.Id, translation);\n    }\n    t.Commit();\n}"}
{"prompt":"Crea un sistema de vigas en un forjado seleccionado.","completion":""}
{"prompt":"Copy the 'Generic - 146mm' wall type and name it 'Interior - 11cm Plaster'.","completion":"string originalName = \"Generic - 146mm\";\nstring newName = \"Interior - 11cm Plaster\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif(originalType!=null)\n    originalType.Duplicate(newName);"}
{"prompt":"Crea una superficie topográfica a partir de una lista de 4 puntos.","completion":"IList<XYZ> points = new List<XYZ>\n{\n    new XYZ(0, 0, 0),\n    new XYZ(10, 0, 1),\n    new XYZ(0, 10, 2),\n    new XYZ(10, 10, 1)\n};\nElementId toposolidTypeId = new FilteredElementCollector(doc).OfClass(typeof(ToposolidType)).FirstElementId();\nif(toposolidTypeId != null && toposolidTypeId != ElementId.InvalidElementId)\n{\n    Toposolid.Create(doc, points, toposolidTypeId, ElementId.InvalidElementId);\n}"}
{"prompt":"Obtén una lista de todas las vistas de planta del proyecto.","completion":"List<ViewPlan> planViews = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().Where(v => !v.IsTemplate).ToList();"}
{"prompt":"Encuentra el tipo de columna estructural llamado \"304 x 451mm\" y colócalo en X=1, Y=12.2","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(s => s.Name == \"304 x 451mm\");\nif (level != null && columnSymbol != null)\n{\n    if (!columnSymbol.IsActive) { columnSymbol.Activate(); }\n    XYZ point = new XYZ(1, 12.2, 0);\n    doc.Create.NewFamilyInstance(point, columnSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n}"}
{"prompt":"Adjust the type of a selected floor to 'Concrete 20cm'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a floor\");\n\nif (pickedRef != null)\n{\n    Floor floorToChange = doc.GetElement(pickedRef) as Floor;\n    FloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name == \"Concrete 20cm\");\n    \n    if (floorToChange != null && newType != null)\n    {\n        floorToChange.ChangeTypeId(newType.Id);\n    }\n}"}
{"prompt":"Construct a filled region with a 'Concrete' pattern.","completion":"using (Transaction t = new Transaction(doc, \"Create Filled Region\"))\n{\n    t.Start();\n    FilledRegionType regionType = new FilteredElementCollector(doc).OfClass(typeof(FilledRegionType)).Cast<FilledRegionType>().FirstOrDefault(frt => frt.Name.Contains(\"Concrete\"));\n    View activeView = doc.ActiveView;\n\n    if (regionType != null && activeView != null)\n    {\n        XYZ p1 = new XYZ(0,0,0);\n        XYZ p2 = new XYZ(5 \/ 0.3048, 0,0);\n        XYZ p3 = new XYZ(5 \/ 0.3048, 5 \/ 0.3048,0);\n        XYZ p4 = new XYZ(0, 5 \/ 0.3048,0);\n        CurveLoop profile = new CurveLoop();\n        profile.Append(Line.CreateBound(p1,p2));\n        profile.Append(Line.CreateBound(p2,p3));\n        profile.Append(Line.CreateBound(p3,p4));\n        profile.Append(Line.CreateBound(p4,p1));\n        FilledRegion.Create(doc, regionType.Id, activeView.Id, new List<CurveLoop>{profile});\n    }\n    t.Commit();\n}"}
{"prompt":"Coloca pilares en todos los cruces de la rejilla.","completion":"FamilySymbol colSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nList<Grid> grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().ToList();\n\nif (colSymbol != null && level != null && grids.Count >= 2)\n{\n    for (int i = 0; i < grids.Count; i++)\n    {\n        for (int j = i + 1; j < grids.Count; j++)\n        {\n            IntersectionResultArray results = null;\n            grids[i].Curve.Intersect(grids[j].Curve, out results);\n            if(results != null)\n            {\n                 foreach (IntersectionResult ir in results)\n                 {\n                     doc.Create.NewFamilyInstance(ir.XYZPoint, colSymbol, level, StructuralType.Column);\n                 }\n            }\n        }\n    }\n}"}
{"prompt":"Ubica una etiqueta de material en una cara de muro.","completion":"using (Transaction t = new Transaction(doc, \"Place Material Tag\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference faceRef = localUidoc.Selection.PickObject(ObjectType.Face, \"Selecciona una cara para etiquetar\");\n    XYZ point = localUidoc.Selection.PickPoint(\"Selecciona la ubicación de la etiqueta\");\n    View activeView = doc.ActiveView;\n\n    if (faceRef != null && point != null && activeView != null)\n    {\n        IndependentTag.Create(doc, activeView.Id, faceRef, true, TagMode.TM_ADDBY_MATERIAL, TagOrientation.Horizontal, point);\n    }\n    t.Commit();\n}"}
{"prompt":"Coloca una instancia de la familia 'archivero' en el centro de la habitación 'Despacho 96'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 119\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Ventana Fija 96x60\") as FamilySymbol;\nif(furnitureSymbol != null && !furnitureSymbol.IsActive) furnitureSymbol.Activate();\nif(room != null)\n{\n    LocationPoint roomCenter = room.Location as LocationPoint;\n    if(roomCenter != null && furnitureSymbol != null && room.Level != null)\n    {\n        doc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Get the 'Walls' schedule and export its data to CSV.","completion":"ViewSchedule schedule = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().FirstOrDefault(s=>s.Name==\"Walls\");\n\nif (schedule != null)\n{\n    string folderPath = \"C:\/RevitExports\/\";\n    ViewScheduleExportOptions options = new ViewScheduleExportOptions() { FieldDelimiter = \",\" };\n    schedule.Export(folderPath, \"Walls.csv\", options);\n}"}
{"prompt":"Build an MEP space for each room on Level 1","completion":"string levelName = \"Level 1\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    FilteredElementCollector roomCollector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WherePasses(new ElementLevelFilter(targetLevel.Id));\n    foreach (Room room in roomCollector.ToElements().Cast<Room>())\n    {\n        if (room.Location != null)\n        {\n            LocationPoint locPoint = room.Location as LocationPoint;\n            if(locPoint != null)\n            {\n                UV point = new UV(locPoint.Point.X, locPoint.Point.Y);\n                doc.Create.NewSpace(targetLevel, point);\n            }\n        }\n    }\n}"}
{"prompt":"Voltea un elemento seleccionado 94 grados sobre su eje Z.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un elemento para rotar\");\nElement elem = doc.GetElement(pickedRef.ElementId);\nLocationPoint lp = elem.Location as LocationPoint;\nLine axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\nElementTransformUtils.RotateElement(doc, elem.Id, axis, Math.PI \/ 94);"}
{"prompt":"Genera una cuadrícula de columnas 5x5 con separación de 8 metros.","completion":"FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (columnSymbol != null && level != null)\n{\n    if(!columnSymbol.IsActive) columnSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters);\n    for(int i=0; i<5; i++)\n    {\n        for(int j=0; j<5; j++)\n        {\n            doc.Create.NewFamilyInstance(new XYZ(i*spacing, j*spacing, 0), columnSymbol, level, StructuralType.Column);\n        }\n    }\n}"}
{"prompt":"Create an 8-meter long foundation beam.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol foundationSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFoundation).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null && foundationSymbol != null)\n{\n    if (!foundationSymbol.IsActive)\n    {\n        foundationSymbol.Activate();\n    }\n    double length = UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters);\n    XYZ startPoint = XYZ.Zero;\n    XYZ endPoint = new XYZ(length, 0, 0);\n    Line line = Line.CreateBound(startPoint, endPoint);\n    doc.Create.NewFamilyInstance(line, foundationSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Footing);\n}"}
{"prompt":"Change the type of a selected floor to 'Concrete 20cm'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a floor\");\n\nif (pickedRef != null)\n{\n    Floor floorToChange = doc.GetElement(pickedRef) as Floor;\n    FloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name == \"Concrete 20cm\");\n    \n    if (floorToChange != null && newType != null)\n    {\n        floorToChange.ChangeTypeId(newType.Id);\n    }\n}"}
{"prompt":"Genera un reporte con el área de todas las habitaciones del proyecto.","completion":"List<Room> rooms = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>().ToList();\nList<double> roomAreas = new List<double>();\nforeach (Room room in rooms)\n{\n    if (room != null && room.Area > 0)\n    {\n        roomAreas.Add(UnitUtils.ConvertFromInternalUnits(room.Area, UnitTypeId.SquareMeters));\n    }\n}\n\/\/ El orquestador puede ahora usar la lista 'roomAreas' para generar el reporte final."}
{"prompt":"Ajusta el tipo de la ventana seleccionada al tipo 'Fija 118x60'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una ventana\");\nFamilySymbol newType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name == \"Fija 118x60\");\nif (pickedRef != null && newType != null)\n{\n    FamilyInstance window = doc.GetElement(pickedRef.ElementId) as FamilyInstance;\n    if (window != null)\n    {\n        window.Symbol = newType;\n    }\n}"}
{"prompt":"Create a spherical DirectShape with a 5-meter radius.","completion":"using (Transaction t = new Transaction(doc, \"Create Sphere DirectShape\"))\n{\n    t.Start();\n    double radius = 5 \/ 0.3048;\n    List<GeometryObject> solids = new List<GeometryObject>();\n    Frame frame = new Frame(XYZ.Zero, XYZ.BasisX, XYZ.BasisY, XYZ.BasisZ);\n    Arc arc = Arc.Create(frame.Origin, radius, 0, Math.PI, frame.BasisX, frame.BasisY);\n    Line line = Line.CreateBound(arc.GetEndPoint(1), arc.GetEndPoint(0));\n    CurveLoop profile = CurveLoop.Create(new List<Curve> { arc, line });\n    Solid sphere = GeometryCreationUtilities.CreateRevolvedGeometry(frame, new List<CurveLoop> { profile }, 0, 2 * Math.PI);\n    solids.Add(sphere);\n    DirectShape ds = DirectShape.CreateElement(doc, new ElementId(BuiltInCategory.OST_GenericModel));\n\n    if (ds != null)\n    {\n        ds.SetShape(solids);\n        ds.Name = \"Sphere DirectShape\";\n    }\n    t.Commit();\n}"}
{"prompt":"Duplica el nivel 1 con un desfase de 3m y llámalo 'Mezanine'.","completion":"string levelName = \"Mezanine\";\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\n\nif (level1 != null)\n{\n    double newElevation = level1.ProjectElevation + UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, newElevation);\n    if (newLevel != null)\n    {\n        newLevel.Name = levelName;\n    }\n}"}
{"prompt":"Duplicate the active view and name it 'Working Copy'.","completion":"View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    ElementId newViewId = activeView.Duplicate(ViewDuplicateOption.Duplicate);\n    View newView = doc.GetElement(newViewId) as View;\n    if (newView != null)\n    {\n        newView.Name = \"Working Copy\";\n    }\n}"}
{"prompt":"Obtén la geometría sólida de un elemento seleccionado.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un elemento para obtener su geometría\");\n\nList<Solid> solids = new List<Solid>();\nif (pickedRef != null)\n{\n    Element elem = doc.GetElement(pickedRef);\n    if (elem != null)\n    {\n        Options opt = new Options() { ComputeReferences = true, DetailLevel = ViewDetailLevel.Fine };\n        GeometryElement geoElem = elem.get_Geometry(opt);\n        if (geoElem != null)\n        {\n            solids = geoElem.OfType<Solid>().Where(s => s.Volume > 0).ToList();\n        }\n    }\n}"}
{"prompt":"Build a 'Roof Terrace' level at 17m.","completion":"string levelName = \"Roof Terrace\";\ndouble elev = UnitUtils.ConvertToInternalUnits(17, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elev);\nnewLevel.Name = levelName;\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Insert an instance of the 'Office Desk' family in the center of the 'Office 105' room.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Office 105\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Office Desk\") as FamilySymbol;\nif(furnitureSymbol != null && !furnitureSymbol.IsActive) furnitureSymbol.Activate();\nif(room != null)\n{\n    LocationPoint roomCenter = room.Location as LocationPoint;\n    if(roomCenter != null && furnitureSymbol != null && room.Level != null)\n    {\n        doc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Recupera todas las subcategorías de la categoría Muros.","completion":"Category wallCat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Walls);\nCategoryNameMap subcategories = wallCat.SubCategories;"}
{"prompt":"Crea una vista de plano de plafón reflejado para el Nivel 1.","completion":"string levelName = \"Nivel 1\";\nstring viewName = \"Plano de Plafón Nivel 1\";\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.CeilingPlan);\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\n\nif (vft != null && level1 != null)\n{\n    ViewPlan rcp = ViewPlan.Create(doc, vft.Id, level1.Id);\n    if (rcp != null)\n    {\n        rcp.Name = viewName;\n    }\n}"}
{"prompt":"Asigna todos los muros al workset 'Estructura'.","completion":"using (Transaction t = new Transaction(doc, \"Assign to Workset\"))\n{\n    t.Start();\n    if (doc.IsWorkshared)\n    {\n        Workset ws = new FilteredWorksetCollector(doc).OfKind(WorksetKind.UserWorkset).FirstOrDefault(w => w.Name == \"Estructura\");\n        if (ws != null)\n        {\n            FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType();\n            foreach (Element e in collector)\n            {\n                Parameter p = e.get_Parameter(BuiltInParameter.ELEM_PARTITION_PARAM);\n                if (p != null && !p.IsReadOnly)\n                {\n                    p.Set(ws.Id.IntegerValue);\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea un parámetro global de longitud llamado 'AnchoCorredor' con valor de 0.4m.","completion":"string paramName = \"AnchoCorredor\";\nGlobalParameter gp = GlobalParameter.Create(doc, paramName, SpecTypeId.Length);\n\nif (gp != null)\n{\n    gp.SetValue(new DoubleParameterValue(UnitUtils.ConvertToInternalUnits(0.4, UnitTypeId.Meters)));\n}"}
{"prompt":"Insert an instance of the 'Office Desk' family in the center of the 'Office 104' room.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Office 104\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Office Desk\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);"}
{"prompt":"Create a new elevation view looking north.","completion":"using (Transaction t = new Transaction(doc, \"Create North Elevation\"))\n{\n    t.Start();\n    ViewFamilyType elevationVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(vft => vft.ViewFamily == ViewFamily.Elevation);\n    View activeView = doc.ActiveView;\n\n    if (elevationVFT != null && activeView != null)\n    {\n        ElevationMarker marker = ElevationMarker.CreateElevationMarker(doc, elevationVFT.Id, new XYZ(0, 20 \/ 0.3048, 0), 100);\n        \n        if (marker != null)\n        {\n            View aev = marker.CreateElevation(doc, activeView.Id, 2);\n            if (aev != null)\n            {\n                aev.Name = \"North Elevation\";\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Cambia el tipo de una losa seleccionada a 'Concreto 10cm'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una losa\");\n\nif (pickedRef != null)\n{\n    Floor floorToChange = doc.GetElement(pickedRef) as Floor;\n    FloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name == \"Concreto 10cm\");\n    \n    if (floorToChange != null && newType != null)\n    {\n        floorToChange.ChangeTypeId(newType.Id);\n    }\n}"}
{"prompt":"Rellena el parámetro de material de todos los muros con 'Pintura Blanca'.","completion":"Material concreteMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name.Contains(\"Pintura Blanca\")) as Material;\nif(concreteMaterial != null)\n{\n    var walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>().ToList();\n    foreach(Wall w in walls)\n    {\n        Parameter materialParam = w.get_Parameter(BuiltInParameter.STRUCTURAL_MATERIAL_PARAM);\n        if(materialParam != null && !materialParam.IsReadOnly) materialParam.Set(concreteMaterial.Id);\n    }\n}"}
{"prompt":"Plasma una pared de 5m de largo por 3m de altura.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (level != null && wallType != null)\n{\n    Line line = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0, 0));\n    Wall.Create(doc, line, wallType.Id, level.Id, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0.0, false, false);\n}"}
{"prompt":"Generate a new room on Level 5 at point (13, 12).","completion":"string levelName = \"Level 5\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    UV point = new UV(13, 12);\n    Room newRoom = doc.Create.NewRoom(targetLevel, point);\n}"}
{"prompt":"Obtén todas las habitaciones que están en el Nivel 3.","completion":"Level level3 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 3\") as Level;\nList<Element> roomsOnLevel3 = new List<Element>();\n\nif (level3 != null)\n{\n    roomsOnLevel3 = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Where(r => r.LevelId == level3.Id).ToList();\n}"}
{"prompt":"Rotate a selected element 88 degrees around its Z-axis.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select an element to rotate\");\nElement elem = doc.GetElement(pickedRef.ElementId);\nLocationPoint lp = elem.Location as LocationPoint;\nLine axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\nElementTransformUtils.RotateElement(doc, elem.Id, axis, Math.PI \/ 88);"}
{"prompt":"Attach a point to the selected Path of Travel.","completion":"\/\/ PathOfTravel related methods like GetPath and Update are likely inaccessible in this environment.\n\/\/ The following code is a placeholder to show the intent.\n\/*\nusing (Transaction t = new Transaction(doc, \"Update Path of Travel\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference pickedRef = localUidoc.Selection.PickObject(ObjectType.Element, \"Select a Path of Travel\");\n\n    if (pickedRef != null)\n    {\n        PathOfTravel pot = doc.GetElement(pickedRef) as PathOfTravel;\n        if (pot != null)\n        {\n            IList<XYZ> points = pot.GetPath();\n            if (points != null && points.Count >= 2)\n            {\n                XYZ midPoint = (points[0] + points[1]) \/ 2;\n                points.Insert(1, midPoint);\n                pot.Update(points);\n            }\n        }\n    }\n    t.Commit();\n}\n*\/"}
{"prompt":"Fija el elemento seleccionado para que no se mueva.","completion":"UIDocument uidoc = new UIDocument(doc);\nElementId selectedId = uidoc.Selection.GetElementIds().FirstOrDefault();\n\nif (selectedId != ElementId.InvalidElementId)\n{\n    Element elementToPin = doc.GetElement(selectedId);\n    if (elementToPin != null)\n    {\n        elementToPin.Pinned = true;\n    }\n}"}
{"prompt":"Muestra un cuadro de diálogo con opciones 'Sí' y 'No'.","completion":""}
{"prompt":"Crea un nuevo tipo de muro de 28cm llamado 'Muro Estructural 29cm'.","completion":"string newTypeName = \"Muro Estructural 29cm\";\nWallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif (oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(newTypeName) as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(28, UnitTypeId.Centimeters));\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n}"}
{"prompt":"Coloca una instancia de la familia 'Mesa de Oficina' en el centro de la habitación 'Despacho 101'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 101\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Mesa de Oficina\") as FamilySymbol;\nif(furnitureSymbol != null && !furnitureSymbol.IsActive) furnitureSymbol.Activate();\nif(room != null)\n{\n    LocationPoint roomCenter = room.Location as LocationPoint;\n    if(roomCenter != null && furnitureSymbol != null && room.Level != null)\n    {\n        doc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Create a new Level named 'Level 7' at an elevation of 10 meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\nif (newLevel != null)\n{\n    try { newLevel.Name = \"Level 7\"; } catch {}\n}"}
{"prompt":"Obtain a list of all project warnings.","completion":"IList<FailureMessage> warnings = doc.GetWarnings();\nList<string> warningDescriptions = warnings.Select(w => w.GetDescriptionText()).ToList();\n"}
{"prompt":"Crea un techo por extrusión con una pendiente del 10%.","completion":"using (Transaction t = new Transaction(doc, \"Create Extrusion Roof\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    RoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n\n    if (level != null && roofType != null)\n    {\n        CurveArray profile = new CurveArray();\n        profile.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(10 \/ 0.3048, 0, 1 \/ 0.3048)));\n        \n        Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisY, XYZ.Zero);\n        ReferencePlane refPlane = doc.Create.NewReferencePlane(plane.Origin, plane.Origin + XYZ.BasisX, plane.Normal, doc.ActiveView);\n        \n        if (refPlane != null)\n        {\n            doc.Create.NewExtrusionRoof(profile, refPlane, level, roofType, 0, 10 \/ 0.3048);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Assign the 'Comments' parameter for all doors on Level 3 to 'Fire Rating - 85 min'.","completion":"string levelName = \"Level 3\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(targetLevel.Id);\n    FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WherePasses(levelFilter);\n    foreach (Element door in collector)\n    {\n        Parameter commentsParam = door.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n        if (commentsParam != null && !commentsParam.IsReadOnly) { commentsParam.Set(\"Fire Rating - 85 min\"); }\n    }\n}"}
{"prompt":"Rota un elemento seleccionado 88 grados sobre su eje Z.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un elemento para rotar\");\nElement elem = doc.GetElement(pickedRef.ElementId);\nLocationPoint lp = elem.Location as LocationPoint;\nLine axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\nElementTransformUtils.RotateElement(doc, elem.Id, axis, Math.PI \/ 88);"}
{"prompt":"Model a cable tray between two points.","completion":"CableTrayType trayType = new FilteredElementCollector(doc).OfClass(typeof(CableTrayType)).FirstOrDefault() as CableTrayType;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (trayType != null && level != null)\n{\n    \/\/ Create a default cable tray between two points as they are not specified\n    XYZ p1 = new XYZ(0, 10, 10);\n    XYZ p2 = new XYZ(20, 10, 10);\n    CableTray.Create(doc, trayType.Id, p1, p2, level.Id);\n}"}
{"prompt":"Crea un SketchPlane en el Nivel 2.","completion":"using (Transaction t = new Transaction(doc, \"Create Sketch Plane\"))\n{\n    t.Start();\n    Level level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel 2\");\n\n    if (level2 != null)\n    {\n        Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisZ, new XYZ(0, 0, level2.Elevation));\n        SketchPlane skp = SketchPlane.Create(doc, plane);\n    }\n    t.Commit();\n}"}
{"prompt":"Retrieve all rooms on Level 3","completion":"string levelName = \"Level 3\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(targetLevel.Id);\n    FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WherePasses(levelFilter);\n    uidoc.Selection.SetElementIds(collector.ToElementIds());\n}"}
{"prompt":"Encuentra todos los muros con el comentario 'Revisar'.","completion":"ElementId commentParamId = new ElementId(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\nParameterValueProvider pvp = new ParameterValueProvider(commentParamId);\nFilterStringRuleEvaluator evaluator = new FilterStringContains();\nFilterRule rule = new FilterStringRule(pvp, evaluator, \"Revisar\");\nElementFilter filter = new ElementParameterFilter(rule);\nList<Element> wallsToReview = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(filter).ToList();"}
{"prompt":"Actualiza el tipo de la ventana seleccionada al tipo 'Ventana Fija 116x60'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una ventana\");\nFamilySymbol newType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name == \"Ventana Fija 116x60\");\nif (pickedRef != null && newType != null)\n{\n    FamilyInstance window = doc.GetElement(pickedRef.ElementId) as FamilyInstance;\n    if (window != null)\n    {\n        window.Symbol = newType;\n    }\n}"}
{"prompt":"Construct a new room on Level 1 at point (9, 14).","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\n\nif (level1 != null)\n{\n    UV point = new UV(9, 14);\n    Room room = doc.Create.NewRoom(level1, point);\n}"}
{"prompt":"Inserta un punto de referencia en las coordenadas (1,7,1) dentro del editor de familias.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(1,7,1));"}
{"prompt":"Tag all rooms with their area.","completion":"using (Transaction t = new Transaction(doc, \"Tag All Rooms\"))\n{\n    t.Start();\n    View activeView = doc.ActiveView;\n\n    if (activeView != null)\n    {\n        List<Room> rooms = new FilteredElementCollector(doc, activeView.Id).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>().ToList();\n        foreach(Room room in rooms)\n        {\n            LocationPoint loc = room.Location as LocationPoint;\n            if(loc != null)\n            {\n                doc.Create.NewRoomTag(new LinkElementId(room.Id), new UV(loc.Point.X, loc.Point.Y), activeView.Id);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create a new 3mm text type in blue color.","completion":"using (Transaction t = new Transaction(doc, \"Create Text Type\"))\n{\n    t.Start();\n    string newTypeName = \"3mm Blue\";\n    TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\n\n    if (defaultType != null)\n    {\n        TextNoteType newType = defaultType.Duplicate(newTypeName) as TextNoteType;\n        if (newType != null)\n        {\n            Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n            if (textSizeParam != null && !textSizeParam.IsReadOnly) textSizeParam.Set(3 \/ 304.8);\n            \n            Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n            if (lineColorParam != null && !lineColorParam.IsReadOnly) lineColorParam.Set(255);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Carga un enlace DWG preservando los colores.","completion":"string filePath = \"C:\/CAD\/Planos.dwg\";\nDWGImportOptions opts = new DWGImportOptions();\nopts.ColorMode = ImportColorMode.Preserved;\nElementId linkId;\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    doc.Link(filePath, opts, activeView, out linkId);\n}"}
{"prompt":"Tag all rooms with their area.","completion":"using (Transaction t = new Transaction(doc, \"Tag All Rooms\"))\n{\n    t.Start();\n    View activeView = doc.ActiveView;\n\n    if (activeView != null)\n    {\n        List<Room> rooms = new FilteredElementCollector(doc, activeView.Id).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>().ToList();\n        foreach(Room room in rooms)\n        {\n            LocationPoint locPoint = room.Location as LocationPoint;\n            if(locPoint != null)\n            {\n                doc.Create.NewRoomTag(new LinkElementId(room.Id), new UV(locPoint.Point.X, locPoint.Point.Y), activeView.Id);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Define the 'Mark' parameter of all selected walls to 'W-EXT-3'.","completion":"using (Transaction t = new Transaction(doc, \"Set Wall Mark\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    ICollection<ElementId> selectedIds = localUidoc.Selection.GetElementIds();\n\n    if (selectedIds != null && selectedIds.Count > 3)\n    {\n        foreach(ElementId id in selectedIds)\n        {\n            Element elem = doc.GetElement(id);\n            if(elem is Wall)\n            {\n                Parameter markParam = elem.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n                if (markParam != null && !markParam.IsReadOnly) markParam.Set(\"W-EXT-01\");\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Obtén las coordenadas del punto base y del punto de reconocimiento.","completion":"BasePoint surveyPoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(p => p.IsShared);\nBasePoint projectBasePoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(p => !p.IsShared);\n\nXYZ surveyCoords = null;\nif (surveyPoint != null) surveyCoords = surveyPoint.get_BoundingBox(null).Min;\n\nXYZ projectCoords = null;\nif (projectBasePoint != null) projectCoords = projectBasePoint.get_BoundingBox(null).Min;"}
{"prompt":"Obtain a list of all families and their types.","completion":"List<string> familyAndTypeNames = new List<string>();\nList<Family> families = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().ToList();\nforeach (Family fam in families)\n{\n    familyAndTypeNames.Add($\"Family: {fam.Name}\");\n    foreach (ElementId symbolId in fam.GetFamilySymbolIds())\n    {\n        FamilySymbol sym = doc.GetElement(symbolId) as FamilySymbol;\n        if (sym != null)\n        {\n            familyAndTypeNames.Add($\"\\tType: {sym.Name}\");\n        }\n    }\n}"}
{"prompt":"Configure the sill height of all windows to 2 meter.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Encuentra todos los muros con más de 4 metros de altura.","completion":"double heightThreshold = UnitUtils.ConvertToInternalUnits(4, UnitTypeId.Meters);\nParameterValueProvider pvp = new ParameterValueProvider(new ElementId(BuiltInParameter.WALL_USER_HEIGHT_PARAM));\nFilterRule rule = new FilterDoubleRule(pvp, new FilterNumericGreater(), heightThreshold, 1e-6);\nList<Element> tallWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(new ElementParameterFilter(rule)).ToList();"}
{"prompt":"Crea una vista 3D con la caja de sección activada.","completion":"string viewName = \"Vista 3D con Caja de Sección\";\nViewFamilyType vft3D = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft3D != null)\n{\n    View3D view3d = View3D.CreateIsometric(doc, vft3D.Id);\n    if (view3d != null)\n    {\n        view3d.Name = viewName;\n        view3d.IsSectionBoxActive = true;\n    }\n}"}
{"prompt":"Duplica el nivel 6 con un desfase de 6m y llámalo 'Mezanine'.","completion":"string levelName = \"Nivel 6\";\nLevel levelToCopy = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (levelToCopy != null)\n{\n    double offset = UnitUtils.ConvertToInternalUnits(6, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, levelToCopy.Elevation + offset);\n    newLevel.Name = \"Mezanine\";\n}"}
{"prompt":"Find the structural column type named \"297 x 455mm\" and place it at X=1, Y=12.4","completion":"string columnTypeName = \"297 x 455mm\";\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(s => s.Name == columnTypeName);\n\nif (level != null && columnSymbol != null)\n{\n    if (!columnSymbol.IsActive)\n    {\n        columnSymbol.Activate();\n    }\n    doc.Create.NewFamilyInstance(new XYZ(1, 12.4, 0), columnSymbol, level, StructuralType.Column);\n}"}
{"prompt":"Crea un nuevo nivel 'Nivel 2' a una elevación de 9 metros.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(9, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Nivel 2\";\n}"}
{"prompt":"Coloca postes de iluminación cada 10m en un camino de 100m.","completion":"FamilySymbol lightSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsElementType().FirstOrDefault(s => s.Name.Contains(\"Post\") || s.Name.Contains(\"Pole\")) as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (lightSymbol != null && level != null)\n{\n    if(!lightSymbol.IsActive) lightSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\n    for(int i = 0; i <= 10; i++)\n    {\n        XYZ point = new XYZ(i * spacing, 0, 0);\n        doc.Create.NewFamilyInstance(point, lightSymbol, level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Encuentra el tipo de columna estructural llamado \"299 x 452mm\" y colócalo en X=1, Y=11.2","completion":"string columnTypeName = \"299 x 452mm\";\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(s => s.Name == columnTypeName);\n\nif (level != null && columnSymbol != null)\n{\n    if (!columnSymbol.IsActive)\n    {\n        columnSymbol.Activate();\n    }\n    doc.Create.NewFamilyInstance(new XYZ(1, 11.2, 0), columnSymbol, level, StructuralType.Column);\n}"}
{"prompt":"Fetch the MEP space associated with the room 'Office 101'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Cast<Room>().FirstOrDefault(r => r.Name == \"Office 101\");\nList<Space> spaces = new List<Space>();\n\nif (room != null)\n{\n    spaces = new FilteredElementCollector(doc).OfClass(typeof(Space)).Cast<Space>().Where(s => s.Room != null && s.Room.Id == room.Id).ToList();\n}"}
{"prompt":"Crea un DirectShape con forma de caja de 2x2x2 metros.","completion":"TessellatedShapeBuilder builder = new TessellatedShapeBuilder();\nbuilder.OpenConnectedFaceSet(true);\ndouble size = UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\nXYZ p0=new XYZ(0,0,0); XYZ p1=new XYZ(size,0,0); XYZ p2=new XYZ(size,size,0); XYZ p3=new XYZ(0,size,0);\nXYZ p4=new XYZ(0,0,size); XYZ p5=new XYZ(size,0,size); XYZ p6=new XYZ(size,size,size); XYZ p7=new XYZ(0,size,size);\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p0,p1,p2,p3}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p7,p6,p5,p4}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p0,p4,p5,p1}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p1,p5,p6,p2}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p2,p6,p7,p3}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p3,p7,p4,p0}, ElementId.InvalidElementId));\nbuilder.CloseConnectedFaceSet();\nbuilder.Build();\nTessellatedShapeBuilderResult result = builder.GetBuildResult();\nDirectShape ds = DirectShape.CreateElement(doc, new ElementId(BuiltInCategory.OST_GenericModel));\n\nif (ds != null)\n{\n    ds.SetShape(result.GetGeometricalObjects());\n    ds.Name = \"Caja DirectShape\";\n}"}
{"prompt":"Get a list of all material names.","completion":"List<Material> materials = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().ToList();\nList<string> materialNames = new List<string>();\nforeach(Material m in materials)\n{\n    materialNames.Add(m.Name);\n}\n"}
{"prompt":"Create a section view between points (0,0,0) and (10,10,0).","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.Section);\n\nif (vft != null)\n{\n    XYZ p1 = new XYZ(0,0,0);\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),0);\n    XYZ midPoint = (p1 + p2) \/ 2;\n    XYZ direction = (p2 - p1).Normalize();\n    XYZ up = XYZ.BasisZ;\n    XYZ viewdir = up.CrossProduct(direction);\n    \n    BoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\n    Transform t = Transform.Identity;\n    t.Origin = midPoint;\nt.BasisX = direction;\nt.BasisY = up;\nt.BasisZ = viewdir;\nsectionBox.Transform = t;\nsectionBox.Min = new XYZ(UnitUtils.ConvertToInternalUnits(-p1.DistanceTo(p2)\/2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(-10, UnitTypeId.Meters), 0);\nsectionBox.Max = new XYZ(UnitUtils.ConvertToInternalUnits(p1.DistanceTo(p2)\/2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(20, UnitTypeId.Meters));\n    \n    ViewSection.CreateSection(doc, vft.Id, sectionBox);\n}"}
{"prompt":"Create a floor plan view for 'Level 6'.","completion":"string levelName = \"Level 6\";\nLevel level3 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.FloorPlan);\n\nif (level3 != null && vft != null)\n{\n    ViewPlan viewPlan = ViewPlan.Create(doc, vft.Id, level3.Id);\n}"}
{"prompt":"Conecta dos tuberías seleccionadas por el usuario con un codo.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference ref1 = uidoc.Selection.PickObject(ObjectType.Element, \"Select the first pipe\");\nReference ref2 = uidoc.Selection.PickObject(ObjectType.Element, \"Select the second pipe\");\nif (ref1 != null && ref2 != null)\n{\n    Pipe pipe1 = doc.GetElement(ref1) as Pipe;\n    Pipe pipe2 = doc.GetElement(ref2) as Pipe;\n    if (pipe1 != null && pipe2 != null)\n    {\n        Connector c1 = pipe1.ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n        Connector c2 = pipe2.ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n        if (c1 != null && c2 != null)\n        {\n            doc.Create.NewElbowFitting(c1, c2);\n        }\n    }\n}"}
{"prompt":"Crea un nuevo tipo de puerta llamado 'Puerta RF-60' y asigna '60 min' al parámetro 'Fire Rating'.","completion":"string newTypeName = \"Puerta RF-60\";\nFamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (doorTypeToDuplicate != null)\n{\n    FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\n    if (newDoorType != null)\n    {\n        Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n        if (fireRatingParam != null && !fireRatingParam.IsReadOnly) fireRatingParam.Set(\"60 min\");\n    }\n}"}
{"prompt":"Clone level 5 with a 4m offset and name it 'Mezzanine'.","completion":"string levelName = \"Level 5\";\nLevel levelToCopy = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (levelToCopy != null)\n{\n    double offset = UnitUtils.ConvertToInternalUnits(4, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, levelToCopy.Elevation + offset);\n    newLevel.Name = \"Mezzanine\";\n}"}
{"prompt":"Create a new room on Level 6 at point (9, 13).","completion":"string levelName = \"Level 6\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    UV point = new UV(9, 13);\n    Room newRoom = doc.Create.NewRoom(targetLevel, point);\n}"}
{"prompt":"Create a structural beam between (0,0,3) and (5,0,3) on Level 2.","completion":"FamilySymbol beamType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (beamType != null && level != null)\n{\n    if(!beamType.IsActive) beamType.Activate();\n    XYZ start = new XYZ(0, 0, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters));\n    XYZ end = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters));\n    Line beamCurve = Line.CreateBound(start, end);\n    doc.Create.NewFamilyInstance(beamCurve, beamType, level, StructuralType.Beam);\n}"}
{"prompt":"Retrieve the MEP space associated with the room 'Office 101'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Cast<Room>().FirstOrDefault(r => r.Name == \"Office 101\");\nList<Space> spaces = new List<Space>();\n\nif (room != null)\n{\n    spaces = new FilteredElementCollector(doc).OfClass(typeof(Space)).Cast<Space>().Where(s => s.Room != null && s.Room.Id == room.Id).ToList();\n}"}
{"prompt":"Inserta una instancia de la familia 'Puerta Sencilla' en el centro de la habitación 'Despacho 106'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 106\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Puerta Sencilla\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);"}
{"prompt":"Change the type of a selected floor to 'Concrete 12cm'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a floor\");\n\nif (pickedRef != null)\n{\n    Floor floorToChange = doc.GetElement(pickedRef) as Floor;\n    FloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name == \"Concrete 12cm\");\n    \n    if (floorToChange != null && newType != null)\n    {\n        floorToChange.ChangeTypeId(newType.Id);\n    }\n}"}
{"prompt":"Crea un nuevo tipo de muro 'Muro Genérico 300mm' con un grosor de 30cm.","completion":"using (Transaction t = new Transaction(doc, \"Create Wall Type\"))\n{\n    t.Start();\n    string newTypeName = \"Muro Genérico 300mm\";\n    WallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\n    if (oldWallType != null)\n    {\n        WallType newWallType = oldWallType.Duplicate(newTypeName) as WallType;\n        if (newWallType != null)\n        {\n            CompoundStructure cs = newWallType.GetCompoundStructure();\n            if (cs != null && cs.LayerCount > 0)\n            {\n                int coreLayerIndex = cs.GetFirstCoreLayerIndex();\n                if (coreLayerIndex >= 0 && coreLayerIndex < cs.LayerCount)\n                {\n                    cs.SetLayerWidth(coreLayerIndex, 300 \/ 304.8);\n                    newWallType.SetCompoundStructure(cs);\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Copy the 'Level 2' view as a dependent view.","completion":"ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v => v.Name == \"Level 2\") as ViewPlan;\n\nif (viewToDuplicate != null)\n{\n    ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n}"}
{"prompt":"Inserta un rociador en las coordenadas (6,4,1).","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol sprinklerSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Sprinklers).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (level != null && sprinklerSymbol != null)\n{\n    if (!sprinklerSymbol.IsActive) sprinklerSymbol.Activate();\n    XYZ placementPoint = new XYZ(UnitUtils.ConvertToInternalUnits(6, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(4, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters));\n    doc.Create.NewFamilyInstance(placementPoint, sprinklerSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n}"}
{"prompt":"Modela una bandeja de cables entre dos puntos.","completion":"CableTrayType trayType = new FilteredElementCollector(doc).OfClass(typeof(CableTrayType)).FirstOrDefault() as CableTrayType;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(trayType != null && level != null)\n{\n    XYZ start = new XYZ(0,10,3);\n    XYZ end = new XYZ(15,10,3);\n    CableTray.Create(doc, trayType.Id, start, end, level.Id);\n}"}
{"prompt":"Oculta todos los elementos de anotación en la vista activa.","completion":"if (doc.ActiveView != null)\n{\n    List<BuiltInCategory> annotationCategories = new List<BuiltInCategory>\n    {\n        BuiltInCategory.OST_GenericAnnotation,\n        BuiltInCategory.OST_TextNotes,\n        BuiltInCategory.OST_Tags,\n        BuiltInCategory.OST_Dimensions,\n        BuiltInCategory.OST_DetailComponents\n    };\n    ElementMulticategoryFilter multiCategoryFilter = new ElementMulticategoryFilter(annotationCategories);\n    ICollection<ElementId> elementsToHide = new FilteredElementCollector(doc, doc.ActiveView.Id).WherePasses(multiCategoryFilter).ToElementIds();\n    if(elementsToHide.Any())\n    {\n        doc.ActiveView.HideElements(elementsToHide);\n    }\n}"}
{"prompt":"Rename the active view to 'Working View'.","completion":"string newName = \"Working View\";\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.Name = newName;\n}"}
{"prompt":"Create a 20x15 meter foundation slab.","completion":"using (Transaction t = new Transaction(doc, \"Create Foundation Slab\"))\n{\n    t.Start();\n    Level foundationLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderBy(l => l.Elevation).FirstOrDefault();\n    FloorType slabType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.get_Parameter(BuiltInParameter.FLOOR_PARAM_IS_STRUCTURAL).AsInteger() == 1);\n\n    if (foundationLevel != null && slabType != null)\n    {\n        XYZ p1 = new XYZ(0,0,0);\n        XYZ p2 = new XYZ(20\/0.3048, 0, 0);\n        XYZ p3 = new XYZ(20\/0.3048, 15\/0.3048, 0);\n        XYZ p4 = new XYZ(0, 15\/0.3048, 0);\n        CurveLoop profile = new CurveLoop();\n        profile.Append(Line.CreateBound(p1,p2));\n        profile.Append(Line.CreateBound(p2,p3));\n        profile.Append(Line.CreateBound(p3,p4));\n        profile.Append(Line.CreateBound(p4,p1));\n        Floor.Create(doc, new List<CurveLoop>{profile}, slabType.Id, foundationLevel.Id);\n    }\n    t.Commit();\n}"}
{"prompt":"Configure the 'Mark' parameter of all selected walls to 'W-EXT-5'.","completion":"using (Transaction t = new Transaction(doc, \"Set Wall Mark\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    ICollection<ElementId> selectedIds = localUidoc.Selection.GetElementIds();\n\n    if (selectedIds != null && selectedIds.Count > 5)\n    {\n        foreach(ElementId id in selectedIds)\n        {\n            Element elem = doc.GetElement(id);\n            if(elem is Wall)\n            {\n                Parameter p = elem.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n                if (p != null && !p.IsReadOnly)\n                {\n                    p.Set(\"W-EXT-01\");\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Construct a new room on Level 6 at point (15, 7).","completion":"string levelName = \"Level 6\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    UV point = new UV(15, 7);\n    Room newRoom = doc.Create.NewRoom(targetLevel, point);\n}"}
{"prompt":"Estimate the total length of all Supply Air ducts.","completion":"List<Duct> ducts = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_DuctCurves).WhereElementIsNotElementType().Cast<Duct>().Where(d => d.get_Parameter(BuiltInParameter.RBS_SYSTEM_CLASSIFICATION_PARAM).AsString() == \"SupplyAir\").ToList();\ndouble totalLength = 0.0;\nforeach (Duct d in ducts)\n{\n    totalLength += d.get_Parameter(BuiltInParameter.CURVE_ELEM_LENGTH).AsDouble();\n}"}
{"prompt":"Create a new elevation view looking north.","completion":"using (Transaction t = new Transaction(doc, \"Create North Elevation\"))\n{\n    t.Start();\n    ViewFamilyType elevationVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(vft => vft.ViewFamily == ViewFamily.Elevation);\n    View activeView = doc.ActiveView;\n\n    if (elevationVFT != null && activeView != null)\n    {\n        ElevationMarker marker = ElevationMarker.CreateElevationMarker(doc, elevationVFT.Id, new XYZ(0, 20 \/ 0.3048, 0), 100);\n        \n        if (marker != null)\n        {\n            View aev = marker.CreateElevation(doc, activeView.Id, 2);\n            if (aev != null)\n            {\n                aev.Name = \"North Elevation\";\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Get the solid geometry of a selected element.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select an element to get its geometry\");\n\nList<Solid> solids = new List<Solid>();\nif (pickedRef != null)\n{\n    Element elem = doc.GetElement(pickedRef);\n    if (elem != null)\n    {\n        Options opt = new Options() { ComputeReferences = true, DetailLevel = ViewDetailLevel.Fine };\n        GeometryElement geoElem = elem.get_Geometry(opt);\n        if (geoElem != null)\n        {\n            solids = geoElem.OfType<Solid>().Where(s => s.Volume > 0).ToList();\n        }\n    }\n}"}
{"prompt":"Establece el parámetro 'Comentarios' de todas las puertas del Nivel 4 a 'Clasificación Fuego - 85 min'.","completion":"string levelName = \"Nivel 4\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(targetLevel.Id);\n    FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WherePasses(levelFilter);\n    foreach (Element door in collector)\n    {\n        Parameter commentsParam = door.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n        if (commentsParam != null && !commentsParam.IsReadOnly) { commentsParam.Set(\"Clasificación Fuego - 85 min\"); }\n    }\n}"}
{"prompt":"Cambia el nombre de todas las tablas que contienen 'Puertas' por 'Listado de Puertas'.","completion":"List<ViewSchedule> schedules = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().Where(vs => vs.Name.Contains(\"Puertas\")).ToList();\nforeach(ViewSchedule schedule in schedules)\n{\n    schedule.Name = schedule.Name.Replace(\"Puertas\", \"Listado de Puertas\");\n}"}
{"prompt":"Actualiza el tipo de la ventana seleccionada al tipo 'Fija 115x60'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una ventana\");\nFamilySymbol newType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name == \"Fija 115x60\");\nif (pickedRef != null && newType != null)\n{\n    FamilyInstance window = doc.GetElement(pickedRef.ElementId) as FamilyInstance;\n    if (window != null)\n    {\n        window.Symbol = newType;\n    }\n}"}
{"prompt":"Importa topografía georreferenciada desde un archivo LandXML.","completion":"\/\/ The Revit API in the provided context does not support direct LandXML import.\n\/\/ This functionality typically requires additional add-ins like the Site Designer, which are not available here.\n\/\/ As a placeholder, this code will show how to create a simple topography surface from a list of points.\nusing(Transaction t = new Transaction(doc, \"Create Topography\"))\n{\n    t.Start();\n    IList<XYZ> points = new List<XYZ>();\n    points.Add(new XYZ(0, 0, 0));\n    points.Add(new XYZ(50, 0, 5));\n    points.Add(new XYZ(0, 50, 10));\n    TopographySurface.Create(doc, points);\n    t.Commit();\n}"}
{"prompt":"Apply 27mm thermal insulation to all hot water pipes.","completion":"PipeInsulationType insulationType = new FilteredElementCollector(doc).OfClass(typeof(PipeInsulationType)).FirstOrDefault() as PipeInsulationType;\nPipingSystemType hotWaterSystem = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).Cast<PipingSystemType>().FirstOrDefault(s => s.Name.Contains(\"Hot Water\"));\n\nif (insulationType != null && hotWaterSystem != null)\n{\n    List<Pipe> pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast<Pipe>().Where(p => \n    {\n        Parameter systemParam = p.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM);\n        return systemParam != null && systemParam.HasValue && systemParam.AsElementId() == hotWaterSystem.Id;\n    }).ToList();\n    \n    foreach(Pipe p in pipes)\n    {\n        PipeInsulation.Create(doc, p.Id, insulationType.Id, UnitUtils.ConvertToInternalUnits(27, UnitTypeId.Millimeters));\n    }\n}"}
{"prompt":"Ubica una instancia de la familia 'Lampara' en el centro de la habitación 'Despacho 101'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 101\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Puerta Sencilla\") as FamilySymbol;\nif(furnitureSymbol != null && !furnitureSymbol.IsActive) furnitureSymbol.Activate();\nif(room != null)\n{\n    LocationPoint roomCenter = room.Location as LocationPoint;\n    if(roomCenter != null && furnitureSymbol != null && room.Level != null)\n    {\n        doc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Ajusta el tipo de la ventana seleccionada al tipo 'Ventana Fija 120x60'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una ventana\");\nFamilySymbol newType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name == \"Ventana Fija 120x60\");\nif (pickedRef != null && newType != null)\n{\n    FamilyInstance window = doc.GetElement(pickedRef.ElementId) as FamilyInstance;\n    if (window != null)\n    {\n        window.Symbol = newType;\n    }\n}"}
{"prompt":"Spin a selected element 88 degrees around its Z-axis.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select an element to rotate\");\nElement elem = doc.GetElement(pickedRef.ElementId);\nLocationPoint lp = elem.Location as LocationPoint;\nLine axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\nElementTransformUtils.RotateElement(doc, elem.Id, axis, Math.PI \/ 88);"}
{"prompt":"Get the MEP space associated with the room 'Office 97'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Cast<Room>().FirstOrDefault(r => r.Name == \"Office 97\");\nList<Space> spaces = new List<Space>();\n\nif (room != null)\n{\n    spaces = new FilteredElementCollector(doc).OfClass(typeof(Space)).Cast<Space>().Where(s => s.Room != null && s.Room.Id == room.Id).ToList();\n}"}
{"prompt":"Crea un circuito eléctrico conectando luminarias a un panel.","completion":"using (Transaction t = new Transaction(doc, \"Create Electrical Circuit\"))\n{\n    t.Start();\n    FamilyInstance panel = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_ElectricalEquipment).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\n    List<ElementId> fixtureIds = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsNotElementType().ToElementIds().ToList();\n\n    if (panel != null && fixtureIds.Count > 0)\n    {\n        ElectricalSystem electricalSystem = ElectricalSystem.Create(doc, fixtureIds, ElectricalSystemType.PowerCircuit);\n        if(electricalSystem != null)\n        {\n            electricalSystem.SelectPanel(panel);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea un conducto eléctrico de 1 pulgada de diámetro.","completion":"using (Transaction t = new Transaction(doc, \"Create Conduit\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    ElementId conduitTypeId = new FilteredElementCollector(doc).OfClass(typeof(ConduitType)).FirstElementId();\n\n    if (level != null && conduitTypeId != null && conduitTypeId != ElementId.InvalidElementId)\n    {\n        XYZ start = new XYZ(0, 0, 3 \/ 0.3048);\n        XYZ end = new XYZ(5 \/ 0.3048, 0, 3 \/ 0.3048);\n        Conduit conduit = Conduit.Create(doc, conduitTypeId, start, end, level.Id);\n\n        if (conduit != null)\n        {\n            Parameter diameterParam = conduit.get_Parameter(BuiltInParameter.RBS_CONDUIT_DIAMETER_PARAM);\n            if (diameterParam != null && !diameterParam.IsReadOnly)\n            {\n                diameterParam.Set(1.0\/12.0);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Genera una cuadrícula de columnas 5x5 con separación de 8 metros.","completion":"FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (columnSymbol != null && level != null)\n{\n    if(!columnSymbol.IsActive) columnSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters);\n    for(int i=0; i<5; i++)\n    {\n        for(int j=0; j<5; j++)\n        {\n            doc.Create.NewFamilyInstance(new XYZ(i*spacing, j*spacing, 0), columnSymbol, level, StructuralType.Column);\n        }\n    }\n}"}
{"prompt":"Ajusta el tipo de una losa seleccionada a 'Concreto 14cm'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una losa\");\n\nif (pickedRef != null)\n{\n    Floor floorToChange = doc.GetElement(pickedRef) as Floor;\n    FloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name == \"Concreto 14cm\");\n    \n    if (floorToChange != null && newType != null)\n    {\n        floorToChange.ChangeTypeId(newType.Id);\n    }\n}"}
{"prompt":"Generate 4 vertical grids spaced 10 meters apart.","completion":"double separation = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\nfor(int i=0; i<4; i++)\n{\n    Line line = Line.CreateBound(new XYZ(i * separation, 0, 0), new XYZ(i * separation, 40, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Crea un techo por extrusión con un perfil en arco.","completion":"using (Transaction t = new Transaction(doc, \"Create Extrusion Roof\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    RoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n\n    if (level != null && roofType != null && doc.ActiveView != null)\n    {\n        CurveArray profile = new CurveArray();\n        profile.Append(Arc.Create(new XYZ(-10,0,0), new XYZ(10,0,0), new XYZ(0,5,0)));\n        Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisY, XYZ.Zero);\n        ReferencePlane refPlane = doc.Create.NewReferencePlane(plane.Origin, plane.Origin + XYZ.BasisX, plane.Normal, doc.ActiveView);\n        if(refPlane != null)\n            doc.Create.NewExtrusionRoof(profile, refPlane, level, roofType, 0, 20);\n    }\n    t.Commit();\n}"}
{"prompt":"Set the 'Mark' parameter of all selected walls to 'W-EXT-01'.","completion":"using (Transaction t = new Transaction(doc, \"Set Wall Mark\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    ICollection<ElementId> selectedIds = localUidoc.Selection.GetElementIds();\n\n    if (selectedIds != null && selectedIds.Count > 0)\n    {\n        foreach(ElementId id in selectedIds)\n        {\n            Element elem = doc.GetElement(id);\n            if(elem is Wall)\n            {\n                Parameter p = elem.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n                if (p != null && !p.IsReadOnly)\n                {\n                    p.Set(\"W-EXT-01\");\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Insert an instance of the 'Office Desk' family in the center of the 'Office 102' room.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Office 102\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Office Desk\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);"}
{"prompt":"Crea un nuevo tipo de muro de 27cm llamado 'Estructura'.","completion":"string newTypeName = \"Estructura\";\nWallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(newTypeName) as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(27, UnitTypeId.Centimeters));\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n}"}
{"prompt":"Añade un punto al Path of Travel seleccionado.","completion":"\/\/ PathOfTravel related methods are likely inaccessible in this environment.\n\/\/ The following code is a placeholder to show the intent.\n\/*\nusing (Transaction t = new Transaction(doc, \"Update Path of Travel\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference pickedRef = localUidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un Path of Travel\");\n\n    if (pickedRef != null)\n    {\n        PathOfTravel pot = doc.GetElement(pickedRef) as PathOfTravel;\n        if (pot != null)\n        {\n            IList<XYZ> points = pot.GetPath();\n            if (points != null && points.Count >= 2)\n            {\n                XYZ midPoint = (points[0] + points[1]) \/ 2;\n                points.Insert(1, midPoint); \n                pot.Update(points);\n            }\n        }\n    }\n    t.Commit();\n}\n*\/"}
{"prompt":"Crea un nuevo tipo de muro de 29cm llamado 'Muro Estructural 26cm'.","completion":"WallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif(wallTypeToDuplicate != null)\n{\n    WallType newWallType = null;\n    try { newWallType = wallTypeToDuplicate.Duplicate(\"Muro Estructural 26cm\") as WallType; } catch {}\n    if(newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if(cs != null && cs.GetLayers().Any())\n        {\n            int coreLayerIndex = cs.GetFirstCoreLayerIndex();\n            if(coreLayerIndex != -1) \n            {\n                cs.SetLayerFunction(coreLayerIndex, MaterialFunctionAssignment.Structure);\n                cs.SetLayerWidth(coreLayerIndex, UnitUtils.ConvertToInternalUnits(29, UnitTypeId.Centimeters));\n                newWallType.SetCompoundStructure(cs);\n            }\n        }\n    }\n}"}
{"prompt":"Aplica un color rojo a todas las ventanas en la vista activa.","completion":"View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    OverrideGraphicSettings ogs = new OverrideGraphicSettings();\n    ogs.SetProjectionLineColor(new Color(255, 0, 0));\n    ICollection<ElementId> windows = new FilteredElementCollector(doc, activeView.Id).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().ToElementIds();\n    \n    foreach (ElementId windowId in windows)\n    {\n        activeView.SetElementOverrides(windowId, ogs);\n    }\n}"}
{"prompt":"Duplica el nivel 1 con un desfase de 3m y llámalo 'Mezanine'.","completion":"string levelName = \"Mezanine\";\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\n\nif (level1 != null)\n{\n    double newElevation = level1.ProjectElevation + UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, newElevation);\n    if (newLevel != null)\n    {\n        newLevel.Name = levelName;\n    }\n}"}
{"prompt":"Duplicate the 'Generic - 150mm' wall type and name it 'Interior - 15cm Plaster'.","completion":"string originalName = \"Generic - 150mm\";\nstring newName = \"Interior - 15cm Plaster\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif (originalType != null)\n{\n    WallType newType = originalType.Duplicate(newName) as WallType;\n}"}
{"prompt":"Place an instance of the 'Office Desk' family in the center of the 'Office 104' room.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Office 104\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Office Desk\") as FamilySymbol;\nif(furnitureSymbol != null && !furnitureSymbol.IsActive) furnitureSymbol.Activate();\nif(room != null)\n{\n    LocationPoint roomCenter = room.Location as LocationPoint;\n    if(roomCenter != null && furnitureSymbol != null && room.Level != null)\n    {\n        doc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Acota la longitud de un muro seleccionado por el usuario.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference wallRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un muro para acotar\");\n\nif (wallRef != null)\n{\n    Wall wall = doc.GetElement(wallRef) as Wall;\n    View activeView = doc.ActiveView;\n\n    if (wall != null && activeView != null)\n    {\n        LocationCurve locCurve = wall.Location as LocationCurve;\n        if (locCurve != null)\n        {\n            Line wallLine = locCurve.Curve as Line;\n            if (wallLine != null)\n            {\n                ReferenceArray refs = new ReferenceArray();\n                refs.Append(wallLine.GetEndPointReference(0));\n                refs.Append(wallLine.GetEndPointReference(1));\n                XYZ pt1 = wallLine.GetEndPoint(0).Add(XYZ.BasisZ * 2);\n                XYZ pt2 = wallLine.GetEndPoint(1).Add(XYZ.BasisZ * 2);\n                Line dimLine = Line.CreateBound(pt1, pt2);\n                doc.Create.NewDimension(activeView, dimLine, refs);\n            }\n        }\n    }\n}"}
{"prompt":"Crea un SketchPlane en el Nivel 2.","completion":"using (Transaction t = new Transaction(doc, \"Create Sketch Plane\"))\n{\n    t.Start();\n    Level level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel 2\");\n\n    if (level2 != null)\n    {\n        Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisZ, new XYZ(0, 0, level2.Elevation));\n        SketchPlane skp = SketchPlane.Create(doc, plane);\n    }\n    t.Commit();\n}"}
{"prompt":"Recupera el elemento anfitrión de la primera ventana que encuentres.","completion":"FamilyInstance windowInstance = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\n\nif (windowInstance != null)\n{\n    Element hostElement = windowInstance.Host;\n}"}
{"prompt":"Duplica el tipo de muro 'Genérico - 150mm' y nómbralo 'Interior - 15cm Yeso'.","completion":"string originalName = \"Genérico - 150mm\";\nstring newName = \"Interior - 15cm Yeso\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif(originalType!=null)\n    originalType.Duplicate(newName);"}
{"prompt":"Añade refuerzo tipo estribo a la viga seleccionada.","completion":"\/\/ This is a complex operation that requires multiple steps and\/or user interaction and is not supported by the agent."}
{"prompt":"Generate a new pipe type with Copper material.","completion":"string newTypeName = \"Copper Pipe\";\nPipeType pipeTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(PipeType)).FirstOrDefault() as PipeType;\nMaterial copper = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name.Contains(\"Copper\")) as Material;\n\nif (pipeTypeToDuplicate != null && copper != null)\n{\n    PipeType newType = pipeTypeToDuplicate.Duplicate(newTypeName) as PipeType;\n    if (newType != null)\n    {\n        Parameter materialParam = newType.get_Parameter(BuiltInParameter.MATERIAL_ID_PARAM);\n        if (materialParam != null && !materialParam.IsReadOnly) materialParam.Set(copper.Id);\n    }\n}"}
{"prompt":"Encuentra todos los muros que no tienen nivel base asignado.","completion":"ElementFilter unassociatedFilter = new ElementLevelFilter(ElementId.InvalidElementId);\nList<Element> unassignedWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(unassociatedFilter).ToList();"}
{"prompt":"Copia el nivel 1 con un desfase de 3m y llámalo 'Mezanine'.","completion":"string levelName = \"Mezanine\";\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\n\nif (level1 != null)\n{\n    double newElevation = level1.ProjectElevation + UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, newElevation);\n    if (newLevel != null)\n    {\n        newLevel.Name = levelName;\n    }\n}"}
{"prompt":"Create a new 5mm text type in green color.","completion":"using (Transaction t = new Transaction(doc, \"Create Green Text Type\"))\n{\n    t.Start();\n    string newTypeName = \"5mm Green\";\n    TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\n    if (defaultType != null)\n    {\n        TextNoteType newType = defaultType.Duplicate(newTypeName) as TextNoteType;\n        if (newType != null)\n        {\n            Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n            if (textSizeParam != null && !textSizeParam.IsReadOnly)\n            {\n                textSizeParam.Set(5 \/ 304.8);\n            }\n            Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n            if (lineColorParam != null && !lineColorParam.IsReadOnly)\n            {\n                 lineColorParam.Set(65280);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Añade un codo de 90 grados entre dos tuberías.","completion":"using (Transaction t = new Transaction(doc, \"Add Elbow\"))\n{\n    t.Start();\n    List<Pipe> pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast<Pipe>().Where(p => p.ConnectorManager != null && p.ConnectorManager.UnusedConnectors.Size > 0).Take(2).ToList();\n\n    if (pipes.Count >= 2)\n    {\n        Connector c1 = pipes[0].ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n        Connector c2 = pipes[1].ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n        \n        if (c1 != null && c2 != null)\n        {\n            doc.Create.NewElbowFitting(c1, c2);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Generate a global length parameter named 'CorridorWidth' with a value of 1.6m.","completion":"string paramName = \"CorridorWidth\";\nGlobalParameter gp = GlobalParameter.Create(doc, paramName, SpecTypeId.Length);\n\nif (gp != null)\n{\n    gp.SetValue(new DoubleParameterValue(UnitUtils.ConvertToInternalUnits(1.6, UnitTypeId.Meters)));\n}"}
{"prompt":"Allow the user to select a wall and get its ElementId.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a wall\");\nElementId selectedWallId = ElementId.InvalidElementId;\nif (pickedRef != null)\n{\n    selectedWallId = pickedRef.ElementId;\n}"}
{"prompt":"Genera un grupo a partir de la selección actual y muévelo 10 metros a la derecha.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds != null && selectedIds.Count > 0)\n{\n    Group group = doc.Create.NewGroup(selectedIds);\n    if (group != null)\n    {\n        XYZ translation = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), 0, 0);\n        ElementTransformUtils.MoveElement(doc, group.Id, translation);\n    }\n}"}
{"prompt":"Construct a new room on Level 1 at point (5, 13).","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nif (level1 != null)\n{\n    UV point = new UV(5, 13);\n    Room newRoom = doc.Create.NewRoom(level1, point);\n}"}
{"prompt":"Crea una losa de cimentación estructural de 30cm de espesor.","completion":"Level foundationLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderBy(l => l.Elevation).FirstOrDefault();\nFloorType slabType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.get_Parameter(BuiltInParameter.FLOOR_PARAM_IS_STRUCTURAL).AsInteger() == 1);\nif (foundationLevel != null && slabType != null)\n{\n    XYZ p1 = new XYZ(0,0,0); XYZ p2 = new XYZ(10,0,0); XYZ p3 = new XYZ(10,15,0); XYZ p4 = new XYZ(0,15,0);\n    CurveLoop profile = new CurveLoop();\n    profile.Append(Line.CreateBound(p1,p2));\n    profile.Append(Line.CreateBound(p2,p3));\n    profile.Append(Line.CreateBound(p3,p4));\n    profile.Append(Line.CreateBound(p4,p1));\n    Floor.Create(doc, new List<CurveLoop>{profile}, slabType.Id, foundationLevel.Id);\n}"}
{"prompt":"Actualiza el nivel de detalle de la vista actual a 'Bajo'.","completion":"View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.DetailLevel = ViewDetailLevel.Coarse;\n}"}
{"prompt":"Crea un pilar del tipo 'Hormigón-Rectangular 30x60' en cada intersección de la rejilla.","completion":"using (Transaction t = new Transaction(doc, \"Create Columns at Grids\"))\n{\n    t.Start();\n    FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(s => s.Name == \"Hormigón-Rectangular 30x60\");\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderBy(l => l.Elevation).FirstOrDefault();\n    List<Grid> grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().ToList();\n    if (columnSymbol != null && level != null)\n    {\n        if (!columnSymbol.IsActive) columnSymbol.Activate();\n        for (int i = 0; i < grids.Count; i++)\n        {\n            for (int j = i + 1; j < grids.Count; j++)\n            {\n                IntersectionResultArray results;\n                if(grids[i].Curve.Intersect(grids[j].Curve, out results) == SetComparisonResult.Overlap)\n                {\n                    if (results != null && !results.IsEmpty)\n                    {\n                        foreach (IntersectionResult ir in results)\n                        {\n                            doc.Create.NewFamilyInstance(ir.XYZPoint, columnSymbol, level, StructuralType.Column);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Rename the active view to 'Working View'.","completion":"string newName = \"Working View\";\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.Name = newName;\n}"}
{"prompt":"Encuentra todas las vistas que no tienen una plantilla de vista asignada.","completion":"List<View> viewsWithoutTemplate = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().Where(v => v.CanBePrinted && !v.IsTemplate && v.ViewTemplateId.Equals(ElementId.InvalidElementId)).ToList();"}
{"prompt":"Put a spot elevation on a given face and view point.","completion":"using (Transaction t = new Transaction(doc, \"Place Spot Elevation\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference faceRef = localUidoc.Selection.PickObject(ObjectType.Face, \"Select the top face of the floor\");\n\n    View activeView = doc.ActiveView;\n\n    if (faceRef != null && activeView != null)\n    {\n        XYZ pointOnFace = faceRef.GlobalPoint;\n        XYZ leaderEnd = pointOnFace + new XYZ(1 \/ 0.3048, 1 \/ 0.3048, 0);\n        doc.Create.NewSpotElevation(activeView, faceRef, pointOnFace, pointOnFace, leaderEnd, pointOnFace, true);\n    }\n    t.Commit();\n}"}
{"prompt":"Place an instance of the 'Office Desk' family in the center of the 'Office 100' room.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Office 100\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Office Desk\") as FamilySymbol;\nif(furnitureSymbol != null && !furnitureSymbol.IsActive) furnitureSymbol.Activate();\nif(room != null)\n{\n    LocationPoint roomCenter = room.Location as LocationPoint;\n    if(roomCenter != null && furnitureSymbol != null && room.Level != null)\n    {\n        doc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Duplicate the 'Generic - 146mm' wall type and name it 'Interior - 10cm Plaster'.","completion":"string originalName = \"Generic - 146mm\";\nstring newName = \"Interior - 10cm Plaster\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif (originalType != null)\n{\n    WallType newType = originalType.Duplicate(newName) as WallType;\n}"}
{"prompt":"Create a structural beam between (9,1,2) and (5,1,4) on Level 3","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 3\") as Level;\nFamilySymbol beamType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (beamType != null && level != null)\n{\n    if(!beamType.IsActive) beamType.Activate();\n    XYZ start = new XYZ(9, 1, 2);\n    XYZ end = new XYZ(5, 1, 4);\n    if (start.IsAlmostEqualTo(end)) return;\n    Line beamCurve = Line.CreateBound(start, end);\n    doc.Create.NewFamilyInstance(beamCurve, beamType, level, Autodesk.Revit.DB.Structure.StructuralType.Beam);\n}"}
{"prompt":"Place an instance of the 'Office Desk' family in the center of the 'Office 96' room.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Office 96\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Office Desk\") as FamilySymbol;\nif(furnitureSymbol != null && !furnitureSymbol.IsActive) furnitureSymbol.Activate();\nif(room != null)\n{\n    LocationPoint roomCenter = room.Location as LocationPoint;\n    if(roomCenter != null && furnitureSymbol != null && room.Level != null)\n    {\n        doc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Obtén todos los muros del Nivel 1 que son estructurales.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\nif (level1 != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level1.Id);\n    ElementCategoryFilter categoryFilter = new ElementCategoryFilter(BuiltInCategory.OST_Walls);\n    ParameterValueProvider pvp = new ParameterValueProvider(new ElementId(BuiltInParameter.WALL_STRUCTURAL_SIGNIFICANT));\n    FilterIntegerRule rule = new FilterIntegerRule(pvp, new FilterNumericEquals(), 1);\n    ElementParameterFilter structuralFilter = new ElementParameterFilter(rule);\n    LogicalAndFilter andFilter = new LogicalAndFilter(new List<ElementFilter> { levelFilter, categoryFilter, structuralFilter });\n    List<Element> structuralWalls = new FilteredElementCollector(doc).WherePasses(andFilter).ToList();\n}"}
{"prompt":"Generate an MEP space for each room on Level 1","completion":"string levelName = \"Level 1\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    FilteredElementCollector roomCollector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WherePasses(new ElementLevelFilter(targetLevel.Id));\n    foreach (Room room in roomCollector.ToElements().Cast<Room>())\n    {\n        LocationPoint locPoint = room.Location as LocationPoint;\n        if (locPoint != null)\n        {\n            UV point = new UV(locPoint.Point.X, locPoint.Point.Y);\n            doc.Create.NewSpace(targetLevel, point);\n        }\n    }\n}"}
{"prompt":"Assign the 'Comments' parameter for all doors on Level 1 to 'Fire Rating - 89 min'.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\n\nif (level1 != null)\n{\n    List<FamilyInstance> doorsOnLevel1 = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsNotElementType().Cast<FamilyInstance>().Where(fi => fi.LevelId == level1.Id).ToList();\n    foreach(FamilyInstance door in doorsOnLevel1)\n    {\n        Parameter commentsParam = door.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n        if (commentsParam != null && !commentsParam.IsReadOnly) commentsParam.Set(\"Fire Rating - 89 min\");\n    }\n}"}
{"prompt":"Connect two cable trays with an elbow fitting.","completion":"List<CableTray> trays = new FilteredElementCollector(doc).OfClass(typeof(CableTray)).Cast<CableTray>().ToList();\n\nif (trays.Count >= 2)\n{\n    Connector c1 = trays[0].ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n    Connector c2 = trays[1].ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n    \n    if (c1 != null && c2 != null)\n    {\n        doc.Create.NewUnionFitting(c1, c2);\n    }\n}"}
{"prompt":"Encuentra todas las colisiones entre tuberías y vigas.","completion":"ICollection<ElementId> pipeIds = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_PipeCurves).WhereElementIsNotElementType().ToElementIds();\nICollection<ElementId> beamIds = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsNotElementType().ToElementIds();\n\nif(pipeIds.Count > 0 && beamIds.Count > 0)\n{\n    List<ElementFilter> beamFilters = new List<ElementFilter>();\n    foreach(ElementId beamId in beamIds)\n    {\n        Element beam = doc.GetElement(beamId);\n        if(beam != null) beamFilters.Add(new ElementIntersectsElementFilter(beam));\n    }\n    LogicalOrFilter clashFilter = new LogicalOrFilter(beamFilters);\n    ICollection<ElementId> clashingPipeIds = new FilteredElementCollector(doc, pipeIds).WherePasses(clashFilter).ToElementIds();\n    \/\/ clashingPipeIds contiene los IDs de los elementos en colisión, la selección\/visualización es externa.\n}"}
{"prompt":"Retrieve the total length of all walls in the project.","completion":"double totalLength = 0.0;\nList<Wall> walls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Cast<Wall>().ToList();\nforeach (Wall wall in walls)\n{\n    Parameter lengthParam = wall.get_Parameter(BuiltInParameter.CURVE_ELEM_LENGTH);\n    if (lengthParam != null && lengthParam.HasValue)\n    {\n        totalLength += lengthParam.AsDouble();\n    }\n}"}
{"prompt":"Obtén todas las familias de puertas cargadas en el proyecto.","completion":"List<Family> doorFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.Id.IntegerValue == (int)BuiltInCategory.OST_Doors).ToList();"}
{"prompt":"Set the sill height of all windows to 900mm.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits(900, UnitTypeId.Millimeters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Find all doors on Level 2 that belong to the 'Single-Flush' family.","completion":"Level level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 2\");\nList<Element> doors = new List<Element>();\n\nif (level2 != null)\n{\n    ElementCategoryFilter catFilter = new ElementCategoryFilter(BuiltInCategory.OST_Doors);\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level2.Id);\n    FilterableValueProvider provider = new ParameterValueProvider(new ElementId(BuiltInParameter.ELEM_FAMILY_PARAM));\n    FilterStringRuleEvaluator evaluator = new FilterStringEquals();\n    FilterRule famNameRule = new FilterStringRule(provider, evaluator, \"Single-Flush\");\n    ElementParameterFilter famFilter = new ElementParameterFilter(famNameRule);\n    LogicalAndFilter andFilter = new LogicalAndFilter(new List<ElementFilter> { catFilter, levelFilter, famFilter });\n    doors = new FilteredElementCollector(doc).WherePasses(andFilter).ToList();\n}"}
{"prompt":"Añade un nivel llamado 'Nivel Azotea' a 15.1 metros.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(15.1, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Nivel Azotea\";\n}"}
{"prompt":"Retrieve the MEP space associated with the room 'Office 105'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Cast<Room>().FirstOrDefault(r => r.Name == \"Office 105\");\nList<Space> spaces = new List<Space>();\n\nif (room != null)\n{\n    spaces = new FilteredElementCollector(doc).OfClass(typeof(Space)).Cast<Space>().Where(s => s.Room != null && s.Room.Id == room.Id).ToList();\n}"}
{"prompt":"Generate a new 5mm text type in green color.","completion":"using (Transaction t = new Transaction(doc, \"Create Green Text Type\"))\n{\n    t.Start();\n    string newTypeName = \"5mm Green\";\n    TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\n    if (defaultType != null)\n    {\n        TextNoteType newType = defaultType.Duplicate(newTypeName) as TextNoteType;\n        if (newType != null)\n        {\n            Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n            if (textSizeParam != null && !textSizeParam.IsReadOnly)\n            {\n                textSizeParam.Set(5 \/ 304.8);\n            }\n            Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n            if (lineColorParam != null && !lineColorParam.IsReadOnly)\n            {\n                 lineColorParam.Set(65280);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Copia el tipo de muro 'Genérico - 146mm' y nómbralo 'Interior - 20cm Yeso'.","completion":"string originalName = \"Genérico - 146mm\";\nstring newName = \"Interior - 20cm Yeso\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif (originalType != null)\n{\n    WallType newType = originalType.Duplicate(newName) as WallType;\n}"}
{"prompt":"Build 10 architectural worksets.","completion":"List<string> worksetNames = new List<string> { \"TAD_ARQ_WALLS\", \"TAD_ARQ_FINISHES\", \"TAD_ARQ_CEILINGS\", \"TAD_ARQ_FLOORS\", \"TAD_ARQ_RAILINGS\", \"TAD_ARQ_WINDOWS\", \"TAD_ARQ_CARPENTRY\", \"TAD_ARQ_FURNITURE\", \"TAD_ARQ_PLUMBING\", \"TAD_ARQ_EXTERIOR\" };\nforeach(string name in worksetNames)\n{\n    Workset.Create(doc, name);\n}"}
{"prompt":"Conecta dos tuberías con un codo.","completion":"List<Pipe> pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast<Pipe>().ToList();\nif (pipes.Count >= 2)\n{\n    Connector c1 = pipes[0].ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n    Connector c2 = pipes[1].ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n    if (c1 != null && c2 != null)\n    {\n        doc.Create.NewElbowFitting(c1, c2);\n    }\n}"}
{"prompt":"Change the type of all 'Fixed' windows to 'Casement'.","completion":"FamilySymbol newType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name.Contains(\"Casement\"));\nFamilySymbol oldType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name.Contains(\"Fixed\"));\n\nif (newType != null && oldType != null)\n{\n    List<FamilyInstance> windowsToChange = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().Where(fi => fi.Symbol.Id == oldType.Id).ToList();\n    foreach (FamilyInstance window in windowsToChange)\n    {\n        window.Symbol = newType;\n    }\n}"}
{"prompt":"Modifica la escala de la vista activa a 1:50.","completion":"View activeView = doc.ActiveView;\nif (activeView != null)\n{\n    activeView.Scale = 50;\n}"}
{"prompt":"Construct a pipe with a 150mm diameter.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nPipeType pipeType = new FilteredElementCollector(doc).OfClass(typeof(PipeType)).FirstOrDefault() as PipeType;\nPipingSystemType systemType = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).FirstOrDefault() as PipingSystemType;\n\nif (level != null && pipeType != null && systemType != null)\n{\n    \/\/ Create a default 10ft long pipe as the prompt is not specific\n    XYZ p1 = new XYZ(0, 0, 0);\n    XYZ p2 = new XYZ(10, 0, 0);\n    Pipe pipe = Pipe.Create(doc, systemType.Id, pipeType.Id, level.Id, p1, p2);\n\n    if (pipe != null)\n    {\n        Parameter diameterParam = pipe.get_Parameter(BuiltInParameter.RBS_PIPE_DIAMETER_PARAM);\n        if (diameterParam != null && !diameterParam.IsReadOnly)\n        {\n            diameterParam.Set(UnitUtils.ConvertToInternalUnits(150, UnitTypeId.Millimeters));\n        }\n    }\n}"}
{"prompt":"Copia el tipo de muro 'Genérico - 145mm' y nómbralo 'Interior - 18cm Yeso'.","completion":"string originalName = \"Genérico - 145mm\";\nstring newName = \"Interior - 18cm Yeso\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif (originalType != null)\n{\n    WallType newType = originalType.Duplicate(newName) as WallType;\n}"}
{"prompt":"Copy level 1 with a 6m offset and name it 'Mezzanine'.","completion":"string levelName = \"Mezzanine\";\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\n\nif (level1 != null)\n{\n    double newElevation = level1.ProjectElevation + UnitUtils.ConvertToInternalUnits(6, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, newElevation);\n    if (newLevel != null)\n    {\n        newLevel.Name = levelName;\n    }\n}"}
{"prompt":"Inserta un rociador en las coordenadas (7,4,6).","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol sprinklerSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Sprinklers).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (level != null && sprinklerSymbol != null)\n{\n    if (!sprinklerSymbol.IsActive) sprinklerSymbol.Activate();\n    XYZ placementPoint = new XYZ(UnitUtils.ConvertToInternalUnits(7, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(4, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(6, UnitTypeId.Meters));\n    doc.Create.NewFamilyInstance(placementPoint, sprinklerSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n}"}
{"prompt":"Sitúa todos los elementos seleccionados en el workset 'Fachada'.","completion":"using (Transaction t = new Transaction(doc, \"Assign to Workset\"))\n{\n    t.Start();\n    if(doc.IsWorkshared)\n    {\n        UIDocument localUidoc = uidoc;\n        ICollection<ElementId> selectedIds = localUidoc.Selection.GetElementIds();\n        \n        Workset workset = new FilteredWorksetCollector(doc).OfKind(WorksetKind.UserWorkset).FirstOrDefault(ws => ws.Name == \"Fachada\");\n        if(workset == null) workset = Workset.Create(doc, \"Fachada\");\n\n        if (selectedIds != null && selectedIds.Count > 0 && workset != null)\n        {\n            foreach(ElementId id in selectedIds)\n            {\n                Element elem = doc.GetElement(id);\n                Parameter wsparam = elem.get_Parameter(BuiltInParameter.ELEM_PARTITION_PARAM);\n                if(wsparam != null && !wsparam.IsReadOnly) wsparam.Set(workset.Id.IntegerValue);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea una nueva tabla de planificación para Pilares Estructurales.","completion":"string scheduleName = \"Tabla de Pilares Estructurales\";\nElementId categoryId = new ElementId(BuiltInCategory.OST_StructuralColumns);\nViewSchedule schedule = ViewSchedule.CreateSchedule(doc, categoryId);\nschedule.Name = scheduleName;"}
{"prompt":"Obtén una lista de todas las familias de anotación.","completion":"List<Family> annotationFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.CategoryType == CategoryType.Annotation).ToList();\n"}
{"prompt":"Crea una bandeja de cables entre dos puntos.","completion":"CableTrayType trayType = new FilteredElementCollector(doc).OfClass(typeof(CableTrayType)).FirstOrDefault() as CableTrayType;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (trayType != null && level != null)\n{\n    \/\/ Create a default cable tray between two points as they are not specified\n    XYZ p1 = new XYZ(0, 10, 10);\n    XYZ p2 = new XYZ(20, 10, 10);\n    CableTray.Create(doc, trayType.Id, p1, p2, level.Id);\n}"}
{"prompt":"Crea un nuevo nivel 'Nivel 2' a una elevación de 13 metros.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(13, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\nif (newLevel != null)\n{\n    try { newLevel.Name = \"Nivel 2\"; } catch {}\n}"}
{"prompt":"Suma la longitud total de todos los ductos de Suministro de Aire.","completion":"List<Duct> ducts = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_DuctCurves).WhereElementIsNotElementType().Cast<Duct>().Where(d => d.get_Parameter(BuiltInParameter.RBS_SYSTEM_CLASSIFICATION_PARAM).AsString() == \"SupplyAir\").ToList();\ndouble totalLength = 0.0;\nforeach (Duct d in ducts)\n{\n    totalLength += d.get_Parameter(BuiltInParameter.CURVE_ELEM_LENGTH).AsDouble();\n}"}
{"prompt":"Genera un equipo eléctrico en X=1,Y=1.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol panelSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_ElectricalEquipment).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null && panelSymbol != null)\n{\n    if (!panelSymbol.IsActive)\n    {\n        panelSymbol.Activate();\n    }\n    XYZ point = new XYZ(1, 1, 0);\n    doc.Create.NewFamilyInstance(point, panelSymbol, level, StructuralType.NonStructural);\n}"}
{"prompt":"Etiqueta todas las habitaciones con su área.","completion":"using (Transaction t = new Transaction(doc, \"Tag All Rooms\"))\n{\n    t.Start();\n    View activeView = doc.ActiveView;\n\n    if (activeView != null)\n    {\n        List<Room> rooms = new FilteredElementCollector(doc, activeView.Id).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>().ToList();\n        foreach(Room room in rooms)\n        {\n            LocationPoint loc = room.Location as LocationPoint;\n            if(loc != null)\n            {\n                doc.Create.NewRoomTag(new LinkElementId(room.Id), new UV(loc.Point.X, loc.Point.Y), activeView.Id);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Generate a new level named 'Mezzanine' at 7.1 meters elevation.","completion":"string levelName = \"Mezzanine\";\ndouble elevation = UnitUtils.ConvertToInternalUnits(7.1, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Encuentra todas las puertas del Nivel 2 que sean de la familia 'Puerta Sencilla'.","completion":"Level level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel 2\");\nList<Element> doors = new List<Element>();\n\nif (level2 != null)\n{\n    ElementCategoryFilter catFilter = new ElementCategoryFilter(BuiltInCategory.OST_Doors);\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level2.Id);\n    FilterableValueProvider provider = new ParameterValueProvider(new ElementId(BuiltInParameter.ELEM_FAMILY_PARAM));\n    FilterStringRuleEvaluator evaluator = new FilterStringEquals();\n    FilterRule famNameRule = new FilterStringRule(provider, evaluator, \"Puerta Sencilla\");\n    ElementParameterFilter famFilter = new ElementParameterFilter(famNameRule);\n    LogicalAndFilter andFilter = new LogicalAndFilter(new List<ElementFilter> { catFilter, levelFilter, famFilter });\n    doors = new FilteredElementCollector(doc).WherePasses(andFilter).ToList();\n}"}
{"prompt":"Create a new 3D view oriented from point (10,10,10) looking at the origin.","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v=>v.ViewFamily==ViewFamily.ThreeDimensional);\n\nif (vft != null)\n{\n    View3D view = View3D.CreateIsometric(doc, vft.Id);\n    if (view != null)\n    {\n        XYZ eyePos = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters));\n        XYZ upDir = XYZ.BasisZ;\n        XYZ forwardDir = XYZ.Zero - eyePos;\n        ViewOrientation3D vo = new ViewOrientation3D(eyePos, upDir, forwardDir);\n        view.SetOrientation(vo);\n        view.Name = \"View from (10,10,10)\";\n    }\n}"}
{"prompt":"Ajusta el tipo de una losa seleccionada a 'Concreto 10cm'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una losa\");\n\nif (pickedRef != null)\n{\n    Floor floorToChange = doc.GetElement(pickedRef) as Floor;\n    FloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name == \"Concreto 10cm\");\n    \n    if (floorToChange != null && newType != null)\n    {\n        floorToChange.ChangeTypeId(newType.Id);\n    }\n}"}
{"prompt":"Dentro del editor de familias, crea un plano de referencia vertical llamado 'Eje Central'.","completion":"string rpName = \"Eje Central\";\nXYZ start = new XYZ(0, UnitUtils.ConvertToInternalUnits(-5, UnitTypeId.Meters), 0);\nXYZ end = new XYZ(0, UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0);\nXYZ normal = XYZ.BasisX;\n\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    ReferencePlane rp = doc.FamilyCreate.NewReferencePlane(start, end, normal, activeView);\n    if (rp != null)\n    {\n        rp.Name = rpName;\n    }\n}"}
{"prompt":"Put an instance of the 'Office Desk' family in the center of the 'Office 105' room.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Office 105\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Office Desk\") as FamilySymbol;\nif(furnitureSymbol != null && !furnitureSymbol.IsActive) furnitureSymbol.Activate();\nif(room != null)\n{\n    LocationPoint roomCenter = room.Location as LocationPoint;\n    if(roomCenter != null && furnitureSymbol != null && room.Level != null)\n    {\n        doc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Selecciona todos los muros del 'Nivel 7' y cambia su comentario a 'REVISAR AISLAMIENTO'.","completion":"string levelName = \"Nivel 7\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(targetLevel.Id);\n    FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(levelFilter);\n    foreach (Element wall in collector)\n    {\n        Parameter commentsParam = wall.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n        if (commentsParam != null && !commentsParam.IsReadOnly) { commentsParam.Set(\"REVISAR AISLAMIENTO\"); }\n    }\n}"}
{"prompt":"Coloca postes de iluminación cada 10m en un camino de 100m.","completion":"FamilySymbol lightSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsElementType().FirstOrDefault(s => s.Name.Contains(\"Post\") || s.Name.Contains(\"Pole\")) as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (lightSymbol != null && level != null)\n{\n    if (!lightSymbol.IsActive)\n    {\n        lightSymbol.Activate();\n    }\n    double spacing = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\n    double pathLength = UnitUtils.ConvertToInternalUnits(100, UnitTypeId.Meters);\n    int postCount = (int)(pathLength \/ spacing);\n    for (int i = 0; i <= postCount; i++)\n    {\n        XYZ point = new XYZ(i * spacing, 0, 0);\n        doc.Create.NewFamilyInstance(point, lightSymbol, level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Create columns at each grid intersection.","completion":"FamilySymbol colSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nList<Grid> grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().ToList();\n\nif (colSymbol != null && level != null && grids.Count >= 2)\n{\n    for (int i = 0; i < grids.Count; i++)\n    {\n        for (int j = i + 1; j < grids.Count; j++)\n        {\n            IntersectionResultArray results = null;\n            grids[i].Curve.Intersect(grids[j].Curve, out results);\n            if(results != null)\n            {\n                 foreach (IntersectionResult ir in results)\n                 {\n                     doc.Create.NewFamilyInstance(ir.XYZPoint, colSymbol, level, StructuralType.Column);\n                 }\n            }\n        }\n    }\n}"}
{"prompt":"Create a new A3 sheet and place a legend on it.","completion":"using (Transaction t = new Transaction(doc, \"Create Sheet with Legend\"))\n{\n    t.Start();\n    FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(tb => tb.Name.Contains(\"A3\"));\n    View legendView = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().FirstOrDefault(v => v.ViewType == ViewType.Legend);\n\n    if (titleBlock != null && legendView != null)\n    {\n        ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n        if (newSheet != null)\n        {\n            BoundingBoxUV sheetBox = newSheet.Outline;\n            UV centerUv = (sheetBox.Min + sheetBox.Max) \/ 2.0;\n            XYZ centerPoint = new XYZ(centerUv.U, centerUv.V, 0);\n            Viewport.Create(doc, newSheet.Id, legendView.Id, centerPoint);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Elimina todos los tipos de muro no utilizados en el proyecto.","completion":"ICollection<ElementId> allWallTypes = new FilteredElementCollector(doc).OfClass(typeof(WallType)).ToElementIds();\nICollection<ElementId> usedWallTypes = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Select(w => w.GetTypeId()).Distinct().ToList();\nList<ElementId> unusedWallTypes = allWallTypes.Except(usedWallTypes).ToList();\ndoc.Delete(unusedWallTypes);"}
{"prompt":"Cambia el tipo de todos los muros seleccionados a 'Muro Exterior'.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nWallType targetWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Name == \"Muro Exterior\");\nif(targetWallType != null)\n{\n    foreach(ElementId id in selectedIds)\n    {\n        Wall wall = doc.GetElement(id) as Wall;\n        if(wall != null)\n        {\n            wall.ChangeTypeId(targetWallType.Id);\n        }\n    }\n}"}
{"prompt":"Duplica el nivel 2 con un desfase de 7m y llámalo 'Mezanine'.","completion":"string levelName = \"Nivel 2\";\nLevel levelToCopy = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (levelToCopy != null)\n{\n    double offset = UnitUtils.ConvertToInternalUnits(7, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, levelToCopy.Elevation + offset);\n    newLevel.Name = \"Mezanine\";\n}"}
{"prompt":"Incorpora refuerzo tipo estribo a la viga seleccionada.","completion":"\/\/ This is a complex operation that requires multiple steps and\/or user interaction and is not supported by the agent."}
{"prompt":"Rota la columna seleccionada 45 grados.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una columna para rotar\");\nif (pickedRef != null)\n{\n    Element elem = doc.GetElement(pickedRef.ElementId);\n    LocationPoint lp = elem.Location as LocationPoint;\n    if (lp != null)\n    {\n        Line axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\n        double angle = 45 * Math.PI \/ 180.0;\n        ElementTransformUtils.RotateElement(doc, elem.Id, axis, angle);\n    }\n}"}
{"prompt":"Construct a new room on Level 1 at point (7, 13).","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\n\nif (level1 != null)\n{\n    UV point = new UV(7, 13);\n    Room room = doc.Create.NewRoom(level1, point);\n}"}
{"prompt":"Set the sill height of all windows to 1 meter.","completion":"using (Transaction t = new Transaction(doc, \"Set Sill Height\"))\n{\n    t.Start();\n    double sillHeight = 1 \/ 0.3048;\n    List<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\n    foreach(FamilyInstance window in windows)\n    {\n        Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n        if (sillHeightParam != null && !sillHeightParam.IsReadOnly)\n        {\n            sillHeightParam.Set(sillHeight);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Build a new level named 'Mezzanine' at 7.1 meters elevation.","completion":"string levelName = \"Mezzanine\";\ndouble elevation = UnitUtils.ConvertToInternalUnits(7.1, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Extrae el espacio MEP asociado a la habitación 'Oficina 105'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Cast<Room>().FirstOrDefault(r => r.Name == \"Oficina 105\");\nList<Space> spaces = new List<Space>();\n\nif (room != null)\n{\n    spaces = new FilteredElementCollector(doc).OfClass(typeof(Space)).Cast<Space>().Where(s => s.Room != null && s.Room.Id == room.Id).ToList();\n}"}
{"prompt":"Crea 5 worksets para las disciplinas de ingeniería.","completion":"List<string> worksetNames = new List<string> { \"MEP_HVAC\", \"MEP_Plumbing\", \"MEP_Electrical\", \"STRUCT_Framing\", \"STRUCT_Foundations\" };\nforeach(string name in worksetNames)\n{\n    Workset newWorkset = Workset.Create(doc, name);\n}"}
{"prompt":"Conecta dos conductos con una unión en T.","completion":"List<Duct> ducts = new FilteredElementCollector(doc).OfClass(typeof(Duct)).Cast<Duct>().ToList();\nif (ducts.Count >= 2)\n{\n    Connector c1 = ducts[0].ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n    Connector c2 = ducts[1].ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n    if (c1 != null && c2 != null)\n    {\n        \/\/ CORRECCIÓN: El método correcto es NewUnionFitting, no NewTeeFitting para una conexión simple.\n        doc.Create.NewUnionFitting(c1, c2);\n    }\n}"}
{"prompt":"Extrae el espacio MEP asociado a la habitación 'Oficina 98'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Cast<Room>().FirstOrDefault(r => r.Name == \"Oficina 98\");\nList<Space> spaces = new List<Space>();\n\nif (room != null)\n{\n    spaces = new FilteredElementCollector(doc).OfClass(typeof(Space)).Cast<Space>().Where(s => s.Room != null && s.Room.Id == room.Id).ToList();\n}"}
{"prompt":"Aplica la plantilla de vista 'Plantilla Arquitectónica' a la vista activa.","completion":"View activeView = doc.ActiveView;\nView viewTemplate = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().FirstOrDefault(v => v.IsTemplate && v.Name == \"Plantilla Arquitectónica\");\n\nif (activeView != null && viewTemplate != null)\n{\n    activeView.ViewTemplateId = viewTemplate.Id;\n}"}
{"prompt":"Build a topography surface from a list of 4 points.","completion":"IList<XYZ> points = new List<XYZ>\n{\n    new XYZ(0, 0, 0),\n    new XYZ(30, 0, 3),\n    new XYZ(0, 30, 6),\n    new XYZ(30, 30, 3)\n};\nElementId toposolidTypeId = new FilteredElementCollector(doc).OfClass(typeof(ToposolidType)).FirstElementId();\nif(toposolidTypeId != null && toposolidTypeId != ElementId.InvalidElementId)\n{\n    Toposolid.Create(doc, points, toposolidTypeId, ElementId.InvalidElementId);\n}"}
{"prompt":"Build a DirectShape with a 2x2x2 meter box shape.","completion":"TessellatedShapeBuilder builder = new TessellatedShapeBuilder();\nbuilder.OpenConnectedFaceSet(true);\ndouble size = UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\nXYZ p0=new XYZ(0,0,0); XYZ p1=new XYZ(size,0,0); XYZ p2=new XYZ(size,size,0); XYZ p3=new XYZ(0,size,0);\nXYZ p4=new XYZ(0,0,size); XYZ p5=new XYZ(size,0,size); XYZ p6=new XYZ(size,size,size); XYZ p7=new XYZ(0,size,size);\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p0,p1,p2,p3}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p7,p6,p5,p4}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p0,p4,p5,p1}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p1,p5,p6,p2}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p2,p6,p7,p3}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p3,p7,p4,p0}, ElementId.InvalidElementId));\nbuilder.CloseConnectedFaceSet();\nbuilder.Build();\nTessellatedShapeBuilderResult result = builder.GetBuildResult();\nDirectShape ds = DirectShape.CreateElement(doc, new ElementId(BuiltInCategory.OST_GenericModel));\n\nif (ds != null)\n{\n    ds.SetShape(result.GetGeometricalObjects());\n    ds.Name = \"DirectShape Box\";\n}"}
{"prompt":"Obtén una lista de todas las vistas de planta del proyecto.","completion":"List<ViewPlan> planViews = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().Where(v => !v.IsTemplate).ToList();"}
{"prompt":"Update the type of a selected floor to 'Concrete 12cm'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a floor\");\n\nif (pickedRef != null)\n{\n    Floor floorToChange = doc.GetElement(pickedRef) as Floor;\n    FloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name == \"Concrete 12cm\");\n    \n    if (floorToChange != null && newType != null)\n    {\n        floorToChange.ChangeTypeId(newType.Id);\n    }\n}"}
{"prompt":"Copia todos los elementos del Nivel 1 al Nivel 2.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\nLevel level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 2\") as Level;\nif (level1 != null && level2 != null)\n{\n    ICollection<ElementId> elementsToCopy = new FilteredElementCollector(doc, level1.Id).WhereElementIsNotElementType().ToElementIds();\n    double elevationDiff = level2.ProjectElevation - level1.ProjectElevation;\n    XYZ translation = new XYZ(0, 0, elevationDiff);\n    if(elementsToCopy.Any())\n    {\n        ElementTransformUtils.CopyElements(doc, elementsToCopy, translation);\n    }\n}"}
{"prompt":"Localiza todos los muros con un parámetro 'Marca' vacío y asigna 'WM-01'.","completion":"List<Wall> walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>().ToList();\nforeach(var w in walls)\n{\n  Parameter p = w.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n  if(p != null && !p.IsReadOnly && string.IsNullOrEmpty(p.AsString()))\n  {\n      p.Set(\"WM-01\");\n  }\n}"}
{"prompt":"Dimension the length of a user-selected wall.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference wallRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a wall to dimension\");\n\nif (wallRef != null)\n{\n    Wall wall = doc.GetElement(wallRef) as Wall;\n    View activeView = doc.ActiveView;\n\n    if (wall != null && activeView != null)\n    {\n        LocationCurve locCurve = wall.Location as LocationCurve;\n        if (locCurve != null)\n        {\n            Line wallLine = locCurve.Curve as Line;\n            if (wallLine != null)\n            {\n                ReferenceArray refs = new ReferenceArray();\n                refs.Append(wallLine.GetEndPointReference(0));\n                refs.Append(wallLine.GetEndPointReference(1));\n                XYZ pt1 = wallLine.GetEndPoint(0).Add(XYZ.BasisZ * 2);\n                XYZ pt2 = wallLine.GetEndPoint(1).Add(XYZ.BasisZ * 2);\n                Line dimLine = Line.CreateBound(pt1, pt2);\n                doc.Create.NewDimension(activeView, dimLine, refs);\n            }\n        }\n    }\n}"}
{"prompt":"Pinta la cara interior de los muros exteriores con 'Pintura Blanca'.","completion":"using(Transaction t = new Transaction(doc, \"Paint Walls\"))\n{\n    t.Start();\n    Material paintMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m => m.Name == \"Pintura Blanca\");\n    var exteriorWalls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Cast<Wall>().Where(w => w.WallType.Function == WallFunction.Exterior).ToList();\n    if(paintMaterial != null)\n    {\n        foreach (Wall w in exteriorWalls)\n        {\n            IList<Reference> interiorFaceRefs = HostObjectUtils.GetSideFaces(w, ShellLayerType.Interior);\n            if(interiorFaceRefs.Count > 0)\n            {\n                Face interiorFace = w.GetGeometryObjectFromReference(interiorFaceRefs.First()) as Face;\n                if (interiorFace != null)\n                {\n                    doc.Paint(w.Id, interiorFace, paintMaterial.Id);\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Change the type of a selected floor to 'Concrete 11cm'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a floor\");\n\nif (pickedRef != null)\n{\n    Floor floorToChange = doc.GetElement(pickedRef) as Floor;\n    FloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name == \"Concrete 11cm\");\n    \n    if (floorToChange != null && newType != null)\n    {\n        floorToChange.ChangeTypeId(newType.Id);\n    }\n}"}
{"prompt":"Añade un plano de referencia horizontal llamado 'Eje Central A'.","completion":"using (Transaction t = new Transaction(doc, \"Add Reference Plane\"))\n{\n    t.Start();\n    string rpName = \"Eje Central A\";\n    View activeView = doc.ActiveView;\n\n    if (activeView != null)\n    {\n        XYZ bubbleEnd = new XYZ(0, 10, 0);\n        XYZ freeEnd = new XYZ(10, 10, 0);\n        XYZ cutVec = XYZ.BasisZ;\n        ReferencePlane rp = doc.Create.NewReferencePlane(bubbleEnd, freeEnd, cutVec, activeView);\n        if (rp != null)\n        {\n            rp.Name = rpName;\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea los worksets 'Arquitectura', 'Estructura' y 'MEP'.","completion":"if (doc.IsWorkshared)\n{\n    Workset.Create(doc, \"Arquitectura\");\n    Workset.Create(doc, \"Estructura\");\n    Workset.Create(doc, \"MEP\");\n}"}
{"prompt":"Obtén la geometría sólida de un elemento seleccionado.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un elemento para obtener su geometría\");\n\nList<Solid> solids = new List<Solid>();\nif (pickedRef != null)\n{\n    Element elem = doc.GetElement(pickedRef);\n    if (elem != null)\n    {\n        Options opt = new Options() { ComputeReferences = true, DetailLevel = ViewDetailLevel.Fine };\n        GeometryElement geoElem = elem.get_Geometry(opt);\n        if (geoElem != null)\n        {\n            solids = geoElem.OfType<Solid>().Where(s => s.Volume > 0).ToList();\n        }\n    }\n}"}
{"prompt":"Selecciona todos los muros del 'Nivel 6' y cambia su comentario a 'REVISAR AISLAMIENTO'.","completion":"string levelName = \"Nivel 6\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(targetLevel.Id);\n    FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(levelFilter);\n    foreach (Element wall in collector)\n    {\n        Parameter commentsParam = wall.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n        if (commentsParam != null && !commentsParam.IsReadOnly) { commentsParam.Set(\"REVISAR AISLAMIENTO\"); }\n    }\n}"}
{"prompt":"Create a text note with given text, location, and target element.","completion":"using (Transaction t = new Transaction(doc, \"Create Text Note\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference targetRef = localUidoc.Selection.PickObject(ObjectType.Element, \"Select an element to annotate\");\n    XYZ textLocation = localUidoc.Selection.PickPoint(\"Choose the text location\");\n\n    View activeView = doc.ActiveView;\n    ElementId defaultTypeId = doc.GetDefaultElementTypeId(ElementTypeGroup.TextNoteType);\n\n    if (targetRef != null && textLocation != null && activeView != null && defaultTypeId != ElementId.InvalidElementId)\n    {\n        TextNoteOptions opts = new TextNoteOptions(defaultTypeId);\n        TextNote note = TextNote.Create(doc, activeView.Id, textLocation, \"REVIEW CLASH\", opts);\n        if (note != null)\n        {\n            note.AddLeader(TextNoteLeaderTypes.TNLT_STRAIGHT_L).End = targetRef.GlobalPoint;\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Generate a new Level named 'Level 9' at an elevation of 9 meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(9, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Level 9\";\n}"}
{"prompt":"Generate a report with the area of all rooms in the project.","completion":"List<Room> rooms = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>().ToList();"}
{"prompt":"Inserta un nivel llamado 'Nivel Azotea' a 15.0 metros.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(15.0, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Nivel Azotea\";\n}"}
{"prompt":"Inserta una instancia de la familia 'Mesa de Oficina' en el centro de la habitación 'Despacho 104'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 104\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Mesa de Oficina\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);"}
{"prompt":"Recupera una lista de todas las vistas de planta del proyecto.","completion":"List<ViewPlan> planViews = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().Where(v => !v.IsTemplate).ToList();"}
{"prompt":"Coloca un rociador en las coordenadas (2,2,3).","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol sprinklerSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Sprinklers).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (level != null && sprinklerSymbol != null)\n{\n    if (!sprinklerSymbol.IsActive) sprinklerSymbol.Activate();\n    XYZ placementPoint = new XYZ(UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters));\n    doc.Create.NewFamilyInstance(placementPoint, sprinklerSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n}"}
{"prompt":"Create an MEP space for each room on Level 8","completion":"string levelName = \"Level 8\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    FilteredElementCollector roomCollector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WherePasses(new ElementLevelFilter(targetLevel.Id));\n    foreach (Room room in roomCollector.ToElements().Cast<Room>())\n    {\n        LocationPoint locPoint = room.Location as LocationPoint;\n        if (locPoint != null)\n        {\n            UV point = new UV(locPoint.Point.X, locPoint.Point.Y);\n            doc.Create.NewSpace(targetLevel, point);\n        }\n    }\n}"}
{"prompt":"Generate a new room on Level 1 at point (5, 15).","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\n\nif (level1 != null)\n{\n    UV point = new UV(5, 15);\n    Room room = doc.Create.NewRoom(level1, point);\n}"}
{"prompt":"Reload the Revit link 'Structure_LINK.rvt'.","completion":"RevitLinkType linkType = new FilteredElementCollector(doc).OfClass(typeof(RevitLinkType)).Cast<RevitLinkType>().FirstOrDefault(lt => lt.Name == \"Structure_LINK.rvt\");\n\nif (linkType != null)\n{\n    linkType.Reload();\n}"}
{"prompt":"Clone level 1 with a 2m offset and name it 'Mezzanine'.","completion":"string levelName = \"Mezzanine\";\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\n\nif (level1 != null)\n{\n    double newElevation = level1.ProjectElevation + UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, newElevation);\n    if (newLevel != null)\n    {\n        newLevel.Name = levelName;\n    }\n}"}
{"prompt":"Activate all family symbols loaded in the project.","completion":"List<FamilySymbol> symbols = new FilteredElementCollector(doc).OfClass(typeof(FamilySymbol)).Cast<FamilySymbol>().ToList();\nforeach (var sym in symbols)\n{\n    if (!sym.IsActive) \n    {\n        sym.Activate();\n    }\n}"}
{"prompt":"Actualiza el nombre de la vista activa a 'Plano de Fontanería'.","completion":"string newName = \"Plano de Fontanería\";\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.Name = newName;\n}"}
{"prompt":"Build a new Level named 'Level 1' at an elevation of 7 meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(7, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Level 1\";\n}"}
{"prompt":"Recupera todas las habitaciones que están en el Nivel 3.","completion":"Level level3 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 3\") as Level;\nList<Element> roomsOnLevel3 = new List<Element>();\n\nif (level3 != null)\n{\n    roomsOnLevel3 = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Where(r => r.LevelId == level3.Id).ToList();\n}"}
{"prompt":"Place an instance of the 'Office Desk' family in the center of the 'Office 103' room.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Office 103\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Office Desk\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);"}
{"prompt":"Generate a report with the area of all rooms in the project.","completion":"List<Room> rooms = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>().ToList();"}
{"prompt":"Crea un conducto eléctrico de 25mm de diámetro entre dos puntos.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nElementId conduitTypeId = new FilteredElementCollector(doc).OfClass(typeof(ConduitType)).FirstElementId();\nif (level != null && conduitTypeId != ElementId.InvalidElementId)\n{\n    XYZ startPoint = new XYZ(0, 0, 10);\n    XYZ endPoint = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0, 10);\n    Conduit conduit = Conduit.Create(doc, conduitTypeId, startPoint, endPoint, level.Id);\n    if (conduit != null)\n    {\n        Parameter diameterParam = conduit.get_Parameter(BuiltInParameter.RBS_CONDUIT_DIAMETER_PARAM);\n        if (diameterParam != null && !diameterParam.IsReadOnly)\n        {\n            diameterParam.Set(UnitUtils.ConvertToInternalUnits(25, UnitTypeId.Millimeters));\n        }\n    }\n}"}
{"prompt":"Clona la vista 'Nivel 1' como una vista dependiente.","completion":"ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v => v.Name == \"Nivel 1\") as ViewPlan;\n\nif (viewToDuplicate != null)\n{\n    ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n}"}
{"prompt":"Crea una tubería con un diámetro de 150mm.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nPipeType pipeType = new FilteredElementCollector(doc).OfClass(typeof(PipeType)).FirstOrDefault() as PipeType;\nPipingSystemType systemType = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).FirstOrDefault() as PipingSystemType;\nif (level != null && pipeType != null && systemType != null)\n{\n    XYZ p1 = new XYZ(0,0,0);\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters),0,0);\n    Pipe pipe = Pipe.Create(doc, systemType.Id, pipeType.Id, level.Id, p1, p2);\n    if (pipe != null)\n    {\n        Parameter diameterParam = pipe.get_Parameter(BuiltInParameter.RBS_PIPE_DIAMETER_PARAM);\n        if (diameterParam != null) {\n            diameterParam.Set(UnitUtils.ConvertToInternalUnits(150, UnitTypeId.Millimeters));\n        }\n    }\n}"}
{"prompt":"Define the sill height of all windows to 1 meter.","completion":"using (Transaction t = new Transaction(doc, \"Set Sill Height\"))\n{\n    t.Start();\n    double sillHeight = 1 \/ 0.3048;\n    List<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\n    foreach(FamilyInstance window in windows)\n    {\n        Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n        if (sillHeightParam != null && !sillHeightParam.IsReadOnly)\n        {\n            sillHeightParam.Set(sillHeight);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea un DirectShape esférico con un radio de 5 metros.","completion":"using (Transaction t = new Transaction(doc, \"Create Sphere DirectShape\"))\n{\n    t.Start();\n    double radius = 5 \/ 0.3048;\n    List<GeometryObject> solids = new List<GeometryObject>();\n    Frame frame = new Frame(XYZ.Zero, XYZ.BasisX, XYZ.BasisY, XYZ.BasisZ);\n    Arc arc = Arc.Create(frame.Origin, radius, 0, Math.PI, frame.BasisX, frame.BasisY);\n    Line line = Line.CreateBound(arc.GetEndPoint(1), arc.GetEndPoint(0));\n    CurveLoop profile = CurveLoop.Create(new List<Curve> { arc, line });\n    Solid sphere = GeometryCreationUtilities.CreateRevolvedGeometry(frame, new List<CurveLoop> { profile }, 0, 2 * Math.PI);\n    solids.Add(sphere);\n    DirectShape ds = DirectShape.CreateElement(doc, new ElementId(BuiltInCategory.OST_GenericModel));\n\n    if (ds != null)\n    {\n        ds.SetShape(solids);\n        ds.Name = \"Esfera DirectShape\";\n    }\n    t.Commit();\n}"}
{"prompt":"Dimension the length of a user-selected wall.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference wallRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a wall to dimension\");\n\nif (wallRef != null)\n{\n    Wall wall = doc.GetElement(wallRef) as Wall;\n    View activeView = doc.ActiveView;\n\n    if (wall != null && activeView != null)\n    {\n        LocationCurve locCurve = wall.Location as LocationCurve;\n        if (locCurve != null)\n        {\n            Line wallLine = locCurve.Curve as Line;\n            if (wallLine != null)\n            {\n                ReferenceArray refs = new ReferenceArray();\n                refs.Append(wallLine.GetEndPointReference(0));\n                refs.Append(wallLine.GetEndPointReference(1));\n                XYZ pt1 = wallLine.GetEndPoint(0).Add(XYZ.BasisZ * 2);\n                XYZ pt2 = wallLine.GetEndPoint(1).Add(XYZ.BasisZ * 2);\n                Line dimLine = Line.CreateBound(pt1, pt2);\n                doc.Create.NewDimension(activeView, dimLine, refs);\n            }\n        }\n    }\n}"}
{"prompt":"Include the 'Level', 'Mark', and 'Volume' fields to the column schedule.","completion":"ViewSchedule schedule = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().FirstOrDefault(s => s.Name.Contains(\"Column\"));\nif (schedule != null)\n{\n    ScheduleDefinition def = schedule.Definition;\n    SchedulableField levelField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.FAMILY_LEVEL_PARAM);\n    if (levelField != null) def.AddField(levelField);\n    SchedulableField markField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.ALL_MODEL_MARK);\n    if (markField != null) def.AddField(markField);\n    SchedulableField volumeField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.HOST_VOLUME_COMPUTED);\n    if (volumeField != null) def.AddField(volumeField);\n}"}
{"prompt":"Coloca una ventana de 1 metro de ancho y 1.2 metros de alto en un muro, creando un nuevo tipo si es necesario.","completion":"Wall hostWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nFamilySymbol originalSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (originalSymbol != null && hostWall != null)\n{\n    \/\/ Duplica el tipo para no modificar el original\n    string newTypeName = $\"Window 1.0m x 1.2m - {Guid.NewGuid().ToString().Substring(0, 4)}\";\n    FamilySymbol newSymbol = originalSymbol.Duplicate(newTypeName) as FamilySymbol;\n\n    \/\/ Activa el nuevo tipo si no lo está\n    if (!newSymbol.IsActive)\n    {\n        newSymbol.Activate();\n    }\n\n    \/\/ Establece las dimensiones en el nuevo tipo\n    Parameter widthParam = newSymbol.LookupParameter(\"Width\");\n    if(widthParam != null) widthParam.Set(UnitUtils.ConvertToInternalUnits(1.0, UnitTypeId.Meters));\n\n    Parameter heightParam = newSymbol.LookupParameter(\"Height\");\n    if(heightParam != null) heightParam.Set(UnitUtils.ConvertToInternalUnits(1.2, UnitTypeId.Meters));\n\n    \/\/ Obtén la información necesaria para la inserción\n    Level level = doc.GetElement(hostWall.LevelId) as Level;\n    LocationCurve locationCurve = hostWall.Location as LocationCurve;\n    if (locationCurve != null)\n    {\n        XYZ insertionPoint = locationCurve.Curve.Evaluate(0.5, true);\n        \/\/ Inserta una instancia del NUEVO tipo\n        doc.Create.NewFamilyInstance(insertionPoint, newSymbol, hostWall, level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Coloca una instancia de la familia 'Ventana Fija 120x60' en el centro de la habitación 'Despacho 101'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 101\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Ventana Fija 120x60\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);"}
{"prompt":"Reproduce el tipo de muro 'Genérico - 147mm' y nómbralo 'Interior - 17cm Yeso'.","completion":"string originalName = \"Genérico - 147mm\";\nstring newName = \"Interior - 17cm Yeso\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif(originalType!=null)\n    originalType.Duplicate(newName);"}
{"prompt":"Extrae todas las instancias de la categoría Mobiliario.","completion":"List<Element> furnitureInstances = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsNotElementType().ToList();"}
{"prompt":"Change the height of the selected walls to 3.5 meters.","completion":"ICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nif (selectedIds.Any())\n{\n    double newHeight = UnitUtils.ConvertToInternalUnits(3.5, UnitTypeId.Meters);\n    foreach (ElementId id in selectedIds)\n    {\n        Element elem = doc.GetElement(id);\n        if (elem != null)\n        {\n            Parameter heightParam = elem.get_Parameter(BuiltInParameter.WALL_USER_HEIGHT_PARAM);\n            if (heightParam != null && !heightParam.IsReadOnly)\n            {\n                heightParam.Set(newHeight);\n            }\n        }\n    }\n}"}
{"prompt":"Get a list of all plan views in the project.","completion":"List<ViewPlan> planViews = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().Where(v => !v.IsTemplate).ToList();"}
{"prompt":"Construct a stair between Level 1 and Level 2.","completion":"\/\/ This is a complex operation that requires multiple steps and\/or user interaction and is not supported by the agent."}
{"prompt":"Update the type of a selected floor to 'Concrete 18cm'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a floor\");\n\nif (pickedRef != null)\n{\n    Floor floorToChange = doc.GetElement(pickedRef) as Floor;\n    FloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name == \"Concrete 18cm\");\n    \n    if (floorToChange != null && newType != null)\n    {\n        floorToChange.ChangeTypeId(newType.Id);\n    }\n}"}
{"prompt":"Crea un pilar del tipo 'Hormigón-Rectangular 30x60' en cada intersección de la rejilla.","completion":"using (Transaction t = new Transaction(doc, \"Create Columns at Grids\"))\n{\n    t.Start();\n    FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(s => s.Name == \"Hormigón-Rectangular 30x60\");\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderBy(l => l.Elevation).FirstOrDefault();\n    List<Grid> grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().ToList();\n    if (columnSymbol != null && level != null)\n    {\n        if (!columnSymbol.IsActive) columnSymbol.Activate();\n        for (int i = 0; i < grids.Count; i++)\n        {\n            for (int j = i + 1; j < grids.Count; j++)\n            {\n                IntersectionResultArray results;\n                if(grids[i].Curve.Intersect(grids[j].Curve, out results) == SetComparisonResult.Overlap)\n                {\n                    if (results != null && !results.IsEmpty)\n                    {\n                        foreach (IntersectionResult ir in results)\n                        {\n                            doc.Create.NewFamilyInstance(ir.XYZPoint, columnSymbol, level, StructuralType.Column);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Assign the visibility of the 'Furniture' category to false in the active view.","completion":"Category furnitureCat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Furniture);\nif (furnitureCat != null && doc.ActiveView != null)\n{\n    doc.ActiveView.SetCategoryHidden(furnitureCat.Id, true);\n}"}
{"prompt":"Crea un suelo con un hueco circular en el centro.","completion":"using (Transaction t = new Transaction(doc, \"Create Floor with Hole\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    FloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\n\n    if (level != null && floorType != null)\n    {\n        XYZ p1 = new XYZ(-10 \/ 0.3048, -10 \/ 0.3048, 0);\n        XYZ p2 = new XYZ(10 \/ 0.3048, -10 \/ 0.3048, 0);\n        XYZ p3 = new XYZ(10 \/ 0.3048, 10 \/ 0.3048, 0);\n        XYZ p4 = new XYZ(-10 \/ 0.3048, 10 \/ 0.3048, 0);\n        CurveLoop outerLoop = new CurveLoop();\n        outerLoop.Append(Line.CreateBound(p1, p2));\n        outerLoop.Append(Line.CreateBound(p2, p3));\n        outerLoop.Append(Line.CreateBound(p3, p4));\n        outerLoop.Append(Line.CreateBound(p4, p1));\n\n        XYZ center = XYZ.Zero;\n        double radius = 2 \/ 0.3048;\n        CurveLoop innerLoop = new CurveLoop();\n        innerLoop.Append(Arc.Create(center - XYZ.BasisX * radius, center + XYZ.BasisX * radius, center + XYZ.BasisY * radius));\n        innerLoop.Append(Arc.Create(center + XYZ.BasisX * radius, center - XYZ.BasisX * radius, center - XYZ.BasisY * radius));\n\n        Floor.Create(doc, new List<CurveLoop> { outerLoop, innerLoop }, floorType.Id, level.Id);\n    }\n    t.Commit();\n}"}
{"prompt":"Get a list of all project warnings.","completion":"IList<FailureMessage> warnings = doc.GetWarnings();\nList<string> warningDescriptions = warnings.Select(w => w.GetDescriptionText()).ToList();\n"}
{"prompt":"Encuentra todas las puertas del Nivel 4 que sean de la familia 'M_Chair-Breuer'.","completion":"string levelName = \"Nivel 4\";\nstring familyName = \"M_Chair-Breuer\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WherePasses(new ElementLevelFilter(targetLevel.Id));\n    List<ElementId> doorIds = new List<ElementId>();\n    foreach (Element door in collector)\n    {\n        FamilyInstance fi = door as FamilyInstance;\n        if (fi != null && fi.Symbol.Family.Name == familyName)\n        {\n            doorIds.Add(door.Id);\n        }\n    }\n    uidoc.Selection.SetElementIds(doorIds);\n}"}
{"prompt":"Assign the sill height of all windows to 901mm.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits(901, UnitTypeId.Millimeters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Create a new room on Level 6 at point (7, 5).","completion":"string levelName = \"Level 6\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    UV point = new UV(7, 5);\n    Room newRoom = doc.Create.NewRoom(targetLevel, point);\n}"}
{"prompt":"Etiqueta todos los muros en la vista actual.","completion":"View activeView = doc.ActiveView;\nif (activeView == null) return;\n\nFilteredElementCollector collector = new FilteredElementCollector(doc, activeView.Id)\n    .OfCategory(BuiltInCategory.OST_Walls)\n    .WhereElementIsNotElementType();\n\nIList<Element> elementsToTag = collector.ToElements();\n\nif (elementsToTag.Any())\n{\n    foreach (Element elem in elementsToTag)\n    {\n        Reference elemRef = new Reference(elem);\n        BoundingBoxXYZ bbox = elem.get_BoundingBox(activeView);\n        if (bbox == null) continue;\n\n        XYZ tagLocation = (bbox.Min + bbox.Max) \/ 2.0;\n        IndependentTag.Create(doc, activeView.Id, elemRef, true, TagMode.TM_ADDBY_CATEGORY, TagOrientation.Horizontal, tagLocation);\n    }\n}"}
{"prompt":"Construct an MEP space for each room on Level 1","completion":"string levelName = \"Level 1\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    FilteredElementCollector roomCollector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WherePasses(new ElementLevelFilter(targetLevel.Id));\n    foreach (Room room in roomCollector.ToElements().Cast<Room>())\n    {\n        LocationPoint locPoint = room.Location as LocationPoint;\n        if (locPoint != null)\n        {\n            UV point = new UV(locPoint.Point.X, locPoint.Point.Y);\n            doc.Create.NewSpace(targetLevel, point);\n        }\n    }\n}"}
{"prompt":"Selecciona todos los muros del 'Nivel 3' y cambia su comentario a 'REVISAR AISLAMIENTO'.","completion":"string levelName = \"Nivel 3\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(targetLevel.Id);\n    FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(levelFilter);\n    foreach (Element wall in collector)\n    {\n        Parameter commentsParam = wall.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n        if (commentsParam != null && !commentsParam.IsReadOnly) { commentsParam.Set(\"REVISAR AISLAMIENTO\"); }\n    }\n}"}
{"prompt":"Crea una nueva tabla de planificación para ventanas que incluya Marca de Tipo, Ancho y Alto.","completion":"string scheduleName = \"Tabla de Ventanas\";\nViewSchedule schedule = ViewSchedule.CreateSchedule(doc, new ElementId(BuiltInCategory.OST_Windows));\n\nif (schedule != null)\n{\n    schedule.Name = scheduleName;\n    ScheduleDefinition def = schedule.Definition;\n    if (def != null)\n    {\n        SchedulableField typeMarkField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.ALL_MODEL_TYPE_MARK);\n        SchedulableField widthField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.FAMILY_WIDTH_PARAM);\n        SchedulableField heightField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.FAMILY_HEIGHT_PARAM);\n        \n        if (typeMarkField != null) def.AddField(typeMarkField);\n        if (widthField != null) def.AddField(widthField);\n        if (heightField != null) def.AddField(heightField);\n    }\n}"}
{"prompt":"Define the sill height of all windows to 1 meter.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Aplica la plantilla de vista 'Plantilla Arquitectónica' a la vista activa.","completion":"View activeView = doc.ActiveView;\nView viewTemplate = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().FirstOrDefault(v => v.IsTemplate && v.Name == \"Plantilla Arquitectónica\");\n\nif (activeView != null && viewTemplate != null)\n{\n    activeView.ViewTemplateId = viewTemplate.Id;\n}"}
{"prompt":"Find all doors on Level 3 that belong to the 'Single-Flush' family.","completion":"string levelName = \"Level 3\";\nstring familyName = \"Single-Flush\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WherePasses(new ElementLevelFilter(targetLevel.Id));\n    List<ElementId> doorIds = new List<ElementId>();\n    foreach (Element door in collector)\n    {\n        FamilyInstance fi = door as FamilyInstance;\n        if (fi != null && fi.Symbol.Family.Name == familyName)\n        {\n            doorIds.Add(door.Id);\n        }\n    }\n    uidoc.Selection.SetElementIds(doorIds);\n}"}
{"prompt":"Construct a new level named 'Mezzanine' at 8.0 meters elevation.","completion":"string levelName = \"Mezzanine\";\ndouble elevation = UnitUtils.ConvertToInternalUnits(8.0, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Inserta las vistas 'Planta Nivel 1' y 'Planta Nivel 2' en el plano 'A-101'.","completion":"ViewSheet sheet = new FilteredElementCollector(doc).OfClass(typeof(ViewSheet)).Cast<ViewSheet>().FirstOrDefault(s => s.SheetNumber == \"A-101\");\nView view1 = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().FirstOrDefault(v => v.Name == \"Planta Nivel 1\");\nView view2 = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().FirstOrDefault(v => v.Name == \"Planta Nivel 2\");\nif (sheet != null && view1 != null && view2 != null)\n{\n    XYZ insertPoint1 = new XYZ(1.0, 1.0, 0);\n    Viewport.Create(doc, sheet.Id, view1.Id, insertPoint1);\n    XYZ insertPoint2 = new XYZ(1.0, 2.0, 0);\n    Viewport.Create(doc, sheet.Id, view2.Id, insertPoint2);\n}"}
{"prompt":"Create an electrical circuit connecting light fixtures to a panel.","completion":"using (Transaction t = new Transaction(doc, \"Create Electrical Circuit\"))\n{\n    t.Start();\n    FamilyInstance panel = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_ElectricalEquipment).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\n    List<ElementId> fixtureIds = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsNotElementType().ToElementIds().ToList();\n\n    if (panel != null && fixtureIds.Count > 0)\n    {\n        ElectricalSystem electricalSystem = ElectricalSystem.Create(doc, fixtureIds, ElectricalSystemType.PowerCircuit);\n        if(electricalSystem != null)\n        {\n            electricalSystem.SelectPanel(panel);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Generate a new room on Level 5 at point (14, 9).","completion":"string levelName = \"Level 5\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    UV point = new UV(14, 9);\n    Room newRoom = doc.Create.NewRoom(targetLevel, point);\n}"}
{"prompt":"Generate a 'Concrete-Rectangular 30x60' column at each grid intersection.","completion":"using (Transaction t = new Transaction(doc, \"Create Columns at Grids\"))\n{\n    t.Start();\n    FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(s => s.Name == \"Concrete-Rectangular 30x60\");\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderBy(l => l.Elevation).FirstOrDefault();\n    List<Grid> grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().ToList();\n    if (columnSymbol != null && level != null)\n    {\n        if (!columnSymbol.IsActive) columnSymbol.Activate();\n        for (int i = 0; i < grids.Count; i++)\n        {\n            for (int j = i + 1; j < grids.Count; j++)\n            {\n                IntersectionResultArray results;\n                if(grids[i].Curve.Intersect(grids[j].Curve, out results) == SetComparisonResult.Overlap)\n                {\n                    if (results != null && !results.IsEmpty)\n                    {\n                        foreach (IntersectionResult ir in results)\n                        {\n                            doc.Create.NewFamilyInstance(ir.XYZPoint, columnSymbol, level, StructuralType.Column);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea una vista 3D orientada desde el sureste.","completion":"string viewName = \"Vista 3D Sureste\";\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft != null)\n{\n    View3D view3d = View3D.CreateIsometric(doc, vft.Id);\n    if (view3d != null)\n    {\n        XYZ eye = new XYZ(1, -1, 1);\n        XYZ up = new XYZ(0, 0, 1);\n        XYZ forward = new XYZ(-1, 1, -1);\n        view3d.SetOrientation(new ViewOrientation3D(eye, up, forward));\n        view3d.Name = viewName;\n    }\n}"}
{"prompt":"Pivot the given element 45 degrees about its center.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select an element to rotate\");\n\nif (pickedRef != null)\n{\n    Element elem = doc.GetElement(pickedRef.ElementId);\n    if (elem != null)\n    {\n        LocationPoint lp = elem.Location as LocationPoint;\n        if (lp != null)\n        {\n            Line axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\n            double angle = 45 * Math.PI \/ 180.0;\n            ElementTransformUtils.RotateElement(doc, elem.Id, axis, angle);\n        }\n    }\n}"}
{"prompt":"Oculta todos los elementos de anotación en la vista activa.","completion":"if (doc.ActiveView != null)\n{\n    List<BuiltInCategory> annotationCategories = new List<BuiltInCategory>\n    {\n        BuiltInCategory.OST_GenericAnnotation,\n        BuiltInCategory.OST_TextNotes,\n        BuiltInCategory.OST_Tags,\n        BuiltInCategory.OST_Dimensions,\n        BuiltInCategory.OST_DetailComponents\n    };\n    ElementMulticategoryFilter multiCategoryFilter = new ElementMulticategoryFilter(annotationCategories);\n    ICollection<ElementId> elementsToHide = new FilteredElementCollector(doc, doc.ActiveView.Id).WherePasses(multiCategoryFilter).ToElementIds();\n    if(elementsToHide.Any())\n    {\n        doc.ActiveView.HideElements(elementsToHide);\n    }\n}"}
{"prompt":"Incorpora un nivel llamado 'Nivel Azotea' a 15.0 metros.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(15.0, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Nivel Azotea\";\n}"}
{"prompt":"Modela una cuadrícula de columnas 5x5 con separación de 8 metros.","completion":"FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (columnSymbol != null && level != null)\n{\n    if(!columnSymbol.IsActive) columnSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters);\n    for(int i=0; i<5; i++)\n    {\n        for(int j=0; j<5; j++)\n        {\n            doc.Create.NewFamilyInstance(new XYZ(i*spacing, j*spacing, 0), columnSymbol, level, StructuralType.Column);\n        }\n    }\n}"}
{"prompt":"Assign the 'Comments' parameter for all doors on Level 1 to 'Fire Rating - 93 min'.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\n\nif (level1 != null)\n{\n    List<FamilyInstance> doorsOnLevel1 = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsNotElementType().Cast<FamilyInstance>().Where(fi => fi.LevelId == level1.Id).ToList();\n    foreach(FamilyInstance door in doorsOnLevel1)\n    {\n        Parameter commentsParam = door.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n        if (commentsParam != null && !commentsParam.IsReadOnly) commentsParam.Set(\"Fire Rating - 93 min\");\n    }\n}"}
{"prompt":"Coloca una instancia de la familia 'Ventana Fija 117x60' en el centro de la habitación 'Despacho 99'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 117\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Ventana Fija 99x60\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);"}
{"prompt":"Create a new level 'Level 1' at an elevation of 8 meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\nif (newLevel != null)\n{\n    try { newLevel.Name = \"Level 1\"; } catch {}\n}"}
{"prompt":"Create a new A1 sheet and place the 'Ground Floor' view on it.","completion":"using (Transaction t = new Transaction(doc, \"Create Sheet\"))\n{\n    t.Start();\n    string sheetNumber = \"A-101\";\n    FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(tb => tb.Name.Contains(\"A1\"));\n    View viewToPlace = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<View>().FirstOrDefault(v => v.Name == \"Ground Floor\");\n\n    if (titleBlock != null && viewToPlace != null)\n    {\n        ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n        if (newSheet != null)\n        {\n            newSheet.Name = \"Architectural Plan - Ground Floor\";\n            newSheet.SheetNumber = sheetNumber;\n            BoundingBoxUV sheetBox = newSheet.Outline;\n            UV centerUv = (sheetBox.Min + sheetBox.Max) \/ 2;\n            XYZ centerPoint = new XYZ(centerUv.U, centerUv.V, 0);\n            Viewport.Create(doc, newSheet.Id, viewToPlace.Id, centerPoint);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create a new room on Level 1 at point (10, 10).","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\n\nif (level1 != null)\n{\n    UV point = new UV(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters));\n    Room room = doc.Create.NewRoom(level1, point);\n}"}
{"prompt":"Generate a new elevation view looking south.","completion":"string viewName = \"South Elevation (New)\";\nViewFamilyType elevationVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(vft => vft.ViewFamily == ViewFamily.Elevation);\nElevationMarker marker = ElevationMarker.CreateElevationMarker(doc, elevationVFT.Id, new XYZ(0, -20, 0), 100);\nView aev = marker.CreateElevation(doc, doc.ActiveView.Id, 0);\naev.Name = viewName;"}
{"prompt":"Exporta el documento a un archivo IFC con la versión IFC4x3.","completion":"string folderPath = \"C:\/RevitExports\/\";\nstring fileName = doc.Title + \"_IFC4x3.ifc\";\nif(System.IO.Directory.Exists(folderPath))\n{\n    IFCExportOptions options = new IFCExportOptions();\n    options.FileVersion = IFCVersion.IFC4x3;\n    doc.Export(folderPath, fileName, options);\n}"}
{"prompt":"Extrae todas las subcategorías de la categoría Muros.","completion":"Category wallCat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Walls);\nCategoryNameMap subcategories = wallCat.SubCategories;"}
{"prompt":"Insert lighting posts every 10m along a 100m path.","completion":"FamilySymbol lightSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsElementType().FirstOrDefault(s => s.Name.Contains(\"Post\") || s.Name.Contains(\"Pole\")) as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (lightSymbol != null && level != null)\n{\n    if (!lightSymbol.IsActive)\n    {\n        lightSymbol.Activate();\n    }\n    double spacing = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\n    double pathLength = UnitUtils.ConvertToInternalUnits(100, UnitTypeId.Meters);\n    int postCount = (int)(pathLength \/ spacing);\n    for (int i = 0; i <= postCount; i++)\n    {\n        XYZ point = new XYZ(i * spacing, 0, 0);\n        doc.Create.NewFamilyInstance(point, lightSymbol, level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Clona el nivel 6 con un desfase de 6m y llámalo 'Mezanine'.","completion":"string levelName = \"Nivel 6\";\nLevel levelToCopy = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (levelToCopy != null)\n{\n    double offset = UnitUtils.ConvertToInternalUnits(6, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, levelToCopy.Elevation + offset);\n    newLevel.Name = \"Mezanine\";\n}"}
{"prompt":"Insert an instance of the 'Office Desk' family in the center of the 'Office 100' room.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Office 100\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Office Desk\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);"}
{"prompt":"Duplica el tipo de muro 'Genérico - 121mm' y nómbralo 'Interior - 15cm Yeso'.","completion":"string originalName = \"Genérico - 121mm\";\nstring newName = \"Interior - 15cm Yeso\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif (originalType != null)\n{\n    WallType newType = originalType.Duplicate(newName) as WallType;\n}"}
{"prompt":"Define the 'Mark' parameter of all selected walls to 'W-EXT-4'.","completion":"using (Transaction t = new Transaction(doc, \"Set Wall Mark\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    ICollection<ElementId> selectedIds = localUidoc.Selection.GetElementIds();\n\n    if (selectedIds != null && selectedIds.Count > 4)\n    {\n        foreach(ElementId id in selectedIds)\n        {\n            Element elem = doc.GetElement(id);\n            if(elem is Wall)\n            {\n                Parameter markParam = elem.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n                if (markParam != null && !markParam.IsReadOnly) markParam.Set(\"W-EXT-01\");\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Find the structural column type named \"300 x 450mm\" and place it at X=-8, Y=12.","completion":"string columnTypeName = \"300 x 450mm\";\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(s => s.Name == columnTypeName);\n\nif (level != null && columnSymbol != null)\n{\n    if (!columnSymbol.IsActive) { columnSymbol.Activate(); }\n    doc.Create.NewFamilyInstance(new XYZ(UnitUtils.ConvertToInternalUnits(-8, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(12, UnitTypeId.Meters), 0), columnSymbol, level, StructuralType.Column);\n}"}
{"prompt":"Add a point to the selected Path of Travel.","completion":"\/\/ PathOfTravel related methods like GetPath and Update are likely inaccessible in this environment.\n\/\/ The following code is a placeholder to show the intent.\n\/*\nusing (Transaction t = new Transaction(doc, \"Update Path of Travel\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference pickedRef = localUidoc.Selection.PickObject(ObjectType.Element, \"Select a Path of Travel\");\n\n    if (pickedRef != null)\n    {\n        PathOfTravel pot = doc.GetElement(pickedRef) as PathOfTravel;\n        if (pot != null)\n        {\n            IList<XYZ> points = pot.GetPath();\n            if (points != null && points.Count >= 2)\n            {\n                XYZ midPoint = (points[0] + points[1]) \/ 2;\n                points.Insert(1, midPoint);\n                pot.Update(points);\n            }\n        }\n    }\n    t.Commit();\n}\n*\/"}
{"prompt":"Crea un nuevo Nivel llamado 'Nivel 1' a una elevación de 17 metros.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(17, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Nivel 1\";\n}"}
{"prompt":"Create a new room on Level 1 at point (10, 10).","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nif (level1 != null)\n{\n    UV point = new UV(10, 10);\n    Room newRoom = doc.Create.NewRoom(level1, point);\n}"}
{"prompt":"Oculta la categoría de mobiliario en la vista activa.","completion":"View activeView = doc.ActiveView;\nCategory furnitureCategory = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Furniture);\nif (activeView != null && furnitureCategory != null && furnitureCategory.get_AllowsVisibilityControl(activeView))\n{\n    activeView.SetCategoryHidden(furnitureCategory.Id, true);\n}"}
{"prompt":"Generate an MEP space for each room on Level 9","completion":"string levelName = \"Level 9\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    FilteredElementCollector roomCollector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WherePasses(new ElementLevelFilter(targetLevel.Id));\n    foreach (Room room in roomCollector.ToElements().Cast<Room>())\n    {\n        LocationPoint locPoint = room.Location as LocationPoint;\n        if (locPoint != null)\n        {\n            UV point = new UV(locPoint.Point.X, locPoint.Point.Y);\n            doc.Create.NewSpace(targetLevel, point);\n        }\n    }\n}"}
{"prompt":"Obtén todas las habitaciones en el Nivel 'Primer Piso'.","completion":"Level groundFloor = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Primer Piso\") as Level;\nList<Element> roomsOnGround = new List<Element>();\n\nif (groundFloor != null)\n{\n    roomsOnGround = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Where(r => r.LevelId == groundFloor.Id).ToList();\n}"}
{"prompt":"Clone the 'Generic - 146mm' wall type and name it 'Interior - 17cm Plaster'.","completion":"string originalName = \"Generic - 146mm\";\nstring newName = \"Interior - 17cm Plaster\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif(originalType!=null)\n    originalType.Duplicate(newName);"}
{"prompt":"Crea una familia 'in-situ' para un mostrador de recepción personalizado usando una extrusión.","completion":""}
{"prompt":"Clone level 1 with a 1m offset and name it 'Mezzanine'.","completion":"string levelName = \"Mezzanine\";\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\n\nif (level1 != null)\n{\n    double newElevation = level1.ProjectElevation + UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, newElevation);\n    if (newLevel != null)\n    {\n        newLevel.Name = levelName;\n    }\n}"}
{"prompt":"Create a structural beam between (0,0,3) and (5,0,3) on Level 2.","completion":"FamilySymbol beamType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (beamType != null && level != null)\n{\n    if(!beamType.IsActive) beamType.Activate();\n    XYZ start = new XYZ(0, 0, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters));\n    XYZ end = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters));\n    Line beamCurve = Line.CreateBound(start, end);\n    doc.Create.NewFamilyInstance(beamCurve, beamType, level, StructuralType.Beam);\n}"}
{"prompt":"Change the type of a selected floor to 'Concrete 19cm'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a floor\");\n\nif (pickedRef != null)\n{\n    Floor floorToChange = doc.GetElement(pickedRef) as Floor;\n    FloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name == \"Concrete 19cm\");\n    \n    if (floorToChange != null && newType != null)\n    {\n        floorToChange.ChangeTypeId(newType.Id);\n    }\n}"}
{"prompt":"Replicate the 'Generic - 162mm' wall type and name it 'Interior - 15cm Plaster'.","completion":"string originalName = \"Generic - 162mm\";\nstring newName = \"Interior - 15cm Plaster\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif(originalType!=null)\n    originalType.Duplicate(newName);"}
{"prompt":"Create a new level named 'Mezzanine' at 8.3 meters elevation.","completion":"string levelName = \"Mezzanine\";\ndouble elevation = UnitUtils.ConvertToInternalUnits(8.3, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Crea los worksets 'Arquitectura', 'Arquitectura' y 'MEP'.","completion":"if (doc.IsWorkshared)\n{\n    Workset.Create(doc, \"Arquitectura\");\n    Workset.Create(doc, \"Arquitectura\");\n    Workset.Create(doc, \"MEP\");\n}"}
{"prompt":"Crea 8 ejes horizontales separados por 10 metros.","completion":"double separation = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\nfor(int i = 0; i < 8; i++)\n{\n    Line line = Line.CreateBound(new XYZ(0, i * separation, 0), new XYZ(50, i * separation, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Añade un punto de referencia en las coordenadas (1,8,3) dentro del editor de familias.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(1,8,3));"}
{"prompt":"Duplica el nivel 4 con un desfase de 7m y llámalo 'Mezanine'.","completion":"string levelName = \"Nivel 4\";\nLevel levelToCopy = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (levelToCopy != null)\n{\n    double offset = UnitUtils.ConvertToInternalUnits(7, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, levelToCopy.Elevation + offset);\n    newLevel.Name = \"Mezanine\";\n}"}
{"prompt":"Add the 'Level', 'Mark', and 'Volume' fields to the column schedule.","completion":"ViewSchedule schedule = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().FirstOrDefault(s => s.Name.Contains(\"Column\"));\nif (schedule != null)\n{\n    ScheduleDefinition def = schedule.Definition;\n    SchedulableField levelField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.FAMILY_LEVEL_PARAM);\n    if (levelField != null) def.AddField(levelField);\n    SchedulableField markField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.ALL_MODEL_MARK);\n    if (markField != null) def.AddField(markField);\n    SchedulableField volumeField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.HOST_VOLUME_COMPUTED);\n    if (volumeField != null) def.AddField(volumeField);\n}"}
{"prompt":"Voltea un elemento seleccionado 91 grados sobre su eje Z.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un elemento para rotar\");\nElement elem = doc.GetElement(pickedRef.ElementId);\nLocationPoint lp = elem.Location as LocationPoint;\nLine axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\nElementTransformUtils.RotateElement(doc, elem.Id, axis, Math.PI \/ 91);"}
{"prompt":"Create a stair between Level 1 and Level 2","completion":"\/\/ This is a complex operation that requires multiple steps and\/or user interaction and is not supported by the agent."}
{"prompt":"Aplica aislamiento térmico de 25mm a todas las tuberías de agua caliente.","completion":"PipeInsulationType insulationType = new FilteredElementCollector(doc).OfClass(typeof(PipeInsulationType)).FirstOrDefault() as PipeInsulationType;\nPipingSystemType hotWaterSystem = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).Cast<PipingSystemType>().FirstOrDefault(s => s.Name.Contains(\"Hot Water\") || s.Name.Contains(\"Agua Caliente\"));\n\nif (insulationType != null && hotWaterSystem != null)\n{\n    List<Pipe> pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast<Pipe>().Where(p => \n    {\n        Parameter systemParam = p.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM);\n        return systemParam != null && systemParam.HasValue && systemParam.AsElementId() == hotWaterSystem.Id;\n    }).ToList();\n    \n    foreach(Pipe p in pipes)\n    {\n        PipeInsulation.Create(doc, p.Id, insulationType.Id, UnitUtils.ConvertToInternalUnits(25, UnitTypeId.Millimeters));\n    }\n}"}
{"prompt":"Create an electrical conduit with a 1-inch diameter.","completion":"using (Transaction t = new Transaction(doc, \"Create Conduit\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    ElementId conduitTypeId = new FilteredElementCollector(doc).OfClass(typeof(ConduitType)).FirstElementId();\n\n    if (level != null && conduitTypeId != null && conduitTypeId != ElementId.InvalidElementId)\n    {\n        XYZ start = new XYZ(0, 0, 3 \/ 0.3048);\n        XYZ end = new XYZ(5 \/ 0.3048, 0, 3 \/ 0.3048);\n        Conduit conduit = Conduit.Create(doc, conduitTypeId, start, end, level.Id);\n\n        if (conduit != null)\n        {\n            Parameter diameterParam = conduit.get_Parameter(BuiltInParameter.RBS_CONDUIT_DIAMETER_PARAM);\n            if (diameterParam != null && !diameterParam.IsReadOnly)\n            {\n                diameterParam.Set(1.0\/12.0);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create a shaft opening that passes through from Level 1 to Level 3.","completion":"using (Transaction t = new Transaction(doc, \"Create Shaft Opening\"))\n{\n    t.Start();\n    Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 1\");\n    Level topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 3\");\n\n    if (bottomLevel != null && topLevel != null)\n    {\n        XYZ p1 = new XYZ(5 \/ 0.3048, 5 \/ 0.3048,0);\n        XYZ p2 = new XYZ(8 \/ 0.3048, 5 \/ 0.3048,0);\n        XYZ p3 = new XYZ(8 \/ 0.3048, 8 \/ 0.3048,0);\n        XYZ p4 = new XYZ(5 \/ 0.3048, 8 \/ 0.3048,0);\n        CurveArray profile = new CurveArray();\n        profile.Append(Line.CreateBound(p1,p2));\n        profile.Append(Line.CreateBound(p2,p3));\n        profile.Append(Line.CreateBound(p3,p4));\n        profile.Append(Line.CreateBound(p4,p1));\n        doc.Create.NewOpening(bottomLevel, topLevel, profile);\n    }\n    t.Commit();\n}"}
{"prompt":"Create a new room on Level 3 at point (8, 13).","completion":"string levelName = \"Level 3\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    UV point = new UV(8, 13);\n    Room newRoom = doc.Create.NewRoom(targetLevel, point);\n}"}
{"prompt":"Oculta todos los elementos de anotación en la vista activa.","completion":"if (doc.ActiveView != null)\n{\n    List<BuiltInCategory> annotationCategories = new List<BuiltInCategory>\n    {\n        BuiltInCategory.OST_GenericAnnotation,\n        BuiltInCategory.OST_TextNotes,\n        BuiltInCategory.OST_Tags,\n        BuiltInCategory.OST_Dimensions,\n        BuiltInCategory.OST_DetailComponents\n    };\n    ElementMulticategoryFilter multiCategoryFilter = new ElementMulticategoryFilter(annotationCategories);\n    ICollection<ElementId> elementsToHide = new FilteredElementCollector(doc, doc.ActiveView.Id).WherePasses(multiCategoryFilter).ToElementIds();\n    if(elementsToHide.Any())\n    {\n        doc.ActiveView.HideElements(elementsToHide);\n    }\n}"}
{"prompt":"Obtain all walls from a linked model that intersect with a bounding box.","completion":"RevitLinkInstance linkInstance = new FilteredElementCollector(doc).OfClass(typeof(RevitLinkInstance)).FirstOrDefault() as RevitLinkInstance;\n\nif (linkInstance != null)\n{\n    Document linkDoc = linkInstance.GetLinkDocument();\n    if (linkDoc != null)\n    {\n        \/\/ Create a default 50ft x 50ft x 20ft bounding box as it's not specified in the prompt\n        BoundingBoxXYZ bbox = new BoundingBoxXYZ();\n        bbox.Min = new XYZ(0, 0, 0);\n        bbox.Max = new XYZ(50, 50, 20);\n        Outline outline = new Outline(bbox.Min, bbox.Max);\n        BoundingBoxIntersectsFilter filter = new BoundingBoxIntersectsFilter(outline);\n        List<Element> linkedWalls = new FilteredElementCollector(linkDoc).OfClass(typeof(Wall)).WherePasses(filter).ToList();\n    }\n}"}
{"prompt":"Rename the active view to 'Working View'.","completion":"string newName = \"Working View\";\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.Name = newName;\n}"}
{"prompt":"Asigna el comentario 'Revisar Detalle' a los elementos seleccionados.","completion":"ICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nif (selectedIds.Any())\n{\n    string comment = \"Revisar Detalle\";\n    foreach (ElementId id in selectedIds)\n    {\n        Element elem = doc.GetElement(id);\n        if (elem != null)\n        {\n            Parameter commentParam = elem.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n            if (commentParam != null && !commentParam.IsReadOnly)\n            {\n                commentParam.Set(comment);\n            }\n        }\n    }\n}"}
{"prompt":"Coloca una instancia de la familia 'Ventana Fija 115x60' en el centro de la habitación 'Despacho 99'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 115\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Ventana Fija 99x60\") as FamilySymbol;\nif(furnitureSymbol != null && !furnitureSymbol.IsActive) furnitureSymbol.Activate();\nif(room != null)\n{\n    LocationPoint roomCenter = room.Location as LocationPoint;\n    if(roomCenter != null && furnitureSymbol != null && room.Level != null)\n    {\n        doc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Verifica si una tubería está conectada en ambos extremos.","completion":"Pipe pipe = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).FirstOrDefault() as Pipe;\nbool isFullyConnected = false;\n\nif (pipe != null)\n{\n    isFullyConnected = pipe.ConnectorManager.UnusedConnectors.IsEmpty;\n}\n"}
{"prompt":"Ajusta el tipo de una losa seleccionada a 'Concreto'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una losa\");\n\nif (pickedRef != null)\n{\n    Floor floorToChange = doc.GetElement(pickedRef) as Floor;\n    FloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name == \"Concreto\");\n    \n    if (floorToChange != null && newType != null)\n    {\n        floorToChange.ChangeTypeId(newType.Id);\n    }\n}"}
{"prompt":"Generate a new wall type 'Generic Wall 333mm' with a thickness of 30cm.","completion":"string newTypeName = \"Generic Wall 333mm\";\nWallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif (oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(newTypeName) as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(30, UnitTypeId.Centimeters));\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n}"}
{"prompt":"Crea un nuevo nivel llamado 'Mezzanine' a 7.5 metros de elevación.","completion":"string levelName = \"Mezzanine\";\ndouble elevation = UnitUtils.ConvertToInternalUnits(7.5, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Crea un nuevo tipo de texto de 5mm de color verde.","completion":"using (Transaction t = new Transaction(doc, \"Create Green Text Type\"))\n{\n    t.Start();\n    string newTypeName = \"5mm Verde\";\n    TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\n    if (defaultType != null)\n    {\n        TextNoteType newType = defaultType.Duplicate(newTypeName) as TextNoteType;\n        if (newType != null)\n        {\n            Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n            if (textSizeParam != null && !textSizeParam.IsReadOnly)\n            {\n                textSizeParam.Set(5 \/ 304.8);\n            }\n            Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n            if (lineColorParam != null && !lineColorParam.IsReadOnly)\n            {\n                 lineColorParam.Set(65280);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Inserta un punto de referencia en las coordenadas (1,1,6) dentro del editor de familias.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(1,1,6));"}
{"prompt":"Crea un nuevo material llamado 'Roble Oscuro' con un patrón de superficie de madera.","completion":"string materialName = \"Roble Oscuro\";\nElementId materialId = Material.Create(doc, materialName);\n\nif (materialId != ElementId.InvalidElementId)\n{\n    Material material = doc.GetElement(materialId) as Material;\n    FillPatternElement fillPattern = new FilteredElementCollector(doc).OfClass(typeof(FillPatternElement)).FirstOrDefault(p => p.Name.Contains(\"Wood\") || p.Name.Contains(\"Madera\")) as FillPatternElement;\n    \n    if (material != null && fillPattern != null)\n    {\n        material.SurfaceForegroundPatternId = fillPattern.Id;\n        material.Color = new Color(139, 69, 19);\n    }\n}"}
{"prompt":"Duplica el tipo de muro 'Genérico - 121mm' y nómbralo 'Interior - 15cm Yeso'.","completion":"string originalName = \"Genérico - 121mm\";\nstring newName = \"Interior - 15cm Yeso\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif(originalType!=null)\n    originalType.Duplicate(newName);"}
{"prompt":"Get a list of all material names.","completion":"List<Material> materials = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().ToList();\nList<string> materialNames = new List<string>();\nforeach(Material m in materials)\n{\n    materialNames.Add(m.Name);\n}\n"}
{"prompt":"Assign the sill height of all windows to 897mm.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits(897, UnitTypeId.Millimeters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Crea un nivel 'Roof Terrace' a 20m.","completion":"string levelName = \"Roof Terrace\";\ndouble elev = UnitUtils.ConvertToInternalUnits(20, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elev);\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Crea una apertura de hueco (shaft) que atraviese desde el Nivel 1 al Nivel 3.","completion":"using (Transaction t = new Transaction(doc, \"Create Shaft Opening\"))\n{\n    t.Start();\n    Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel 1\");\n    Level topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel 3\");\n\n    if (bottomLevel != null && topLevel != null)\n    {\n        XYZ p1 = new XYZ(5 \/ 0.3048, 5 \/ 0.3048,0);\n        XYZ p2 = new XYZ(8 \/ 0.3048, 5 \/ 0.3048,0);\n        XYZ p3 = new XYZ(8 \/ 0.3048, 8 \/ 0.3048,0);\n        XYZ p4 = new XYZ(5 \/ 0.3048, 8 \/ 0.3048,0);\n        CurveArray profile = new CurveArray();\n        profile.Append(Line.CreateBound(p1,p2));\n        profile.Append(Line.CreateBound(p2,p3));\n        profile.Append(Line.CreateBound(p3,p4));\n        profile.Append(Line.CreateBound(p4,p1));\n        doc.Create.NewOpening(bottomLevel, topLevel, profile);\n    }\n    t.Commit();\n}"}
{"prompt":"Duplica el tipo de muro 'Genérico - 195mm' y nómbralo 'Interior - 15cm Yeso'.","completion":"string originalName = \"Genérico - 195mm\";\nstring newName = \"Interior - 15cm Yeso\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif(originalType!=null)\n    originalType.Duplicate(newName);"}
{"prompt":"Reproduce el nivel 1 con un desfase de 5m y llámalo 'Mezanine'.","completion":"string levelName = \"Mezanine\";\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\n\nif (level1 != null)\n{\n    double newElevation = level1.ProjectElevation + UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, newElevation);\n    if (newLevel != null)\n    {\n        newLevel.Name = levelName;\n    }\n}"}
{"prompt":"Ajusta todas las ventanas para que tengan la altura del antepecho a 900mm.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits(900, UnitTypeId.Millimeters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Create an electrical conduit with a 1-inch diameter.","completion":"using (Transaction t = new Transaction(doc, \"Create Conduit\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    ElementId conduitTypeId = new FilteredElementCollector(doc).OfClass(typeof(ConduitType)).FirstElementId();\n\n    if (level != null && conduitTypeId != null && conduitTypeId != ElementId.InvalidElementId)\n    {\n        XYZ start = new XYZ(0, 0, 3 \/ 0.3048);\n        XYZ end = new XYZ(5 \/ 0.3048, 0, 3 \/ 0.3048);\n        Conduit conduit = Conduit.Create(doc, conduitTypeId, start, end, level.Id);\n\n        if (conduit != null)\n        {\n            Parameter diameterParam = conduit.get_Parameter(BuiltInParameter.RBS_CONDUIT_DIAMETER_PARAM);\n            if (diameterParam != null && !diameterParam.IsReadOnly)\n            {\n                diameterParam.Set(1.0\/12.0);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Clona el nivel 1 con un desfase de 2m y llámalo 'Mezanine'.","completion":"string levelName = \"Mezanine\";\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\n\nif (level1 != null)\n{\n    double newElevation = level1.ProjectElevation + UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, newElevation);\n    if (newLevel != null)\n    {\n        newLevel.Name = levelName;\n    }\n}"}
{"prompt":"Crea una vista de sección llamada 'Sección Longitudinal'.","completion":"ViewFamilyType sectionType = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.Section);\n\nif (sectionType != null)\n{\n    BoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\n    sectionBox.Min = new XYZ(UnitUtils.ConvertToInternalUnits(-10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(-1, UnitTypeId.Meters), 0);\n    sectionBox.Max = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters));\n    Transform transform = Transform.Identity;\n    sectionBox.Transform = transform;\n    ViewSection sectionView = ViewSection.CreateSection(doc, sectionType.Id, sectionBox);\n    \n    if (sectionView != null)\n    {\n        sectionView.Name = \"Sección Longitudinal\";\n    }\n}"}
{"prompt":"Encuentra todas las puertas en el Nivel 4 usando un filtro combinado.","completion":"string levelName = \"Nivel 4\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    ElementCategoryFilter categoryFilter = new ElementCategoryFilter(BuiltInCategory.OST_Doors);\n    ElementLevelFilter levelFilter = new ElementLevelFilter(targetLevel.Id);\n    LogicalAndFilter combinedFilter = new LogicalAndFilter(levelFilter, categoryFilter);\n    FilteredElementCollector collector = new FilteredElementCollector(doc).WherePasses(combinedFilter);\n    uidoc.Selection.SetElementIds(collector.ToElementIds());\n}"}
{"prompt":"Mark all rooms with their area.","completion":"using (Transaction t = new Transaction(doc, \"Tag All Rooms\"))\n{\n    t.Start();\n    View activeView = doc.ActiveView;\n\n    if (activeView != null)\n    {\n        List<Room> rooms = new FilteredElementCollector(doc, activeView.Id).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>().ToList();\n        foreach(Room room in rooms)\n        {\n            LocationPoint loc = room.Location as LocationPoint;\n            if(loc != null)\n            {\n                doc.Create.NewRoomTag(new LinkElementId(room.Id), new UV(loc.Point.X, loc.Point.Y), activeView.Id);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Position an instance of the 'Office Desk' family in the center of the 'Office 98' room.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Office 98\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Office Desk\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);"}
{"prompt":"Cuantifica el volumen total de cimentación estructural.","completion":"double totalVolume = 0.0;\nFilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFoundation).WhereElementIsNotElementType();\n\nforeach (Element foundation in collector)\n{\n    Parameter volumeParam = foundation.get_Parameter(BuiltInParameter.HOST_VOLUME_COMPUTED);\n    if (volumeParam != null) totalVolume += volumeParam.AsDouble();\n}\ndouble totalVolumeM3 = UnitUtils.ConvertFromInternalUnits(totalVolume, UnitTypeId.CubicMeters);"}
{"prompt":"Construct a 'Roof Terrace' level at 17m.","completion":"string levelName = \"Roof Terrace\";\ndouble elev = UnitUtils.ConvertToInternalUnits(17, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elev);\nnewLevel.Name = levelName;\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Assign the sill height of all windows to 896mm.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits(896, UnitTypeId.Millimeters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Averigua quién es el propietario de un elemento seleccionado.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un elemento\");\n\nWorksharingTooltipInfo info = null;\nif (pickedRef != null)\n{\n    info = WorksharingUtils.GetWorksharingTooltipInfo(doc, pickedRef.ElementId);\n}\n"}
{"prompt":"Crea una abertura rectangular en un suelo.","completion":"using (Transaction t = new Transaction(doc, \"Create Opening\"))\n{\n    t.Start();\n    Floor floor = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault() as Floor;\n\n    if (floor != null)\n    {\n        XYZ p1 = new XYZ(1 \/ 0.3048, 1 \/ 0.3048, 0);\n        XYZ p2 = new XYZ(3 \/ 0.3048, 1 \/ 0.3048, 0);\n        XYZ p3 = new XYZ(3 \/ 0.3048, 3 \/ 0.3048, 0);\n        XYZ p4 = new XYZ(1 \/ 0.3048, 3 \/ 0.3048, 0);\n        CurveArray profile = new CurveArray();\n        profile.Append(Line.CreateBound(p1, p2));\n        profile.Append(Line.CreateBound(p2, p3));\n        profile.Append(Line.CreateBound(p3, p4));\n        profile.Append(Line.CreateBound(p4, p1));\n        doc.Create.NewOpening(floor, profile, true);\n    }\n    t.Commit();\n}"}
{"prompt":"Añade una etiqueta a la columna más cercana al origen.","completion":"using (Transaction t = new Transaction(doc, \"Tag Column\"))\n{\n    t.Start();\n    View activeView = doc.ActiveView;\n    FamilyInstance column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().Cast<FamilyInstance>().OrderBy(c => {\n        LocationPoint lp = c.Location as LocationPoint;\n        return lp != null ? lp.Point.DistanceTo(XYZ.Zero) : double.MaxValue;\n    }).FirstOrDefault();\n\n    if (activeView != null && column != null)\n    {\n        LocationPoint loc = column.Location as LocationPoint;\n        if (loc != null)\n        {\n            IndependentTag.Create(doc, activeView.Id, new Reference(column), true, TagMode.TM_ADDBY_CATEGORY, TagOrientation.Horizontal, loc.Point);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Obtén una lista de los nombres de todos los tipos de familia de la categoría 'Mobiliario'.","completion":"List<Element> furnitureTypes = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().ToList();\nList<string> typeNames = new List<string>();\nforeach(Element type in furnitureTypes)\n{\n    typeNames.Add(type.Name);\n}\n"}
{"prompt":"Reproduce el tipo de muro 'Genérico - 102mm' y nómbralo 'Interior - 15cm Yeso'.","completion":"string originalName = \"Genérico - 102mm\";\nstring newName = \"Interior - 15cm Yeso\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif (originalType != null)\n{\n    WallType newType = originalType.Duplicate(newName) as WallType;\n}"}
{"prompt":"Build a new level 'Level 7' at an elevation of 14 meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(14, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Level 7\";\n}"}
{"prompt":"Crea una nueva habitación en el Nivel 3 en el punto (8, 7).","completion":"string levelName = \"Nivel 3\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    UV point = new UV(8, 7);\n    Room newRoom = doc.Create.NewRoom(targetLevel, point);\n}"}
{"prompt":"Sitúa un pilar estructural en (10,5), asegurándote de que el tipo de familia esté activo.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (level != null && columnSymbol != null)\n{\n    if (!columnSymbol.IsActive) { columnSymbol.Activate(); }\n    XYZ point = new XYZ(10, 5, 0);\n    doc.Create.NewFamilyInstance(point, columnSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n}"}
{"prompt":"Crea un parámetro global de longitud llamado 'AnchoCorredor' con valor de 1.2m.","completion":"string paramName = \"AnchoCorredor\";\nGlobalParameter gp = GlobalParameter.Create(doc, paramName, SpecTypeId.Length);\n\nif (gp != null)\n{\n    gp.SetValue(new DoubleParameterValue(UnitUtils.ConvertToInternalUnits(1.2, UnitTypeId.Meters)));\n}"}
{"prompt":"Create a new A3 sheet and place a legend on it.","completion":"using (Transaction t = new Transaction(doc, \"Create Sheet with Legend\"))\n{\n    t.Start();\n    FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(tb => tb.Name.Contains(\"A3\"));\n    View legendView = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().FirstOrDefault(v => v.ViewType == ViewType.Legend);\n\n    if (titleBlock != null && legendView != null)\n    {\n        ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n        if (newSheet != null)\n        {\n            BoundingBoxUV sheetBox = newSheet.Outline;\n            UV centerUv = (sheetBox.Min + sheetBox.Max) \/ 2.0;\n            XYZ centerPoint = new XYZ(centerUv.U, centerUv.V, 0);\n            Viewport.Create(doc, newSheet.Id, legendView.Id, centerPoint);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create a new Level named 'Level 7' at an elevation of 14 meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(14, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Level 7\";\n}"}
{"prompt":"Inserta los campos 'Nivel', 'Marca' y 'Volumen' a la tabla de pilares.","completion":"ViewSchedule schedule = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().FirstOrDefault(s => s.Name.Contains(\"Pilares\") || s.Name.Contains(\"Column\"));\nif (schedule != null)\n{\n    ScheduleDefinition def = schedule.Definition;\n    SchedulableField levelField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.FAMILY_LEVEL_PARAM);\n    if (levelField != null) def.AddField(levelField);\n    SchedulableField markField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.ALL_MODEL_MARK);\n    if (markField != null) def.AddField(markField);\n    SchedulableField volumeField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.HOST_VOLUME_COMPUTED);\n    if (volumeField != null) def.AddField(volumeField);\n}"}
{"prompt":"Clone the 'Generic - 142mm' wall type and name it 'Interior - 15cm Plaster'.","completion":"string originalName = \"Generic - 142mm\";\nstring newName = \"Interior - 15cm Plaster\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif (originalType != null)\n{\n    WallType newType = originalType.Duplicate(newName) as WallType;\n}"}
{"prompt":"Encuentra todas las vistas que no tienen una plantilla de vista asignada.","completion":"List<View> viewsWithoutTemplate = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().Where(v => v.CanBePrinted && !v.IsTemplate && v.ViewTemplateId == ElementId.InvalidElementId).ToList();"}
{"prompt":"Replicate the 'Generic - 146mm' wall type and name it 'Interior - 17cm Plaster'.","completion":"string originalName = \"Generic - 146mm\";\nstring newName = \"Interior - 17cm Plaster\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif (originalType != null)\n{\n    WallType newType = originalType.Duplicate(newName) as WallType;\n}"}
{"prompt":"Genera un grupo a partir de la selección actual y muévelo 10 metros a la derecha.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds != null && selectedIds.Count > 0)\n{\n    Group group = doc.Create.NewGroup(selectedIds);\n    if (group != null)\n    {\n        XYZ translation = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), 0, 0);\n        ElementTransformUtils.MoveElement(doc, group.Id, translation);\n    }\n}"}
{"prompt":"Construct an electrical conduit with a 1-inch diameter.","completion":"using (Transaction t = new Transaction(doc, \"Create Conduit\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    ElementId conduitTypeId = new FilteredElementCollector(doc).OfClass(typeof(ConduitType)).FirstElementId();\n\n    if (level != null && conduitTypeId != null && conduitTypeId != ElementId.InvalidElementId)\n    {\n        XYZ start = new XYZ(0, 0, 3 \/ 0.3048);\n        XYZ end = new XYZ(5 \/ 0.3048, 0, 3 \/ 0.3048);\n        Conduit conduit = Conduit.Create(doc, conduitTypeId, start, end, level.Id);\n\n        if (conduit != null)\n        {\n            Parameter diameterParam = conduit.get_Parameter(BuiltInParameter.RBS_CONDUIT_DIAMETER_PARAM);\n            if (diameterParam != null && !diameterParam.IsReadOnly)\n            {\n                diameterParam.Set(1.0 \/ 12.0);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Set the 'Comments' parameter for all doors on Level 2 to 'Fire Rating - 95 min'.","completion":"string levelName = \"Level 2\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(targetLevel.Id);\n    FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WherePasses(levelFilter);\n    foreach (Element door in collector)\n    {\n        Parameter commentsParam = door.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n        if (commentsParam != null && !commentsParam.IsReadOnly) { commentsParam.Set(\"Fire Rating - 95 min\"); }\n    }\n}"}
{"prompt":"Export a list of all project warnings to a text file on the desktop.","completion":"string desktopPath = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);\nstring filePath = System.IO.Path.Combine(desktopPath, \"RevitWarnings.txt\");\nIList<FailureMessage> warnings = doc.GetWarnings();\nList<string> warningDescriptions = warnings.Select(w => w.GetDescriptionText()).ToList();\nSystem.IO.File.WriteAllLines(filePath, warningDescriptions);"}
{"prompt":"Crea un nuevo tipo de muro 'Muro Genérico 300mm' con un grosor de 30cm.","completion":"using (Transaction t = new Transaction(doc, \"Create Wall Type\"))\n{\n    t.Start();\n    string newTypeName = \"Muro Genérico 300mm\";\n    WallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\n    if (oldWallType != null)\n    {\n        WallType newWallType = oldWallType.Duplicate(newTypeName) as WallType;\n        if (newWallType != null)\n        {\n            CompoundStructure cs = newWallType.GetCompoundStructure();\n            if (cs != null && cs.LayerCount > 0)\n            {\n                int coreLayerIndex = cs.GetFirstCoreLayerIndex();\n                if (coreLayerIndex >= 0 && coreLayerIndex < cs.LayerCount)\n                {\n                    cs.SetLayerWidth(coreLayerIndex, 300 \/ 304.8);\n                    newWallType.SetCompoundStructure(cs);\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Generate a stair between Level 1 and Level 3","completion":"\/\/ This is a complex operation that requires multiple steps and\/or user interaction and is not supported by the agent."}
{"prompt":"Create a 'Roof Terrace' level at 20m.","completion":"string levelName = \"Roof Terrace\";\ndouble elev = UnitUtils.ConvertToInternalUnits(20, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elev);\nnewLevel.Name = levelName;\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Coloca una ventana de 1x1.2 metros en la pared más cercana.","completion":"FamilySymbol originalSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nWall hostWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\n\nif (originalSymbol != null && hostWall != null)\n{\n    string newTypeName = \"Window 1.0m x 1.2m\";\n    FamilySymbol newSymbol = originalSymbol.Duplicate(newTypeName) as FamilySymbol;\n    if (newSymbol == null) return;\n\n    if (!newSymbol.IsActive)\n    {\n        newSymbol.Activate();\n    }\n\n    Parameter widthParam = newSymbol.get_Parameter(BuiltInParameter.WINDOW_WIDTH);\n    Parameter heightParam = newSymbol.get_Parameter(BuiltInParameter.WINDOW_HEIGHT);\n\n    if (widthParam != null && heightParam != null && !widthParam.IsReadOnly && !heightParam.IsReadOnly)\n    {\n        widthParam.Set(UnitUtils.ConvertToInternalUnits(1.0, UnitTypeId.Meters));\n        heightParam.Set(UnitUtils.ConvertToInternalUnits(1.2, UnitTypeId.Meters));\n    }\n\n    Level level = doc.GetElement(hostWall.LevelId) as Level;\n    LocationCurve locationCurve = hostWall.Location as LocationCurve;\n    if (level != null && locationCurve != null)\n    {\n        XYZ insertionPoint = locationCurve.Curve.Evaluate(0.5, true);\n        doc.Create.NewFamilyInstance(insertionPoint, newSymbol, hostWall, level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Duplicate the 'Generic - 103mm' wall type and name it 'Interior - 15cm Plaster'.","completion":"string originalName = \"Generic - 103mm\";\nstring newName = \"Interior - 15cm Plaster\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif (originalType != null)\n{\n    WallType newType = originalType.Duplicate(newName) as WallType;\n}"}
{"prompt":"Assign the sill height of all windows to 5 meter.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Replicate level 2 with a 2m offset and name it 'Mezzanine'.","completion":"string levelName = \"Level 2\";\nLevel levelToCopy = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (levelToCopy != null)\n{\n    double offset = UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, levelToCopy.Elevation + offset);\n    newLevel.Name = \"Mezzanine\";\n}"}
{"prompt":"Hide all annotation elements in the active view.","completion":"if (doc.ActiveView != null)\n{\n    List<BuiltInCategory> annotationCategories = new List<BuiltInCategory>\n    {\n        BuiltInCategory.OST_GenericAnnotation,\n        BuiltInCategory.OST_TextNotes,\n        BuiltInCategory.OST_Tags,\n        BuiltInCategory.OST_Dimensions,\n        BuiltInCategory.OST_DetailComponents\n    };\n    ElementMulticategoryFilter multiCategoryFilter = new ElementMulticategoryFilter(annotationCategories);\n    ICollection<ElementId> elementsToHide = new FilteredElementCollector(doc, doc.ActiveView.Id).WherePasses(multiCategoryFilter).ToElementIds();\n    if(elementsToHide.Any())\n    {\n        doc.ActiveView.HideElements(elementsToHide);\n    }\n}"}
{"prompt":"Hide my current selection in this view.","completion":"ICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nView activeView = doc.ActiveView;\n\nif (activeView != null && selectedIds.Any())\n{\n    activeView.HideElements(selectedIds);\n}"}
{"prompt":"Agrega un nivel llamado 'Nivel Azotea' a 15.3 metros.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(15.3, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Nivel Azotea\";\n}"}
{"prompt":"Agrega refuerzo a una columna.","completion":"RebarBarType barType = new FilteredElementCollector(doc).OfClass(typeof(RebarBarType)).FirstOrDefault() as RebarBarType;\nRebarShape shape = new FilteredElementCollector(doc).OfClass(typeof(RebarShape)).FirstOrDefault() as RebarShape;\nFamilyInstance column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\n\nif (barType != null && shape != null && column != null)\n{\n    Rebar.CreateFromRebarShape(doc, shape, barType, column, column.GetTransform().Origin, XYZ.BasisX, XYZ.BasisY);\n}"}
{"prompt":"Create a new window schedule that includes Type Mark, Width, and Height.","completion":"string scheduleName = \"Window Schedule\";\nViewSchedule schedule = ViewSchedule.CreateSchedule(doc, new ElementId(BuiltInCategory.OST_Windows));\n\nif (schedule != null)\n{\n    schedule.Name = scheduleName;\n    ScheduleDefinition def = schedule.Definition;\n    if (def != null)\n    {\n        SchedulableField typeMarkField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.ALL_MODEL_TYPE_MARK);\n        SchedulableField widthField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.FAMILY_WIDTH_PARAM);\n        SchedulableField heightField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.FAMILY_HEIGHT_PARAM);\n        \n        if (typeMarkField != null) def.AddField(typeMarkField);\n        if (widthField != null) def.AddField(widthField);\n        if (heightField != null) def.AddField(heightField);\n    }\n}"}
{"prompt":"Duplica el tipo de muro 'Genérico - 105mm' y nómbralo 'Interior - 15cm Yeso'.","completion":"string originalName = \"Genérico - 105mm\";\nstring newName = \"Interior - 15cm Yeso\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif(originalType!=null)\n    originalType.Duplicate(newName);"}
{"prompt":"Genera un piso rectangular de 10×8 metros.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\nif (level != null && floorType != null)\n{\n    double width = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\n    double length = UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters);\n    XYZ p1 = XYZ.Zero;\n    XYZ p2 = new XYZ(width, 0, 0);\n    XYZ p3 = new XYZ(width, length, 0);\n    XYZ p4 = new XYZ(0, length, 0);\n    CurveLoop profile = new CurveLoop();\n    profile.Append(Line.CreateBound(p1, p2));\n    profile.Append(Line.CreateBound(p2, p3));\n    profile.Append(Line.CreateBound(p3, p4));\n    profile.Append(Line.CreateBound(p4, p1));\n    Floor.Create(doc, new List<CurveLoop> { profile }, floorType.Id, level.Id);\n}"}
{"prompt":"Put an instance of the 'Office Desk' family in the center of the 'Office 98' room.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Office 98\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Office Desk\") as FamilySymbol;\nif(furnitureSymbol != null && !furnitureSymbol.IsActive) furnitureSymbol.Activate();\nif(room != null)\n{\n    LocationPoint roomCenter = room.Location as LocationPoint;\n    if(roomCenter != null && furnitureSymbol != null && room.Level != null)\n    {\n        doc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Reproduce el tipo de muro 'Genérico - 146mm' y nómbralo 'Interior - 13cm Yeso'.","completion":"string originalName = \"Genérico - 146mm\";\nstring newName = \"Interior - 13cm Yeso\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif (originalType != null)\n{\n    WallType newType = originalType.Duplicate(newName) as WallType;\n}"}
{"prompt":"Exporta todas las hojas de un conjunto a un único PDF.","completion":"ViewSheetSet sheetSet = new FilteredElementCollector(doc).OfClass(typeof(ViewSheetSet)).FirstOrDefault() as ViewSheetSet;\n\nif (sheetSet != null)\n{\n    string folderPath = \"C:\/RevitExports\/\";\n    PDFExportOptions options = new PDFExportOptions();\n    options.Combine = true;\n    options.FileName = sheetSet.Name;\n    List<ElementId> sheetIds = sheetSet.Views.Cast<ViewSheet>().Select(s => s.Id).ToList();\n    doc.Export(folderPath, sheetIds, options);\n}"}
{"prompt":"Construct a floor plan view for 'Level 3'.","completion":"string levelName = \"Level 3\";\nLevel level3 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.FloorPlan);\n\nif (level3 != null && vft != null)\n{\n    ViewPlan viewPlan = ViewPlan.Create(doc, vft.Id, level3.Id);\n}"}
{"prompt":"Place an instance of the 'Office Desk' family in the center of the 'Office 101' room.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Office 101\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Office Desk\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);"}
{"prompt":"Generate a new workset named 'Structure'.","completion":"string wsName = \"Structure\";\nWorkset newWorkset = Workset.Create(doc, wsName);\n"}
{"prompt":"Select all walls on 'Level 5' and change their comment to 'REVIEW INSULATION'.","completion":"string levelName = \"Level 5\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(targetLevel.Id);\n    FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(levelFilter);\n    foreach (Element wall in collector)\n    {\n        Parameter commentsParam = wall.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n        if (commentsParam != null && !commentsParam.IsReadOnly) { commentsParam.Set(\"REVIEW INSULATION\"); }\n    }\n}"}
{"prompt":"Generate 8 horizontal grids spaced 10 meters apart.","completion":"double separation = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\nfor(int i = 0; i < 8; i++)\n{\n    Line line = Line.CreateBound(new XYZ(0, i * separation, 0), new XYZ(50, i * separation, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Adjust the view's crop region to a rectangle from (0,0) to (20,20).","completion":"using (Transaction t = new Transaction(doc, \"Adjust Crop Region\"))\n{\n    t.Start();\n    View view = doc.ActiveView;\n\n    if (view != null && view.CropBoxActive)\n    {\n        BoundingBoxXYZ cropBox = view.CropBox;\n        if (cropBox != null)\n        {\n            XYZ minPoint = new XYZ(0, 0, cropBox.Min.Z);\n            XYZ maxPoint = new XYZ(20 \/ 0.3048, 20 \/ 0.3048, cropBox.Max.Z);\n            cropBox.Min = minPoint;\n            cropBox.Max = maxPoint;\n            view.CropBox = cropBox;\n            view.CropBoxVisible = true;\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Modify the wall type of an existing wall to one containing 'Thermal Insulation'.","completion":"Wall wallToChange = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nWallType newType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(x => x.Name.Contains(\"Thermal Insulation\"));\n\nif (wallToChange != null && newType != null)\n{\n    wallToChange.ChangeTypeId(newType.Id);\n}"}
{"prompt":"Create a new room on Level 2 at point (5, 6).","completion":"string levelName = \"Level 2\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    UV point = new UV(5, 6);\n    Room newRoom = doc.Create.NewRoom(targetLevel, point);\n}"}
{"prompt":"Build a door 0.9m wide and 2.1m high in the wall.","completion":"Wall hostWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nFamilySymbol originalSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (originalSymbol != null && hostWall != null)\n{\n    string newTypeName = \"Door 0.9m x 2.1m\";\n    FamilySymbol newSymbol = originalSymbol.Duplicate(newTypeName) as FamilySymbol;\n    if (newSymbol == null) return;\n\n    if (!newSymbol.IsActive)\n    {\n        newSymbol.Activate();\n    }\n\n    Parameter widthParam = newSymbol.get_Parameter(BuiltInParameter.FAMILY_WIDTH_PARAM);\n    Parameter heightParam = newSymbol.get_Parameter(BuiltInParameter.FAMILY_HEIGHT_PARAM);\n\n    if (widthParam != null && heightParam != null && !widthParam.IsReadOnly && !heightParam.IsReadOnly)\n    {\n        widthParam.Set(UnitUtils.ConvertToInternalUnits(0.9, UnitTypeId.Meters));\n        heightParam.Set(UnitUtils.ConvertToInternalUnits(2.1, UnitTypeId.Meters));\n    }\n\n    Level level = doc.GetElement(hostWall.LevelId) as Level;\n    LocationCurve locationCurve = hostWall.Location as LocationCurve;\n    if (level != null && locationCurve != null)\n    {\n        XYZ insertionPoint = locationCurve.Curve.Evaluate(0.5, true);\n        doc.Create.NewFamilyInstance(insertionPoint, newSymbol, hostWall, level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Primero, crea un nuevo tipo de muro de 18cm llamado 'Muro Interior Acústico', y luego úsalo para crear un muro de 8m en el Nivel 1.","completion":"string newTypeName = \"Muro Interior Acústico\";\nWallType newWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Name == newTypeName) as WallType;\n\nif (newWallType == null)\n{\n    WallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n    if (wallTypeToDuplicate != null)\n    {\n        newWallType = wallTypeToDuplicate.Duplicate(newTypeName) as WallType;\n        if (newWallType != null)\n        {\n            CompoundStructure cs = newWallType.GetCompoundStructure();\n            if (cs != null)\n            {\n                cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(0.18, UnitTypeId.Meters));\n                newWallType.SetCompoundStructure(cs);\n            }\n        }\n    }\n}\n\nif (newWallType != null)\n{\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\n    if (level != null)\n    {\n        Line wallCurve = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters), 0, 0));\n        double height = UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\n        Wall.Create(doc, wallCurve, newWallType.Id, level.Id, height, 0, false, false);\n    }\n}"}
{"prompt":"Agrega un nivel llamado 'Nivel Azotea' a 15.5 metros.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(15.5, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Nivel Azotea\";\n}"}
{"prompt":"Sketch a filled region with a diagonal pattern.","completion":"using (Transaction t = new Transaction(doc, \"Draw Filled Region\"))\n{\n    t.Start();\n    View activeView = doc.ActiveView;\n    FillPatternElement fillPattern = new FilteredElementCollector(doc).OfClass(typeof(FillPatternElement)).Cast<FillPatternElement>().FirstOrDefault(p => !p.GetFillPattern().IsSolidFill);\n\n    if (activeView != null && fillPattern != null)\n    {\n        FilledRegionType filledRegionType = new FilteredElementCollector(doc, activeView.Id).OfClass(typeof(FilledRegionType)).FirstOrDefault() as FilledRegionType;\n        if (filledRegionType != null)\n        {\n            FilledRegionType newType = filledRegionType.Duplicate(\"Temp Diagonal Region\") as FilledRegionType;\n            if (newType != null)\n            {\n                newType.ForegroundPatternId = fillPattern.Id;\n                XYZ p1 = new XYZ(0,0,0);\n                XYZ p2 = new XYZ(5 \/ 0.3048,0,0);\n                XYZ p3 = new XYZ(5 \/ 0.3048,5 \/ 0.3048,0);\n                XYZ p4 = new XYZ(0,5 \/ 0.3048,0);\n                CurveLoop profile = new CurveLoop();\n                profile.Append(Line.CreateBound(p1,p2));\n                profile.Append(Line.CreateBound(p2,p3));\n                profile.Append(Line.CreateBound(p3,p4));\n                profile.Append(Line.CreateBound(p4,p1));\n                FilledRegion.Create(doc, newType.Id, activeView.Id, new List<CurveLoop>{profile});\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Añade una etiqueta a la columna más cercana al origen.","completion":"using (Transaction t = new Transaction(doc, \"Tag Column\"))\n{\n    t.Start();\n    View activeView = doc.ActiveView;\n    FamilyInstance column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().Cast<FamilyInstance>().OrderBy(c => {\n        LocationPoint lp = c.Location as LocationPoint;\n        return lp != null ? lp.Point.DistanceTo(XYZ.Zero) : double.MaxValue;\n    }).FirstOrDefault();\n\n    if (activeView != null && column != null)\n    {\n        LocationPoint loc = column.Location as LocationPoint;\n        if (loc != null)\n        {\n            IndependentTag.Create(doc, activeView.Id, new Reference(column), true, TagMode.TM_ADDBY_CATEGORY, TagOrientation.Horizontal, loc.Point);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Mueve un elemento seleccionado a la posición (5,5).","completion":"ICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds.Any())\n{\n    foreach (ElementId id in selectedIds)\n    {\n        Element elem = doc.GetElement(id);\n        if (elem != null)\n        {\n            LocationPoint lp = elem.Location as LocationPoint;\n            if (lp != null)\n            {\n                XYZ newPosition = new XYZ(5, 5, lp.Point.Z);\n                lp.Point = newPosition;\n            }\n        }\n    }\n}"}
{"prompt":"Create a 'Roof Terrace' level at 15m.","completion":"string levelName = \"Roof Terrace\";\ndouble elev = UnitUtils.ConvertToInternalUnits(15, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elev);\nnewLevel.Name = levelName;\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Construct a new Level named 'Level 3' at an elevation of 17 meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(17, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\nif (newLevel != null)\n{\n    try { newLevel.Name = \"Level 3\"; } catch {}\n}"}
{"prompt":"Agrega un nivel llamado 'Nivel Azotea' a 14.6 metros.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(14.6, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Nivel Azotea\";\n}"}
{"prompt":"Add a reference point at coordinates (1,6,3) inside the family editor.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(1,6,3));"}
{"prompt":"Aísla temporalmente todo el mobiliario en la vista activa.","completion":"ICollection<ElementId> furnitureIds = new FilteredElementCollector(doc, doc.ActiveView.Id).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsNotElementType().ToElementIds();\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.IsolateElementsTemporary(furnitureIds);\n}"}
{"prompt":"Crea una vista 3D con la caja de sección activada.","completion":"string viewName = \"Vista 3D con Caja de Sección\";\nViewFamilyType vft3D = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft3D != null)\n{\n    View3D view3d = View3D.CreateIsometric(doc, vft3D.Id);\n    if (view3d != null)\n    {\n        view3d.Name = viewName;\n        view3d.IsSectionBoxActive = true;\n    }\n}"}
{"prompt":"Crea un nuevo material llamado 'Vidrio Reflectante' y asígnale un color base.","completion":"string materialName = \"Vidrio Reflectante\";\nElementId materialId = Material.Create(doc, materialName);\n\nif (materialId != ElementId.InvalidElementId)\n{\n    Material material = doc.GetElement(materialId) as Material;\n    if (material != null)\n    {\n        material.Color = new Color(210, 230, 240); \/\/ Un color azulado claro para el vidrio\n        material.Transparency = 80;\n    }\n}"}
{"prompt":"Construct a 'Roof Terrace' level at 16m.","completion":"string levelName = \"Roof Terrace\";\ndouble elev = UnitUtils.ConvertToInternalUnits(16, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elev);\nnewLevel.Name = levelName;\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Retrieve the MEP space associated with the room 'Office 104'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Cast<Room>().FirstOrDefault(r => r.Name == \"Office 104\");\nList<Space> spaces = new List<Space>();\n\nif (room != null)\n{\n    spaces = new FilteredElementCollector(doc).OfClass(typeof(Space)).Cast<Space>().Where(s => s.Room != null && s.Room.Id == room.Id).ToList();\n}"}
{"prompt":"Label all rooms with their area.","completion":"using (Transaction t = new Transaction(doc, \"Tag All Rooms\"))\n{\n    t.Start();\n    View activeView = doc.ActiveView;\n\n    if (activeView != null)\n    {\n        List<Room> rooms = new FilteredElementCollector(doc, activeView.Id).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>().ToList();\n        foreach(Room room in rooms)\n        {\n            LocationPoint loc = room.Location as LocationPoint;\n            if(loc != null)\n            {\n                doc.Create.NewRoomTag(new LinkElementId(room.Id), new UV(loc.Point.X, loc.Point.Y), activeView.Id);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Duplica la vista 'Nivel 1' como una vista dependiente.","completion":"ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v => v.Name == \"Nivel 1\") as ViewPlan;\n\nif (viewToDuplicate != null)\n{\n    ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n}"}
{"prompt":"Load the 'Table.rfa' family and place it at (5,5,0) on Level 1.","completion":"string familyPath = \"C:\/Common\/Paths\/Table.rfa\";\nFamily tableFamily = null;\nbool familyLoaded = doc.LoadFamily(familyPath, out tableFamily);\n\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\n\nif (familyLoaded && tableFamily != null && level1 != null)\n{\n    FamilySymbol tableSymbol = doc.GetElement(tableFamily.GetFamilySymbolIds().FirstOrDefault()) as FamilySymbol;\n    if (tableSymbol != null)\n    {\n        if (!tableSymbol.IsActive) tableSymbol.Activate();\n        XYZ point = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0);\n        doc.Create.NewFamilyInstance(point, tableSymbol, level1, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Asigna todos los muros al workset 'Arquitectura'.","completion":"using (Transaction t = new Transaction(doc, \"Assign to Workset\"))\n{\n    t.Start();\n    if (doc.IsWorkshared)\n    {\n        Workset ws = new FilteredWorksetCollector(doc).OfKind(WorksetKind.UserWorkset).FirstOrDefault(w => w.Name == \"Arquitectura\");\n        if (ws != null)\n        {\n            FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType();\n            foreach (Element e in collector)\n            {\n                Parameter p = e.get_Parameter(BuiltInParameter.ELEM_PARTITION_PARAM);\n                if (p != null && !p.IsReadOnly)\n                {\n                    p.Set(ws.Id.IntegerValue);\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Mueve los elementos seleccionados 3 metros hacia arriba.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds != null && selectedIds.Count > 0)\n{\n    XYZ translation = new XYZ(0, 0, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters));\n    ElementTransformUtils.MoveElements(doc, selectedIds, translation);\n}"}
{"prompt":"Añade un nivel llamado 'Nivel Azotea' a 15.8 metros.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(15.8, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Nivel Azotea\";\n}"}
{"prompt":"Find all doors on Level 2 that belong to the 'Single-Flush' family.","completion":"Level level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 2\");\nList<Element> doors = new List<Element>();\n\nif (level2 != null)\n{\n    ElementCategoryFilter catFilter = new ElementCategoryFilter(BuiltInCategory.OST_Doors);\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level2.Id);\n    FilterableValueProvider provider = new ParameterValueProvider(new ElementId(BuiltInParameter.ELEM_FAMILY_PARAM));\n    FilterStringRuleEvaluator evaluator = new FilterStringEquals();\n    FilterRule famNameRule = new FilterStringRule(provider, evaluator, \"Single-Flush\");\n    ElementParameterFilter famFilter = new ElementParameterFilter(famNameRule);\n    LogicalAndFilter andFilter = new LogicalAndFilter(new List<ElementFilter> { catFilter, levelFilter, famFilter });\n    doors = new FilteredElementCollector(doc).WherePasses(andFilter).ToList();\n}"}
{"prompt":"Crea una columna estructural en la posición X=10, Y=5.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null && columnSymbol != null)\n{\n    doc.Create.NewFamilyInstance(new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0), columnSymbol, level, StructuralType.Column);\n}"}
{"prompt":"Find the host of a face-based light fixture.","completion":"FamilyInstance lightFixture = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsNotElementType().Cast<FamilyInstance>().FirstOrDefault(fi => fi.HostFace != null);\n\nElement host = null;\nif (lightFixture != null)\n{\n    Reference hostFaceRef = lightFixture.HostFace;\n    if (hostFaceRef != null)\n    {\n        host = doc.GetElement(hostFaceRef.ElementId);\n    }\n}"}
{"prompt":"Estandariza los materiales para que comiencen con el acrónimo 'MAT_'.","completion":"string prefix = \"MAT_\";\nIList<Material> materials = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().ToList();\n\nif (materials.Any())\n{\n    HashSet<string> existingNames = new HashSet<string>(materials.Select(m => m.Name));\n    foreach (Material mat in materials)\n    {\n        if (!mat.Name.StartsWith(prefix))\n        {\n            string newName = prefix + mat.Name;\n            string finalName = newName;\n            int i = 1;\n            while (existingNames.Contains(finalName))\n            {\n                finalName = $\"{newName}_{i++}\";\n            }\n            mat.Name = finalName;\n            existingNames.Add(finalName);\n        }\n    }\n}"}
{"prompt":"Exporta la vista 3D activa a NWC para Navisworks.","completion":"View3D view3d = doc.ActiveView as View3D;\n\nif (view3d != null)\n{\n    string folderPath = \"C:\/RevitExports\/\";\n    string fileName = view3d.Name + \".nwc\";\n    NavisworksExportOptions options = new NavisworksExportOptions();\n    options.ExportScope = NavisworksExportScope.View;\n    options.ViewId = view3d.Id;\n    doc.Export(folderPath, fileName, options);\n}"}
{"prompt":"Copia todos los elementos del Nivel 1 al Nivel 2.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\nLevel level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 2\") as Level;\nif (level1 != null && level2 != null)\n{\n    ICollection<ElementId> elementsToCopy = new FilteredElementCollector(doc, level1.Id).WhereElementIsNotElementType().ToElementIds();\n    double elevationDiff = level2.ProjectElevation - level1.ProjectElevation;\n    XYZ translation = new XYZ(0, 0, elevationDiff);\n    if(elementsToCopy.Any())\n    {\n        ElementTransformUtils.CopyElements(doc, elementsToCopy, translation);\n    }\n}"}
{"prompt":"Create a 'Concrete-Rectangular 30x60' column at each grid intersection.","completion":"using (Transaction t = new Transaction(doc, \"Create Columns at Grids\"))\n{\n    t.Start();\n    FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(s => s.Name == \"Concrete-Rectangular 30x60\");\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderBy(l => l.Elevation).FirstOrDefault();\n    List<Grid> grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().ToList();\n    if (columnSymbol != null && level != null)\n    {\n        if (!columnSymbol.IsActive) columnSymbol.Activate();\n        for (int i = 0; i < grids.Count; i++)\n        {\n            for (int j = i + 1; j < grids.Count; j++)\n            {\n                IntersectionResultArray results;\n                if(grids[i].Curve.Intersect(grids[j].Curve, out results) == SetComparisonResult.Overlap)\n                {\n                    if (results != null && !results.IsEmpty)\n                    {\n                        foreach (IntersectionResult ir in results)\n                        {\n                            doc.Create.NewFamilyInstance(ir.XYZPoint, columnSymbol, level, StructuralType.Column);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Generate a new room on Level 1 at point (11, 14).","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\n\nif (level1 != null)\n{\n    UV point = new UV(11, 14);\n    Room room = doc.Create.NewRoom(level1, point);\n}"}
{"prompt":"Copy the 'Generic - 145mm' wall type and name it 'Interior - 12cm Plaster'.","completion":"string originalName = \"Generic - 145mm\";\nstring newName = \"Interior - 12cm Plaster\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif (originalType != null)\n{\n    WallType newType = originalType.Duplicate(newName) as WallType;\n}"}
{"prompt":"Incorpora un nivel llamado 'Nivel Azotea' a 14.7 metros.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(14.7, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Nivel Azotea\";\n}"}
{"prompt":"Add a horizontal reference plane named 'Centerline A'.","completion":"using (Transaction t = new Transaction(doc, \"Add Reference Plane\"))\n{\n    t.Start();\n    string rpName = \"Centerline A\";\n    View activeView = doc.ActiveView;\n\n    if (activeView != null)\n    {\n        XYZ bubbleEnd = new XYZ(0, 10, 0);\n        XYZ freeEnd = new XYZ(10, 10, 0);\n        XYZ cutVec = XYZ.BasisZ;\n        ReferencePlane rp = doc.Create.NewReferencePlane(bubbleEnd, freeEnd, cutVec, activeView);\n        if (rp != null)\n        {\n            rp.Name = rpName;\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Get all door families loaded in the project.","completion":"List<Family> doorFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.Id.IntegerValue == (int)BuiltInCategory.OST_Doors).ToList();"}
{"prompt":"Modela un barandal en una escalera existente.","completion":"RailingType railingType = new FilteredElementCollector(doc).OfClass(typeof(RailingType)).FirstOrDefault() as RailingType;\nStairs stairs = new FilteredElementCollector(doc).OfClass(typeof(Stairs)).FirstOrDefault() as Stairs;\n\nif (railingType != null && stairs != null)\n{\n    Railing.Create(doc, stairs.Id, railingType.Id, RailingPlacementPosition.Treads);\n}"}
{"prompt":"Generate a floor plan view for 'Level 7'.","completion":"string levelName = \"Level 7\";\nLevel level3 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.FloorPlan);\n\nif (level3 != null && vft != null)\n{\n    ViewPlan viewPlan = ViewPlan.Create(doc, vft.Id, level3.Id);\n}"}
{"prompt":"Crea un nuevo tipo de muro de 30cm llamado 'Estructura'.","completion":"WallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif(wallTypeToDuplicate != null)\n{\n    WallType newWallType = null;\n    try { newWallType = wallTypeToDuplicate.Duplicate(\"Estructura\") as WallType; } catch {}\n    if(newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if(cs != null && cs.GetLayers().Any())\n        {\n            int coreLayerIndex = cs.GetFirstCoreLayerIndex();\n            if(coreLayerIndex != -1) \n            {\n                cs.SetLayerFunction(coreLayerIndex, MaterialFunctionAssignment.Structure);\n                cs.SetLayerWidth(coreLayerIndex, UnitUtils.ConvertToInternalUnits(30, UnitTypeId.Centimeters));\n                newWallType.SetCompoundStructure(cs);\n            }\n        }\n    }\n}"}
{"prompt":"Recupera la tabla de planificación 'Muros' y exporta sus datos a un archivo CSV.","completion":"ViewSchedule schedule = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().FirstOrDefault(s=>s.Name==\"Muros\");\n\nif (schedule != null)\n{\n    string folderPath = \"C:\/RevitExports\/\";\n    ViewScheduleExportOptions options = new ViewScheduleExportOptions() { FieldDelimiter = \",\" };\n    schedule.Export(folderPath, \"Muros.csv\", options);\n}"}
{"prompt":"Get the MEP space associated with the room 'Office 101'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Cast<Room>().FirstOrDefault(r => r.Name == \"Office 101\");\nList<Space> spaces = new List<Space>();\n\nif (room != null)\n{\n    spaces = new FilteredElementCollector(doc).OfClass(typeof(Space)).Cast<Space>().Where(s => s.Room != null && s.Room.Id == room.Id).ToList();\n}"}
{"prompt":"Build a new door type named 'FR-60 Door' and set the 'Fire Rating' parameter to '60 min'.","completion":"string newTypeName = \"FR-60 Door\";\nFamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (doorTypeToDuplicate != null)\n{\n    FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\n    if (newDoorType != null)\n    {\n        Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n        if (fireRatingParam != null && !fireRatingParam.IsReadOnly) fireRatingParam.Set(\"60 min\");\n    }\n}"}
{"prompt":"Create a stair between Level 2 and Level 1","completion":"\/\/ This is a complex operation that requires multiple steps and\/or user interaction and is not supported by the agent."}
{"prompt":"Importa topografía georreferenciada desde un archivo LandXML.","completion":"\/\/ The Revit API in the provided context does not support direct LandXML import.\n\/\/ This functionality typically requires additional add-ins like the Site Designer, which are not available here.\n\/\/ As a placeholder, this code will show how to create a simple topography surface from a list of points.\nusing(Transaction t = new Transaction(doc, \"Create Topography\"))\n{\n    t.Start();\n    IList<XYZ> points = new List<XYZ>();\n    points.Add(new XYZ(0, 0, 0));\n    points.Add(new XYZ(50, 0, 5));\n    points.Add(new XYZ(0, 50, 10));\n    TopographySurface.Create(doc, points);\n    t.Commit();\n}"}
{"prompt":"Rename all loaded families containing 'Metric' to 'Imperial'.","completion":"List<Family> familiesToRename = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.Name.Contains(\"Metric\")).ToList();\nforeach(Family fam in familiesToRename)\n{\n    fam.Name = fam.Name.Replace(\"Metric\", \"Imperial\");\n}"}
{"prompt":"Gira un elemento seleccionado 88 grados sobre su eje Z.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un elemento para rotar\");\nElement elem = doc.GetElement(pickedRef.ElementId);\nLocationPoint lp = elem.Location as LocationPoint;\nLine axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\nElementTransformUtils.RotateElement(doc, elem.Id, axis, Math.PI \/ 88);"}
{"prompt":"Define the sill height of all windows to 3 meter.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Asigna el material 'Pintura Blanca' a la primera capa de un tipo de muro.","completion":"using (Transaction t = new Transaction(doc, \"Assign Material\"))\n{\n    t.Start();\n    WallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.GetCompoundStructure() != null);\n    Material steel = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m => m.Name.Contains(\"Steel\") || m.Name.Contains(\"Pintura Blanca\"));\n\n    if (wallType != null && steel != null)\n    {\n        CompoundStructure cs = wallType.GetCompoundStructure();\n        if (cs != null && cs.LayerCount > 0)\n        {\n            cs.SetMaterialId(0, steel.Id);\n            wallType.SetCompoundStructure(cs);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Define the 'Comments' parameter for all doors on Level 1 to 'Fire Rating - 89 min'.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\n\nif (level1 != null)\n{\n    List<FamilyInstance> doorsOnLevel1 = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsNotElementType().Cast<FamilyInstance>().Where(fi => fi.LevelId == level1.Id).ToList();\n    foreach(FamilyInstance door in doorsOnLevel1)\n    {\n        Parameter commentsParam = door.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n        if (commentsParam != null && !commentsParam.IsReadOnly) commentsParam.Set(\"Fire Rating - 89 min\");\n    }\n}"}
{"prompt":"Build a new Level named 'Level 9' at an elevation of 11 meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(11, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\nif (newLevel != null)\n{\n    try { newLevel.Name = \"Level 9\"; } catch {}\n}"}
{"prompt":"¿Cuál es la longitud de la viga seleccionada?","completion":"ElementId selectedId = uidoc.Selection.GetElementIds().FirstOrDefault();\nif (selectedId != null && selectedId != ElementId.InvalidElementId)\n{\n    Element beam = doc.GetElement(selectedId);\n    if (beam != null)\n    {\n        Parameter lengthParam = beam.get_Parameter(BuiltInParameter.CURVE_ELEM_LENGTH);\n        if (lengthParam != null)\n        {\n            double lengthInFeet = lengthParam.AsDouble();\n            \/\/ The orchestrator would be responsible for displaying this value.\n        }\n    }\n}"}
{"prompt":"Apply the 'X-Ray' visual style to the active 3D view.","completion":"View3D view3D = doc.ActiveView as View3D;\nif (view3D != null && !view3D.IsTemplate)\n{\n    view3D.DisplayStyle = DisplayStyle.Wireframe; \/\/ Simulates 'X-Ray' effect\n}"}
{"prompt":"Crea un ensamblaje a partir de los elementos seleccionados.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds != null && selectedIds.Count > 0)\n{\n    AssemblyInstance assemblyInstance = AssemblyInstance.Create(doc, selectedIds, new ElementId(BuiltInCategory.OST_Assemblies));\n    if (assemblyInstance != null)\n    {\n        assemblyInstance.Name = \"Nuevo Ensamblaje\";\n    }\n}"}
{"prompt":"Sitúa una instancia de la familia 'Ventana Fija 125x60' en el centro de la habitación 'Despacho 96'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 125\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Ventana Fija 96x60\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);"}
{"prompt":"Copia la vista 'Losa 95' como una vista dependiente.","completion":"ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v => v.Name == \"Losa 95\") as ViewPlan;\n\nif (viewToDuplicate != null)\n{\n    ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n}"}
{"prompt":"Crea un nuevo Nivel llamado 'Nivel 3' a una elevación de 9 metros.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(9, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Nivel 3\";\n}"}
{"prompt":"Inserta un rociador en las coordenadas (6,7,1).","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol sprinklerSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Sprinklers).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (level != null && sprinklerSymbol != null)\n{\n    if (!sprinklerSymbol.IsActive) sprinklerSymbol.Activate();\n    XYZ placementPoint = new XYZ(UnitUtils.ConvertToInternalUnits(6, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(7, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters));\n    doc.Create.NewFamilyInstance(placementPoint, sprinklerSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n}"}
{"prompt":"Coloca las vistas 'Planta Nivel 1' y 'Planta Nivel 2' en el plano 'A-101'.","completion":"ViewSheet sheet = new FilteredElementCollector(doc).OfClass(typeof(ViewSheet)).Cast<ViewSheet>().FirstOrDefault(s => s.SheetNumber == \"A-101\");\nView view1 = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().FirstOrDefault(v => v.Name == \"Planta Nivel 1\");\nView view2 = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().FirstOrDefault(v => v.Name == \"Planta Nivel 2\");\nif (sheet != null && view1 != null && view2 != null)\n{\n    XYZ insertPoint1 = new XYZ(1.0, 1.0, 0);\n    Viewport.Create(doc, sheet.Id, view1.Id, insertPoint1);\n    XYZ insertPoint2 = new XYZ(1.0, 2.0, 0);\n    Viewport.Create(doc, sheet.Id, view2.Id, insertPoint2);\n}"}
{"prompt":"Ajusta el tipo de la ventana seleccionada al tipo 'Fija 115x60'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una ventana\");\nFamilySymbol newType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name == \"Fija 115x60\");\nif (pickedRef != null && newType != null)\n{\n    FamilyInstance window = doc.GetElement(pickedRef.ElementId) as FamilyInstance;\n    if (window != null)\n    {\n        window.Symbol = newType;\n    }\n}"}
{"prompt":"Añade un nivel llamado 'Nivel Azotea' a 15.3 metros.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(15.3, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Nivel Azotea\";\n}"}
{"prompt":"Vira un elemento seleccionado 95 grados sobre su eje Z.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un elemento para rotar\");\nElement elem = doc.GetElement(pickedRef.ElementId);\nLocationPoint lp = elem.Location as LocationPoint;\nLine axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\nElementTransformUtils.RotateElement(doc, elem.Id, axis, Math.PI \/ 95);"}
{"prompt":"Crea los worksets 'Arquitectura', 'Estructura' y 'Interiores'.","completion":"if (doc.IsWorkshared)\n{\n    Workset.Create(doc, \"Arquitectura\");\n    Workset.Create(doc, \"Estructura\");\n    Workset.Create(doc, \"Interiores\");\n}"}
{"prompt":"Sitúa una instancia de la familia 'Mesa de Oficina' en el centro de la habitación 'Despacho 100'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 100\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Mesa de Oficina\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);"}
{"prompt":"Crea una nota de texto con una flecha apuntando a un elemento y una ubicación dadas.","completion":"using (Transaction t = new Transaction(doc, \"Create Text Note\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference target = localUidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un elemento para anotar\");\n    XYZ textLocation = localUidoc.Selection.PickPoint(\"Elige la ubicación del texto\");\n\n    View activeView = doc.ActiveView;\n    ElementId defaultTypeId = doc.GetDefaultElementTypeId(ElementTypeGroup.TextNoteType);\n\n    if (target != null && textLocation != null && activeView != null && defaultTypeId != ElementId.InvalidElementId)\n    {\n        TextNoteOptions opts = new TextNoteOptions(defaultTypeId);\n        opts.HorizontalAlignment = HorizontalTextAlignment.Left;\n        TextNote note = TextNote.Create(doc, activeView.Id, textLocation, \"Revisar este elemento\", opts);\n        if (note != null)\n        {\n            Leader leader = note.AddLeader(TextNoteLeaderTypes.TNLT_STRAIGHT_L);\n            leader.End = target.GlobalPoint;\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Configure the sill height of all windows to 5 meter.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Create a new A1 sheet and place the 'Ground Floor' view on it.","completion":"using (Transaction t = new Transaction(doc, \"Create Sheet\"))\n{\n    t.Start();\n    string sheetNumber = \"A-101\";\n    FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(tb => tb.Name.Contains(\"A1\"));\n    View viewToPlace = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<View>().FirstOrDefault(v => v.Name == \"Ground Floor\");\n\n    if (titleBlock != null && viewToPlace != null)\n    {\n        ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n        if (newSheet != null)\n        {\n            newSheet.Name = \"Architectural Plan - Ground Floor\";\n            newSheet.SheetNumber = sheetNumber;\n            BoundingBoxUV sheetBox = newSheet.Outline;\n            UV centerUv = (sheetBox.Min + sheetBox.Max) \/ 2;\n            XYZ centerPoint = new XYZ(centerUv.U, centerUv.V, 0);\n            Viewport.Create(doc, newSheet.Id, viewToPlace.Id, centerPoint);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Extrae todas las habitaciones en el Nivel 'Losa 101'.","completion":"Level groundFloor = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Losa 101\") as Level;\nList<Element> roomsOnGround = new List<Element>();\n\nif (groundFloor != null)\n{\n    roomsOnGround = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Where(r => r.LevelId == groundFloor.Id).ToList();\n}"}
{"prompt":"Crea un nuevo Nivel llamado 'Nivel 3' a una elevación de 10 metros.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Nivel 3\";\n}"}
{"prompt":"Set the visibility of the 'Furniture' category to false in the active view.","completion":"Category furnitureCat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Furniture);\nView activeView = doc.ActiveView;\n\nif (furnitureCat != null && activeView != null)\n{\n    activeView.SetCategoryHidden(furnitureCat.Id, true);\n}\n"}
{"prompt":"Retrieve a list of all project warnings.","completion":"IList<FailureMessage> warnings = doc.GetWarnings();\nList<string> warningDescriptions = warnings.Select(w => w.GetDescriptionText()).ToList();\n"}
{"prompt":"Construct a new workset named 'Structure'.","completion":"string wsName = \"Structure\";\nWorkset newWorkset = Workset.Create(doc, wsName);\n"}
{"prompt":"Export the document to an IFC file with version IFC4x3.","completion":"string folderPath = \"C:\/RevitExports\/\";\nstring fileName = doc.Title + \"_IFC4x3.ifc\";\nIFCExportOptions options = new IFCExportOptions();\noptions.FileVersion = IFCVersion.IFC4x3;\ndoc.Export(folderPath, fileName, options);"}
{"prompt":"Create a new level named 'Mezzanine' at 8.0 meters elevation.","completion":"string levelName = \"Mezzanine\";\ndouble elevation = UnitUtils.ConvertToInternalUnits(8.0, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Generate a global length parameter named 'CorridorWidth' with a value of 1.8m.","completion":"string paramName = \"CorridorWidth\";\nGlobalParameter gp = GlobalParameter.Create(doc, paramName, SpecTypeId.Length);\n\nif (gp != null)\n{\n    gp.SetValue(new DoubleParameterValue(UnitUtils.ConvertToInternalUnits(1.8, UnitTypeId.Meters)));\n}"}
{"prompt":"Obtain all door families loaded in the project.","completion":"List<Family> doorFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.Id.IntegerValue == (int)BuiltInCategory.OST_Doors).ToList();"}
{"prompt":"Obtain all rooms on Level 3","completion":"string levelName = \"Level 3\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(targetLevel.Id);\n    FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WherePasses(levelFilter);\n    uidoc.Selection.SetElementIds(collector.ToElementIds());\n}"}
{"prompt":"Obtain the host element of the first window found.","completion":"FamilyInstance windowInstance = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\n\nif (windowInstance != null)\n{\n    Element hostElement = windowInstance.Host;\n}"}
{"prompt":"Agrupa una tabla de planificación de habitaciones por Nivel.","completion":"using (Transaction t = new Transaction(doc, \"Group Schedule\"))\n{\n    t.Start();\n    ViewSchedule schedule = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().FirstOrDefault(vs => vs.Definition.CategoryId.IntegerValue == (int)BuiltInCategory.OST_Rooms);\n\n    if (schedule != null)\n    {\n        ScheduleDefinition def = schedule.Definition;\n        if (def != null)\n        {\n            SchedulableField schedulableField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.ROOM_LEVEL_ID);\n            if (schedulableField != null)\n            {\n                ScheduleField field = def.AddField(schedulableField);\n                ScheduleSortGroupField sortGroupField = new ScheduleSortGroupField(field.FieldId);\n                sortGroupField.ShowHeader = true;\n                def.AddSortGroupField(sortGroupField);\n                def.IsItemized = false;\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Sitúa una cota de elevación en el Nivel 1.","completion":"using (Transaction t = new Transaction(doc, \"Place Spot Elevation\"))\n{\n    t.Start();\n    Level lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel 1\");\n    View activeView = doc.ActiveView;\n\n    if (lvl1 != null && activeView != null)\n    {\n        Reference levelRef = new Reference(lvl1);\n        XYZ origin = new XYZ(5\/0.3048, 5\/0.3048, lvl1.Elevation);\n        XYZ leaderEnd = origin + new XYZ(2\/0.3048, 2\/0.3048, 0);\n        doc.Create.NewSpotElevation(activeView, levelRef, origin, origin, leaderEnd, origin, true);\n    }\n    t.Commit();\n}"}
{"prompt":"Construct a shaft opening that passes through from Level 1 to Level 3.","completion":"using (Transaction t = new Transaction(doc, \"Create Shaft Opening\"))\n{\n    t.Start();\n    Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 1\");\n    Level topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 3\");\n\n    if (bottomLevel != null && topLevel != null)\n    {\n        XYZ p1 = new XYZ(5 \/ 0.3048, 5 \/ 0.3048,0);\n        XYZ p2 = new XYZ(8 \/ 0.3048, 5 \/ 0.3048,0);\n        XYZ p3 = new XYZ(8 \/ 0.3048, 8 \/ 0.3048,0);\n        XYZ p4 = new XYZ(5 \/ 0.3048, 8 \/ 0.3048,0);\n        CurveArray profile = new CurveArray();\n        profile.Append(Line.CreateBound(p1,p2));\n        profile.Append(Line.CreateBound(p2,p3));\n        profile.Append(Line.CreateBound(p3,p4));\n        profile.Append(Line.CreateBound(p4,p1));\n        Opening shaft = doc.Create.NewOpening(bottomLevel, topLevel, profile);\n    }\n    t.Commit();\n}"}
{"prompt":"Encuentra todos los muros que no tienen nivel base asignado.","completion":"ElementFilter unassociatedFilter = new ElementLevelFilter(ElementId.InvalidElementId);\nList<Element> unassignedWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(unassociatedFilter).ToList();"}
{"prompt":"Append a reference point at coordinates (1,7,4) inside the family editor.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(1,7,4));"}
{"prompt":"Place an instance of the 'Office Desk' family in the center of the 'Office 103' room.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Office 103\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Office Desk\") as FamilySymbol;\nif(furnitureSymbol != null && !furnitureSymbol.IsActive) furnitureSymbol.Activate();\nif(room != null)\n{\n    LocationPoint roomCenter = room.Location as LocationPoint;\n    if(roomCenter != null && furnitureSymbol != null && room.Level != null)\n    {\n        doc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Coloca la vista 'Nivel 2' en el centro de la hoja activa.","completion":"ViewPlan viewToPlace = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v => v.Name == \"Nivel 2\") as ViewPlan;\nViewSheet activeSheet = doc.ActiveView as ViewSheet;\n\nif (viewToPlace != null && activeSheet != null)\n{\n    BoundingBoxUV sheetBox = activeSheet.Outline;\n    XYZ centerPoint = new XYZ((sheetBox.Min.U + sheetBox.Max.U) \/ 2, (sheetBox.Min.V + sheetBox.Max.V) \/ 2, 0);\n    Viewport.Create(doc, activeSheet.Id, viewToPlace.Id, centerPoint);\n}"}
{"prompt":"Obtén la tabla de planificación 'Muros' y exporta sus datos a un archivo CSV.","completion":"ViewSchedule schedule = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().FirstOrDefault(s=>s.Name==\"Muros\");\n\nif (schedule != null)\n{\n    string folderPath = \"C:\/RevitExports\/\";\n    ViewScheduleExportOptions options = new ViewScheduleExportOptions() { FieldDelimiter = \",\" };\n    schedule.Export(folderPath, \"Muros.csv\", options);\n}"}
{"prompt":"Put an instance of the 'Office Desk' family in the center of the 'Office 99' room.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Office 99\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Office Desk\") as FamilySymbol;\nif(furnitureSymbol != null && !furnitureSymbol.IsActive) furnitureSymbol.Activate();\nif(room != null)\n{\n    LocationPoint roomCenter = room.Location as LocationPoint;\n    if(roomCenter != null && furnitureSymbol != null && room.Level != null)\n    {\n        doc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Change the type of a selected floor to 'Concrete 14cm'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a floor\");\n\nif (pickedRef != null)\n{\n    Floor floorToChange = doc.GetElement(pickedRef) as Floor;\n    FloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name == \"Concrete 14cm\");\n    \n    if (floorToChange != null && newType != null)\n    {\n        floorToChange.ChangeTypeId(newType.Id);\n    }\n}"}
{"prompt":"Create a Reflected Ceiling Plan view for Level 1.","completion":"string levelName = \"Level 1\";\nstring viewName = \"Level 1 Ceiling Plan\";\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.CeilingPlan);\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\n\nif (vft != null && level1 != null)\n{\n    ViewPlan rcp = ViewPlan.Create(doc, vft.Id, level1.Id);\n    if (rcp != null)\n    {\n        rcp.Name = viewName;\n    }\n}"}
{"prompt":"Place an instance of the 'Office Desk' family in the center of the 'Office 96' room.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Office 96\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Office Desk\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);"}
{"prompt":"Construct a new wall type 'Generic Wall 262mm' with a thickness of 30cm.","completion":"string newTypeName = \"Generic Wall 262mm\";\nWallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif (oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(newTypeName) as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(30, UnitTypeId.Centimeters));\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n}"}
{"prompt":"Ajusta todas las ventanas para que la altura del antepecho sea 1 metro.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Inserta un punto de referencia en las coordenadas (5,1,3) dentro del editor de familias.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(5,1,3));"}
{"prompt":"Provide a list of all structural framing types.","completion":"FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType();\nList<string> framingTypeNames = collector.Select(e => e.Name).ToList();"}
{"prompt":"Crea una apertura de hueco vertical (shaft) desde el nivel base hasta el nivel más alto.","completion":"using (Transaction t = new Transaction(doc, \"Create Shaft\"))\n{\n    t.Start();\n    Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderBy(l => l.ProjectElevation).FirstOrDefault();\n    Level topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderByDescending(l => l.ProjectElevation).FirstOrDefault();\n\n    if (bottomLevel != null && topLevel != null)\n    {\n        XYZ p1 = new XYZ(2 \/ 0.3048, 2 \/ 0.3048,0);\n        XYZ p2 = new XYZ(5 \/ 0.3048, 2 \/ 0.3048,0);\n        XYZ p3 = new XYZ(5 \/ 0.3048, 5 \/ 0.3048,0);\n        XYZ p4 = new XYZ(2 \/ 0.3048, 5 \/ 0.3048,0);\n        CurveArray profile = new CurveArray();\n        profile.Append(Line.CreateBound(p1,p2));\n        profile.Append(Line.CreateBound(p2,p3));\n        profile.Append(Line.CreateBound(p3,p4));\n        profile.Append(Line.CreateBound(p4,p1));\n        doc.Create.NewOpening(bottomLevel, topLevel, profile);\n    }\n    t.Commit();\n}"}
{"prompt":"Assign the 'Steel' material to the first layer of a wall type.","completion":"using (Transaction t = new Transaction(doc, \"Assign Material\"))\n{\n    t.Start();\n    WallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.GetCompoundStructure() != null);\n    Material steel = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m => m.Name.Contains(\"Steel\"));\n\n    if (wallType != null && steel != null)\n    {\n        CompoundStructure cs = wallType.GetCompoundStructure();\n        if (cs != null && cs.LayerCount > 0)\n        {\n            cs.SetMaterialId(0, steel.Id);\n            wallType.SetCompoundStructure(cs);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Modifica el tipo de una losa seleccionada a 'Concreto 20cm'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una losa\");\n\nif (pickedRef != null)\n{\n    Floor floorToChange = doc.GetElement(pickedRef) as Floor;\n    FloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name == \"Concreto 20cm\");\n    \n    if (floorToChange != null && newType != null)\n    {\n        floorToChange.ChangeTypeId(newType.Id);\n    }\n}"}
{"prompt":"Create a Path of Travel between points (1,1) and (10,10) in the plan view.","completion":"\/\/ PathOfTravel.Create is likely inaccessible in this environment.\n\/\/ A comment is left as a placeholder for the intended functionality.\n\/*\nusing (Transaction t = new Transaction(doc, \"Create Path of Travel\"))\n{\n    t.Start();\n    ViewPlan viewPlan = doc.ActiveView as ViewPlan;\n\n    if (viewPlan != null && viewPlan.ViewType == ViewType.FloorPlan)\n    {\n        ElementId levelId = viewPlan.get_Parameter(BuiltInParameter.PLAN_VIEW_LEVEL).AsElementId();\n        Level level = doc.GetElement(levelId) as Level;\n        if (level != null)\n        {\n            XYZ startPoint = new XYZ(1 \/ 0.3048, 1 \/ 0.3048, level.Elevation);\n            XYZ endPoint = new XYZ(10 \/ 0.3048, 10 \/ 0.3048, level.Elevation);\n            \/\/ PathOfTravel.Create(viewPlan, startPoint, endPoint);\n        }\n    }\n    t.Commit();\n}\n*\/"}
{"prompt":"Check if the active view is a plan view.","completion":"View activeView = doc.ActiveView;\nbool isPlanView = false;\n\nif (activeView != null)\n{\n    isPlanView = activeView.ViewType == ViewType.FloorPlan \n                 || activeView.ViewType == ViewType.CeilingPlan \n                 || activeView.ViewType == ViewType.AreaPlan \n                 || activeView.ViewType == ViewType.EngineeringPlan;\n}\n"}
{"prompt":"Get a list of all material names.","completion":"List<Material> materials = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().ToList();\nList<string> materialNames = new List<string>();\nforeach(Material m in materials)\n{\n    materialNames.Add(m.Name);\n}\n"}
{"prompt":"Replicate the 'Basic Wall' type and rename it.","completion":"string typeToDuplicate = \"Basic Wall\";\nstring newTypeName = \"Basic Wall Copy\";\nWallType wt = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(w=>w.Name==typeToDuplicate);\n\nif (wt != null)\n{\n    WallType newWt = wt.Duplicate(newTypeName) as WallType;\n}"}
{"prompt":"Coloca una instancia de la familia 'Mesa de Oficina' en el centro de la habitación 'Despacho 106'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 106\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Mesa de Oficina\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);"}
{"prompt":"Construct a new level 'Level 6' at an elevation of 16 meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(16, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\nif (newLevel != null)\n{\n    try { newLevel.Name = \"Level 6\"; } catch {}\n}"}
{"prompt":"Mueve un elemento seleccionado a la posición (6,9).","completion":"ICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nElementId selectedId = selectedIds.FirstOrDefault();\nif (selectedId != null && selectedId != ElementId.InvalidElementId)\n{\n    Element elem = doc.GetElement(selectedId);\n    if (elem != null)\n    {\n        LocationPoint lp = elem.Location as LocationPoint;\n        if (lp != null)\n        {\n            XYZ currentPoint = lp.Point;\n            XYZ newPosition = new XYZ(6, 9, currentPoint.Z);\n            XYZ translation = newPosition - currentPoint;\n            if(translation.GetLength() > 0.001)\n            {\n                ElementTransformUtils.MoveElement(doc, elem.Id, translation);\n            }\n        }\n    }\n}"}
{"prompt":"Create a new wall type 'Generic Wall 343mm' with a thickness of 30cm.","completion":"WallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif(oldWallType != null)\n{\n    WallType newWallType = null;\n    try { newWallType = oldWallType.Duplicate(\"Generic Wall 343mm\") as WallType; } catch {}\n    if(newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if(cs != null && cs.GetLayers().Any())\n        {\n            int coreLayerIndex = cs.GetFirstCoreLayerIndex();\n            if(coreLayerIndex != -1)\n            {\n                cs.SetLayerWidth(coreLayerIndex, UnitUtils.ConvertToInternalUnits(30, UnitTypeId.Centimeters));\n                newWallType.SetCompoundStructure(cs);\n            }\n        }\n    }\n}"}
{"prompt":"Crea una losa de cimentación estructural de 40cm de espesor.","completion":"Level foundationLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderBy(l => l.Elevation).FirstOrDefault();\nFloorType slabTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.get_Parameter(BuiltInParameter.FLOOR_PARAM_IS_STRUCTURAL).AsInteger() == 1);\nif(slabTypeToDuplicate != null && foundationLevel != null)\n{\n    string newTypeName = \"Losa Cimentación 40cm\";\n    FloorType newSlabType = slabTypeToDuplicate.Duplicate(newTypeName) as FloorType;\n    if(newSlabType != null)\n    {\n        CompoundStructure cs = newSlabType.GetCompoundStructure();\n        if (cs != null)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(40, UnitTypeId.Centimeters));\n            newSlabType.SetCompoundStructure(cs);\n            XYZ p1 = new XYZ(0,0,0); XYZ p2 = new XYZ(10,0,0); XYZ p3 = new XYZ(10,10,0); XYZ p4 = new XYZ(0,10,0);\n            CurveLoop profile = new CurveLoop();\n            profile.Append(Line.CreateBound(p1,p2)); profile.Append(Line.CreateBound(p2,p3)); profile.Append(Line.CreateBound(p3,p4)); profile.Append(Line.CreateBound(p4,p1));\n            Floor.Create(doc, new List<CurveLoop>{profile}, newSlabType.Id, foundationLevel.Id);\n        }\n    }\n}"}
{"prompt":"Build a new Level named 'Level 2' at an elevation of 17 meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(17, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Level 2\";\n}"}
{"prompt":"Crea un nuevo tipo de muro 'Muro Genérico 300mm' con un grosor de 30cm.","completion":"using (Transaction t = new Transaction(doc, \"Create Wall Type\"))\n{\n    t.Start();\n    string newTypeName = \"Muro Genérico 300mm\";\n    WallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\n    if (oldWallType != null)\n    {\n        WallType newWallType = oldWallType.Duplicate(newTypeName) as WallType;\n        if (newWallType != null)\n        {\n            CompoundStructure cs = newWallType.GetCompoundStructure();\n            if (cs != null && cs.LayerCount > 0)\n            {\n                int coreLayerIndex = cs.GetFirstCoreLayerIndex();\n                if (coreLayerIndex >= 0 && coreLayerIndex < cs.LayerCount)\n                {\n                    cs.SetLayerWidth(coreLayerIndex, 300 \/ 304.8);\n                    newWallType.SetCompoundStructure(cs);\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Modifica el nivel de detalle de la vista activa a 'Medio'.","completion":"View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.DetailLevel = ViewDetailLevel.Medium;\n}"}
{"prompt":"Put a camera in the active view.","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(f => f.ViewFamily == ViewFamily.ThreeDimensional);\nif (vft != null)\n{\n    View3D cameraView = View3D.CreatePerspective(doc, vft.Id);\n    if (cameraView != null)\n    {\n        try { cameraView.Name = \"New Camera View\"; } catch {}\n        XYZ eyePos = new XYZ(10, 10, 10);\n        XYZ upDir = XYZ.BasisZ;\n        XYZ forwardDir = XYZ.Zero - eyePos;\n        ViewOrientation3D orientation = new ViewOrientation3D(eyePos, upDir, forwardDir);\n        cameraView.SetOrientation(orientation);\n    }\n}"}
{"prompt":"Construct a new room on Level 1 at point (11, 7).","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nif (level1 != null)\n{\n    UV point = new UV(11, 7);\n    Room room = doc.Create.NewRoom(level1, point);\n}"}
{"prompt":"Dentro del editor de familias, crea un nuevo plano de referencia horizontal.","completion":"if (doc.IsFamilyDocument)\n{\n    string rpName = \"Plano Horizontal\";\n    XYZ start = new XYZ(-5, 0, 0);\n    XYZ end = new XYZ(5, 0, 0);\n    XYZ normal = new XYZ(0, 0, 1);\n    View activeView = doc.ActiveView;\n\n    if (activeView != null)\n    {\n        ReferencePlane rp = doc.FamilyCreate.NewReferencePlane(start, end, normal, activeView);\n        if (rp != null)\n        {\n            rp.Name = rpName;\n        }\n    }\n}"}
{"prompt":"Ubica una instancia de la familia 'Puerta Sencilla' en el centro de la habitación 'Despacho 99'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 99\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Puerta Sencilla\") as FamilySymbol;\nif(furnitureSymbol != null && !furnitureSymbol.IsActive) furnitureSymbol.Activate();\nif(room != null)\n{\n    LocationPoint roomCenter = room.Location as LocationPoint;\n    if(roomCenter != null && furnitureSymbol != null && room.Level != null)\n    {\n        doc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Model a railing on an existing staircase.","completion":"RailingType railingType = new FilteredElementCollector(doc).OfClass(typeof(RailingType)).FirstOrDefault() as RailingType;\nStairs stairs = new FilteredElementCollector(doc).OfClass(typeof(Stairs)).FirstOrDefault() as Stairs;\n\nif (railingType != null && stairs != null)\n{\n    Railing.Create(doc, stairs.Id, railingType.Id, RailingPlacementPosition.Treads);\n}"}
{"prompt":"Build a DirectShape topography from a list of points.","completion":"\/\/ Create a default set of points as none were specified in the prompt\nList<XYZ> points = new List<XYZ>\n{\n    new XYZ(0, 0, 0),\n    new XYZ(50, 0, 2),\n    new XYZ(0, 50, 5),\n    new XYZ(50, 50, 3)\n};\n\nTessellatedShapeBuilder builder = new TessellatedShapeBuilder();\nbuilder.OpenConnectedFaceSet(true);\nbuilder.AddFace(new TessellatedFace(new List<XYZ> { points[0], points[1], points[2] }, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ> { points[1], points[3], points[2] }, ElementId.InvalidElementId));\nbuilder.CloseConnectedFaceSet();\nbuilder.Build();\nTessellatedShapeBuilderResult result = builder.GetBuildResult();\n\nif (result.GetGeometricalObjects().Any())\n{\n    DirectShape ds = DirectShape.CreateElement(doc, new ElementId(BuiltInCategory.OST_Topography));\n    if (ds != null)\n    {\n        ds.SetShape(result.GetGeometricalObjects());\n        ds.Name = \"Topography DirectShape\";\n    }\n}"}
{"prompt":"Incorpora los campos 'Nivel', 'Marca' y 'Volumen' a la tabla de pilares.","completion":"ViewSchedule schedule = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().FirstOrDefault(s => s.Name.Contains(\"Pilares\") || s.Name.Contains(\"Column\"));\nif (schedule != null)\n{\n    ScheduleDefinition def = schedule.Definition;\n    SchedulableField levelField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.FAMILY_LEVEL_PARAM);\n    if (levelField != null) def.AddField(levelField);\n    SchedulableField markField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.ALL_MODEL_MARK);\n    if (markField != null) def.AddField(markField);\n    SchedulableField volumeField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.HOST_VOLUME_COMPUTED);\n    if (volumeField != null) def.AddField(volumeField);\n}"}
{"prompt":"Establece el parámetro 'Comentarios' de todas las puertas del Nivel 3 a 'Clasificación Fuego - 91 min'.","completion":"string levelName = \"Nivel 3\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(targetLevel.Id);\n    FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WherePasses(levelFilter);\n    foreach (Element door in collector)\n    {\n        Parameter commentsParam = door.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n        if (commentsParam != null && !commentsParam.IsReadOnly) { commentsParam.Set(\"Clasificación Fuego - 91 min\"); }\n    }\n}"}
{"prompt":"Generate a default 3D view.","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft != null)\n{\n    View3D view3d = View3D.CreateIsometric(doc, vft.Id);\n}"}
{"prompt":"Coloca un rociador en las coordenadas (1,6,7).","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol sprinklerSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Sprinklers).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (level != null && sprinklerSymbol != null)\n{\n    if (!sprinklerSymbol.IsActive) sprinklerSymbol.Activate();\n    XYZ placementPoint = new XYZ(UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(6, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(7, UnitTypeId.Meters));\n    doc.Create.NewFamilyInstance(placementPoint, sprinklerSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n}"}
{"prompt":"Form a ceiling at a height of 2.8 meters on Level 1.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nCeilingType ceilingType = new FilteredElementCollector(doc).OfClass(typeof(CeilingType)).FirstOrDefault() as CeilingType;\n\nif (level != null && ceilingType != null)\n{\n    \/\/ Create a default 10ft x 10ft rectangular profile as the prompt is not specific\n    CurveLoop profile = new CurveLoop();\n    profile.Append(Line.CreateBound(new XYZ(0, 0, 0), new XYZ(10, 0, 0)));\n    profile.Append(Line.CreateBound(new XYZ(10, 0, 0), new XYZ(10, 10, 0)));\n    profile.Append(Line.CreateBound(new XYZ(10, 10, 0), new XYZ(0, 10, 0)));\n    profile.Append(Line.CreateBound(new XYZ(0, 10, 0), new XYZ(0, 0, 0)));\n\n    Ceiling ceiling = Ceiling.Create(doc, new List<CurveLoop> { profile }, ceilingType.Id, level.Id);\n    if (ceiling != null)\n    {\n        Parameter heightParam = ceiling.get_Parameter(BuiltInParameter.CEILING_HEIGHTABOVELEVEL_PARAM);\n        if (heightParam != null && !heightParam.IsReadOnly)\n        {\n            heightParam.Set(UnitUtils.ConvertToInternalUnits(2.8, UnitTypeId.Meters));\n        }\n    }\n}"}
{"prompt":"Crea un circuito eléctrico conectando luminarias a un panel.","completion":"using (Transaction t = new Transaction(doc, \"Create Electrical Circuit\"))\n{\n    t.Start();\n    FamilyInstance panel = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_ElectricalEquipment).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\n    List<ElementId> fixtureIds = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsNotElementType().ToElementIds().ToList();\n\n    if (panel != null && fixtureIds.Count > 0)\n    {\n        ElectricalSystem electricalSystem = ElectricalSystem.Create(doc, fixtureIds, ElectricalSystemType.PowerCircuit);\n        if(electricalSystem != null)\n        {\n            electricalSystem.SelectPanel(panel);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create a new schedule for Structural Columns.","completion":"string scheduleName = \"Structural Column Schedule\";\nElementId categoryId = new ElementId(BuiltInCategory.OST_StructuralColumns);\nViewSchedule schedule = ViewSchedule.CreateSchedule(doc, categoryId);\nschedule.Name = scheduleName;"}
{"prompt":"Construct a grid of 5 horizontal and 5 vertical grids, spaced 6 meters apart.","completion":"double spacing = UnitUtils.ConvertToInternalUnits(6, UnitTypeId.Meters);\nint count = 5;\nfor (int i = 0; i < count; i++)\n{\n    Line line = Line.CreateBound(new XYZ(0, i * spacing, 0), new XYZ((count - 1) * spacing, i * spacing, 0));\n    Grid.Create(doc, line);\n}\nfor (int i = 0; i < count; i++)\n{\n    Line line = Line.CreateBound(new XYZ(i * spacing, 0, 0), new XYZ(i * spacing, (count - 1) * spacing, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Build a 'Concrete-Rectangular 30x60' column at each grid intersection.","completion":"using (Transaction t = new Transaction(doc, \"Create Columns at Grids\"))\n{\n    t.Start();\n    FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(s => s.Name == \"Concrete-Rectangular 30x60\");\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderBy(l => l.Elevation).FirstOrDefault();\n    List<Grid> grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().ToList();\n    if (columnSymbol != null && level != null)\n    {\n        if (!columnSymbol.IsActive) columnSymbol.Activate();\n        for (int i = 0; i < grids.Count; i++)\n        {\n            for (int j = i + 1; j < grids.Count; j++)\n            {\n                IntersectionResultArray results;\n                if(grids[i].Curve.Intersect(grids[j].Curve, out results) == SetComparisonResult.Overlap)\n                {\n                    if (results != null && !results.IsEmpty)\n                    {\n                        foreach (IntersectionResult ir in results)\n                        {\n                            doc.Create.NewFamilyInstance(ir.XYZPoint, columnSymbol, level, StructuralType.Column);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Actualiza el tipo de la ventana seleccionada al tipo 'Fija 121x60'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una ventana\");\nFamilySymbol newType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name == \"Fija 121x60\");\nif (pickedRef != null && newType != null)\n{\n    FamilyInstance window = doc.GetElement(pickedRef.ElementId) as FamilyInstance;\n    if (window != null)\n    {\n        window.Symbol = newType;\n    }\n}"}
{"prompt":"Ajusta el tipo de la ventana seleccionada al tipo 'Fija 121x60'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una ventana\");\nFamilySymbol newType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name == \"Fija 121x60\");\nif (pickedRef != null && newType != null)\n{\n    FamilyInstance window = doc.GetElement(pickedRef.ElementId) as FamilyInstance;\n    if (window != null)\n    {\n        window.Symbol = newType;\n    }\n}"}
{"prompt":"Create a new wall type 'Generic Wall 297mm' with a thickness of 25cm.","completion":"string newTypeName = \"Generic Wall 297mm\";\nWallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif (oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(newTypeName) as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(25, UnitTypeId.Centimeters));\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n}"}
{"prompt":"Find all doors on Level 4 using a combined filter.","completion":"string levelName = \"Nivel 4\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    ElementCategoryFilter categoryFilter = new ElementCategoryFilter(BuiltInCategory.OST_Doors);\n    ElementLevelFilter levelFilter = new ElementLevelFilter(targetLevel.Id);\n    LogicalAndFilter combinedFilter = new LogicalAndFilter(levelFilter, categoryFilter);\n    FilteredElementCollector collector = new FilteredElementCollector(doc).WherePasses(combinedFilter);\n    uidoc.Selection.SetElementIds(collector.ToElementIds());\n}"}
{"prompt":"Generate a spherical DirectShape with a 5-meter radius.","completion":"using (Transaction t = new Transaction(doc, \"Create Sphere DirectShape\"))\n{\n    t.Start();\n    double radius = 5 \/ 0.3048;\n    List<GeometryObject> solids = new List<GeometryObject>();\n    Frame frame = new Frame(XYZ.Zero, XYZ.BasisX, XYZ.BasisY, XYZ.BasisZ);\n    Arc arc = Arc.Create(frame.Origin, radius, 0, Math.PI, frame.BasisX, frame.BasisY);\n    Line line = Line.CreateBound(arc.GetEndPoint(1), arc.GetEndPoint(0));\n    CurveLoop profile = CurveLoop.Create(new List<Curve> { arc, line });\n    Solid sphere = GeometryCreationUtilities.CreateRevolvedGeometry(frame, new List<CurveLoop> { profile }, 0, 2 * Math.PI);\n    solids.Add(sphere);\n    DirectShape ds = DirectShape.CreateElement(doc, new ElementId(BuiltInCategory.OST_GenericModel));\n\n    if (ds != null)\n    {\n        ds.SetShape(solids);\n        ds.Name = \"Sphere DirectShape\";\n    }\n    t.Commit();\n}"}
{"prompt":"Construct a new Level named 'Level 9' at an elevation of 7 meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(7, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\nif (newLevel != null)\n{\n    try { newLevel.Name = \"Level 9\"; } catch {}\n}"}
{"prompt":"Genera un reporte con el área de todas las habitaciones del proyecto.","completion":"List<Room> rooms = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>().ToList();"}
{"prompt":"Importa un archivo CAD llamado 'BasePlan.dwg' en la vista actual.","completion":"string filePath = \"C:\/CAD\/BasePlan.dwg\";\nDWGImportOptions options = new DWGImportOptions();\noptions.Placement = ImportPlacement.Origin;\nElementId importId;\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    doc.Import(filePath, options, activeView, out importId);\n}"}
{"prompt":"Crea una topografía DirectShape a partir de una lista de puntos.","completion":"\/\/ Create a default set of points as none were specified in the prompt\nList<XYZ> points = new List<XYZ>\n{\n    new XYZ(0, 0, 0),\n    new XYZ(50, 0, 2),\n    new XYZ(0, 50, 5),\n    new XYZ(50, 50, 3)\n};\n\nTessellatedShapeBuilder builder = new TessellatedShapeBuilder();\nbuilder.OpenConnectedFaceSet(true);\nbuilder.AddFace(new TessellatedFace(new List<XYZ> { points[0], points[1], points[2] }, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ> { points[1], points[3], points[2] }, ElementId.InvalidElementId));\nbuilder.CloseConnectedFaceSet();\nbuilder.Build();\nTessellatedShapeBuilderResult result = builder.GetBuildResult();\n\nif (result.GetGeometricalObjects().Any())\n{\n    DirectShape ds = DirectShape.CreateElement(doc, new ElementId(BuiltInCategory.OST_Topography));\n    if (ds != null)\n    {\n        ds.SetShape(result.GetGeometricalObjects());\n        ds.Name = \"Topografía DirectShape\";\n    }\n}"}
{"prompt":"Build a new level named 'Mezzanine' at 7.3 meters elevation.","completion":"string levelName = \"Mezzanine\";\ndouble elevation = UnitUtils.ConvertToInternalUnits(7.3, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Copia la vista 'Nivel 6' como una vista dependiente.","completion":"ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v => v.Name == \"Nivel 6\") as ViewPlan;\n\nif (viewToDuplicate != null)\n{\n    ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n}"}
{"prompt":"Agrega un plano de referencia horizontal llamado 'Eje Central A'.","completion":"using (Transaction t = new Transaction(doc, \"Add Reference Plane\"))\n{\n    t.Start();\n    string rpName = \"Eje Central A\";\n    View activeView = doc.ActiveView;\n\n    if (activeView != null)\n    {\n        XYZ bubbleEnd = new XYZ(0, 10, 0);\n        XYZ freeEnd = new XYZ(10, 10, 0);\n        XYZ cutVec = XYZ.BasisZ;\n        ReferencePlane rp = doc.Create.NewReferencePlane(bubbleEnd, freeEnd, cutVec, activeView);\n        if (rp != null)\n        {\n            rp.Name = rpName;\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Modifica el tipo de una losa por uno que contenga 'Vidrio Templado'.","completion":"Floor floorToChange = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault() as Floor;\nif(floorToChange != null)\n{\n    FloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name.Contains(\"Vidrio Templado\") || ft.Name.Contains(\"Concrete\"));\n    if(newType!=null)\n        floorToChange.ChangeTypeId(newType.Id);\n}"}
{"prompt":"Position an instance of the 'Office Desk' family in the center of the 'Office 106' room.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Office 106\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Office Desk\") as FamilySymbol;\nif(furnitureSymbol != null && !furnitureSymbol.IsActive) furnitureSymbol.Activate();\nif(room != null)\n{\n    LocationPoint roomCenter = room.Location as LocationPoint;\n    if(roomCenter != null && furnitureSymbol != null && room.Level != null)\n    {\n        doc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Extrae el espacio MEP asociado a la habitación 'Oficina 99'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Cast<Room>().FirstOrDefault(r => r.Name == \"Oficina 99\");\nList<Space> spaces = new List<Space>();\n\nif (room != null)\n{\n    spaces = new FilteredElementCollector(doc).OfClass(typeof(Space)).Cast<Space>().Where(s => s.Room != null && s.Room.Id == room.Id).ToList();\n}"}
{"prompt":"Move the selected elements 3 meters up.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds != null && selectedIds.Count > 0)\n{\n    XYZ translation = new XYZ(0, 0, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters));\n    ElementTransformUtils.MoveElements(doc, selectedIds, translation);\n}"}
{"prompt":"Crea 8 ejes horizontales separados por 10.3 metros.","completion":"double separation = UnitUtils.ConvertToInternalUnits(10.3, UnitTypeId.Meters);\nfor(int i = 0; i < 8; i++)\n{\n    \/\/ Create a default 50ft long grid line\n    Line line = Line.CreateBound(new XYZ(0, i * separation, 0), new XYZ(50, i * separation, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Select all walls on 'Level 3' and change their comment to 'REVIEW INSULATION'.","completion":"string levelName = \"Level 3\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(targetLevel.Id);\n    FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(levelFilter);\n    foreach (Element wall in collector)\n    {\n        Parameter commentsParam = wall.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n        if (commentsParam != null && !commentsParam.IsReadOnly) { commentsParam.Set(\"REVIEW INSULATION\"); }\n    }\n}"}
{"prompt":"Generate a new wall type 'Generic Wall 282mm' with a thickness of 30cm.","completion":"WallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif(oldWallType != null)\n{\n    WallType newWallType = null;\n    try { newWallType = oldWallType.Duplicate(\"Generic Wall 282mm\") as WallType; } catch {}\n    if(newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if(cs != null && cs.GetLayers().Any())\n        {\n            int coreLayerIndex = cs.GetFirstCoreLayerIndex();\n            if(coreLayerIndex != -1)\n            {\n                cs.SetLayerWidth(coreLayerIndex, UnitUtils.ConvertToInternalUnits(30, UnitTypeId.Centimeters));\n                newWallType.SetCompoundStructure(cs);\n            }\n        }\n    }\n}"}
{"prompt":"Coloca una ventana de 1x1.2 metros en la pared más cercana.","completion":"FamilySymbol originalSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nWall hostWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\n\nif (originalSymbol != null && hostWall != null)\n{\n    \/\/ Duplica el tipo para no modificar el original y asegura un nombre único\n    string newTypeName = $\"Window {UnitUtils.ConvertFromInternalUnits(UnitUtils.ConvertToInternalUnits(1.0, UnitTypeId.Meters), UnitTypeId.Meters)}m x {UnitUtils.ConvertFromInternalUnits(UnitUtils.ConvertToInternalUnits(1.2, UnitTypeId.Meters), UnitTypeId.Meters)}m - {Guid.NewGuid().ToString().Substring(0, 4)}\";\n    FamilySymbol newSymbol = originalSymbol.Duplicate(newTypeName) as FamilySymbol;\n\n    if (!newSymbol.IsActive)\n    {\n        newSymbol.Activate();\n    }\n\n    \/\/ Establece las dimensiones en el nuevo tipo\n    Parameter widthParam = newSymbol.LookupParameter(\"Width\");\n    Parameter heightParam = newSymbol.LookupParameter(\"Height\");\n\n    if (widthParam != null && heightParam != null)\n    {\n        widthParam.Set(UnitUtils.ConvertToInternalUnits(1.0, UnitTypeId.Meters));\n        heightParam.Set(UnitUtils.ConvertToInternalUnits(1.2, UnitTypeId.Meters));\n    }\n\n    Level level = doc.GetElement(hostWall.LevelId) as Level;\n    LocationCurve locationCurve = hostWall.Location as LocationCurve;\n    if (level != null && locationCurve != null)\n    {\n        XYZ insertionPoint = locationCurve.Curve.Evaluate(0.5, true);\n        doc.Create.NewFamilyInstance(insertionPoint, newSymbol, hostWall, level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Recupera una lista de todas las advertencias del proyecto.","completion":"IList<FailureMessage> warnings = doc.GetWarnings();\nList<string> warningDescriptions = warnings.Select(w => w.GetDescriptionText()).ToList();\n"}
{"prompt":"Create a 3D view with the section box enabled.","completion":"string viewName = \"3D View with Section Box\";\nViewFamilyType vft3D = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft3D != null)\n{\n    View3D view3d = View3D.CreateIsometric(doc, vft3D.Id);\n    if (view3d != null)\n    {\n        view3d.Name = viewName;\n        view3d.IsSectionBoxActive = true;\n    }\n}"}
{"prompt":"Construct a global length parameter named 'CorridorWidth' with a value of 1.9m.","completion":"string paramName = \"CorridorWidth\";\nGlobalParameter gp = GlobalParameter.Create(doc, paramName, SpecTypeId.Length);\n\nif (gp != null)\n{\n    gp.SetValue(new DoubleParameterValue(UnitUtils.ConvertToInternalUnits(1.9, UnitTypeId.Meters)));\n}"}
{"prompt":"Create an electrical conduit with a 1-inch diameter.","completion":"using (Transaction t = new Transaction(doc, \"Create Conduit\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    ElementId conduitTypeId = new FilteredElementCollector(doc).OfClass(typeof(ConduitType)).FirstElementId();\n\n    if (level != null && conduitTypeId != null && conduitTypeId != ElementId.InvalidElementId)\n    {\n        XYZ start = new XYZ(0, 0, 3 \/ 0.3048);\n        XYZ end = new XYZ(5 \/ 0.3048, 0, 3 \/ 0.3048);\n        Conduit conduit = Conduit.Create(doc, conduitTypeId, start, end, level.Id);\n\n        if (conduit != null)\n        {\n            Parameter diameterParam = conduit.get_Parameter(BuiltInParameter.RBS_CONDUIT_DIAMETER_PARAM);\n            if (diameterParam != null && !diameterParam.IsReadOnly)\n            {\n                diameterParam.Set(1.0\/12.0);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Generate a section view named 'Longitudinal Section'.","completion":"ViewFamilyType sectionType = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.Section);\nif (sectionType != null)\n{\n    BoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\n    sectionBox.Min = new XYZ(-10, -1, 0);\n    sectionBox.Max = new XYZ(10, 1, 10);\n    Transform transform = Transform.Identity;\n    sectionBox.Transform = transform;\n    ViewSection sectionView = ViewSection.CreateSection(doc, sectionType.Id, sectionBox);\n    if (sectionView != null)\n    {\n        try { sectionView.Name = \"Longitudinal Section\"; } catch {}\n    }\n}"}
{"prompt":"Get a list of all plan views in the project.","completion":"List<ViewPlan> planViews = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().Where(v => !v.IsTemplate).ToList();"}
{"prompt":"Rename all loaded families containing 'Metric' to 'Imperial'.","completion":"List<Family> familiesToRename = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.Name.Contains(\"Metric\")).ToList();\nforeach(Family fam in familiesToRename)\n{\n    fam.Name = fam.Name.Replace(\"Metric\", \"Imperial\");\n}"}
{"prompt":"Clone level 5 with a 7m offset and name it 'Mezzanine'.","completion":"string levelName = \"Level 5\";\nLevel levelToCopy = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (levelToCopy != null)\n{\n    double offset = UnitUtils.ConvertToInternalUnits(7, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, levelToCopy.Elevation + offset);\n    newLevel.Name = \"Mezzanine\";\n}"}
{"prompt":"Etiqueta todas las habitaciones con su área.","completion":"using (Transaction t = new Transaction(doc, \"Tag All Rooms\"))\n{\n    t.Start();\n    View activeView = doc.ActiveView;\n\n    if (activeView != null)\n    {\n        List<Room> rooms = new FilteredElementCollector(doc, activeView.Id).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>().ToList();\n        foreach(Room room in rooms)\n        {\n            LocationPoint loc = room.Location as LocationPoint;\n            if(loc != null)\n            {\n                doc.Create.NewRoomTag(new LinkElementId(room.Id), new UV(loc.Point.X, loc.Point.Y), activeView.Id);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Align the face of one wall with the face of another.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference ref1 = uidoc.Selection.PickObject(ObjectType.Face, \"Select the target face (stationary)\");\nReference ref2 = uidoc.Selection.PickObject(ObjectType.Face, \"Select the face to move\");\nView activeView = doc.ActiveView;\n\nif (ref1 != null && ref2 != null && activeView != null)\n{\n    doc.Create.NewAlignment(activeView, ref1, ref2);\n}"}
{"prompt":"Ajusta el tipo de la ventana seleccionada al tipo 'Ventana Fija 116x60'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una ventana\");\nFamilySymbol newType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name == \"Ventana Fija 116x60\");\nif (pickedRef != null && newType != null)\n{\n    FamilyInstance window = doc.GetElement(pickedRef.ElementId) as FamilyInstance;\n    if (window != null)\n    {\n        window.Symbol = newType;\n    }\n}"}
{"prompt":"Define the sill height of all windows to 904mm.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits(904, UnitTypeId.Millimeters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Generate a structural beam between (4,1,12) and (5,0,6) on Level 3","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 3\") as Level;\nFamilySymbol beamType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (beamType != null && level != null)\n{\n    if(!beamType.IsActive) beamType.Activate();\n    XYZ start = new XYZ(4, 1, 12);\n    XYZ end = new XYZ(5, 0, 6);\n    if (start.IsAlmostEqualTo(end)) return;\n    Line beamCurve = Line.CreateBound(start, end);\n    doc.Create.NewFamilyInstance(beamCurve, beamType, level, Autodesk.Revit.DB.Structure.StructuralType.Beam);\n}"}
{"prompt":"Inserta una instancia de la familia 'Mesa de Oficina' en el centro de la habitación 'Despacho 96'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 96\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Mesa de Oficina\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);"}
{"prompt":"Import a topography from a CSV file.","completion":"using (Transaction t = new Transaction(doc, \"Create Topography\"))\n{\n    t.Start();\n    \/\/ CSV file reading is not directly supported by a single API call.\n    \/\/ You would typically read the file line by line, parse the XYZ coordinates,\n    \/\/ and then use the TopographySurface.Create method with a list of points.\n    \/\/ As a placeholder, here's how to create a simple topography from a list of points:\n    IList<XYZ> points = new List<XYZ>();\n    points.Add(new XYZ(0, 0, 0));\n    points.Add(new XYZ(10, 0, 0));\n    points.Add(new XYZ(0, 10, 0));\n    points.Add(new XYZ(10, 10, 5));\n    TopographySurface.Create(doc, points);\n    t.Commit();\n}"}
{"prompt":"Añade el prefijo 'PLANTA-' a todas las vistas de plano.","completion":"string prefix = \"PLANTA-\";\nList<ViewPlan> planViews = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().Where(v => !v.IsTemplate).ToList();\nforeach(ViewPlan view in planViews)\n{\n    if(!view.Name.StartsWith(prefix))\n    {\n        view.Name = prefix + view.Name;\n    }\n}"}
{"prompt":"Copia el tipo de muro 'Genérico - 172mm' y nómbralo 'Interior - 15cm Yeso'.","completion":"string originalName = \"Genérico - 172mm\";\nstring newName = \"Interior - 15cm Yeso\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif (originalType != null)\n{\n    WallType newType = originalType.Duplicate(newName) as WallType;\n}"}
{"prompt":"Modifica el tipo de la ventana seleccionada al tipo 'Mesa de Oficina'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una ventana\");\nFamilySymbol newType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name == \"Mesa de Oficina\");\nif (pickedRef != null && newType != null)\n{\n    FamilyInstance window = doc.GetElement(pickedRef.ElementId) as FamilyInstance;\n    if (window != null)\n    {\n        window.Symbol = newType;\n    }\n}"}
{"prompt":"Create an axonometric 3D view oriented to the Northwest.","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft != null)\n{\n    View3D view3d = View3D.CreateIsometric(doc, vft.Id);\n    if (view3d != null)\n    {\n        XYZ eye = new XYZ(-1, 1, 1);\n        XYZ up = new XYZ(0, 0, 1);\n        XYZ forward = new XYZ(1, -1, -1);\n        view3d.SetOrientation(new ViewOrientation3D(eye, up, forward));\n        view3d.Name = \"3D View Northwest\";\n    }\n}"}
{"prompt":"Create a new Level named 'Level 4' at an elevation of 12 meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(12, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Level 4\";\n}"}
{"prompt":"Export the model to IFC4 format for coordination.","completion":"string folderPath = \"C:\/RevitExports\/\";\nstring fileName = doc.Title + \"-Coordination.ifc\";\nIFCExportOptions options = new IFCExportOptions();\noptions.FileVersion = IFCVersion.IFC4;\ndoc.Export(folderPath, fileName, options);"}
{"prompt":"Duplicate the 'Level 3' view as a dependent view.","completion":"ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v => v.Name == \"Level 3\") as ViewPlan;\n\nif (viewToDuplicate != null)\n{\n    ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n}"}
{"prompt":"Create 10 architectural worksets.","completion":"List<string> worksetNames = new List<string> { \"TAD_ARQ_WALLS\", \"TAD_ARQ_FINISHES\", \"TAD_ARQ_CEILINGS\", \"TAD_ARQ_FLOORS\", \"TAD_ARQ_RAILINGS\", \"TAD_ARQ_WINDOWS\", \"TAD_ARQ_CARPENTRY\", \"TAD_ARQ_FURNITURE\", \"TAD_ARQ_PLUMBING\", \"TAD_ARQ_EXTERIOR\" };\nforeach(string name in worksetNames)\n{\n    Workset.Create(doc, name);\n}"}
{"prompt":"Place an instance of the 'Office Desk' family in the center of the 'Office 101' room.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Office 101\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Office Desk\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);"}
{"prompt":"Reemplaza el prefijo 'CAD_' por 'RVT_' en todos los materiales.","completion":"string prefixToRemove = \"CAD_\";\nstring prefixToAdd = \"RVT_\";\nIList<Material> materials = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().ToList();\n\nif (materials.Any())\n{\n    HashSet<string> existingNames = new HashSet<string>(materials.Select(m => m.Name));\n    foreach (Material mat in materials)\n    {\n        if (mat.Name.StartsWith(prefixToRemove))\n        {\n            existingNames.Remove(mat.Name);\n            string baseName = mat.Name.Substring(prefixToRemove.Length);\n            string newName = prefixToAdd + baseName;\n            string finalName = newName;\n            int i = 1;\n            while (existingNames.Contains(finalName))\n            {\n                finalName = $\"{newName}_{i++}\";\n            }\n            mat.Name = finalName;\n            existingNames.Add(finalName);\n        }\n    }\n}"}
{"prompt":"Clona el tipo de muro 'Genérico - 102mm' y nómbralo 'Interior - 15cm Yeso'.","completion":"string originalName = \"Genérico - 102mm\";\nstring newName = \"Interior - 15cm Yeso\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif (originalType != null)\n{\n    WallType newType = originalType.Duplicate(newName) as WallType;\n}"}
{"prompt":"Oculta todos los elementos de anotación en la vista activa.","completion":"if (doc.ActiveView != null)\n{\n    List<BuiltInCategory> annotationCategories = new List<BuiltInCategory>\n    {\n        BuiltInCategory.OST_GenericAnnotation,\n        BuiltInCategory.OST_TextNotes,\n        BuiltInCategory.OST_Tags,\n        BuiltInCategory.OST_Dimensions,\n        BuiltInCategory.OST_DetailComponents\n    };\n    ElementMulticategoryFilter multiCategoryFilter = new ElementMulticategoryFilter(annotationCategories);\n    ICollection<ElementId> elementsToHide = new FilteredElementCollector(doc, doc.ActiveView.Id).WherePasses(multiCategoryFilter).ToElementIds();\n    if(elementsToHide.Any())\n    {\n        doc.ActiveView.HideElements(elementsToHide);\n    }\n}"}
{"prompt":"Configure the sill height of all windows to 899mm.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits(899, UnitTypeId.Millimeters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Crea un nuevo nivel llamado 'Planta Sótano' a una elevación de 1 metros.","completion":"string levelName = \"Planta Sótano\";\ndouble elevationInternal = UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevationInternal);\nnewLevel.Name = levelName;"}
{"prompt":"Reproduce el nivel 2 con un desfase de 3m y llámalo 'Mezanine'.","completion":"string levelName = \"Nivel 2\";\nLevel levelToCopy = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (levelToCopy != null)\n{\n    double offset = UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, levelToCopy.Elevation + offset);\n    newLevel.Name = \"Mezanine\";\n}"}
{"prompt":"Create an extrusion roof with an arc profile.","completion":"using (Transaction t = new Transaction(doc, \"Create Extrusion Roof\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    RoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n\n    if (level != null && roofType != null && doc.ActiveView != null)\n    {\n        CurveArray profile = new CurveArray();\n        profile.Append(Arc.Create(new XYZ(-10,0,0), new XYZ(10,0,0), new XYZ(0,5,0)));\n        Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisY, XYZ.Zero);\n        ReferencePlane refPlane = doc.Create.NewReferencePlane(plane.Origin, plane.Origin + XYZ.BasisX, plane.Normal, doc.ActiveView);\n        if(refPlane != null)\n            doc.Create.NewExtrusionRoof(profile, refPlane, level, roofType, 0, 20);\n    }\n    t.Commit();\n}"}
{"prompt":"Obtén todas las habitaciones que están en el Nivel 5","completion":"string levelName = \"Nivel 5\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(targetLevel.Id);\n    FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WherePasses(levelFilter);\n    uidoc.Selection.SetElementIds(collector.ToElementIds());\n}"}
{"prompt":"Crea una vista de plano de plafón reflejado para el Nivel 1.","completion":"string levelName = \"Nivel 1\";\nstring viewName = \"Plano de Plafón Nivel 1\";\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.CeilingPlan);\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\n\nif (vft != null && level1 != null)\n{\n    ViewPlan rcp = ViewPlan.Create(doc, vft.Id, level1.Id);\n    if (rcp != null)\n    {\n        rcp.Name = viewName;\n    }\n}"}
{"prompt":"Load the 'Table.rfa' family and place it at (6,1,1) on Level 1","completion":"string levelName = \"Level 1\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nstring familyName = \"Table\";\nFamilySymbol symbol = new FilteredElementCollector(doc).OfClass(typeof(FamilySymbol)).Cast<FamilySymbol>().FirstOrDefault(fs => fs.Family.Name == familyName);\nif (symbol != null && targetLevel != null)\n{\n    if (!symbol.IsActive) { symbol.Activate(); doc.Regenerate(); }\n    XYZ location = new XYZ(6, 1, 1);\n    doc.Create.NewFamilyInstance(location, symbol, targetLevel, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n}"}
{"prompt":"Coloca una instancia de la familia 'Mesa de Oficina' en el centro de la habitación 'Despacho 98'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 98\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Mesa de Oficina\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);"}
{"prompt":"Create a new material named 'Dark Oak' with a wood surface pattern.","completion":"string materialName = \"Dark Oak\";\nElementId materialId = Material.Create(doc, materialName);\n\nif (materialId != ElementId.InvalidElementId)\n{\n    Material material = doc.GetElement(materialId) as Material;\n    FillPatternElement fillPattern = new FilteredElementCollector(doc).OfClass(typeof(FillPatternElement)).FirstOrDefault(p => p.Name.Contains(\"Wood\") || p.Name.Contains(\"Madera\")) as FillPatternElement;\n    \n    if (material != null && fillPattern != null)\n    {\n        material.SurfaceForegroundPatternId = fillPattern.Id;\n        material.Color = new Color(139, 69, 19);\n    }\n}"}
{"prompt":"Assign the 'Comments' parameter for all doors on Level 1 to 'Fire Rating - 90 min'.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\n\nif (level1 != null)\n{\n    List<FamilyInstance> doorsOnLevel1 = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsNotElementType().Cast<FamilyInstance>().Where(fi => fi.LevelId == level1.Id).ToList();\n    foreach(FamilyInstance door in doorsOnLevel1)\n    {\n        Parameter commentsParam = door.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n        if (commentsParam != null && !commentsParam.IsReadOnly) commentsParam.Set(\"Fire Rating - 90 min\");\n    }\n}"}
{"prompt":"Create a new pipe type named 'Steel Pipe' with 'Steel, Carbon' material.","completion":"string newTypeName = \"Steel Pipe\";\nPipeType pipeTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(PipeType)).FirstOrDefault() as PipeType;\nMaterial steel = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name == \"Steel, Carbon\") as Material;\n\nif (pipeTypeToDuplicate != null && steel != null)\n{\n    PipeType newType = pipeTypeToDuplicate.Duplicate(newTypeName) as PipeType;\n    if (newType != null)\n    {\n        Parameter materialParam = newType.get_Parameter(BuiltInParameter.MATERIAL_ID_PARAM);\n        if (materialParam != null && !materialParam.IsReadOnly) materialParam.Set(steel.Id);\n    }\n}"}
{"prompt":"Retrieve all walls from a linked model that intersect with a bounding box.","completion":"RevitLinkInstance linkInstance = new FilteredElementCollector(doc).OfClass(typeof(RevitLinkInstance)).FirstOrDefault() as RevitLinkInstance;\n\nif (linkInstance != null)\n{\n    Document linkDoc = linkInstance.GetLinkDocument();\n    if (linkDoc != null)\n    {\n        \/\/ Create a default 50ft x 50ft x 20ft bounding box as it's not specified in the prompt\n        BoundingBoxXYZ bbox = new BoundingBoxXYZ();\n        bbox.Min = new XYZ(0, 0, 0);\n        bbox.Max = new XYZ(50, 50, 20);\n        Outline outline = new Outline(bbox.Min, bbox.Max);\n        BoundingBoxIntersectsFilter filter = new BoundingBoxIntersectsFilter(outline);\n        List<Element> linkedWalls = new FilteredElementCollector(linkDoc).OfClass(typeof(Wall)).WherePasses(filter).ToList();\n    }\n}"}
{"prompt":"Create an MEP space for each room on Level 7","completion":"string levelName = \"Level 7\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    FilteredElementCollector roomCollector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WherePasses(new ElementLevelFilter(targetLevel.Id));\n    foreach (Room room in roomCollector.ToElements().Cast<Room>())\n    {\n        if (room.Location != null)\n        {\n            LocationPoint locPoint = room.Location as LocationPoint;\n            if(locPoint != null)\n            {\n                UV point = new UV(locPoint.Point.X, locPoint.Point.Y);\n                doc.Create.NewSpace(targetLevel, point);\n            }\n        }\n    }\n}"}
{"prompt":"Build a stair between Level 5 and Level 2","completion":"\/\/ This is a complex operation that requires multiple steps and\/or user interaction and is not supported by the agent."}
{"prompt":"Selecciona todos los muros del 'Nivel 7' y cambia su comentario a 'REVISAR AISLAMIENTO'.","completion":"string levelName = \"Nivel 7\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(targetLevel.Id);\n    FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(levelFilter);\n    foreach (Element wall in collector)\n    {\n        Parameter commentsParam = wall.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n        if (commentsParam != null && !commentsParam.IsReadOnly) { commentsParam.Set(\"REVISAR AISLAMIENTO\"); }\n    }\n}"}
{"prompt":"Position a spot elevation on Level 1.","completion":"using (Transaction t = new Transaction(doc, \"Place Spot Elevation\"))\n{\n    t.Start();\n    Level lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 1\");\n    View activeView = doc.ActiveView;\n\n    if (lvl1 != null && activeView != null)\n    {\n        Reference levelRef = new Reference(lvl1);\n        XYZ origin = new XYZ(5\/0.3048, 5\/0.3048, lvl1.Elevation);\n        XYZ leaderEnd = origin + new XYZ(2\/0.3048, 2\/0.3048, 0);\n        doc.Create.NewSpotElevation(activeView, levelRef, origin, origin, leaderEnd, origin, true);\n    }\n    t.Commit();\n}"}
{"prompt":"Move the project base point 100 meters to the north.","completion":"using (Transaction t = new Transaction(doc, \"Move Project Base Point\"))\n{\n    t.Start();\n    BasePoint projectBasePoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(bp => !bp.IsShared);\n\n    if (projectBasePoint != null)\n    {\n        XYZ translation = new XYZ(0, 100 \/ 0.3048, 0);\n        ElementTransformUtils.MoveElement(doc, projectBasePoint.Id, translation);\n    }\n    t.Commit();\n}"}
{"prompt":"Suma la longitud total en metros de todas las tuberías de 150mm de diámetro.","completion":"double totalLength = 0.0;\nFilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_PipeCurves).WhereElementIsNotElementType();\n\ndouble diameterInternal = UnitUtils.ConvertToInternalUnits(150, UnitTypeId.Millimeters);\n\nforeach (Element pipe in collector)\n{\n    Parameter diameterParam = pipe.get_Parameter(BuiltInParameter.RBS_PIPE_DIAMETER_PARAM);\n    if (diameterParam != null && Math.Abs(diameterParam.AsDouble() - diameterInternal) < 0.001)\n    {\n        Parameter lengthParam = pipe.get_Parameter(BuiltInParameter.CURVE_ELEM_LENGTH);\n        if (lengthParam != null) totalLength += lengthParam.AsDouble();\n    }\n}\ndouble totalLengthM = UnitUtils.ConvertFromInternalUnits(totalLength, UnitTypeId.Meters);"}
{"prompt":"Update the type of a selected floor to 'Concrete 19cm'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a floor\");\n\nif (pickedRef != null)\n{\n    Floor floorToChange = doc.GetElement(pickedRef) as Floor;\n    FloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name == \"Concrete 19cm\");\n    \n    if (floorToChange != null && newType != null)\n    {\n        floorToChange.ChangeTypeId(newType.Id);\n    }\n}"}
{"prompt":"Create a 30cm 'Double-Wall' type and then create a wall of that type.","completion":"using (Transaction t = new Transaction(doc, \"Create Wall Type and Wall\"))\n{\n    t.Start();\n    string newTypeName = \"Double-Wall\";\n    WallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n    WallType newWallType = null;\n    if (wallTypeToDuplicate != null)\n    {\n        newWallType = wallTypeToDuplicate.Duplicate(newTypeName) as WallType;\n        if (newWallType != null)\n        {\n            CompoundStructure cs = newWallType.GetCompoundStructure();\n            if (cs != null && cs.LayerCount > 0)\n            {\n                cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), 0.3 \/ 0.3048);\n                newWallType.SetCompoundStructure(cs);\n            }\n        }\n    }\n    if (newWallType != null)\n    {\n        Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n        Line wallCurve = Line.CreateBound(XYZ.Zero, new XYZ(10 \/ 0.3048, 0, 0));\n        double height = 3 \/ 0.3048;\n        if (level != null)\n        {\n            Wall.Create(doc, wallCurve, newWallType.Id, level.Id, height, 0, false, false);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create an MEP space for each room on Level 1","completion":"string levelName = \"Level 1\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    FilteredElementCollector roomCollector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WherePasses(new ElementLevelFilter(targetLevel.Id));\n    foreach (Room room in roomCollector.ToElements().Cast<Room>())\n    {\n        LocationPoint locPoint = room.Location as LocationPoint;\n        if (locPoint != null)\n        {\n            UV point = new UV(locPoint.Point.X, locPoint.Point.Y);\n            doc.Create.NewSpace(targetLevel, point);\n        }\n    }\n}"}
{"prompt":"Construct a text note with given text, location, and target element.","completion":"using (Transaction t = new Transaction(doc, \"Create Text Note\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference targetRef = localUidoc.Selection.PickObject(ObjectType.Element, \"Select an element to annotate\");\n    XYZ textLocation = localUidoc.Selection.PickPoint(\"Choose the text location\");\n\n    View activeView = doc.ActiveView;\n    ElementId defaultTypeId = doc.GetDefaultElementTypeId(ElementTypeGroup.TextNoteType);\n\n    if (targetRef != null && textLocation != null && activeView != null && defaultTypeId != ElementId.InvalidElementId)\n    {\n        TextNoteOptions opts = new TextNoteOptions(defaultTypeId);\n        TextNote note = TextNote.Create(doc, activeView.Id, textLocation, \"REVIEW CLASH\", opts);\n        if (note != null)\n        {\n            Leader leader = note.AddLeader(TextNoteLeaderTypes.TNLT_STRAIGHT_L);\n            leader.End = targetRef.GlobalPoint;\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Clone the 'Generic - 146mm' wall type and name it 'Interior - 12cm Plaster'.","completion":"string originalName = \"Generic - 146mm\";\nstring newName = \"Interior - 12cm Plaster\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif(originalType!=null)\n    originalType.Duplicate(newName);"}
{"prompt":"Reproduce el nivel 2 con un desfase de 2m y llámalo 'Mezanine'.","completion":"string levelName = \"Nivel 2\";\nLevel levelToCopy = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (levelToCopy != null)\n{\n    double offset = UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, levelToCopy.Elevation + offset);\n    newLevel.Name = \"Mezanine\";\n}"}
{"prompt":"Place the 'Level 1' view in the center of the active sheet.","completion":"ViewPlan viewToPlace = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v => v.Name == \"Level 1\") as ViewPlan;\nViewSheet activeSheet = doc.ActiveView as ViewSheet;\n\nif (viewToPlace != null && activeSheet != null)\n{\n    BoundingBoxUV sheetBox = activeSheet.Outline;\n    XYZ centerPoint = new XYZ((sheetBox.Min.U + sheetBox.Max.U) \/ 2, (sheetBox.Min.V + sheetBox.Max.V) \/ 2, 0);\n    Viewport.Create(doc, activeSheet.Id, viewToPlace.Id, centerPoint);\n}"}
{"prompt":"Crea un muro en el Nivel 1 que vaya de (0,0,0) a (10,0,0) con una altura de 4 metros.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif(level1 != null && wallType != null)\n{\n    XYZ p1 = new XYZ(0, 0, 0);\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), 0, 0);\n    Line wallCurve = Line.CreateBound(p1, p2);\n    double height = UnitUtils.ConvertToInternalUnits(4, UnitTypeId.Meters);\n    Wall.Create(doc, wallCurve, wallType.Id, level1.Id, height, 0.0, false, false);\n}"}
{"prompt":"Dado un muro, encuentra todas las tuberías que lo atraviesan.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference wallRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un muro\");\n\nList<ElementId> intersectingPipes = new List<ElementId>();\nif (wallRef != null)\n{\n    Element wall = doc.GetElement(wallRef);\n    if (wall != null)\n    {\n        ElementIntersectsElementFilter filter = new ElementIntersectsElementFilter(wall);\n        intersectingPipes = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_PipeCurves).WherePasses(filter).ToElementIds().ToList();\n    }\n}\n"}
{"prompt":"Establece el parámetro 'Comentarios' de todas las puertas del Nivel 1 a 'Clasificación Fuego - 91 min'.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\n\nif (level1 != null)\n{\n    List<FamilyInstance> doorsOnLevel1 = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsNotElementType().Cast<FamilyInstance>().Where(fi => fi.LevelId == level1.Id).ToList();\n    foreach(FamilyInstance door in doorsOnLevel1)\n    {\n        Parameter commentsParam = door.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n        if (commentsParam != null && !commentsParam.IsReadOnly) commentsParam.Set(\"Clasificación Fuego - 91 min\");\n    }\n}"}
{"prompt":"Cambia el tipo de una losa seleccionada a 'Concreto 17cm'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una losa\");\n\nif (pickedRef != null)\n{\n    Floor floorToChange = doc.GetElement(pickedRef) as Floor;\n    FloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name == \"Concreto 17cm\");\n    \n    if (floorToChange != null && newType != null)\n    {\n        floorToChange.ChangeTypeId(newType.Id);\n    }\n}"}
{"prompt":"Position an instance of the 'Office Desk' family in the center of the 'Office 105' room.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Office 105\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Office Desk\") as FamilySymbol;\nif(furnitureSymbol != null && !furnitureSymbol.IsActive) furnitureSymbol.Activate();\nif(room != null)\n{\n    LocationPoint roomCenter = room.Location as LocationPoint;\n    if(roomCenter != null && furnitureSymbol != null && room.Level != null)\n    {\n        doc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Añade los campos 'Nivel', 'Marca' y 'Volumen' a la tabla de pilares.","completion":"ViewSchedule schedule = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().FirstOrDefault(s => s.Name.Contains(\"Pilares\") || s.Name.Contains(\"Column\"));\nif (schedule != null)\n{\n    ScheduleDefinition def = schedule.Definition;\n    SchedulableField levelField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.FAMILY_LEVEL_PARAM);\n    if (levelField != null) def.AddField(levelField);\n    SchedulableField markField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.ALL_MODEL_MARK);\n    if (markField != null) def.AddField(markField);\n    SchedulableField volumeField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.HOST_VOLUME_COMPUTED);\n    if (volumeField != null) def.AddField(volumeField);\n}"}
{"prompt":"Duplica el tipo de muro 'Genérico - 150mm' y nómbralo 'Interior - 15cm Yeso'.","completion":"string originalName = \"Genérico - 150mm\";\nstring newName = \"Interior - 15cm Yeso\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif(originalType!=null)\n    originalType.Duplicate(newName);"}
{"prompt":"Replicate the 'Generic - 161mm' wall type and name it 'Interior - 15cm Plaster'.","completion":"string originalName = \"Generic - 161mm\";\nstring newName = \"Interior - 15cm Plaster\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif (originalType != null)\n{\n    WallType newType = originalType.Duplicate(newName) as WallType;\n}"}
{"prompt":"Incorpora un punto de referencia en las coordenadas (6,2,6) dentro del editor de familias.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(6,2,6));"}
{"prompt":"Encuentra todas las vistas de sección en el proyecto.","completion":"List<ViewSection> sectionViews = new FilteredElementCollector(doc).OfClass(typeof(ViewSection)).Cast<ViewSection>().ToList();"}
{"prompt":"Rename all schedules containing 'Doors' to 'Door Schedule'.","completion":"List<ViewSchedule> schedules = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().Where(vs => vs.Name.Contains(\"Doors\")).ToList();\nforeach(ViewSchedule schedule in schedules)\n{\n    schedule.Name = schedule.Name.Replace(\"Doors\", \"Door Schedule\");\n}"}
{"prompt":"Copy all elements from Level 1 to Level 2.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nLevel level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 2\") as Level;\n\nif (level1 != null && level2 != null)\n{\n    ICollection<ElementId> elementsToCopy = new FilteredElementCollector(doc, level1.Id).WhereElementIsNotElementType().ToElementIds();\n    double elevationDiff = level2.ProjectElevation - level1.ProjectElevation;\n    XYZ translation = new XYZ(0, 0, elevationDiff);\n    if (elementsToCopy.Count > 0)\n    {\n        ElementTransformUtils.CopyElements(doc, elementsToCopy, translation);\n    }\n}"}
{"prompt":"Crea un muro de 5 metros de largo y 3 metros de alto.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (level != null && wallType != null)\n{\n    Line line = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0, 0));\n    Wall.Create(doc, line, wallType.Id, level.Id, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0.0, false, false);\n}"}
{"prompt":"Crea un nuevo Nivel llamado 'Nivel 4' a una elevación de 12 metros.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(12, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Nivel 4\";\n}"}
{"prompt":"Generate a new Level named 'Level 5' at an elevation of 9 meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(9, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Level 5\";\n}"}
{"prompt":"Crea una nueva habitación en el Nivel 1 en el punto (5, 15).","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\nif (level1 != null)\n{\n    UV point = new UV(5, 15);\n    Room room = doc.Create.NewRoom(level1, point);\n}"}
{"prompt":"Inserta un rociador en las coordenadas (9,4,4).","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol sprinklerSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Sprinklers).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (level != null && sprinklerSymbol != null)\n{\n    if (!sprinklerSymbol.IsActive) sprinklerSymbol.Activate();\n    XYZ placementPoint = new XYZ(UnitUtils.ConvertToInternalUnits(9, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(4, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(4, UnitTypeId.Meters));\n    doc.Create.NewFamilyInstance(placementPoint, sprinklerSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n}"}
{"prompt":"Ubica una instancia de la familia 'Mesa de Oficina' en el centro de la habitación 'Despacho 96'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 96\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Mesa de Oficina\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);"}
{"prompt":"Generate a global length parameter named 'CorridorWidth' with a value of 1.3m.","completion":"string paramName = \"CorridorWidth\";\nGlobalParameter gp = GlobalParameter.Create(doc, paramName, SpecTypeId.Length);\n\nif (gp != null)\n{\n    gp.SetValue(new DoubleParameterValue(UnitUtils.ConvertToInternalUnits(1.3, UnitTypeId.Meters)));\n}"}
{"prompt":"Create a 'Concrete-Rectangular 30x60' column at each grid intersection.","completion":"using (Transaction t = new Transaction(doc, \"Create Columns at Grids\"))\n{\n    t.Start();\n    FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(s => s.Name == \"Concrete-Rectangular 30x60\");\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderBy(l => l.Elevation).FirstOrDefault();\n    List<Grid> grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().ToList();\n    if (columnSymbol != null && level != null)\n    {\n        if (!columnSymbol.IsActive) columnSymbol.Activate();\n        for (int i = 0; i < grids.Count; i++)\n        {\n            for (int j = i + 1; j < grids.Count; j++)\n            {\n                IntersectionResultArray results;\n                if(grids[i].Curve.Intersect(grids[j].Curve, out results) == SetComparisonResult.Overlap)\n                {\n                    if (results != null && !results.IsEmpty)\n                    {\n                        foreach (IntersectionResult ir in results)\n                        {\n                            doc.Create.NewFamilyInstance(ir.XYZPoint, columnSymbol, level, StructuralType.Column);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Establece el parámetro 'Comentarios' de todas las puertas del Nivel 1 a 'Clasificación Fuego - 90 min'.","completion":"using(Transaction t = new Transaction(doc, \"Set Door Comments\"))\n{\n    t.Start();\n    Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel 1\");\n    if(level1 != null)\n    {\n        List<FamilyInstance> doorsOnLevel1 = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsNotElementType().Cast<FamilyInstance>().Where(fi => fi.LevelId.Equals(level1.Id)).ToList();\n        foreach(FamilyInstance door in doorsOnLevel1)\n        {\n            Parameter commentsParam = door.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n            if(commentsParam != null && !commentsParam.IsReadOnly)\n            {\n                commentsParam.Set(\"Clasificación Fuego - 90 min\");\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Extrae el espacio MEP asociado a la habitación 'Oficina 106'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Cast<Room>().FirstOrDefault(r => r.Name == \"Oficina 106\");\nList<Space> spaces = new List<Space>();\n\nif (room != null)\n{\n    spaces = new FilteredElementCollector(doc).OfClass(typeof(Space)).Cast<Space>().Where(s => s.Room != null && s.Room.Id == room.Id).ToList();\n}"}
{"prompt":"Assign the 'Mark' parameter of all selected walls to 'W-EXT-4'.","completion":"using (Transaction t = new Transaction(doc, \"Set Wall Mark\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    ICollection<ElementId> selectedIds = localUidoc.Selection.GetElementIds();\n\n    if (selectedIds != null && selectedIds.Count > 4)\n    {\n        foreach(ElementId id in selectedIds)\n        {\n            Element elem = doc.GetElement(id);\n            if(elem is Wall)\n            {\n                Parameter p = elem.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n                if (p != null && !p.IsReadOnly)\n                {\n                    p.Set(\"W-EXT-01\");\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Find all section views in the project.","completion":"List<ViewSection> sectionViews = new FilteredElementCollector(doc).OfClass(typeof(ViewSection)).Cast<ViewSection>().ToList();"}
{"prompt":"Cambia el tipo de todas las ventanas de 'Fijo' a 'Abatible'.","completion":"FamilySymbol newType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name.Contains(\"Abatible\"));\nFamilySymbol oldType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name.Contains(\"Fijo\"));\n\nif (newType != null && oldType != null)\n{\n    List<FamilyInstance> windowsToChange = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().Where(fi => fi.Symbol.Id == oldType.Id).ToList();\n    foreach (FamilyInstance window in windowsToChange)\n    {\n        window.Symbol = newType;\n    }\n}"}
{"prompt":"Construye un grupo a partir de la selección actual y muévelo 10 metros a la derecha.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds != null && selectedIds.Count > 0)\n{\n    Group group = doc.Create.NewGroup(selectedIds);\n    if (group != null)\n    {\n        XYZ translation = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), 0, 0);\n        ElementTransformUtils.MoveElement(doc, group.Id, translation);\n    }\n}"}
{"prompt":"Replicate level 2 with a 7m offset and name it 'Mezzanine'.","completion":"string levelName = \"Level 2\";\nLevel levelToCopy = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (levelToCopy != null)\n{\n    double offset = UnitUtils.ConvertToInternalUnits(7, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, levelToCopy.Elevation + offset);\n    newLevel.Name = \"Mezzanine\";\n}"}
{"prompt":"Generate a 3D view with the section box enabled.","completion":"string viewName = \"3D View with Section Box\";\nViewFamilyType vft3D = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft3D != null)\n{\n    View3D view3d = View3D.CreateIsometric(doc, vft3D.Id);\n    if (view3d != null)\n    {\n        view3d.Name = viewName;\n        view3d.IsSectionBoxActive = true;\n    }\n}"}
{"prompt":"Construct a group from the current selection and move it 10 meters to the right.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds != null && selectedIds.Count > 0)\n{\n    Group group = doc.Create.NewGroup(selectedIds);\n    if (group != null)\n    {\n        XYZ translation = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), 0, 0);\n        ElementTransformUtils.MoveElement(doc, group.Id, translation);\n    }\n}"}
{"prompt":"Position an instance of the 'Office Desk' family in the center of the 'Office 96' room.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Office 96\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Office Desk\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);"}
{"prompt":"Fetch a list of all material names.","completion":"List<Material> materials = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().ToList();\nList<string> materialNames = new List<string>();\nforeach(Material m in materials)\n{\n    materialNames.Add(m.Name);\n}\n"}
{"prompt":"Inserta una instancia de la familia 'Mesa' en el centro de la habitación 'Despacho 96'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 96\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Puerta Sencilla\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);"}
{"prompt":"Create a new elevation view looking north.","completion":"using (Transaction t = new Transaction(doc, \"Create North Elevation\"))\n{\n    t.Start();\n    ViewFamilyType elevationVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(vft => vft.ViewFamily == ViewFamily.Elevation);\n    View activeView = doc.ActiveView;\n\n    if (elevationVFT != null && activeView != null)\n    {\n        ElevationMarker marker = ElevationMarker.CreateElevationMarker(doc, elevationVFT.Id, new XYZ(0, 20 \/ 0.3048, 0), 100);\n        \n        if (marker != null)\n        {\n            View aev = marker.CreateElevation(doc, activeView.Id, 2);\n            if (aev != null)\n            {\n                aev.Name = \"North Elevation\";\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create a 'Roof Terrace' level at 12m.","completion":"string levelName = \"Roof Terrace\";\ndouble elev = UnitUtils.ConvertToInternalUnits(12, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elev);\nnewLevel.Name = levelName;\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Crea un grupo de detalles con los elementos de detalle seleccionados.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds != null && selectedIds.Count > 0)\n{\n    List<ElementId> detailIds = new List<ElementId>();\n    foreach(ElementId id in selectedIds)\n    {\n        Element elem = doc.GetElement(id);\n        if (elem != null && elem.Category != null && elem.Category.CategoryType == CategoryType.Annotation)\n        {\n            detailIds.Add(id);\n        }\n    }\n\n    if (detailIds.Count > 0)\n    {\n        Group group = doc.Create.NewGroup(detailIds);\n        if (group != null)\n        {\n            group.Name = \"Detalle Típico 1\";\n        }\n    }\n}"}
{"prompt":"Recupera todas las habitaciones que están en el Nivel 4","completion":"string levelName = \"Nivel 4\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(targetLevel.Id);\n    FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WherePasses(levelFilter);\n    uidoc.Selection.SetElementIds(collector.ToElementIds());\n}"}
{"prompt":"Ajusta la región de recorte de la vista a un rectángulo de (0,0) a (20,20).","completion":"using (Transaction t = new Transaction(doc, \"Adjust Crop Region\"))\n{\n    t.Start();\n    View view = doc.ActiveView;\n\n    if (view != null && view.CropBoxActive)\n    {\n        BoundingBoxXYZ cropBox = view.CropBox;\n        if (cropBox != null)\n        {\n            XYZ minPoint = new XYZ(0, 0, cropBox.Min.Z);\n            XYZ maxPoint = new XYZ(20 \/ 0.3048, 20 \/ 0.3048, cropBox.Max.Z);\n            cropBox.Min = minPoint;\n            cropBox.Max = maxPoint;\n            view.CropBox = cropBox;\n            view.CropBoxVisible = true;\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Generate a topography surface from a list of 4 points.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nElementId toposolidTypeId = Toposolid.GetDefaultToposolidType(doc);\n\nif (level != null && toposolidTypeId != ElementId.InvalidElementId)\n{\n    \/\/ Create a default set of points as none were specified in the prompt\n    IList<XYZ> points = new List<XYZ>\n    {\n        new XYZ(0, 0, 0),\n        new XYZ(50, 0, 2),\n        new XYZ(0, 50, 5),\n        new XYZ(50, 50, 3)\n    };\n    Toposolid.Create(doc, points, toposolidTypeId, level.Id);\n}"}
{"prompt":"Build a structural beam between (1,4,2) and (2,1,1) on Level 3","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 3\") as Level;\nFamilySymbol beamType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (beamType != null && level != null)\n{\n    if(!beamType.IsActive) beamType.Activate();\n    XYZ start = new XYZ(1, 4, 2);\n    XYZ end = new XYZ(2, 1, 1);\n    if (start.IsAlmostEqualTo(end)) return;\n    Line beamCurve = Line.CreateBound(start, end);\n    doc.Create.NewFamilyInstance(beamCurve, beamType, level, Autodesk.Revit.DB.Structure.StructuralType.Beam);\n}"}
{"prompt":"Crea una vista 3D por defecto.","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft != null)\n{\n    View3D view3d = View3D.CreateIsometric(doc, vft.Id);\n}"}
{"prompt":"Generate a report with the area of all rooms in the project.","completion":"List<Room> rooms = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>().ToList();"}
{"prompt":"Construct a new A1 sheet and place the 'Ground Floor' view on it.","completion":"using (Transaction t = new Transaction(doc, \"Create Sheet\"))\n{\n    t.Start();\n    string sheetNumber = \"A-101\";\n    FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(tb => tb.Name.Contains(\"A1\"));\n    View viewToPlace = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<View>().FirstOrDefault(v => v.Name == \"Ground Floor\");\n\n    if (titleBlock != null && viewToPlace != null)\n    {\n        ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n        if (newSheet != null)\n        {\n            newSheet.Name = \"Architectural Plan - Ground Floor\";\n            newSheet.SheetNumber = sheetNumber;\n            BoundingBoxUV sheetBox = newSheet.Outline;\n            UV centerUv = (sheetBox.Min + sheetBox.Max) \/ 2;\n            XYZ centerPoint = new XYZ(centerUv.U, centerUv.V, 0);\n            Viewport.Create(doc, newSheet.Id, viewToPlace.Id, centerPoint);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Compute the total area of all rooms.","completion":"double totalArea = 0.0;\nList<Room> rooms = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>().ToList();\nforeach (Room room in rooms)\n{\n    totalArea += room.Area;\n}"}
{"prompt":"Clona el nivel 1 con un desfase de 3m y llámalo 'Mezanine'.","completion":"string levelName = \"Mezanine\";\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\n\nif (level1 != null)\n{\n    double newElevation = level1.ProjectElevation + UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, newElevation);\n    if (newLevel != null)\n    {\n        newLevel.Name = levelName;\n    }\n}"}
{"prompt":"Crea un nuevo tipo de texto de 5mm de color verde.","completion":"using (Transaction t = new Transaction(doc, \"Create Green Text Type\"))\n{\n    t.Start();\n    string newTypeName = \"5mm Verde\";\n    TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\n    if (defaultType != null)\n    {\n        TextNoteType newType = defaultType.Duplicate(newTypeName) as TextNoteType;\n        if (newType != null)\n        {\n            Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n            if (textSizeParam != null && !textSizeParam.IsReadOnly)\n            {\n                textSizeParam.Set(5 \/ 304.8);\n            }\n            Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n            if (lineColorParam != null && !lineColorParam.IsReadOnly)\n            {\n                 lineColorParam.Set(65280);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Construct a global length parameter named 'CorridorWidth' with a value of 0.3m.","completion":"string paramName = \"CorridorWidth\";\nGlobalParameter gp = GlobalParameter.Create(doc, paramName, SpecTypeId.Length);\n\nif (gp != null)\n{\n    gp.SetValue(new DoubleParameterValue(UnitUtils.ConvertToInternalUnits(0.3, UnitTypeId.Meters)));\n}"}
{"prompt":"Move a selected element to position (6,10).","completion":"ICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds.Any())\n{\n    foreach (ElementId id in selectedIds)\n    {\n        Element elem = doc.GetElement(id);\n        if (elem != null)\n        {\n            LocationPoint lp = elem.Location as LocationPoint;\n            if (lp != null)\n            {\n                XYZ newPosition = new XYZ(6, 10, lp.Point.Z);\n                lp.Point = newPosition;\n            }\n        }\n    }\n}"}
{"prompt":"Fetch the coordinates of the project base point and the survey point.","completion":"BasePoint surveyPoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(p => p.IsShared);\nBasePoint projectBasePoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(p => !p.IsShared);\n\nXYZ surveyCoords = null;\nif (surveyPoint != null) surveyCoords = surveyPoint.get_BoundingBox(null).Min;\n\nXYZ projectCoords = null;\nif (projectBasePoint != null) projectCoords = projectBasePoint.get_BoundingBox(null).Min;"}
{"prompt":"Extrae todas las habitaciones en el Nivel 'Losa 99'.","completion":"Level groundFloor = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Losa 99\") as Level;\nList<Element> roomsOnGround = new List<Element>();\n\nif (groundFloor != null)\n{\n    roomsOnGround = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Where(r => r.LevelId == groundFloor.Id).ToList();\n}"}
{"prompt":"Conecta dos bandejas de cables con un codo.","completion":"List<CableTray> trays = new FilteredElementCollector(doc).OfClass(typeof(CableTray)).Cast<CableTray>().ToList();\n\nif (trays.Count >= 2)\n{\n    Connector c1 = trays[0].ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n    Connector c2 = trays[1].ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n    \n    if (c1 != null && c2 != null)\n    {\n        doc.Create.NewUnionFitting(c1, c2);\n    }\n}"}
{"prompt":"Inserta una instancia de la familia 'Mesa de Oficina' en el centro de la habitación 'Despacho 102'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 102\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Mesa de Oficina\") as FamilySymbol;\nif(furnitureSymbol != null && !furnitureSymbol.IsActive) furnitureSymbol.Activate();\nif(room != null)\n{\n    LocationPoint roomCenter = room.Location as LocationPoint;\n    if(roomCenter != null && furnitureSymbol != null && room.Level != null)\n    {\n        doc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Clona el tipo de muro 'Genérico - 147mm' y nómbralo 'Interior - 10cm Yeso'.","completion":"string originalName = \"Genérico - 147mm\";\nstring newName = \"Interior - 10cm Yeso\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif(originalType!=null)\n    originalType.Duplicate(newName);"}
{"prompt":"Crea un nuevo tipo de texto de 3mm de color azul.","completion":"using (Transaction t = new Transaction(doc, \"Create Text Type\"))\n{\n    t.Start();\n    string newTypeName = \"3mm Azul\";\n    TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\n\n    if (defaultType != null)\n    {\n        TextNoteType newType = defaultType.Duplicate(newTypeName) as TextNoteType;\n        if (newType != null)\n        {\n            Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n            if (textSizeParam != null && !textSizeParam.IsReadOnly) textSizeParam.Set(3 \/ 304.8);\n            \n            Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n            if (lineColorParam != null && !lineColorParam.IsReadOnly) lineColorParam.Set(255);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Genera una cuadrícula de columnas 5x5 con separación de 8 metros.","completion":"FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (columnSymbol != null && level != null)\n{\n    if(!columnSymbol.IsActive) columnSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters);\n    for(int i=0; i<5; i++)\n    {\n        for(int j=0; j<5; j++)\n        {\n            doc.Create.NewFamilyInstance(new XYZ(i*spacing, j*spacing, 0), columnSymbol, level, StructuralType.Column);\n        }\n    }\n}"}
{"prompt":"Pone una ventana de 1 metro de ancho y 1.2 metros de alto en un muro, creando un nuevo tipo si es necesario.","completion":"Wall hostWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nFamilySymbol originalSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (originalSymbol != null && hostWall != null)\n{\n    \/\/ Duplica el tipo para no modificar el original\n    string newTypeName = $\"Window 1.0m x 1.2m - {Guid.NewGuid().ToString().Substring(0, 4)}\";\n    FamilySymbol newSymbol = originalSymbol.Duplicate(newTypeName) as FamilySymbol;\n\n    \/\/ Activa el nuevo tipo si no lo está\n    if (!newSymbol.IsActive)\n    {\n        newSymbol.Activate();\n    }\n\n    \/\/ Establece las dimensiones en el nuevo tipo\n    Parameter widthParam = newSymbol.LookupParameter(\"Width\");\n    if(widthParam != null) widthParam.Set(UnitUtils.ConvertToInternalUnits(1.0, UnitTypeId.Meters));\n\n    Parameter heightParam = newSymbol.LookupParameter(\"Height\");\n    if(heightParam != null) heightParam.Set(UnitUtils.ConvertToInternalUnits(1.2, UnitTypeId.Meters));\n\n    \/\/ Obtén la información necesaria para la inserción\n    Level level = doc.GetElement(hostWall.LevelId) as Level;\n    LocationCurve locationCurve = hostWall.Location as LocationCurve;\n    if (locationCurve != null)\n    {\n        XYZ insertionPoint = locationCurve.Curve.Evaluate(0.5, true);\n        \/\/ Inserta una instancia del NUEVO tipo\n        doc.Create.NewFamilyInstance(insertionPoint, newSymbol, hostWall, level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Inserta una instancia de la familia 'Mesa de Oficina' en el centro de la habitación 'Despacho 101'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 101\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Mesa de Oficina\") as FamilySymbol;\nif(furnitureSymbol != null && !furnitureSymbol.IsActive) furnitureSymbol.Activate();\nif(room != null)\n{\n    LocationPoint roomCenter = room.Location as LocationPoint;\n    if(roomCenter != null && furnitureSymbol != null && room.Level != null)\n    {\n        doc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Reproduce el nivel 4 con un desfase de 2m y llámalo 'Mezanine'.","completion":"string levelName = \"Nivel 4\";\nLevel levelToCopy = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (levelToCopy != null)\n{\n    double offset = UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, levelToCopy.Elevation + offset);\n    newLevel.Name = \"Mezanine\";\n}"}
{"prompt":"Crea un codo en T entre dos tuberías que se intersecan.","completion":"\/\/ No se proporciona código para esta función específica debido a la necesidad de selección interactiva y manejo de casos complejos.\n\/\/ Este escenario involucra la selección de elementos específicos y el uso de métodos de creación que dependen de la geometría existente."}
{"prompt":"Elimina todos los tipos de muro no utilizados en el proyecto.","completion":"ICollection<ElementId> allWallTypes = new FilteredElementCollector(doc).OfClass(typeof(WallType)).ToElementIds();\nICollection<ElementId> usedWallTypes = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Select(w => w.GetTypeId()).Distinct().ToList();\nList<ElementId> unusedWallTypes = allWallTypes.Except(usedWallTypes).ToList();\nif (unusedWallTypes.Any())\n{\n    doc.Delete(unusedWallTypes);\n}"}
{"prompt":"Carga un enlace DWG preservando los colores.","completion":"string filePath = \"C:\/CAD\/Planos.dwg\";\nDWGImportOptions opts = new DWGImportOptions();\nopts.ColorMode = ImportColorMode.Preserved;\nElementId linkId;\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    doc.Link(filePath, opts, activeView, out linkId);\n}"}
{"prompt":"Find all walls taller than 3 meters.","completion":"double heightThreshold = UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\nElementId heightParamId = new ElementId(BuiltInParameter.WALL_USER_HEIGHT_PARAM);\nParameterValueProvider pvp = new ParameterValueProvider(heightParamId);\nFilterNumericRuleEvaluator evaluator = new FilterNumericGreater();\nFilterRule rule = new FilterDoubleRule(pvp, evaluator, heightThreshold, 1e-6);\nElementParameterFilter filter = new ElementParameterFilter(rule);\nList<ElementId> tallWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(filter).ToElementIds().ToList();"}
{"prompt":"Construct an extrusion roof with an arc profile.","completion":"using (Transaction t = new Transaction(doc, \"Create Extrusion Roof\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    RoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n\n    if (level != null && roofType != null && doc.ActiveView != null)\n    {\n        CurveArray profile = new CurveArray();\n        profile.Append(Arc.Create(new XYZ(-10,0,0), new XYZ(10,0,0), new XYZ(0,5,0)));\n        Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisY, XYZ.Zero);\n        ReferencePlane refPlane = doc.Create.NewReferencePlane(plane.Origin, plane.Origin + XYZ.BasisX, plane.Normal, doc.ActiveView);\n        if(refPlane != null)\n            doc.Create.NewExtrusionRoof(profile, refPlane, level, roofType, 0, 20);\n    }\n    t.Commit();\n}"}
{"prompt":"Crea un conducto eléctrico de 1 pulgada de diámetro.","completion":"using (Transaction t = new Transaction(doc, \"Create Conduit\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    ElementId conduitTypeId = new FilteredElementCollector(doc).OfClass(typeof(ConduitType)).FirstElementId();\n\n    if (level != null && conduitTypeId != null && conduitTypeId != ElementId.InvalidElementId)\n    {\n        XYZ start = new XYZ(0, 0, 3 \/ 0.3048);\n        XYZ end = new XYZ(5 \/ 0.3048, 0, 3 \/ 0.3048);\n        Conduit conduit = Conduit.Create(doc, conduitTypeId, start, end, level.Id);\n\n        if (conduit != null)\n        {\n            Parameter diameterParam = conduit.get_Parameter(BuiltInParameter.RBS_CONDUIT_DIAMETER_PARAM);\n            if (diameterParam != null && !diameterParam.IsReadOnly)\n            {\n                diameterParam.Set(1.0\/12.0);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Elimina todos los tipos de muro no utilizados en el proyecto.","completion":"ICollection<ElementId> allWallTypes = new FilteredElementCollector(doc).OfClass(typeof(WallType)).ToElementIds();\nICollection<ElementId> usedWallTypes = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Select(w => w.GetTypeId()).Distinct().ToList();\nList<ElementId> unusedWallTypes = allWallTypes.Except(usedWallTypes).ToList();\nif (unusedWallTypes.Any())\n{\n    doc.Delete(unusedWallTypes);\n}"}
{"prompt":"Configure the visibility of the 'Furniture' category to false in the active view.","completion":"Category furnitureCat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Furniture);\nView activeView = doc.ActiveView;\n\nif (furnitureCat != null && activeView != null)\n{\n    activeView.SetCategoryHidden(furnitureCat.Id, true);\n}\n"}
{"prompt":"Coloca una instancia de la familia 'Mesa de Oficina' en el centro de la habitación 'Despacho 98'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 98\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Mesa de Oficina\") as FamilySymbol;\nif(furnitureSymbol != null && !furnitureSymbol.IsActive) furnitureSymbol.Activate();\nif(room != null)\n{\n    LocationPoint roomCenter = room.Location as LocationPoint;\n    if(roomCenter != null && furnitureSymbol != null && room.Level != null)\n    {\n        doc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Genera una tabla para puertas con los campos 'Marca de Tipo' y 'Costo'.","completion":"string scheduleName = \"Tabla de Puertas\";\nViewSchedule schedule = ViewSchedule.CreateSchedule(doc, new ElementId(BuiltInCategory.OST_Doors));\n\nif (schedule != null)\n{\n    schedule.Name = scheduleName;\n    ScheduleDefinition def = schedule.Definition;\n    if (def != null)\n    {\n        SchedulableField typeMarkField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.Value == (long)BuiltInParameter.ALL_MODEL_TYPE_MARK);\n        SchedulableField costField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.Value == (long)BuiltInParameter.ALL_MODEL_COST);\n        \n        if (typeMarkField != null) def.AddField(typeMarkField);\n        if (costField != null) def.AddField(costField);\n    }\n}"}
{"prompt":"Configure the 'Mark' parameter to 'D-01' for the selected door.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a door\");\nif (pickedRef != null)\n{\n    Element door = doc.GetElement(pickedRef.ElementId);\n    if (door != null)\n    {\n        Parameter markParam = door.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n        if (markParam != null && !markParam.IsReadOnly)\n        {\n            markParam.Set(\"D-01\");\n        }\n    }\n}"}
{"prompt":"Crea una nueva habitación en el Nivel 1 en el punto (11, 8).","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\n\nif (level1 != null)\n{\n    UV point = new UV(11, 8);\n    Room room = doc.Create.NewRoom(level1, point);\n}"}
{"prompt":"Copy the 'Generic - 150mm' wall type and name it 'Interior - 15cm Plaster'.","completion":"string originalName = \"Generic - 150mm\";\nstring newName = \"Interior - 15cm Plaster\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif (originalType != null)\n{\n    WallType newType = originalType.Duplicate(newName) as WallType;\n}"}
{"prompt":"Dibuja una región rellena con patrón diagonal.","completion":"using (Transaction t = new Transaction(doc, \"Draw Filled Region\"))\n{\n    t.Start();\n    View activeView = doc.ActiveView;\n    FillPatternElement fillPattern = new FilteredElementCollector(doc).OfClass(typeof(FillPatternElement)).Cast<FillPatternElement>().FirstOrDefault(p => !p.GetFillPattern().IsSolidFill);\n\n    if (activeView != null && fillPattern != null)\n    {\n        FilledRegionType filledRegionType = new FilteredElementCollector(doc, activeView.Id).OfClass(typeof(FilledRegionType)).FirstOrDefault() as FilledRegionType;\n        if (filledRegionType != null)\n        {\n            FilledRegionType newType = filledRegionType.Duplicate(\"Temp Diagonal Region\") as FilledRegionType;\n            if (newType != null)\n            {\n                newType.ForegroundPatternId = fillPattern.Id;\n                XYZ p1 = new XYZ(0,0,0);\n                XYZ p2 = new XYZ(5 \/ 0.3048,0,0);\n                XYZ p3 = new XYZ(5 \/ 0.3048,5 \/ 0.3048,0);\n                XYZ p4 = new XYZ(0,5 \/ 0.3048,0);\n                CurveLoop profile = new CurveLoop();\n                profile.Append(Line.CreateBound(p1,p2));\n                profile.Append(Line.CreateBound(p2,p3));\n                profile.Append(Line.CreateBound(p3,p4));\n                profile.Append(Line.CreateBound(p4,p1));\n                FilledRegion.Create(doc, newType.Id, activeView.Id, new List<CurveLoop>{profile});\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create beams between horizontally aligned columns.","completion":"FamilySymbol beamSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nList<FamilyInstance> columns = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().Cast<FamilyInstance>().OrderBy(c => c.GetTransform().Origin.Y).ThenBy(c => c.GetTransform().Origin.X).ToList();\n\nif (beamSymbol != null && level != null && columns.Count >= 2)\n{\n    for(int i=0; i < columns.Count - 1; i++)\n    {\n        LocationPoint p1 = columns[i].Location as LocationPoint;\n        LocationPoint p2 = columns[i+1].Location as LocationPoint;\n        if (p1 != null && p2 != null && Math.Abs(p1.Point.Y - p2.Point.Y) < 0.01)\n        {\n            Line line = Line.CreateBound(p1.Point, p2.Point);\n            doc.Create.NewFamilyInstance(line, beamSymbol, level, StructuralType.Beam);\n        }\n    }\n}"}
{"prompt":"Duplica el nivel 2 con un desfase de 2m y llámalo 'Mezanine'.","completion":"string levelName = \"Nivel 2\";\nLevel levelToCopy = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (levelToCopy != null)\n{\n    double offset = UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, levelToCopy.Elevation + offset);\n    newLevel.Name = \"Mezanine\";\n}"}
{"prompt":"Position an instance of the 'Office Desk' family in the center of the 'Office 97' room.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Office 97\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Office Desk\") as FamilySymbol;\nif(furnitureSymbol != null && !furnitureSymbol.IsActive) furnitureSymbol.Activate();\nif(room != null)\n{\n    LocationPoint roomCenter = room.Location as LocationPoint;\n    if(roomCenter != null && furnitureSymbol != null && room.Level != null)\n    {\n        doc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Pin the selected element so it cannot be moved.","completion":"UIDocument uidoc = new UIDocument(doc);\nElementId selectedId = uidoc.Selection.GetElementIds().FirstOrDefault();\n\nif (selectedId != ElementId.InvalidElementId)\n{\n    Element elementToPin = doc.GetElement(selectedId);\n    if (elementToPin != null)\n    {\n        elementToPin.Pinned = true;\n    }\n}"}
{"prompt":"Copy level 6 with a 1m offset and name it 'Mezzanine'.","completion":"string levelName = \"Level 6\";\nLevel levelToCopy = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (levelToCopy != null)\n{\n    double offset = UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, levelToCopy.Elevation + offset);\n    newLevel.Name = \"Mezzanine\";\n}"}
{"prompt":"Extrae el elemento anfitrión de la primera ventana que encuentres.","completion":"FamilyInstance windowInstance = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\nif (windowInstance != null)\n{\n    Element hostElement = windowInstance.Host;\n}"}
{"prompt":"Generate a new Level named 'Level 6' at an elevation of 11 meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(11, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\nif (newLevel != null)\n{\n    try { newLevel.Name = \"Level 6\"; } catch {}\n}"}
{"prompt":"Temporarily isolate all furniture in the active view.","completion":"ICollection<ElementId> furnitureIds = new FilteredElementCollector(doc, doc.ActiveView.Id).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsNotElementType().ToElementIds();\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.IsolateElementsTemporary(furnitureIds);\n}"}
{"prompt":"Crea un nuevo panel en la cinta de opciones llamado 'Mis Herramientas' con un botón.","completion":""}
{"prompt":"Crea una losa de cimentación estructural de 30cm de espesor.","completion":"Level foundationLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderBy(l => l.Elevation).FirstOrDefault();\nFloorType slabType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.get_Parameter(BuiltInParameter.FLOOR_PARAM_IS_STRUCTURAL).AsInteger() == 1);\nif (foundationLevel != null && slabType != null)\n{\n    XYZ p1 = new XYZ(0,0,0); XYZ p2 = new XYZ(10,0,0); XYZ p3 = new XYZ(10,15,0); XYZ p4 = new XYZ(0,15,0);\n    CurveLoop profile = new CurveLoop();\n    profile.Append(Line.CreateBound(p1,p2));\n    profile.Append(Line.CreateBound(p2,p3));\n    profile.Append(Line.CreateBound(p3,p4));\n    profile.Append(Line.CreateBound(p4,p1));\n    Floor.Create(doc, new List<CurveLoop>{profile}, slabType.Id, foundationLevel.Id);\n}"}
{"prompt":"Representa una región rellena con patrón diagonal.","completion":"using (Transaction t = new Transaction(doc, \"Draw Filled Region\"))\n{\n    t.Start();\n    View activeView = doc.ActiveView;\n    FillPatternElement fillPattern = new FilteredElementCollector(doc).OfClass(typeof(FillPatternElement)).Cast<FillPatternElement>().FirstOrDefault(p => !p.GetFillPattern().IsSolidFill);\n    if (activeView != null && fillPattern != null)\n    {\n        FilledRegionType filledRegionType = new FilteredElementCollector(doc, activeView.Id).OfClass(typeof(FilledRegionType)).FirstOrDefault() as FilledRegionType;\n        if (filledRegionType != null)\n        {\n            FilledRegionType newType = filledRegionType.Duplicate(\"Temp Diagonal Region\") as FilledRegionType;\n            if (newType != null)\n            {\n                newType.ForegroundPatternId = fillPattern.Id;\n                CurveLoop profile = new CurveLoop();\n                profile.Append(Line.CreateBound(new XYZ(0, 0, 0), new XYZ(5, 0, 0)));\n                profile.Append(Line.CreateBound(new XYZ(5, 0, 0), new XYZ(5, 5, 0)));\n                profile.Append(Line.CreateBound(new XYZ(5, 5, 0), new XYZ(0, 5, 0)));\n                profile.Append(Line.CreateBound(new XYZ(0, 5, 0), new XYZ(0, 0, 0)));\n                FilledRegion.Create(doc, newType.Id, activeView.Id, new List<CurveLoop> { profile });\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Set the 'Mark' parameter of all selected walls to 'W-EXT-5'.","completion":"using (Transaction t = new Transaction(doc, \"Set Wall Mark\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    ICollection<ElementId> selectedIds = localUidoc.Selection.GetElementIds();\n\n    if (selectedIds != null && selectedIds.Count > 5)\n    {\n        foreach(ElementId id in selectedIds)\n        {\n            Element elem = doc.GetElement(id);\n            if(elem is Wall)\n            {\n                Parameter p = elem.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n                if (p != null && !p.IsReadOnly)\n                {\n                    p.Set(\"W-EXT-01\");\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create a radial dimension for a curved wall.","completion":"using (Transaction t = new Transaction(doc, \"Create Radial Dimension\"))\n{\n    t.Start();\n    Wall curvedWall = new FilteredElementCollector(doc, doc.ActiveView.Id).OfClass(typeof(Wall)).Cast<Wall>().FirstOrDefault(w => w.Location is LocationCurve && (w.Location as LocationCurve).Curve is Arc);\n    View activeView = doc.ActiveView;\n\n    if (curvedWall != null && activeView != null)\n    {\n        LocationCurve locCurve = curvedWall.Location as LocationCurve;\n        if (locCurve != null)\n        {\n            Arc arc = locCurve.Curve as Arc;\n            if (arc != null)\n            {\n                ReferenceArray refArray = new ReferenceArray();\n                refArray.Append(arc.Reference);\n                doc.Create.NewDimension(activeView, Line.CreateBound(arc.Center, arc.GetEndPoint(0)), refArray);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Build a stair between Level 1 and Level 2","completion":"\/\/ This is a complex operation that requires multiple steps and\/or user interaction and is not supported by the agent."}
{"prompt":"Inserta un rociador en las coordenadas (4,1,4).","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol sprinklerSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Sprinklers).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (level != null && sprinklerSymbol != null)\n{\n    if (!sprinklerSymbol.IsActive) sprinklerSymbol.Activate();\n    XYZ placementPoint = new XYZ(UnitUtils.ConvertToInternalUnits(4, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(4, UnitTypeId.Meters));\n    doc.Create.NewFamilyInstance(placementPoint, sprinklerSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n}"}
{"prompt":"Retrieve the total number of warnings in the project.","completion":"int totalWarnings = doc.GetWarnings().Count;\n"}
{"prompt":"Configure the sill height of all windows to 898mm.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits(898, UnitTypeId.Millimeters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Create a pipe with a 150mm diameter.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nPipeType pipeType = new FilteredElementCollector(doc).OfClass(typeof(PipeType)).FirstOrDefault() as PipeType;\nPipingSystemType systemType = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).FirstOrDefault() as PipingSystemType;\n\nif (level != null && pipeType != null && systemType != null)\n{\n    XYZ p1 = new XYZ(0,0,0);\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters),0,0);\n    Pipe pipe = Pipe.Create(doc, systemType.Id, pipeType.Id, level.Id, p1, p2);\n\n    if (pipe != null)\n    {\n        Parameter diameterParam = pipe.get_Parameter(BuiltInParameter.RBS_PIPE_DIAMETER_PARAM);\n        if (diameterParam != null) {\n            diameterParam.Set(UnitUtils.ConvertToInternalUnits(150, UnitTypeId.Millimeters));\n        }\n    }\n}"}
{"prompt":"Recupera una lista de todas las familias de anotación.","completion":"List<Family> annotationFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.CategoryType == CategoryType.Annotation).ToList();\n"}
{"prompt":"Crea un nivel 'Roof Terrace' a 15m.","completion":"string levelName = \"Roof Terrace\";\ndouble elev = UnitUtils.ConvertToInternalUnits(15, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elev);\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Create a new window schedule that includes Type Mark, Width, and Height.","completion":"string scheduleName = \"Window Schedule\";\nViewSchedule schedule = ViewSchedule.CreateSchedule(doc, new ElementId(BuiltInCategory.OST_Windows));\n\nif (schedule != null)\n{\n    schedule.Name = scheduleName;\n    ScheduleDefinition def = schedule.Definition;\n    if (def != null)\n    {\n        SchedulableField typeMarkField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.ALL_MODEL_TYPE_MARK);\n        SchedulableField widthField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.FAMILY_WIDTH_PARAM);\n        SchedulableField heightField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.FAMILY_HEIGHT_PARAM);\n        \n        if (typeMarkField != null) def.AddField(typeMarkField);\n        if (widthField != null) def.AddField(widthField);\n        if (heightField != null) def.AddField(heightField);\n    }\n}"}
{"prompt":"Find all walls taller than 4 meters.","completion":"double heightThreshold = UnitUtils.ConvertToInternalUnits(4, UnitTypeId.Meters);\nParameterValueProvider pvp = new ParameterValueProvider(new ElementId(BuiltInParameter.WALL_USER_HEIGHT_PARAM));\nFilterRule rule = new FilterDoubleRule(pvp, new FilterNumericGreater(), heightThreshold, 1e-6);\nList<Element> tallWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(new ElementParameterFilter(rule)).ToList();"}
{"prompt":"Create a new Ribbon panel named 'My Tools' with a button.","completion":""}
{"prompt":"Load the 'Table.rfa' family and place it at (5,5,0) on Level 1.","completion":"string familyPath = \"C:\/Common\/Paths\/Table.rfa\";\nFamily tableFamily = null;\nbool familyLoaded = doc.LoadFamily(familyPath, out tableFamily);\n\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\n\nif (familyLoaded && tableFamily != null && level1 != null)\n{\n    FamilySymbol tableSymbol = doc.GetElement(tableFamily.GetFamilySymbolIds().FirstOrDefault()) as FamilySymbol;\n    if (tableSymbol != null)\n    {\n        if (!tableSymbol.IsActive) tableSymbol.Activate();\n        XYZ point = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0);\n        doc.Create.NewFamilyInstance(point, tableSymbol, level1, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Cambia el tipo de la ventana seleccionada al tipo 'Fija 119x60'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una ventana\");\nFamilySymbol newType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name == \"Fija 119x60\");\nif (pickedRef != null && newType != null)\n{\n    FamilyInstance window = doc.GetElement(pickedRef.ElementId) as FamilyInstance;\n    if (window != null)\n    {\n        window.Symbol = newType;\n    }\n}"}
{"prompt":"Remove all unused wall types in the project.","completion":"ICollection<ElementId> allWallTypes = new FilteredElementCollector(doc).OfClass(typeof(WallType)).ToElementIds();\nICollection<ElementId> usedWallTypes = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Select(w => w.GetTypeId()).Distinct().ToList();\nList<ElementId> unusedWallTypes = allWallTypes.Except(usedWallTypes).ToList();\nif (unusedWallTypes.Any())\n{\n    doc.Delete(unusedWallTypes);\n}"}
{"prompt":"Attach a point to the selected Path of Travel.","completion":"\/\/ PathOfTravel related methods are likely inaccessible in this environment.\n\/\/ The following code is a placeholder to show the intent.\n\/*\nusing (Transaction t = new Transaction(doc, \"Update Path of Travel\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference pickedRef = localUidoc.Selection.PickObject(ObjectType.Element, \"Select a Path of Travel\");\n\n    if (pickedRef != null)\n    {\n        PathOfTravel pot = doc.GetElement(pickedRef) as PathOfTravel;\n        if (pot != null)\n        {\n            IList<XYZ> points = pot.GetPath();\n            if (points != null && points.Count >= 2)\n            {\n                XYZ midPoint = (points[0] + points[1]) \/ 2;\n                points.Insert(1, midPoint);\n                pot.Update(points);\n            }\n        }\n    }\n    t.Commit();\n}\n*\/"}
{"prompt":"Create a new elevation view looking south.","completion":"using (Transaction t = new Transaction(doc, \"Create South Elevation\"))\n{\n    t.Start();\n    ViewFamilyType elevationVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(vft => vft.ViewFamily == ViewFamily.Elevation);\n    View activeView = doc.ActiveView;\n\n    if (elevationVFT != null && activeView != null)\n    {\n        ElevationMarker marker = ElevationMarker.CreateElevationMarker(doc, elevationVFT.Id, new XYZ(0, -20 \/ 0.3048, 0), 100);\n        \n        if (marker != null)\n        {\n            View aev = marker.CreateElevation(doc, activeView.Id, 0);\n            if (aev != null)\n            {\n                aev.Name = \"South Elevation\";\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea una vista de sección entre los puntos (0,0,0) y (10,10,0).","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.Section);\n\nif (vft != null)\n{\n    XYZ p1 = new XYZ(0,0,0);\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),0);\n    XYZ midPoint = (p1 + p2) \/ 2;\n    XYZ direction = (p2 - p1).Normalize();\n    XYZ up = XYZ.BasisZ;\n    XYZ viewdir = up.CrossProduct(direction);\n    \n    BoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\n    Transform t = Transform.Identity;\n    t.Origin = midPoint;\nt.BasisX = direction;\nt.BasisY = up;\nt.BasisZ = viewdir;\nsectionBox.Transform = t;\nsectionBox.Min = new XYZ(UnitUtils.ConvertToInternalUnits(-p1.DistanceTo(p2)\/2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(-10, UnitTypeId.Meters), 0);\nsectionBox.Max = new XYZ(UnitUtils.ConvertToInternalUnits(p1.DistanceTo(p2)\/2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(20, UnitTypeId.Meters));\n    \n    ViewSection.CreateSection(doc, vft.Id, sectionBox);\n}"}
{"prompt":"Update the type of a floor to one that contains 'Concrete'.","completion":"Floor floorToChange = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault() as Floor;\nif(floorToChange != null)\n{\n    FloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name.Contains(\"Concrete\"));\n    if(newType!=null)\n        floorToChange.ChangeTypeId(newType.Id);\n}"}
{"prompt":"Duplica el tipo de muro 'Genérico - 131mm' y nómbralo 'Interior - 15cm Yeso'.","completion":"string originalName = \"Genérico - 131mm\";\nstring newName = \"Interior - 15cm Yeso\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif(originalType!=null)\n    originalType.Duplicate(newName);"}
{"prompt":"Display a dialog box with 'Yes', 'Sección Longitudinal', and 'Cancel' options.","completion":""}
{"prompt":"Generate a new Level named 'Level 7' at an elevation of 7 meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(7, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Level 7\";\n}"}
{"prompt":"Elimina la selección actual.","completion":"ICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nif (selectedIds.Any())\n{\n    doc.Delete(selectedIds);\n}"}
{"prompt":"Construye un reporte con el área de todas las habitaciones del proyecto.","completion":"List<Room> rooms = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>().ToList();"}
{"prompt":"Generate a new window schedule that includes Type Mark, Width, and Height.","completion":"string scheduleName = \"Window Schedule\";\nViewSchedule schedule = ViewSchedule.CreateSchedule(doc, new ElementId(BuiltInCategory.OST_Windows));\n\nif (schedule != null)\n{\n    schedule.Name = scheduleName;\n    ScheduleDefinition def = schedule.Definition;\n    if (def != null)\n    {\n        SchedulableField typeMarkField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.ALL_MODEL_TYPE_MARK);\n        SchedulableField widthField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.FAMILY_WIDTH_PARAM);\n        SchedulableField heightField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.FAMILY_HEIGHT_PARAM);\n        \n        if (typeMarkField != null) def.AddField(typeMarkField);\n        if (widthField != null) def.AddField(widthField);\n        if (heightField != null) def.AddField(heightField);\n    }\n}"}
{"prompt":"Change the detail level of the active view to 'Medium'.","completion":"View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.DetailLevel = ViewDetailLevel.Medium;\n}"}
{"prompt":"Create a new door type named 'FR-90 Door' and set its fire rating to '90 min'.","completion":"string newTypeName = \"FR-90 Door\";\nFamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nFamilySymbol newDoorType = null;\nif (doorTypeToDuplicate != null)\n{\n    newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\n    if (newDoorType != null)\n    {\n        Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n        if (fireRatingParam != null && !fireRatingParam.IsReadOnly)\n        {\n            fireRatingParam.Set(\"90 min\");\n        }\n    }\n}"}
{"prompt":"Coloca una instancia de la familia 'Ventana Fija 115x60' en el centro de la habitación 'Despacho 96'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 115\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Ventana Fija 96x60\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);"}
{"prompt":"Attach a reference point at coordinates (1,7,4) inside the family editor.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(1,7,4));"}
{"prompt":"Encuentra todas las puertas del Nivel 6 que sean de la familia 'Puerta Sencilla'.","completion":"string levelName = \"Nivel 6\";\nstring familyName = \"Puerta Sencilla\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WherePasses(new ElementLevelFilter(targetLevel.Id));\n    List<ElementId> doorIds = new List<ElementId>();\n    foreach (Element door in collector)\n    {\n        FamilyInstance fi = door as FamilyInstance;\n        if (fi != null && fi.Symbol.Family.Name == familyName)\n        {\n            doorIds.Add(door.Id);\n        }\n    }\n    uidoc.Selection.SetElementIds(doorIds);\n}"}
{"prompt":"Configure the 'Mark' parameter of all selected walls to 'W-EXT-3'.","completion":"using (Transaction t = new Transaction(doc, \"Set Wall Mark\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    ICollection<ElementId> selectedIds = localUidoc.Selection.GetElementIds();\n\n    if (selectedIds != null && selectedIds.Count > 3)\n    {\n        foreach(ElementId id in selectedIds)\n        {\n            Element elem = doc.GetElement(id);\n            if(elem is Wall)\n            {\n                Parameter p = elem.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n                if (p != null && !p.IsReadOnly)\n                {\n                    p.Set(\"W-EXT-01\");\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Ajusta el tipo de una losa seleccionada a 'Concreto 16cm'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una losa\");\n\nif (pickedRef != null)\n{\n    Floor floorToChange = doc.GetElement(pickedRef) as Floor;\n    FloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name == \"Concreto 16cm\");\n    \n    if (floorToChange != null && newType != null)\n    {\n        floorToChange.ChangeTypeId(newType.Id);\n    }\n}"}
{"prompt":"Create a new A2 sheet with the number 'A-201'.","completion":"string sheetNumber = \"A-201\";\nFamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (titleBlock != null)\n{\n    ViewSheet sheet = ViewSheet.Create(doc, titleBlock.Id);\n    if (sheet != null)\n    {\n        sheet.Name = \"Construction Details\";\n        sheet.SheetNumber = sheetNumber;\n    }\n}"}
{"prompt":"Crea una escalera entre Nivel 1 y Nivel 2.","completion":"Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel 1\");\nLevel topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel 2\");\n\nif (bottomLevel != null && topLevel != null)\n{\n    \/\/ TODO: Stairs.Create(doc, bottomLevel.Id, topLevel.Id); is not a valid Revit API call.\n    \/\/ Stairs creation requires using the StairsEditScope class.\n}"}
{"prompt":"Append a reference point at coordinates (2,1,3) inside the family editor.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(2,1,3));"}
{"prompt":"Generate a shaft opening that passes through from Level 1 to Level 3.","completion":"using (Transaction t = new Transaction(doc, \"Create Shaft Opening\"))\n{\n    t.Start();\n    Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 1\");\n    Level topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 3\");\n\n    if (bottomLevel != null && topLevel != null)\n    {\n        XYZ p1 = new XYZ(5 \/ 0.3048, 5 \/ 0.3048,0);\n        XYZ p2 = new XYZ(8 \/ 0.3048, 5 \/ 0.3048,0);\n        XYZ p3 = new XYZ(8 \/ 0.3048, 8 \/ 0.3048,0);\n        XYZ p4 = new XYZ(5 \/ 0.3048, 8 \/ 0.3048,0);\n        CurveArray profile = new CurveArray();\n        profile.Append(Line.CreateBound(p1,p2));\n        profile.Append(Line.CreateBound(p2,p3));\n        profile.Append(Line.CreateBound(p3,p4));\n        profile.Append(Line.CreateBound(p4,p1));\n        Opening shaft = doc.Create.NewOpening(bottomLevel, topLevel, profile);\n    }\n    t.Commit();\n}"}
{"prompt":"Build a global length parameter named 'CorridorWidth' with a value of 1.8m.","completion":"string paramName = \"CorridorWidth\";\nGlobalParameter gp = GlobalParameter.Create(doc, paramName, SpecTypeId.Length);\n\nif (gp != null)\n{\n    gp.SetValue(new DoubleParameterValue(UnitUtils.ConvertToInternalUnits(1.8, UnitTypeId.Meters)));\n}"}
{"prompt":"Ajusta el tipo de la ventana seleccionada al tipo 'Fija 116x60'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una ventana\");\nFamilySymbol newType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name == \"Fija 116x60\");\nif (pickedRef != null && newType != null)\n{\n    FamilyInstance window = doc.GetElement(pickedRef.ElementId) as FamilyInstance;\n    if (window != null)\n    {\n        window.Symbol = newType;\n    }\n}"}
{"prompt":"Include a reference point at coordinates (4,1,7) inside the family editor.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(4,1,7));"}
{"prompt":"Coloca una instancia de la familia 'Mesa de Oficina' en el centro de la habitación 'Despacho 102'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 102\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Mesa de Oficina\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);"}
{"prompt":"Dentro del editor de familias, crea un plano de referencia vertical llamado 'Eje Central'.","completion":"if (doc.IsFamilyDocument)\n{\n    string rpName = \"Eje Central\";\n    XYZ start = new XYZ(0, -5, 0);\n    XYZ end = new XYZ(0, 5, 0);\n    XYZ normal = XYZ.BasisX;\n\n    View activeView = doc.ActiveView;\n    if (activeView != null)\n    {\n        ReferencePlane rp = doc.FamilyCreate.NewReferencePlane(start, end, normal, activeView);\n        if (rp != null)\n        {\n            rp.Name = rpName;\n        }\n    }\n}"}
{"prompt":"Clone the 'Basic Wall' type and rename it.","completion":"string typeToDuplicate = \"Basic Wall\";\nstring newTypeName = \"Basic Wall Copy\";\nWallType wt = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(w=>w.Name==typeToDuplicate);\n\nif (wt != null)\n{\n    WallType newWt = wt.Duplicate(newTypeName) as WallType;\n}"}
{"prompt":"Apply 25mm thermal insulation to all hot water pipes.","completion":"PipeInsulationType insulationType = new FilteredElementCollector(doc).OfClass(typeof(PipeInsulationType)).FirstOrDefault() as PipeInsulationType;\nPipingSystemType hotWaterSystem = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).Cast<PipingSystemType>().FirstOrDefault(s => s.Name.Contains(\"Hot Water\"));\n\nif (insulationType != null && hotWaterSystem != null)\n{\n    List<Pipe> pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast<Pipe>().Where(p => \n    {\n        Parameter systemParam = p.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM);\n        return systemParam != null && systemParam.HasValue && systemParam.AsElementId() == hotWaterSystem.Id;\n    }).ToList();\n    \n    foreach(Pipe p in pipes)\n    {\n        PipeInsulation.Create(doc, p.Id, insulationType.Id, UnitUtils.ConvertToInternalUnits(25, UnitTypeId.Millimeters));\n    }\n}"}
{"prompt":"Crea un nuevo nivel llamado 'Planta Sótano' a una elevación de -4.5 metros.","completion":"double elevationInternal = UnitUtils.ConvertToInternalUnits(-4.5, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevationInternal);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Planta Sótano\";\n}"}
{"prompt":"Selecciona todos los muros con una resistencia al fuego de 88 minutos.","completion":"ElementId fireRatingParamId = new ElementId(BuiltInParameter.FIRE_RATING);\nParameterValueProvider pvp = new ParameterValueProvider(fireRatingParamId);\nFilterStringRuleEvaluator evaluator = new FilterStringEquals();\nFilterRule rule = new FilterStringRule(pvp, evaluator, \"988 min\");\nElementParameterFilter filter = new ElementParameterFilter(rule);\nICollection<ElementId> wallsToSelect = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(filter).ToElementIds();\nif (wallsToSelect.Count > 0)\n{\n    new UIDocument(doc).Selection.SetElementIds(wallsToSelect);\n}"}
{"prompt":"Coloca postes de iluminación cada 10m en un camino de 100m.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol lightSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsElementType().FirstOrDefault(s => s.Name.Contains(\"Post\") || s.Name.Contains(\"Pole\")) as FamilySymbol;\nif (lightSymbol != null && level != null)\n{\n    if(!lightSymbol.IsActive) lightSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\n    for(int i = 0; i <= 10; i++)\n    {\n        XYZ point = new XYZ(i * spacing, 0, 0);\n        doc.Create.NewFamilyInstance(point, lightSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Create a new level 'Level 1' at an elevation of 13 meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(13, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\nif (newLevel != null)\n{\n    try { newLevel.Name = \"Level 1\"; } catch {}\n}"}
{"prompt":"Create a view filter to hide demolished walls.","completion":"using (Transaction t = new Transaction(doc, \"Create Demolition Filter\"))\n{\n    t.Start();\n    Phase demolishedPhase = new FilteredElementCollector(doc).OfClass(typeof(Phase)).Cast<Phase>().FirstOrDefault(p => p.Name.Contains(\"Demolished\") || p.Name.Contains(\"Demolición\"));\n    View activeView = doc.ActiveView;\n\n    if (demolishedPhase != null && activeView != null)\n    {\n        ElementId paramId = new ElementId(BuiltInParameter.PHASE_DEMOLISHED);\n        FilterRule rule = ParameterFilterRuleFactory.CreateEqualsRule(paramId, demolishedPhase.Id);\n        ElementFilter filter = new ElementParameterFilter(rule);\n        ICollection<ElementId> categories = new List<ElementId>{ new ElementId(BuiltInCategory.OST_Walls) };\n        ParameterFilterElement pfe = ParameterFilterElement.Create(doc, \"Demolition Filter\", categories, filter);\n        \n        if (pfe != null)\n        {\n            activeView.AddFilter(pfe.Id);\n            activeView.SetFilterVisibility(pfe.Id, false);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Generate a new Level named 'Level 1' at an elevation of 13 meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(13, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Level 1\";\n}"}
{"prompt":"Selecciona todos los muros del 'Nivel 6' y cambia su comentario a 'REVISAR AISLAMIENTO'.","completion":"Level level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 6\") as Level;\nif (level2 != null)\n{\n    List<Wall> wallsOnLevel2 = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Where(w => w.LevelId == level2.Id).Cast<Wall>().ToList();\n    foreach(Wall wall in wallsOnLevel2)\n    {\n        Parameter commentParam = wall.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n        if (commentParam != null && !commentParam.IsReadOnly)\n        {\n            commentParam.Set(\"REVISAR AISLAMIENTO\");\n        }\n    }\n}"}
{"prompt":"Construct a new Level named 'Level 8' at an elevation of 9 meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(9, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\nif (newLevel != null)\n{\n    try { newLevel.Name = \"Level 8\"; } catch {}\n}"}
{"prompt":"Incorpora un codo de 90 grados entre dos tuberías.","completion":"using (Transaction t = new Transaction(doc, \"Add Elbow\"))\n{\n    t.Start();\n    List<Pipe> pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast<Pipe>().Where(p => p.ConnectorManager != null && p.ConnectorManager.UnusedConnectors.Size > 0).Take(2).ToList();\n\n    if (pipes.Count >= 2)\n    {\n        Connector c1 = pipes[0].ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n        Connector c2 = pipes[1].ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n        \n        if (c1 != null && c2 != null)\n        {\n            doc.Create.NewElbowFitting(c1, c2);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Get all instances of the Furniture category.","completion":"List<Element> furnitureInstances = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsNotElementType().ToList();"}
{"prompt":"Obtain the 'Walls' schedule and export its data to CSV.","completion":"ViewSchedule schedule = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().FirstOrDefault(s=>s.Name==\"Walls\");\n\nif (schedule != null)\n{\n    string folderPath = \"C:\/RevitExports\/\";\n    ViewScheduleExportOptions options = new ViewScheduleExportOptions() { FieldDelimiter = \",\" };\n    schedule.Export(folderPath, \"Walls.csv\", options);\n}"}
{"prompt":"Select all walls on 'Level 1' and change their comment to 'REVIEW INSULATION'.","completion":"string levelName = \"Level 1\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(targetLevel.Id);\n    FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(levelFilter);\n    foreach (Element wall in collector)\n    {\n        Parameter commentsParam = wall.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n        if (commentsParam != null && !commentsParam.IsReadOnly) { commentsParam.Set(\"REVIEW INSULATION\"); }\n    }\n}"}
{"prompt":"Create a new schedule for Structural Columns.","completion":"string scheduleName = \"Structural Column Schedule\";\nElementId categoryId = new ElementId(BuiltInCategory.OST_StructuralColumns);\nViewSchedule schedule = ViewSchedule.CreateSchedule(doc, categoryId);\nschedule.Name = scheduleName;"}
{"prompt":"Añade el prefijo 'ARQ-' a todas las tablas de planificación.","completion":"string prefix = \"ARQ-\";\nList<ViewSchedule> schedules = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().Where(v => !v.IsTemplate).ToList();\nforeach (ViewSchedule schedule in schedules)\n{\n    if (!schedule.Name.StartsWith(prefix))\n    {\n        schedule.Name = prefix + schedule.Name;\n    }\n}"}
{"prompt":"Coloca las vistas 'Losa 100' y 'Planta Nivel 2' en el plano 'A-101'.","completion":"ViewSheet sheet = new FilteredElementCollector(doc).OfClass(typeof(ViewSheet)).Cast<ViewSheet>().FirstOrDefault(s => s.SheetNumber == \"A-101\");\nView view1 = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().FirstOrDefault(v => v.Name == \"Losa 100\");\nView view2 = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().FirstOrDefault(v => v.Name == \"Planta Nivel 2\");\nif (sheet != null && view1 != null && view2 != null)\n{\n    XYZ insertPoint1 = new XYZ(1.0, 1.0, 0);\n    Viewport.Create(doc, sheet.Id, view1.Id, insertPoint1);\n    XYZ insertPoint2 = new XYZ(1.0, 2.0, 0);\n    Viewport.Create(doc, sheet.Id, view2.Id, insertPoint2);\n}"}
{"prompt":"Coloca un rociador en las coordenadas (9,4,2).","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol sprinklerSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Sprinklers).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (level != null && sprinklerSymbol != null)\n{\n    if (!sprinklerSymbol.IsActive) sprinklerSymbol.Activate();\n    XYZ placementPoint = new XYZ(UnitUtils.ConvertToInternalUnits(9, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(4, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters));\n    doc.Create.NewFamilyInstance(placementPoint, sprinklerSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n}"}
{"prompt":"Add a horizontal reference plane named 'Centerline A'.","completion":"using (Transaction t = new Transaction(doc, \"Add Reference Plane\"))\n{\n    t.Start();\n    string rpName = \"Centerline A\";\n    View activeView = doc.ActiveView;\n\n    if (activeView != null)\n    {\n        XYZ bubbleEnd = new XYZ(0, 10, 0);\n        XYZ freeEnd = new XYZ(10, 10, 0);\n        XYZ cutVec = XYZ.BasisZ;\n        ReferencePlane rp = doc.Create.NewReferencePlane(bubbleEnd, freeEnd, cutVec, activeView);\n        if (rp != null)\n        {\n            rp.Name = rpName;\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Extrae todas las habitaciones en el Nivel 'Losa 98'.","completion":"Level groundFloor = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Losa 98\") as Level;\nList<Element> roomsOnGround = new List<Element>();\n\nif (groundFloor != null)\n{\n    roomsOnGround = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Where(r => r.LevelId == groundFloor.Id).ToList();\n}"}
{"prompt":"Position a material tag on a wall face.","completion":"using (Transaction t = new Transaction(doc, \"Place Material Tag\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference faceRef = localUidoc.Selection.PickObject(ObjectType.Face, \"Select a face to tag\");\n    XYZ point = localUidoc.Selection.PickPoint(\"Select the tag location\");\n    View activeView = doc.ActiveView;\n\n    if (faceRef != null && point != null && activeView != null)\n    {\n        IndependentTag.Create(doc, activeView.Id, faceRef, true, TagMode.TM_ADDBY_MATERIAL, TagOrientation.Horizontal, point);\n    }\n    t.Commit();\n}"}
{"prompt":"Inserta una instancia de la familia 'Mesa de Oficina' en el centro de la habitación 'Despacho 100'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 100\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Mesa de Oficina\") as FamilySymbol;\nif(furnitureSymbol != null && !furnitureSymbol.IsActive) furnitureSymbol.Activate();\nif(room != null)\n{\n    LocationPoint roomCenter = room.Location as LocationPoint;\n    if(roomCenter != null && furnitureSymbol != null && room.Level != null)\n    {\n        doc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Set the 'Mark' parameter of all selected walls to 'W-EXT-01'.","completion":"using (Transaction t = new Transaction(doc, \"Set Wall Mark\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    ICollection<ElementId> selectedIds = localUidoc.Selection.GetElementIds();\n\n    if (selectedIds != null && selectedIds.Count > 0)\n    {\n        foreach(ElementId id in selectedIds)\n        {\n            Element elem = doc.GetElement(id);\n            if(elem is Wall)\n            {\n                Parameter markParam = elem.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n                if (markParam != null && !markParam.IsReadOnly) markParam.Set(\"W-EXT-01\");\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea un nuevo tipo de muro de 28cm llamado 'Muro Estructural 20cm'.","completion":"string newTypeName = \"Muro Estructural 20cm\";\nWallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(newTypeName) as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(28, UnitTypeId.Centimeters));\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n}"}
{"prompt":"Construct a new pipe type with Copper material.","completion":"string newTypeName = \"Copper Pipe\";\nPipeType pipeTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(PipeType)).FirstOrDefault() as PipeType;\nMaterial copper = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name.Contains(\"Copper\")) as Material;\n\nif (pipeTypeToDuplicate != null && copper != null)\n{\n    PipeType newType = pipeTypeToDuplicate.Duplicate(newTypeName) as PipeType;\n    if (newType != null)\n    {\n        Parameter materialParam = newType.get_Parameter(BuiltInParameter.MATERIAL_ID_PARAM);\n        if (materialParam != null && !materialParam.IsReadOnly) materialParam.Set(copper.Id);\n    }\n}"}
{"prompt":"Replicate the 'Generic - 101mm' wall type and name it 'Interior - 15cm Plaster'.","completion":"string originalName = \"Generic - 101mm\";\nstring newName = \"Interior - 15cm Plaster\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif(originalType!=null)\n    originalType.Duplicate(newName);"}
{"prompt":"Selecciona todos los muros del 'Nivel 6' y cambia su comentario a 'REVISAR AISLAMIENTO'.","completion":"string levelName = \"Nivel 6\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(targetLevel.Id);\n    FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(levelFilter);\n    foreach (Element wall in collector)\n    {\n        Parameter commentsParam = wall.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n        if (commentsParam != null && !commentsParam.IsReadOnly) { commentsParam.Set(\"REVISAR AISLAMIENTO\"); }\n    }\n}"}
{"prompt":"Build a new schedule for Structural Columns.","completion":"string scheduleName = \"Structural Column Schedule\";\nElementId categoryId = new ElementId(BuiltInCategory.OST_StructuralColumns);\nViewSchedule schedule = ViewSchedule.CreateSchedule(doc, categoryId);\nschedule.Name = scheduleName;"}
{"prompt":"Fetch all rooms on Level 5","completion":"string levelName = \"Level 5\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(targetLevel.Id);\n    FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WherePasses(levelFilter);\n    uidoc.Selection.SetElementIds(collector.ToElementIds());\n}"}
{"prompt":"Apply the 'Architectural Template' view template to the active view.","completion":"View activeView = doc.ActiveView;\nView viewTemplate = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().FirstOrDefault(v => v.IsTemplate && v.Name == \"Architectural Template\");\n\nif (activeView != null && viewTemplate != null)\n{\n    activeView.ViewTemplateId = viewTemplate.Id;\n}"}
{"prompt":"Copy the 'Generic - 204mm' wall type and name it 'Interior - 15cm Plaster'.","completion":"string originalName = \"Generic - 204mm\";\nstring newName = \"Interior - 15cm Plaster\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif(originalType!=null)\n    originalType.Duplicate(newName);"}
{"prompt":"Crea un techo por extrusión con una pendiente del 10%.","completion":"using (Transaction t = new Transaction(doc, \"Create Extrusion Roof\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    RoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n\n    if (level != null && roofType != null)\n    {\n        CurveArray profile = new CurveArray();\n        profile.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(10 \/ 0.3048, 0, 1 \/ 0.3048)));\n        \n        Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisY, XYZ.Zero);\n        ReferencePlane refPlane = doc.Create.NewReferencePlane(plane.Origin, plane.Origin + XYZ.BasisX, plane.Normal, doc.ActiveView);\n        \n        if (refPlane != null)\n        {\n            doc.Create.NewExtrusionRoof(profile, refPlane, level, roofType, 0, 10 \/ 0.3048);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Construct a new material named 'Dark Oak' with a wood surface pattern.","completion":"string materialName = \"Dark Oak\";\nElementId materialId = Material.Create(doc, materialName);\n\nif (materialId != ElementId.InvalidElementId)\n{\n    Material material = doc.GetElement(materialId) as Material;\n    FillPatternElement fillPattern = new FilteredElementCollector(doc).OfClass(typeof(FillPatternElement)).FirstOrDefault(p => p.Name.Contains(\"Wood\") || p.Name.Contains(\"Madera\")) as FillPatternElement;\n    \n    if (material != null && fillPattern != null)\n    {\n        material.SurfaceForegroundPatternId = fillPattern.Id;\n        material.Color = new Color(139, 69, 19);\n    }\n}"}
{"prompt":"Build an MEP space for each room on Level 2","completion":"string levelName = \"Level 2\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    FilteredElementCollector roomCollector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WherePasses(new ElementLevelFilter(targetLevel.Id));\n    foreach (Room room in roomCollector.ToElements().Cast<Room>())\n    {\n        if (room.Location != null)\n        {\n            LocationPoint locPoint = room.Location as LocationPoint;\n            if(locPoint != null)\n            {\n                UV point = new UV(locPoint.Point.X, locPoint.Point.Y);\n                doc.Create.NewSpace(targetLevel, point);\n            }\n        }\n    }\n}"}
{"prompt":"Create a new room on Level 1 at point (10, 10).","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nif (level1 != null)\n{\n    UV point = new UV(10, 10);\n    Room newRoom = doc.Create.NewRoom(level1, point);\n}"}
{"prompt":"Position an instance of the 'Office Desk' family in the center of the 'Office 98' room.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Office 98\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Office Desk\") as FamilySymbol;\nif(furnitureSymbol != null && !furnitureSymbol.IsActive) furnitureSymbol.Activate();\nif(room != null)\n{\n    LocationPoint roomCenter = room.Location as LocationPoint;\n    if(roomCenter != null && furnitureSymbol != null && room.Level != null)\n    {\n        doc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Dibuja un conducto de ventilación rectangular de 300x200 milímetros.","completion":"using (Transaction t = new Transaction(doc, \"Create Duct\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    DuctType ductType = new FilteredElementCollector(doc).OfClass(typeof(DuctType)).Cast<DuctType>().FirstOrDefault(d => d.Shape == ConnectorProfileType.Rectangular);\n    MEPSystemType systemType = new FilteredElementCollector(doc).OfClass(typeof(MEPSystemType)).Cast<MEPSystemType>().FirstOrDefault(s => s.SystemClassification == MEPSystemClassification.SupplyAir);\n\n    if (level != null && ductType != null && systemType != null)\n    {\n        XYZ p1 = new XYZ(0, 0, 3 \/ 0.3048);\n        XYZ p2 = new XYZ(10 \/ 0.3048, 0, 3 \/ 0.3048);\n        Duct duct = Duct.Create(doc, systemType.Id, ductType.Id, level.Id, p1, p2);\n\n        if (duct != null)\n        {\n            Parameter widthParam = duct.get_Parameter(BuiltInParameter.RBS_CURVE_WIDTH_PARAM);\n            Parameter heightParam = duct.get_Parameter(BuiltInParameter.RBS_CURVE_HEIGHT_PARAM);\n            if (widthParam != null && !widthParam.IsReadOnly) widthParam.Set(300 \/ 304.8);\n            if (heightParam != null && !heightParam.IsReadOnly) heightParam.Set(200 \/ 304.8);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Construct a new elevation view looking north.","completion":"using (Transaction t = new Transaction(doc, \"Create North Elevation\"))\n{\n    t.Start();\n    ViewFamilyType elevationVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(vft => vft.ViewFamily == ViewFamily.Elevation);\n    View activeView = doc.ActiveView;\n\n    if (elevationVFT != null && activeView != null)\n    {\n        ElevationMarker marker = ElevationMarker.CreateElevationMarker(doc, elevationVFT.Id, new XYZ(0, 20 \/ 0.3048, 0), 100);\n        \n        if (marker != null)\n        {\n            View aev = marker.CreateElevation(doc, activeView.Id, 2);\n            if (aev != null)\n            {\n                aev.Name = \"North Elevation\";\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Sitúa postes de iluminación cada 10m en un camino de 100m.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol lightSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsElementType().FirstOrDefault(s => s.Name.Contains(\"Post\") || s.Name.Contains(\"Pole\")) as FamilySymbol;\nif (lightSymbol != null && level != null)\n{\n    if(!lightSymbol.IsActive) lightSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\n    for(int i = 0; i <= 10; i++)\n    {\n        XYZ point = new XYZ(i * spacing, 0, 0);\n        doc.Create.NewFamilyInstance(point, lightSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Generate an MEP space for each room on Level 2","completion":"string levelName = \"Level 2\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    FilteredElementCollector roomCollector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WherePasses(new ElementLevelFilter(targetLevel.Id));\n    foreach (Room room in roomCollector.ToElements().Cast<Room>())\n    {\n        LocationPoint locPoint = room.Location as LocationPoint;\n        if (locPoint != null)\n        {\n            UV point = new UV(locPoint.Point.X, locPoint.Point.Y);\n            doc.Create.NewSpace(targetLevel, point);\n        }\n    }\n}"}
{"prompt":"Duplicate the 'Generic - 194mm' wall type and name it 'Interior - 15cm Plaster'.","completion":"string originalName = \"Generic - 194mm\";\nstring newName = \"Interior - 15cm Plaster\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif (originalType != null)\n{\n    WallType newType = originalType.Duplicate(newName) as WallType;\n}"}
{"prompt":"Sitúa una instancia de la familia 'Mesa de Oficina' en el centro de la habitación 'Despacho 101'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 101\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Mesa de Oficina\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);"}
{"prompt":"Crea un suelo con un contorno de 10 por 8 metros.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\n\nif (level != null && floorType != null)\n{\n    double width = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\n    double length = UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters);\n    CurveLoop loop = new CurveLoop();\n    loop.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(width,0,0)));\n    loop.Append(Line.CreateBound(new XYZ(width,0,0), new XYZ(width,length,0)));\n    loop.Append(Line.CreateBound(new XYZ(width,length,0), new XYZ(0,length,0)));\n    loop.Append(Line.CreateBound(new XYZ(0,length,0), new XYZ(0,0,0)));\n    Floor.Create(doc, new List<CurveLoop> { loop }, floorType.Id, level.Id);\n}"}
{"prompt":"Duplica el tipo de muro 'Genérico - 204mm' y nómbralo 'Interior - 15cm Yeso'.","completion":"string originalName = \"Genérico - 204mm\";\nstring newName = \"Interior - 15cm Yeso\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif (originalType != null)\n{\n    WallType newType = originalType.Duplicate(newName) as WallType;\n}"}
{"prompt":"Place lighting posts every 10m along a 100m path.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol lightSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsElementType().FirstOrDefault(s => s.Name.Contains(\"Post\") || s.Name.Contains(\"Pole\")) as FamilySymbol;\nif (lightSymbol != null && level != null)\n{\n    if(!lightSymbol.IsActive) lightSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\n    for(int i = 0; i <= 10; i++)\n    {\n        XYZ point = new XYZ(i * spacing, 0, 0);\n        doc.Create.NewFamilyInstance(point, lightSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Añade refuerzo tipo estribo a la viga seleccionada.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference beamRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a beam\");\nRebarBarType barType = new FilteredElementCollector(doc).OfClass(typeof(RebarBarType)).FirstOrDefault() as RebarBarType;\nRebarShape stirrupShape = new FilteredElementCollector(doc).OfClass(typeof(RebarShape)).Cast<RebarShape>().FirstOrDefault(s => s.RebarStyle == RebarStyle.StirrupTie);\nif (beamRef != null && barType != null && stirrupShape != null)\n{\n    FamilyInstance beam = doc.GetElement(beamRef) as FamilyInstance;\n    if (beam != null)\n    {\n        Rebar.CreateFromRebarShape(doc, stirrupShape, barType, beam, beam.GetTransform().Origin, XYZ.BasisX, XYZ.BasisY);\n    }\n}"}
{"prompt":"Find all walls with the comment 'Review'.","completion":"ElementId commentParamId = new ElementId(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\nParameterValueProvider pvp = new ParameterValueProvider(commentParamId);\nFilterStringRuleEvaluator evaluator = new FilterStringContains();\nFilterRule rule = new FilterStringRule(pvp, evaluator, \"Review\");\nElementFilter filter = new ElementParameterFilter(rule);\nList<Element> wallsToReview = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(filter).ToList();"}
{"prompt":"Position a piece of furniture at coordinates (2,3).","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (level != null && furnitureSymbol != null)\n{\n    if (!furnitureSymbol.IsActive) { furnitureSymbol.Activate(); }\n    XYZ point = new XYZ(2, 3, 0);\n    doc.Create.NewFamilyInstance(point, furnitureSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n}"}
{"prompt":"Generate a section view using a 10x10x3 meter box.","completion":"ViewFamilyType sectionVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(vft => vft.ViewFamily == ViewFamily.Section);\nif (sectionVFT != null)\n{\n    BoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\n    sectionBox.Min = new XYZ(0,0,0);\n    sectionBox.Max = new XYZ(\n        UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),\n        UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),\n        UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters));\n    Transform transform = Transform.Identity;\n    sectionBox.Transform = transform;\n    ViewSection.CreateSection(doc, sectionVFT.Id, sectionBox);\n}"}
{"prompt":"Crea un nuevo parámetro de proyecto compartido de texto llamado 'Notas Adicionales' para muros y puertas.","completion":"string paramName = \"Notas Adicionales\";\nstring originalFile = doc.Application.SharedParametersFilename;\nstring tempFile = System.IO.Path.GetTempFileName() + \".txt\";\nusing (System.IO.File.Create(tempFile)) { }\ndoc.Application.SharedParametersFilename = tempFile;\ntry\n{\n    DefinitionFile defFile = doc.Application.OpenSharedParameterFile();\n    if (defFile != null)\n    {\n        DefinitionGroup group = defFile.Groups.Create(\"General\");\n        if (group != null)\n        {\n            ExternalDefinitionCreationOptions options = new ExternalDefinitionCreationOptions(paramName, SpecTypeId.String.Text);\n            Definition definition = group.Definitions.Create(options);\n            if (definition != null)\n            {\n                CategorySet categories = doc.Application.Create.NewCategorySet();\n                categories.Insert(doc.Settings.Categories.get_Item(BuiltInCategory.OST_Walls));\n                categories.Insert(doc.Settings.Categories.get_Item(BuiltInCategory.OST_Doors));\n                InstanceBinding binding = doc.Application.Create.NewInstanceBinding(categories);\n                doc.ParameterBindings.Insert(definition, binding, GroupTypeId.Data);\n            }\n        }\n    }\n}\nfinally\n{\n    doc.Application.SharedParametersFilename = originalFile;\n    System.IO.File.Delete(tempFile);\n}"}
{"prompt":"Set the sill height of all windows to 1 meter.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Find all annotation families and count how many there are.","completion":"List<Family> annotationFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.CategoryType == CategoryType.Annotation).ToList();"}
{"prompt":"Coloca una instancia de la familia 'Ventana Fija 117x60' en el centro de la habitación 'Despacho 104'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 117\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Ventana Fija 104x60\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);"}
{"prompt":"Assign the 'Steel' material to the first layer of a wall type.","completion":"using (Transaction t = new Transaction(doc, \"Assign Material\"))\n{\n    t.Start();\n    WallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.GetCompoundStructure() != null);\n    Material steel = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m => m.Name.Contains(\"Steel\"));\n\n    if (wallType != null && steel != null)\n    {\n        CompoundStructure cs = wallType.GetCompoundStructure();\n        if (cs != null && cs.LayerCount > 0)\n        {\n            cs.SetMaterialId(0, steel.Id);\n            wallType.SetCompoundStructure(cs);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create a section view between points (0,0,0) and (10,10,0).","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.Section);\n\nif (vft != null)\n{\n    XYZ p1 = new XYZ(0,0,0);\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),0);\n    XYZ midPoint = (p1 + p2) \/ 2;\n    XYZ direction = (p2 - p1).Normalize();\n    XYZ up = XYZ.BasisZ;\n    XYZ viewdir = up.CrossProduct(direction);\n    \n    BoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\n    Transform t = Transform.Identity;\n    t.Origin = midPoint;\nt.BasisX = direction;\nt.BasisY = up;\nt.BasisZ = viewdir;\nsectionBox.Transform = t;\nsectionBox.Min = new XYZ(UnitUtils.ConvertToInternalUnits(-p1.DistanceTo(p2)\/2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(-10, UnitTypeId.Meters), 0);\nsectionBox.Max = new XYZ(UnitUtils.ConvertToInternalUnits(p1.DistanceTo(p2)\/2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(20, UnitTypeId.Meters));\n    \n    ViewSection.CreateSection(doc, vft.Id, sectionBox);\n}"}
{"prompt":"Coloca todos los elementos seleccionados en el workset 'Fachada'.","completion":"using (Transaction t = new Transaction(doc, \"Assign to Workset\"))\n{\n    t.Start();\n    if(doc.IsWorkshared)\n    {\n        UIDocument localUidoc = uidoc;\n        ICollection<ElementId> selectedIds = localUidoc.Selection.GetElementIds();\n        \n        Workset workset = new FilteredWorksetCollector(doc).OfKind(WorksetKind.UserWorkset).FirstOrDefault(ws => ws.Name == \"Fachada\");\n        if(workset == null) workset = Workset.Create(doc, \"Fachada\");\n\n        if (selectedIds != null && selectedIds.Count > 0 && workset != null)\n        {\n            foreach(ElementId id in selectedIds)\n            {\n                Element elem = doc.GetElement(id);\n                Parameter wsparam = elem.get_Parameter(BuiltInParameter.ELEM_PARTITION_PARAM);\n                if(wsparam != null && !wsparam.IsReadOnly) wsparam.Set(workset.Id.IntegerValue);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Clona la vista de planta 'Nivel 2' y conviértela en una plantilla de vista.","completion":"using (Transaction t = new Transaction(doc, \"Create View Template\"))\n{\n    t.Start();\n    ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().FirstOrDefault(v => v.Name == \"Nivel 2\");\n    string templateName = \"Plantilla Nivel 2\";\n\n    if (viewToDuplicate != null)\n    {\n        ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n        View newView = doc.GetElement(newViewId) as View;\n        if (newView != null)\n        {\n           \/\/ In older APIs, direct conversion to a template may not be available.\n           \/\/ A common workaround is to set the IsTemplate property if available and writable, \n           \/\/ which is not the case here. This is left as a comment for conceptual understanding.\n           \/\/ newView.IsTemplate = true;\n            newView.Name = templateName;\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Construct a stair between Level 1 and Level 2","completion":"\/\/ This is a complex operation that requires multiple steps and\/or user interaction and is not supported by the agent."}
{"prompt":"Voltea un elemento seleccionado 90 grados sobre su eje Z.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un elemento para rotar\");\nElement elem = doc.GetElement(pickedRef.ElementId);\nLocationPoint lp = elem.Location as LocationPoint;\nLine axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\nElementTransformUtils.RotateElement(doc, elem.Id, axis, Math.PI \/ 2.0);"}
{"prompt":"Sitúa las vistas 'Nivel 1' y 'Planta Nivel 2' en el plano 'A-101'.","completion":"ViewSheet sheet = new FilteredElementCollector(doc).OfClass(typeof(ViewSheet)).Cast<ViewSheet>().FirstOrDefault(s => s.SheetNumber == \"A-101\");\nView view1 = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().FirstOrDefault(v => v.Name == \"Nivel 1\");\nView view2 = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().FirstOrDefault(v => v.Name == \"Planta Nivel 2\");\nif (sheet != null && view1 != null && view2 != null)\n{\n    XYZ insertPoint1 = new XYZ(1.0, 1.0, 0);\n    Viewport.Create(doc, sheet.Id, view1.Id, insertPoint1);\n    XYZ insertPoint2 = new XYZ(1.0, 2.0, 0);\n    Viewport.Create(doc, sheet.Id, view2.Id, insertPoint2);\n}"}
{"prompt":"Reproduce el tipo de muro 'Genérico - 204mm' y nómbralo 'Interior - 15cm Yeso'.","completion":"string originalName = \"Genérico - 204mm\";\nstring newName = \"Interior - 15cm Yeso\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif (originalType != null)\n{\n    WallType newType = originalType.Duplicate(newName) as WallType;\n}"}
{"prompt":"Ajusta el parámetro 'Función' de todos los muros seleccionados a 'Genérico - 250mm'.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nif (selectedIds.Count > 0)\n{\n    foreach(ElementId id in selectedIds)\n    {\n        Wall wall = doc.GetElement(id) as Wall;\n        if (wall != null)\n        {\n            Parameter funcParam = wall.get_Parameter(BuiltInParameter.FUNCTION_PARAM);\n            if (funcParam != null && !funcParam.IsReadOnly)\n            {\n                funcParam.Set(1); \/\/ 1 corresponde a Genérico - 250mm\n            }\n        }\n    }\n}"}
{"prompt":"Cambia un panel de vidrio de un muro cortina por un panel sólido.","completion":"using (Transaction t = new Transaction(doc, \"Change Curtain Panel\"))\n{\n    t.Start();\n    Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Cast<Wall>().FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain);\n    FamilySymbol solidPanelType = new FilteredElementCollector(doc).OfClass(typeof(FamilySymbol)).Cast<FamilySymbol>().FirstOrDefault(fs => fs.Family.FamilyCategory.Id.IntegerValue == (int)BuiltInCategory.OST_CurtainWallPanels && (fs.Name.Contains(\"Solid\") || fs.Name.Contains(\"Sólido\")));\n\n    if (curtainWall != null && solidPanelType != null)\n    {\n        CurtainGrid grid = curtainWall.CurtainGrid;\n        if (grid != null)\n        {\n            ElementId panelIdToChange = grid.GetPanelIds().FirstOrDefault();\n            if (panelIdToChange != ElementId.InvalidElementId)\n            {\n                Panel panelToChange = doc.GetElement(panelIdToChange) as Panel;\n                if (panelToChange != null) panelToChange.ChangeTypeId(solidPanelType.Id);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Obtén los IDs de todas las vistas 3D que empiezan con 'Coord' para exportación.","completion":"List<ElementId> viewsToExport = new FilteredElementCollector(doc).OfClass(typeof(View3D)).Cast<View3D>().Where(v => v.Name.StartsWith(\"Coord\") && !v.IsTemplate).Select(v => v.Id).ToList();\n"}
{"prompt":"Añade una etiqueta a la columna más cercana al origen.","completion":"using (Transaction t = new Transaction(doc, \"Tag Column\"))\n{\n    t.Start();\n    View activeView = doc.ActiveView;\n    FamilyInstance column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().Cast<FamilyInstance>().OrderBy(c => {\n        LocationPoint lp = c.Location as LocationPoint;\n        return lp != null ? lp.Point.DistanceTo(XYZ.Zero) : double.MaxValue;\n    }).FirstOrDefault();\n\n    if (activeView != null && column != null)\n    {\n        LocationPoint loc = column.Location as LocationPoint;\n        if (loc != null)\n        {\n            IndependentTag.Create(doc, activeView.Id, new Reference(column), true, TagMode.TM_ADDBY_CATEGORY, TagOrientation.Horizontal, loc.Point);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Set the sill height of all windows to 904mm.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits(904, UnitTypeId.Millimeters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Create a section view between points (0,0,0) and (10,10,0).","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.Section);\n\nif (vft != null)\n{\n    XYZ p1 = new XYZ(0,0,0);\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),0);\n    XYZ midPoint = (p1 + p2) \/ 2;\n    XYZ direction = (p2 - p1).Normalize();\n    XYZ up = XYZ.BasisZ;\n    XYZ viewdir = up.CrossProduct(direction);\n    \n    BoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\n    Transform t = Transform.Identity;\n    t.Origin = midPoint;\nt.BasisX = direction;\nt.BasisY = up;\nt.BasisZ = viewdir;\nsectionBox.Transform = t;\nsectionBox.Min = new XYZ(UnitUtils.ConvertToInternalUnits(-p1.DistanceTo(p2)\/2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(-10, UnitTypeId.Meters), 0);\nsectionBox.Max = new XYZ(UnitUtils.ConvertToInternalUnits(p1.DistanceTo(p2)\/2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(20, UnitTypeId.Meters));\n    \n    ViewSection.CreateSection(doc, vft.Id, sectionBox);\n}"}
{"prompt":"Clona la vista 'Nivel 6' como una vista dependiente.","completion":"ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v => v.Name == \"Nivel 6\") as ViewPlan;\n\nif (viewToDuplicate != null)\n{\n    ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n}"}
{"prompt":"Modifica el tipo de muro de un muro existente a uno que contenga 'Aislamiento Térmico'.","completion":"Wall wallToChange = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nWallType newType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(x => x.Name.Contains(\"Aislamiento Térmico\") || x.Name.Contains(\"Insulation\"));\n\nif (wallToChange != null && newType != null)\n{\n    wallToChange.ChangeTypeId(newType.Id);\n}"}
{"prompt":"Cambia el parámetro 'Función' de todos los muros seleccionados a 'Interior'.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nif (selectedIds.Count > 0)\n{\n    foreach(ElementId id in selectedIds)\n    {\n        Wall wall = doc.GetElement(id) as Wall;\n        if (wall != null)\n        {\n            Parameter funcParam = wall.get_Parameter(BuiltInParameter.FUNCTION_PARAM);\n            if (funcParam != null && !funcParam.IsReadOnly)\n            {\n                funcParam.Set(1); \/\/ 1 corresponde a Interior\n            }\n        }\n    }\n}"}
{"prompt":"Get all rooms on Level 3","completion":"string levelName = \"Level 3\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(targetLevel.Id);\n    FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WherePasses(levelFilter);\n    uidoc.Selection.SetElementIds(collector.ToElementIds());\n}"}
{"prompt":"Start and commit a transaction for 'Modify Project'.","completion":""}
{"prompt":"Duplica el nivel 4 con un desfase de 3m y llámalo 'Mezanine'.","completion":"string levelName = \"Nivel 4\";\nLevel levelToCopy = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (levelToCopy != null)\n{\n    double offset = UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, levelToCopy.Elevation + offset);\n    newLevel.Name = \"Mezanine\";\n}"}
{"prompt":"Rota el norte del proyecto 30 grados en sentido horario.","completion":"using (Transaction t = new Transaction(doc, \"Rotate Project North\"))\n{\n    t.Start();\n    BasePoint projectBasePoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(bp => !bp.IsShared);\n\n    if (projectBasePoint != null)\n    {\n        double angleInDegrees = 30.0;\n        double angleInRadians = -(angleInDegrees * Math.PI \/ 180.0);\n        using (var bbox = projectBasePoint.get_BoundingBox(null))\n        {\n          if (bbox != null)\n          {\n            XYZ center = bbox.Min;\n            Line axis = Line.CreateBound(center, center + XYZ.BasisZ);\n            ElementTransformUtils.RotateElement(doc, projectBasePoint.Id, axis, angleInRadians);\n          }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Copy level 2 with a 5m offset and name it 'Mezzanine'.","completion":"string levelName = \"Level 2\";\nLevel levelToCopy = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (levelToCopy != null)\n{\n    double offset = UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, levelToCopy.Elevation + offset);\n    newLevel.Name = \"Mezzanine\";\n}"}
{"prompt":"Modifica el nivel de detalle de la vista actual a 'PLANTA PARA CLIENTE'.","completion":"View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.DetailLevel = ViewDetailLevel.Coarse;\n}"}
{"prompt":"Construct a floor with a circular hole in the center.","completion":"using (Transaction t = new Transaction(doc, \"Create Floor with Hole\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    FloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\n\n    if (level != null && floorType != null)\n    {\n        XYZ p1 = new XYZ(-10 \/ 0.3048, -10 \/ 0.3048, 0);\n        XYZ p2 = new XYZ(10 \/ 0.3048, -10 \/ 0.3048, 0);\n        XYZ p3 = new XYZ(10 \/ 0.3048, 10 \/ 0.3048, 0);\n        XYZ p4 = new XYZ(-10 \/ 0.3048, 10 \/ 0.3048, 0);\n        CurveLoop outerLoop = new CurveLoop();\n        outerLoop.Append(Line.CreateBound(p1, p2));\n        outerLoop.Append(Line.CreateBound(p2, p3));\n        outerLoop.Append(Line.CreateBound(p3, p4));\n        outerLoop.Append(Line.CreateBound(p4, p1));\n\n        XYZ center = XYZ.Zero;\n        double radius = 2 \/ 0.3048;\n        CurveLoop innerLoop = new CurveLoop();\n        innerLoop.Append(Arc.Create(center - XYZ.BasisX * radius, center + XYZ.BasisX * radius, center + XYZ.BasisY * radius));\n        innerLoop.Append(Arc.Create(center + XYZ.BasisX * radius, center - XYZ.BasisX * radius, center - XYZ.BasisY * radius));\n\n        Floor.Create(doc, new List<CurveLoop> { outerLoop, innerLoop }, floorType.Id, level.Id);\n    }\n    t.Commit();\n}"}
{"prompt":"Crea un nuevo Nivel llamado 'Nivel 1' a una elevación de 11 metros.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(11, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Nivel 1\";\n}"}
{"prompt":"Generate a rectangular opening in a floor.","completion":"using (Transaction t = new Transaction(doc, \"Create Opening\"))\n{\n    t.Start();\n    Floor floor = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault() as Floor;\n\n    if (floor != null)\n    {\n        XYZ p1 = new XYZ(1 \/ 0.3048, 1 \/ 0.3048, 0);\n        XYZ p2 = new XYZ(3 \/ 0.3048, 1 \/ 0.3048, 0);\n        XYZ p3 = new XYZ(3 \/ 0.3048, 3 \/ 0.3048, 0);\n        XYZ p4 = new XYZ(1 \/ 0.3048, 3 \/ 0.3048, 0);\n        CurveArray profile = new CurveArray();\n        profile.Append(Line.CreateBound(p1, p2));\n        profile.Append(Line.CreateBound(p2, p3));\n        profile.Append(Line.CreateBound(p3, p4));\n        profile.Append(Line.CreateBound(p4, p1));\n        doc.Create.NewOpening(floor, profile, true);\n    }\n    t.Commit();\n}"}
{"prompt":"Clona el tipo de muro 'Genérico - 173mm' y nómbralo 'Interior - 15cm Yeso'.","completion":"string originalName = \"Genérico - 173mm\";\nstring newName = \"Interior - 15cm Yeso\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif(originalType!=null)\n    originalType.Duplicate(newName);"}
{"prompt":"Ajusta el tipo de todos los muros seleccionados a 'Muro Exterior'.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nWallType targetWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Name == \"Muro Exterior\");\nif(targetWallType != null)\n{\n    foreach(ElementId id in selectedIds)\n    {\n        Wall wall = doc.GetElement(id) as Wall;\n        if(wall != null)\n        {\n            wall.ChangeTypeId(targetWallType.Id);\n        }\n    }\n}"}
{"prompt":"Coloca una instancia de la familia 'Ventana Fija 121x60' en el centro de la habitación 'Despacho 102'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 121\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Ventana Fija 102x60\") as FamilySymbol;\nif(furnitureSymbol != null && !furnitureSymbol.IsActive) furnitureSymbol.Activate();\nif(room != null)\n{\n    LocationPoint roomCenter = room.Location as LocationPoint;\n    if(roomCenter != null && furnitureSymbol != null && room.Level != null)\n    {\n        doc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Create a text note with a leader pointing to a given element and location.","completion":"using (Transaction t = new Transaction(doc, \"Create Text Note\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference target = localUidoc.Selection.PickObject(ObjectType.Element, \"Select an element to annotate\");\n    XYZ textLocation = localUidoc.Selection.PickPoint(\"Choose the text location\");\n\n    View activeView = doc.ActiveView;\n    ElementId defaultTypeId = doc.GetDefaultElementTypeId(ElementTypeGroup.TextNoteType);\n\n    if (target != null && textLocation != null && activeView != null && defaultTypeId != ElementId.InvalidElementId)\n    {\n        TextNoteOptions opts = new TextNoteOptions(defaultTypeId);\n        opts.HorizontalAlignment = HorizontalTextAlignment.Left;\n        TextNote note = TextNote.Create(doc, activeView.Id, textLocation, \"Review this element\", opts);\n        if (note != null)\n        {\n            Leader leader = note.AddLeader(TextNoteLeaderTypes.TNLT_STRAIGHT_L);\n            leader.End = target.GlobalPoint;\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea un nuevo material llamado 'Vidrio Reflectante' y asígnale un color base y una transparencia.","completion":"string materialName = \"Vidrio Reflectante\";\nElementId materialId = Material.Create(doc, materialName);\nif (materialId != ElementId.InvalidElementId)\n{\n    Material material = doc.GetElement(materialId) as Material;\n    if (material != null)\n    {\n        material.Color = new Color(210, 230, 240);\n        material.Transparency = 80;\n    }\n}"}
{"prompt":"Crea 5 worksets para las disciplinas de ingeniería.","completion":"List<string> worksetNames = new List<string> { \"MEP_HVAC\", \"MEP_Plumbing\", \"MEP_Electrical\", \"STRUCT_Framing\", \"STRUCT_Foundations\" };\nforeach(string name in worksetNames)\n{\n    Workset newWorkset = Workset.Create(doc, name);\n}"}
{"prompt":"Rellena el parámetro de material de todos los muros con 'Concreto'.","completion":"Material concreteMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name.Contains(\"Concreto\")) as Material;\nvar walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>().ToList();\n\nif (concreteMaterial != null)\n{\n    foreach(Wall w in walls)\n    {\n        Parameter materialParam = w.get_Parameter(BuiltInParameter.STRUCTURAL_MATERIAL_PARAM);\n        if(materialParam != null && !materialParam.IsReadOnly) materialParam.Set(concreteMaterial.Id);\n    }\n}"}
{"prompt":"Voltea la columna seleccionada 45 grados.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una columna para rotar\");\nif (pickedRef != null)\n{\n    Element elem = doc.GetElement(pickedRef.ElementId);\n    LocationPoint lp = elem.Location as LocationPoint;\n    if (lp != null)\n    {\n        Line axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\n        double angle = 45 * Math.PI \/ 180.0;\n        ElementTransformUtils.RotateElement(doc, elem.Id, axis, angle);\n    }\n}"}
{"prompt":"Append a horizontal reference plane named 'Centerline A'.","completion":"using (Transaction t = new Transaction(doc, \"Add Reference Plane\"))\n{\n    t.Start();\n    string rpName = \"Centerline A\";\n    View activeView = doc.ActiveView;\n\n    if (activeView != null)\n    {\n        XYZ bubbleEnd = new XYZ(0, 10, 0);\n        XYZ freeEnd = new XYZ(10, 10, 0);\n        XYZ cutVec = XYZ.BasisZ;\n        ReferencePlane rp = doc.Create.NewReferencePlane(bubbleEnd, freeEnd, cutVec, activeView);\n        if (rp != null)\n        {\n            rp.Name = rpName;\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Reproduce el nivel 4 con un desfase de 5m y llámalo 'Mezanine'.","completion":"string levelName = \"Nivel 4\";\nLevel levelToCopy = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (levelToCopy != null)\n{\n    double offset = UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, levelToCopy.Elevation + offset);\n    newLevel.Name = \"Mezanine\";\n}"}
{"prompt":"Crea una viga estructural entre (0,0,3) y (5,0,3) en el Nivel 2.","completion":"FamilySymbol beamType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (beamType != null && level != null)\n{\n    if(!beamType.IsActive) beamType.Activate();\n    XYZ start = new XYZ(0, 0, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters));\n    XYZ end = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters));\n    Line beamCurve = Line.CreateBound(start, end);\n    doc.Create.NewFamilyInstance(beamCurve, beamType, level, StructuralType.Beam);\n}"}
{"prompt":"Crea una nueva tabla de planificación para Pilares Estructurales.","completion":"string scheduleName = \"Tabla de Pilares Estructurales\";\nElementId categoryId = new ElementId(BuiltInCategory.OST_StructuralColumns);\nViewSchedule schedule = ViewSchedule.CreateSchedule(doc, categoryId);\nschedule.Name = scheduleName;"}
{"prompt":"Construct a 'Generic - 200mm' wall on 'Level 1' from (0,0) to (10,5).","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == \"Generic - 200mm\") as WallType;\nif (level != null && wallType != null)\n{\n    XYZ startPoint = new XYZ(0, 0, 0);\n    XYZ endPoint = new XYZ(10, 5, 0);\n    Line wallCurve = Line.CreateBound(startPoint, endPoint);\n    double height = UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\n    Wall.Create(doc, wallCurve, wallType.Id, level.Id, height, 0, false, false);\n}"}
{"prompt":"Modify the type of a selected floor to 'Concrete 13cm'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a floor\");\n\nif (pickedRef != null)\n{\n    Floor floorToChange = doc.GetElement(pickedRef) as Floor;\n    FloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name == \"Concrete 13cm\");\n    \n    if (floorToChange != null && newType != null)\n    {\n        floorToChange.ChangeTypeId(newType.Id);\n    }\n}"}
{"prompt":"Create a stair between Level 1 and Level 2.","completion":"Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 1\");\nLevel topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 2\");\n\nif (bottomLevel != null && topLevel != null)\n{\n    \/\/ TODO: Stairs.Create(doc, bottomLevel.Id, topLevel.Id); is not a valid Revit API call.\n    \/\/ Stairs creation requires using the StairsEditScope class.\n}"}
{"prompt":"Create a stair between Level 2 and Level 1","completion":"\/\/ This is a complex operation that requires multiple steps and\/or user interaction and is not supported by the agent."}
{"prompt":"Add reinforcement to a column.","completion":"RebarBarType barType = new FilteredElementCollector(doc).OfClass(typeof(RebarBarType)).FirstOrDefault() as RebarBarType;\nRebarShape shape = new FilteredElementCollector(doc).OfClass(typeof(RebarShape)).FirstOrDefault() as RebarShape;\nFamilyInstance column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\n\nif (barType != null && shape != null && column != null)\n{\n    Rebar.CreateFromRebarShape(doc, shape, barType, column, column.GetTransform().Origin, XYZ.BasisX, XYZ.BasisY);\n}"}
{"prompt":"Inserta refuerzo a una columna.","completion":"RebarBarType barType = new FilteredElementCollector(doc).OfClass(typeof(RebarBarType)).FirstOrDefault() as RebarBarType;\nRebarShape shape = new FilteredElementCollector(doc).OfClass(typeof(RebarShape)).FirstOrDefault() as RebarShape;\nFamilyInstance column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\n\nif (barType != null && shape != null && column != null)\n{\n    Rebar.CreateFromRebarShape(doc, shape, barType, column, column.GetTransform().Origin, XYZ.BasisX, XYZ.BasisY);\n}"}
{"prompt":"Construct a global length parameter named 'CorridorWidth' with a value of 2.1m.","completion":"string paramName = \"CorridorWidth\";\nGlobalParameter gp = GlobalParameter.Create(doc, paramName, SpecTypeId.Length);\n\nif (gp != null)\n{\n    gp.SetValue(new DoubleParameterValue(UnitUtils.ConvertToInternalUnits(2.1, UnitTypeId.Meters)));\n}"}
{"prompt":"Define the 'Comments' parameter for all doors on Level 5 to 'Fire Rating - 93 min'.","completion":"string levelName = \"Level 5\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(targetLevel.Id);\n    FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WherePasses(levelFilter);\n    foreach (Element door in collector)\n    {\n        Parameter commentsParam = door.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n        if (commentsParam != null && !commentsParam.IsReadOnly) { commentsParam.Set(\"Fire Rating - 93 min\"); }\n    }\n}"}
{"prompt":"Tag all rooms with their area.","completion":"using (Transaction t = new Transaction(doc, \"Tag All Rooms\"))\n{\n    t.Start();\n    View activeView = doc.ActiveView;\n\n    if (activeView != null)\n    {\n        List<Room> rooms = new FilteredElementCollector(doc, activeView.Id).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>().ToList();\n        foreach(Room room in rooms)\n        {\n            LocationPoint loc = room.Location as LocationPoint;\n            if(loc != null)\n            {\n                doc.Create.NewRoomTag(new LinkElementId(room.Id), new UV(loc.Point.X, loc.Point.Y), activeView.Id);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Turn a selected element 92 degrees around its Z-axis.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select an element to rotate\");\nElement elem = doc.GetElement(pickedRef.ElementId);\nLocationPoint lp = elem.Location as LocationPoint;\nLine axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\nElementTransformUtils.RotateElement(doc, elem.Id, axis, Math.PI \/ 92);"}
{"prompt":"Link a DWG file as a reference in the active view.","completion":"string filePath = \"C:\/CAD_Files\/Base_Plan.dwg\";\nDWGImportOptions options = new DWGImportOptions();\noptions.ColorMode = ImportColorMode.Preserved;\nElementId linkedFileId;\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    doc.Link(filePath, options, activeView, out linkedFileId);\n}"}
{"prompt":"Insert an instance of the 'Office Desk' family in the center of the 'Office 104' room.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Office 104\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Office Desk\") as FamilySymbol;\nif(furnitureSymbol != null && !furnitureSymbol.IsActive) furnitureSymbol.Activate();\nif(room != null)\n{\n    LocationPoint roomCenter = room.Location as LocationPoint;\n    if(roomCenter != null && furnitureSymbol != null && room.Level != null)\n    {\n        doc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Crea un workset llamado 'Estructura'.","completion":"string wsName = \"Estructura\";\nWorkset newWorkset = Workset.Create(doc, wsName);\n"}
{"prompt":"Move a selected element to position (4,10).","completion":"ICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds.Any())\n{\n    foreach (ElementId id in selectedIds)\n    {\n        Element elem = doc.GetElement(id);\n        if (elem != null)\n        {\n            LocationPoint lp = elem.Location as LocationPoint;\n            if (lp != null)\n            {\n                XYZ newPosition = new XYZ(4, 10, lp.Point.Z);\n                lp.Point = newPosition;\n            }\n        }\n    }\n}"}
{"prompt":"Crea un nivel 'Roof Terrace' a 15m.","completion":"string levelName = \"Roof Terrace\";\ndouble elev = UnitUtils.ConvertToInternalUnits(15, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elev);\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Place a structural column at (10,5), making sure the family type is active.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null && columnSymbol != null)\n{\n    if (!columnSymbol.IsActive)\n    {\n        columnSymbol.Activate();\n    }\n    doc.Create.NewFamilyInstance(new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0), columnSymbol, level, StructuralType.Column);\n}"}
{"prompt":"Obtén el espacio MEP asociado a la habitación 'Oficina 98'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Cast<Room>().FirstOrDefault(r => r.Name == \"Oficina 98\");\nList<Space> spaces = new List<Space>();\n\nif (room != null)\n{\n    spaces = new FilteredElementCollector(doc).OfClass(typeof(Space)).Cast<Space>().Where(s => s.Room != null && s.Room.Id == room.Id).ToList();\n}"}
{"prompt":"Vira un elemento seleccionado 92 grados sobre su eje Z.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un elemento para rotar\");\nElement elem = doc.GetElement(pickedRef.ElementId);\nLocationPoint lp = elem.Location as LocationPoint;\nLine axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\nElementTransformUtils.RotateElement(doc, elem.Id, axis, Math.PI \/ 92);"}
{"prompt":"Encuentra todas las vistas de sección en el proyecto.","completion":"List<ViewSection> sectionViews = new FilteredElementCollector(doc).OfClass(typeof(ViewSection)).Cast<ViewSection>().ToList();"}
{"prompt":"Obtén una lista de los nombres de todos los materiales.","completion":"List<Material> materials = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().ToList();\nList<string> materialNames = new List<string>();\nforeach(Material m in materials)\n{\n    materialNames.Add(m.Name);\n}\n"}
{"prompt":"Enumerate all duct types.","completion":"FilteredElementCollector collector = new FilteredElementCollector(doc).OfClass(typeof(DuctType));\nList<string> ductTypeNames = collector.Select(e => e.Name).ToList();"}
{"prompt":"Spin a selected element 85 degrees around its Z-axis.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select an element to rotate\");\nElement elem = doc.GetElement(pickedRef.ElementId);\nLocationPoint lp = elem.Location as LocationPoint;\nLine axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\nElementTransformUtils.RotateElement(doc, elem.Id, axis, Math.PI \/ 85);"}
{"prompt":"Duplicate level 1 with a 3m offset and name it 'Mezzanine'.","completion":"string levelName = \"Mezzanine\";\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\n\nif (level1 != null)\n{\n    double newElevation = level1.ProjectElevation + UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, newElevation);\n    if (newLevel != null)\n    {\n        newLevel.Name = levelName;\n    }\n}"}
{"prompt":"Construct a new wall type 'Generic Wall 300mm' with a thickness of 30cm.","completion":"string newTypeName = \"Generic Wall 300mm\";\nWallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif (oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(newTypeName) as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(30, UnitTypeId.Centimeters));\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n}"}
{"prompt":"Generate a new room on Level 1 at point (9, 13).","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\n\nif (level1 != null)\n{\n    UV point = new UV(9, 13);\n    Room room = doc.Create.NewRoom(level1, point);\n}"}
{"prompt":"Encuentra el host de una luminaria basada en cara.","completion":"FamilyInstance lightFixture = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsNotElementType().Cast<FamilyInstance>().FirstOrDefault(fi => fi.HostFace != null);\n\nElement host = null;\nif (lightFixture != null)\n{\n    Reference hostFaceRef = lightFixture.HostFace;\n    if (hostFaceRef != null)\n    {\n        host = doc.GetElement(hostFaceRef.ElementId);\n    }\n}"}
{"prompt":"Create an extrusion roof with a 10% slope.","completion":"using (Transaction t = new Transaction(doc, \"Create Extrusion Roof\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    RoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n\n    if (level != null && roofType != null)\n    {\n        CurveArray profile = new CurveArray();\n        profile.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(10 \/ 0.3048, 0, 1 \/ 0.3048)));\n        \n        Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisY, XYZ.Zero);\n        ReferencePlane refPlane = doc.Create.NewReferencePlane(plane.Origin, plane.Origin + XYZ.BasisX, plane.Normal, doc.ActiveView);\n        \n        if (refPlane != null)\n        {\n            doc.Create.NewExtrusionRoof(profile, refPlane, level, roofType, 0, 10 \/ 0.3048);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Sitúa una instancia de la familia 'Mesa de Oficina' en el centro de la habitación 'Despacho 97'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 97\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Mesa de Oficina\") as FamilySymbol;\nif(furnitureSymbol != null && !furnitureSymbol.IsActive) furnitureSymbol.Activate();\nif(room != null)\n{\n    LocationPoint roomCenter = room.Location as LocationPoint;\n    if(roomCenter != null && furnitureSymbol != null && room.Level != null)\n    {\n        doc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Exporta el modelo a formato IFC4 para coordinación.","completion":"string folderPath = \"C:\/RevitExports\/\";\nstring fileName = doc.Title + \"-Coordination.ifc\";\nIFCExportOptions options = new IFCExportOptions();\noptions.FileVersion = IFCVersion.IFC4;\ndoc.Export(folderPath, fileName, options);"}
{"prompt":"Encuentra todas las vistas de sección en el proyecto.","completion":"List<ViewSection> sectionViews = new FilteredElementCollector(doc).OfClass(typeof(ViewSection)).Cast<ViewSection>().ToList();"}
{"prompt":"Encuentra el muro con la marca 'M-01' y cambia su comentario a 'Muro de carga principal'.","completion":"string markValue = \"M-01\";\nElementId markParamId = new ElementId(BuiltInParameter.ALL_MODEL_MARK);\nParameterValueProvider pvp = new ParameterValueProvider(markParamId);\nFilterStringRuleEvaluator evaluator = new FilterStringEquals();\nFilterRule rule = new FilterStringRule(pvp, evaluator, markValue);\nElementParameterFilter filter = new ElementParameterFilter(rule);\nWall wall = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(filter).FirstOrDefault() as Wall;\nif (wall != null)\n{\n    Parameter commentParam = wall.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n    if (commentParam != null && !commentParam.IsReadOnly)\n    {\n        commentParam.Set(\"Muro de carga principal\");\n    }\n}"}
{"prompt":"Crea un espacio MEP para cada habitación en el Nivel 1.","completion":"using (Transaction t = new Transaction(doc, \"Create MEP Spaces\"))\n{\n    t.Start();\n    Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel 1\");\n\n    if (level1 != null)\n    {\n        List<Room> roomsOnLevel1 = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Where(e => (e as Room) != null && (e as Room).LevelId.Equals(level1.Id)).Cast<Room>().ToList();\n        foreach(Room room in roomsOnLevel1)\n        {\n           \/\/ The direct creation of MEP spaces from rooms might not be available in this specific API version.\n           \/\/ Placeholder comment for the intended logic.\n           \/\/ Space.Create(doc, room, null);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Generate a rectangular floor of 10x8 meters.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\n\nif (level != null && floorType != null)\n{\n    double width = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\n    double length = UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters);\n    CurveLoop loop = new CurveLoop();\n    loop.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(width,0,0)));\n    loop.Append(Line.CreateBound(new XYZ(width,0,0), new XYZ(width,length,0)));\n    loop.Append(Line.CreateBound(new XYZ(width,length,0), new XYZ(0,length,0)));\n    loop.Append(Line.CreateBound(new XYZ(0,length,0), new XYZ(0,0,0)));\n    Floor.Create(doc, new List<CurveLoop> { loop }, floorType.Id, level.Id);\n}"}
{"prompt":"Create an MEP space for each room on Level 1.","completion":"using (Transaction t = new Transaction(doc, \"Create MEP Spaces\"))\n{\n    t.Start();\n    Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 1\");\n\n    if (level1 != null)\n    {\n        List<Room> roomsOnLevel1 = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Where(e => (e as Room) != null && (e as Room).LevelId.Equals(level1.Id)).Cast<Room>().ToList();\n        foreach(Room room in roomsOnLevel1)\n        {\n           \/\/ The direct creation of MEP spaces from rooms might not be available in this specific API version.\n           \/\/ Placeholder comment for the intended logic.\n           \/\/ Space.Create(doc, room, null);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Obtén todos los muros de un modelo vinculado que se cruzan con una caja de delimitación.","completion":"RevitLinkInstance linkInstance = new FilteredElementCollector(doc).OfClass(typeof(RevitLinkInstance)).FirstOrDefault() as RevitLinkInstance;\n\nif (linkInstance != null)\n{\n    Document linkDoc = linkInstance.GetLinkDocument();\n    if (linkDoc != null)\n    {\n        \/\/ Create a default 50ft x 50ft x 20ft bounding box as it's not specified in the prompt\n        BoundingBoxXYZ bbox = new BoundingBoxXYZ();\n        bbox.Min = new XYZ(0, 0, 0);\n        bbox.Max = new XYZ(50, 50, 20);\n        Outline outline = new Outline(bbox.Min, bbox.Max);\n        BoundingBoxIntersectsFilter filter = new BoundingBoxIntersectsFilter(outline);\n        List<Element> linkedWalls = new FilteredElementCollector(linkDoc).OfClass(typeof(Wall)).WherePasses(filter).ToList();\n    }\n}"}
{"prompt":"Añade los campos 'Nivel', 'Marca' y 'Volumen' a la tabla de pilares.","completion":"ViewSchedule schedule = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().FirstOrDefault(s => s.Name.Contains(\"Pilares\") || s.Name.Contains(\"Column\"));\nif (schedule != null)\n{\n    ScheduleDefinition def = schedule.Definition;\n    SchedulableField levelField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.FAMILY_LEVEL_PARAM);\n    if (levelField != null) def.AddField(levelField);\n    SchedulableField markField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.ALL_MODEL_MARK);\n    if (markField != null) def.AddField(markField);\n    SchedulableField volumeField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.HOST_VOLUME_COMPUTED);\n    if (volumeField != null) def.AddField(volumeField);\n}"}
{"prompt":"Create a new level named 'Mezzanine' at 7.5 meters elevation.","completion":"string levelName = \"Mezzanine\";\ndouble elevation = UnitUtils.ConvertToInternalUnits(7.5, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Obtain all rooms on Level 8","completion":"string levelName = \"Level 8\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(targetLevel.Id);\n    FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WherePasses(levelFilter);\n    uidoc.Selection.SetElementIds(collector.ToElementIds());\n}"}
{"prompt":"Delete all unused wall types in the project.","completion":"ICollection<ElementId> allWallTypes = new FilteredElementCollector(doc).OfClass(typeof(WallType)).ToElementIds();\nICollection<ElementId> usedWallTypes = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Select(w => w.GetTypeId()).Distinct().ToList();\nList<ElementId> unusedWallTypes = allWallTypes.Except(usedWallTypes).ToList();\nif (unusedWallTypes.Any())\n{\n    doc.Delete(unusedWallTypes);\n}"}
{"prompt":"Añade un nivel llamado 'Nivel Azotea' a 14.6 metros.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(14.6, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Nivel Azotea\";\n}"}
{"prompt":"Añade los campos 'Nivel 2', 'Marca' y 'Volumen' a la tabla de pilares.","completion":"ViewSchedule schedule = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().FirstOrDefault(s => s.Name.Contains(\"Pilares\") || s.Name.Contains(\"Column\"));\nif (schedule != null)\n{\n    ScheduleDefinition def = schedule.Definition;\n    SchedulableField levelField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.FAMILY_LEVEL_PARAM);\n    if (levelField != null) def.AddField(levelField);\n    SchedulableField markField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.ALL_MODEL_MARK);\n    if (markField != null) def.AddField(markField);\n    SchedulableField volumeField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.HOST_VOLUME_COMPUTED);\n    if (volumeField != null) def.AddField(volumeField);\n}"}
{"prompt":"Duplicate the 'Level 1' view as a dependent view.","completion":"ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v => v.Name == \"Level 1\") as ViewPlan;\n\nif (viewToDuplicate != null)\n{\n    ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n}"}
{"prompt":"Cambia el tipo de una losa por uno que contenga 'Concreto'.","completion":"Floor floorToChange = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault() as Floor;\nif(floorToChange != null)\n{\n    FloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name.Contains(\"Concreto\") || ft.Name.Contains(\"Concrete\"));\n    if(newType!=null)\n        floorToChange.ChangeTypeId(newType.Id);\n}"}
{"prompt":"Reproduce la vista 'Nivel 2' como una vista dependiente.","completion":"ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v => v.Name == \"Nivel 2\") as ViewPlan;\n\nif (viewToDuplicate != null)\n{\n    ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n}"}
{"prompt":"Reproduce el tipo de muro 'Genérico - 172mm' y nómbralo 'Interior - 15cm Yeso'.","completion":"string originalName = \"Genérico - 172mm\";\nstring newName = \"Interior - 15cm Yeso\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif(originalType!=null)\n    originalType.Duplicate(newName);"}
{"prompt":"Pin all selected elements.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nif (selectedIds.Count > 0)\n{\n    foreach (ElementId id in selectedIds)\n    {\n        Element elem = doc.GetElement(id);\n        if (elem != null && !elem.Pinned)\n        {\n            elem.Pinned = true;\n        }\n    }\n}"}
{"prompt":"Generate a new level named 'Mezzanine' at 7.4 meters elevation.","completion":"string levelName = \"Mezzanine\";\ndouble elevation = UnitUtils.ConvertToInternalUnits(7.4, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Encuentra todos los muros que no tienen nivel base asignado.","completion":"ElementFilter unassociatedFilter = new ElementLevelFilter(ElementId.InvalidElementId);\nList<Element> unassignedWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(unassociatedFilter).ToList();"}
{"prompt":"Ubica las vistas 'Planta Nivel 1' y 'Planta Nivel 2' en el plano 'A-101'.","completion":"ViewSheet sheet = new FilteredElementCollector(doc).OfClass(typeof(ViewSheet)).Cast<ViewSheet>().FirstOrDefault(s => s.SheetNumber == \"A-101\");\nView view1 = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().FirstOrDefault(v => v.Name == \"Planta Nivel 1\");\nView view2 = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().FirstOrDefault(v => v.Name == \"Planta Nivel 2\");\nif (sheet != null && view1 != null && view2 != null)\n{\n    XYZ insertPoint1 = new XYZ(1.0, 1.0, 0);\n    Viewport.Create(doc, sheet.Id, view1.Id, insertPoint1);\n    XYZ insertPoint2 = new XYZ(1.0, 2.0, 0);\n    Viewport.Create(doc, sheet.Id, view2.Id, insertPoint2);\n}"}
{"prompt":"Build a new level 'Level 8' at an elevation of 16 meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(16, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Level 8\";\n}"}
{"prompt":"Construct a new Level named 'Level 1' at an elevation of 15 meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(15, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\nif (newLevel != null)\n{\n    try { newLevel.Name = \"Level 1\"; } catch {}\n}"}
{"prompt":"Mueve el punto base del proyecto 100 metros hacia el norte.","completion":"using (Transaction t = new Transaction(doc, \"Move Project Base Point\"))\n{\n    t.Start();\n    BasePoint projectBasePoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(bp => !bp.IsShared);\n\n    if (projectBasePoint != null)\n    {\n        XYZ translation = new XYZ(0, 100 \/ 0.3048, 0);\n        ElementTransformUtils.MoveElement(doc, projectBasePoint.Id, translation);\n    }\n    t.Commit();\n}"}
{"prompt":"Model a cable tray between two points.","completion":"CableTrayType trayType = new FilteredElementCollector(doc).OfClass(typeof(CableTrayType)).FirstOrDefault() as CableTrayType;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (trayType != null && level != null)\n{\n    \/\/ Create a default cable tray between two points as they are not specified\n    XYZ p1 = new XYZ(0, 10, 10);\n    XYZ p2 = new XYZ(20, 10, 10);\n    CableTray.Create(doc, trayType.Id, p1, p2, level.Id);\n}"}
{"prompt":"Extrae las coordenadas del punto base y del punto de reconocimiento.","completion":"BasePoint surveyPoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(p => p.IsShared);\nBasePoint projectBasePoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(p => !p.IsShared);\n\nXYZ surveyCoords = null;\nif (surveyPoint != null) surveyCoords = surveyPoint.get_BoundingBox(null).Min;\n\nXYZ projectCoords = null;\nif (projectBasePoint != null) projectCoords = projectBasePoint.get_BoundingBox(null).Min;"}
{"prompt":"Retrieve all rooms on Level 3","completion":"string levelName = \"Level 3\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(targetLevel.Id);\n    FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WherePasses(levelFilter);\n    uidoc.Selection.SetElementIds(collector.ToElementIds());\n}"}
{"prompt":"Hide all annotation categories in the active view.","completion":"using (Transaction t = new Transaction(doc, \"Hide Annotation Categories\"))\n{\n    t.Start();\n    Categories categories = doc.Settings.Categories;\n    View activeView = doc.ActiveView;\n\n    if (activeView != null)\n    {\n        foreach(Category cat in categories)\n        {\n            if(cat.CategoryType == CategoryType.Annotation && cat.get_AllowsVisibilityControl(activeView))\n            {\n                 activeView.SetCategoryHidden(cat.Id, true);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Mueve un elemento seleccionado a la posición (5,5).","completion":"ICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds.Any())\n{\n    foreach (ElementId id in selectedIds)\n    {\n        Element elem = doc.GetElement(id);\n        if (elem != null)\n        {\n            LocationPoint lp = elem.Location as LocationPoint;\n            if (lp != null)\n            {\n                XYZ newPosition = new XYZ(5, 5, lp.Point.Z);\n                lp.Point = newPosition;\n            }\n        }\n    }\n}"}
{"prompt":"Generate a new level named 'Mezzanine' at 7.5 meters elevation.","completion":"string levelName = \"Mezzanine\";\ndouble elevation = UnitUtils.ConvertToInternalUnits(7.5, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Generate a report with the area of all rooms in the project.","completion":"List<Room> rooms = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>().ToList();\nList<double> roomAreas = new List<double>();\nforeach (Room room in rooms)\n{\n    if (room != null && room.Area > 0)\n    {\n        roomAreas.Add(UnitUtils.ConvertFromInternalUnits(room.Area, UnitTypeId.SquareMeters));\n    }\n}\n\/\/ The orchestrator can now use the 'roomAreas' list to generate the final report."}
{"prompt":"Define the sill height of all windows to 895mm.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits(895, UnitTypeId.Millimeters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Dibuja una región rellena con patrón diagonal.","completion":"using (Transaction t = new Transaction(doc, \"Draw Filled Region\"))\n{\n    t.Start();\n    View activeView = doc.ActiveView;\n    FillPatternElement fillPattern = new FilteredElementCollector(doc).OfClass(typeof(FillPatternElement)).Cast<FillPatternElement>().FirstOrDefault(p => !p.GetFillPattern().IsSolidFill);\n    if (activeView != null && fillPattern != null)\n    {\n        FilledRegionType filledRegionType = new FilteredElementCollector(doc, activeView.Id).OfClass(typeof(FilledRegionType)).FirstOrDefault() as FilledRegionType;\n        if (filledRegionType != null)\n        {\n            FilledRegionType newType = filledRegionType.Duplicate(\"Temp Diagonal Region\") as FilledRegionType;\n            if (newType != null)\n            {\n                newType.ForegroundPatternId = fillPattern.Id;\n                CurveLoop profile = new CurveLoop();\n                profile.Append(Line.CreateBound(new XYZ(0, 0, 0), new XYZ(5, 0, 0)));\n                profile.Append(Line.CreateBound(new XYZ(5, 0, 0), new XYZ(5, 5, 0)));\n                profile.Append(Line.CreateBound(new XYZ(5, 5, 0), new XYZ(0, 5, 0)));\n                profile.Append(Line.CreateBound(new XYZ(0, 5, 0), new XYZ(0, 0, 0)));\n                FilledRegion.Create(doc, newType.Id, activeView.Id, new List<CurveLoop> { profile });\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Esculpe una bandeja de cables entre dos puntos.","completion":"CableTrayType trayType = new FilteredElementCollector(doc).OfClass(typeof(CableTrayType)).FirstOrDefault() as CableTrayType;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(trayType != null && level != null)\n{\n    XYZ start = new XYZ(0,10,3);\n    XYZ end = new XYZ(15,10,3);\n    CableTray.Create(doc, trayType.Id, start, end, level.Id);\n}"}
{"prompt":"Reproduce la vista 'Nivel 5' como una vista dependiente.","completion":"ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v => v.Name == \"Nivel 5\") as ViewPlan;\n\nif (viewToDuplicate != null)\n{\n    ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n}"}
{"prompt":"Append a reference point at coordinates (2,4,3) inside the family editor.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(2,4,3));"}
{"prompt":"Construct a 'Roof Terrace' level at 19m.","completion":"string levelName = \"Roof Terrace\";\ndouble elev = UnitUtils.ConvertToInternalUnits(19, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elev);\nnewLevel.Name = levelName;\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Get all door families loaded in the project.","completion":"List<Family> doorFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.Id.IntegerValue == (int)BuiltInCategory.OST_Doors).ToList();"}
{"prompt":"Set the 'Mark' parameter of all selected walls to 'W-EXT-5'.","completion":"using (Transaction t = new Transaction(doc, \"Set Wall Mark\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    ICollection<ElementId> selectedIds = localUidoc.Selection.GetElementIds();\n\n    if (selectedIds != null && selectedIds.Count > 5)\n    {\n        foreach(ElementId id in selectedIds)\n        {\n            Element elem = doc.GetElement(id);\n            if(elem is Wall)\n            {\n                Parameter markParam = elem.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n                if (markParam != null && !markParam.IsReadOnly) markParam.Set(\"W-EXT-01\");\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create a wall on Level 1 from (0,0,0) to (10,0,0) with a height of 4 meters.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (level1 != null && wallType != null)\n{\n    XYZ p1 = new XYZ(0, 0, 0);\n    XYZ p2 = new XYZ(10, 0, 0);\n    Line wallCurve = Line.CreateBound(p1, p2);\n    double height = UnitUtils.ConvertToInternalUnits(4, UnitTypeId.Meters);\n    Wall.Create(doc, wallCurve, wallType.Id, level1.Id, height, 0.0, false, false);\n}"}
{"prompt":"Generate a 5x5 column grid with 8-meter spacing.","completion":"FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (columnSymbol != null && level != null)\n{\n    if(!columnSymbol.IsActive) columnSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters);\n    for(int i=0; i<5; i++)\n    {\n        for(int j=0; j<5; j++)\n        {\n            doc.Create.NewFamilyInstance(new XYZ(i*spacing, j*spacing, 0), columnSymbol, level, StructuralType.Column);\n        }\n    }\n}"}
{"prompt":"Construct a Reflected Ceiling Plan view for Level 1.","completion":"string levelName = \"Level 1\";\nstring viewName = \"Level 1 Ceiling Plan\";\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.CeilingPlan);\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\n\nif (vft != null && level1 != null)\n{\n    ViewPlan rcp = ViewPlan.Create(doc, vft.Id, level1.Id);\n    if (rcp != null)\n    {\n        rcp.Name = viewName;\n    }\n}"}
{"prompt":"Crea una nueva cota de nivel llamada 'Nivel 5' a una elevación de 10 metros.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\nif (newLevel != null)\n{\n    try { newLevel.Name = \"Nivel 5\"; } catch {}\n}"}
{"prompt":"Duplicate the 'Generic - 148mm' wall type and name it 'Interior - 16cm Plaster'.","completion":"string originalName = \"Generic - 148mm\";\nstring newName = \"Interior - 16cm Plaster\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif(originalType!=null)\n    originalType.Duplicate(newName);"}
{"prompt":"Duplica el tipo de muro 'Basic Wall' y renómbralo.","completion":"string typeToDuplicate = \"Basic Wall\";\nstring newTypeName = \"Basic Wall Copy\";\nWallType wt = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(w=>w.Name==typeToDuplicate);\n\nif (wt != null)\n{\n    WallType newWt = wt.Duplicate(newTypeName) as WallType;\n}"}
{"prompt":"Standardize materials to begin with the 'PROJ123_' acronym.","completion":"string prefix = \"PROJ123_\";\nIList<Material> materials = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().ToList();\n\nif (materials.Any())\n{\n    HashSet<string> existingNames = new HashSet<string>(materials.Select(m => m.Name));\n    foreach (Material mat in materials)\n    {\n        if (!mat.Name.StartsWith(prefix))\n        {\n            string newName = prefix + mat.Name;\n            string finalName = newName;\n            int i = 1;\n            while (existingNames.Contains(finalName))\n            {\n                finalName = $\"{newName}_{i++}\";\n            }\n            mat.Name = finalName;\n            existingNames.Add(finalName);\n        }\n    }\n}"}
{"prompt":"Create a new A1 sheet using the first available title block.","completion":"FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (titleBlock != null)\n{\n    ViewSheet sheet = ViewSheet.Create(doc, titleBlock.Id);\n    if (sheet != null)\n    {\n        sheet.Name = \"A1 - New Sheet\";\n        sheet.SheetNumber = \"A1\";\n    }\n}"}
{"prompt":"Crea un ensamblaje a partir de los elementos seleccionados.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds != null && selectedIds.Count > 0)\n{\n    AssemblyInstance assemblyInstance = AssemblyInstance.Create(doc, selectedIds, new ElementId(BuiltInCategory.OST_Assemblies));\n    if (assemblyInstance != null)\n    {\n        assemblyInstance.Name = \"Nuevo Ensamblaje\";\n    }\n}"}
{"prompt":"Change a glass panel in a curtain wall to a solid panel.","completion":"using (Transaction t = new Transaction(doc, \"Change Curtain Panel\"))\n{\n    t.Start();\n    Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Cast<Wall>().FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain);\n    FamilySymbol solidPanelType = new FilteredElementCollector(doc).OfClass(typeof(FamilySymbol)).Cast<FamilySymbol>().FirstOrDefault(fs => fs.Family.FamilyCategory.Id.IntegerValue == (int)BuiltInCategory.OST_CurtainWallPanels && fs.Name.Contains(\"Solid\"));\n\n    if (curtainWall != null && solidPanelType != null)\n    {\n        CurtainGrid grid = curtainWall.CurtainGrid;\n        if (grid != null)\n        {\n            ElementId panelIdToChange = grid.GetPanelIds().FirstOrDefault();\n            if (panelIdToChange != ElementId.InvalidElementId)\n            {\n                Panel panelToChange = doc.GetElement(panelIdToChange) as Panel;\n                if (panelToChange != null) panelToChange.ChangeTypeId(solidPanelType.Id);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea una viga estructural entre (0,0,3) y (5,0,3) en el Nivel 2.","completion":"FamilySymbol beamType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (beamType != null && level != null)\n{\n    if(!beamType.IsActive) beamType.Activate();\n    XYZ start = new XYZ(0, 0, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters));\n    XYZ end = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters));\n    Line beamCurve = Line.CreateBound(start, end);\n    doc.Create.NewFamilyInstance(beamCurve, beamType, level, StructuralType.Beam);\n}"}
{"prompt":"Exporta el documento a un archivo IFC con la versión IFC4x3.","completion":"string folderPath = \"C:\/RevitExports\/\";\nstring fileName = doc.Title + \"_IFC4x3.ifc\";\nIFCExportOptions options = new IFCExportOptions();\noptions.FileVersion = IFCVersion.IFC4x3;\ndoc.Export(folderPath, fileName, options);"}
{"prompt":"Obtén todas las subcategorías de la categoría Puertas.","completion":"Category doorCat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Doors);\nCategoryNameMap subcategories = doorCat.SubCategories;"}
{"prompt":"Coloca una etiqueta de material en una cara de muro.","completion":"using (Transaction t = new Transaction(doc, \"Place Material Tag\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference faceRef = localUidoc.Selection.PickObject(ObjectType.Face, \"Selecciona una cara para etiquetar\");\n    XYZ point = localUidoc.Selection.PickPoint(\"Selecciona la ubicación de la etiqueta\");\n    View activeView = doc.ActiveView;\n\n    if (faceRef != null && point != null && activeView != null)\n    {\n        IndependentTag.Create(doc, activeView.Id, faceRef, true, TagMode.TM_ADDBY_MATERIAL, TagOrientation.Horizontal, point);\n    }\n    t.Commit();\n}"}
{"prompt":"Select all walls on 'Level 2' and change their comment to 'REVIEW INSULATION'.","completion":"Level level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 2\") as Level;\nList<Wall> wallsOnLevel2 = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Where(w => w.LevelId == level2.Id).Cast<Wall>().ToList();\nforeach(Wall wall in wallsOnLevel2)\n{\n    wall.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS).Set(\"REVIEW INSULATION\");\n}"}
{"prompt":"Replicate the 'Generic - 114mm' wall type and name it 'Interior - 15cm Plaster'.","completion":"string originalName = \"Generic - 114mm\";\nstring newName = \"Interior - 15cm Plaster\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif(originalType!=null)\n    originalType.Duplicate(newName);"}
{"prompt":"Build a floor plan view for 'Level 2'.","completion":"string levelName = \"Level 2\";\nLevel level3 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.FloorPlan);\n\nif (level3 != null && vft != null)\n{\n    ViewPlan viewPlan = ViewPlan.Create(doc, vft.Id, level3.Id);\n}"}
{"prompt":"Crea un nuevo nivel 'Nivel 5' a una elevación de 7 metros.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(7, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Nivel 5\";\n}"}
{"prompt":"Build an electrical conduit with a 1-inch diameter.","completion":"using (Transaction t = new Transaction(doc, \"Create Conduit\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    ElementId conduitTypeId = new FilteredElementCollector(doc).OfClass(typeof(ConduitType)).FirstElementId();\n\n    if (level != null && conduitTypeId != null && conduitTypeId != ElementId.InvalidElementId)\n    {\n        XYZ start = new XYZ(0, 0, 3 \/ 0.3048);\n        XYZ end = new XYZ(5 \/ 0.3048, 0, 3 \/ 0.3048);\n        Conduit conduit = Conduit.Create(doc, conduitTypeId, start, end, level.Id);\n\n        if (conduit != null)\n        {\n            Parameter diameterParam = conduit.get_Parameter(BuiltInParameter.RBS_CONDUIT_DIAMETER_PARAM);\n            if (diameterParam != null && !diameterParam.IsReadOnly)\n            {\n                diameterParam.Set(1.0 \/ 12.0);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Fetch the solid geometry of a selected element.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select an element to get its geometry\");\n\nList<Solid> solids = new List<Solid>();\nif (pickedRef != null)\n{\n    Element elem = doc.GetElement(pickedRef);\n    if (elem != null)\n    {\n        Options opt = new Options() { ComputeReferences = true, DetailLevel = ViewDetailLevel.Fine };\n        GeometryElement geoElem = elem.get_Geometry(opt);\n        if (geoElem != null)\n        {\n            solids = geoElem.OfType<Solid>().Where(s => s.Volume > 0).ToList();\n        }\n    }\n}"}
{"prompt":"Inicia y confirma una transacción para 'Modificar Proyecto'.","completion":""}
{"prompt":"Align the face of one wall with the face of another.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference ref1 = uidoc.Selection.PickObject(ObjectType.Face, \"Select the target face (stationary)\");\nReference ref2 = uidoc.Selection.PickObject(ObjectType.Face, \"Select the face to move\");\nView activeView = doc.ActiveView;\n\nif (ref1 != null && ref2 != null && activeView != null)\n{\n    doc.Create.NewAlignment(activeView, ref1, ref2);\n}"}
{"prompt":"Create a section view using a 10x10x3 meter box.","completion":"ViewFamilyType sectionVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(vft => vft.ViewFamily == ViewFamily.Section);\n\nif (sectionVFT != null)\n{\n    XYZ min = new XYZ(0, 0, 0);\n    XYZ max = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters));\n    BoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\n    sectionBox.Min = min;\n    sectionBox.Max = max;\n    ViewSection.CreateSection(doc, sectionVFT.Id, sectionBox);\n}"}
{"prompt":"Extrae la geometría sólida de un elemento seleccionado.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un elemento para obtener su geometría\");\n\nList<Solid> solids = new List<Solid>();\nif (pickedRef != null)\n{\n    Element elem = doc.GetElement(pickedRef);\n    if (elem != null)\n    {\n        Options opt = new Options() { ComputeReferences = true, DetailLevel = ViewDetailLevel.Fine };\n        GeometryElement geoElem = elem.get_Geometry(opt);\n        if (geoElem != null)\n        {\n            solids = geoElem.OfType<Solid>().Where(s => s.Volume > 0).ToList();\n        }\n    }\n}"}
{"prompt":"Calcula el volumen total de hormigón de todas las zapatas de cimentación.","completion":"double totalVolume = 0.0;\nList<FamilyInstance> footings = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFoundation).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach (FamilyInstance footing in footings)\n{\n    Parameter volumeParam = footing.get_Parameter(BuiltInParameter.HOST_VOLUME_COMPUTED);\n    if (volumeParam != null && volumeParam.HasValue)\n    {\n        totalVolume += volumeParam.AsDouble();\n    }\n}\n\/\/ El volumen está en pies cúbicos. El orquestador puede convertirlo a metros cúbicos."}
{"prompt":"Generate a floor plan view for 'Level 4'.","completion":"string levelName = \"Level 4\";\nLevel level3 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.FloorPlan);\n\nif (level3 != null && vft != null)\n{\n    ViewPlan viewPlan = ViewPlan.Create(doc, vft.Id, level3.Id);\n}"}
{"prompt":"Genera ocho ejes horizontales con una separación de 10m.","completion":"double separation = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\nfor(int i = 0; i < 8; i++)\n{\n    Line line = Line.CreateBound(new XYZ(0, i * separation, 0), new XYZ(50, i * separation, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Build a new window schedule that includes Type Mark, Width, and Height.","completion":"string scheduleName = \"Window Schedule\";\nViewSchedule schedule = ViewSchedule.CreateSchedule(doc, new ElementId(BuiltInCategory.OST_Windows));\n\nif (schedule != null)\n{\n    schedule.Name = scheduleName;\n    ScheduleDefinition def = schedule.Definition;\n    if (def != null)\n    {\n        SchedulableField typeMarkField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.ALL_MODEL_TYPE_MARK);\n        SchedulableField widthField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.FAMILY_WIDTH_PARAM);\n        SchedulableField heightField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.FAMILY_HEIGHT_PARAM);\n        \n        if (typeMarkField != null) def.AddField(typeMarkField);\n        if (widthField != null) def.AddField(widthField);\n        if (heightField != null) def.AddField(heightField);\n    }\n}"}
{"prompt":"Aplica aislamiento térmico de 23mm a todas las tuberías de agua caliente.","completion":"PipeInsulationType insulationType = new FilteredElementCollector(doc).OfClass(typeof(PipeInsulationType)).FirstOrDefault() as PipeInsulationType;\nPipingSystemType hotWaterSystem = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).Cast<PipingSystemType>().FirstOrDefault(s => s.Name.Contains(\"Hot Water\") || s.Name.Contains(\"Agua Caliente\"));\n\nif (insulationType != null && hotWaterSystem != null)\n{\n    List<Pipe> pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast<Pipe>().Where(p => \n    {\n        Parameter systemParam = p.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM);\n        return systemParam != null && systemParam.HasValue && systemParam.AsElementId() == hotWaterSystem.Id;\n    }).ToList();\n    \n    foreach(Pipe p in pipes)\n    {\n        PipeInsulation.Create(doc, p.Id, insulationType.Id, UnitUtils.ConvertToInternalUnits(23, UnitTypeId.Millimeters));\n    }\n}"}
{"prompt":"Construct a stair between Level 1 and Level 1","completion":"\/\/ This is a complex operation that requires multiple steps and\/or user interaction and is not supported by the agent."}
{"prompt":"Rota un elemento seleccionado 89 grados sobre su eje Z.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un elemento para rotar\");\nElement elem = doc.GetElement(pickedRef.ElementId);\nLocationPoint lp = elem.Location as LocationPoint;\nLine axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\nElementTransformUtils.RotateElement(doc, elem.Id, axis, Math.PI \/ 89);"}
{"prompt":"Extrae todas las habitaciones que están en el Nivel 3.","completion":"Level level3 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 3\") as Level;\nList<Element> roomsOnLevel3 = new List<Element>();\n\nif (level3 != null)\n{\n    roomsOnLevel3 = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Where(r => r.LevelId == level3.Id).ToList();\n}"}
{"prompt":"Inserta un rociador en las coordenadas (4,3,3).","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol sprinklerSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Sprinklers).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (level != null && sprinklerSymbol != null)\n{\n    if (!sprinklerSymbol.IsActive) sprinklerSymbol.Activate();\n    XYZ placementPoint = new XYZ(UnitUtils.ConvertToInternalUnits(4, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters));\n    doc.Create.NewFamilyInstance(placementPoint, sprinklerSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n}"}
{"prompt":"Incorpora una línea de rejilla horizontal a un muro cortina a 1.5 metros de altura.","completion":"using (Transaction t = new Transaction(doc, \"Add Curtain Grid Line\"))\n{\n    t.Start();\n    Wall cw = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Cast<Wall>().FirstOrDefault(w => w.CurtainGrid != null);\n\n    if (cw != null)\n    {\n        CurtainGrid cg = cw.CurtainGrid;\n        if (cg != null)\n        {\n            LocationCurve locCurve = cw.Location as LocationCurve;\n            if(locCurve != null)\n            {\n                 XYZ startPoint = locCurve.Curve.GetEndPoint(0);\n                 XYZ endPoint = locCurve.Curve.GetEndPoint(1);\n                 XYZ midPoint = (startPoint + endPoint) \/ 2;\n                 XYZ gridLinePoint = new XYZ(midPoint.X, midPoint.Y, 1.5 \/ 0.3048);\n                 cg.AddGridLine(false, gridLinePoint, false);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Generate a stair between Level 1 and Level 1","completion":"\/\/ This is a complex operation that requires multiple steps and\/or user interaction and is not supported by the agent."}
{"prompt":"Set the 'Comments' parameter for all doors on Level 1 to 'Fire Rating - 93 min'.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\n\nif (level1 != null)\n{\n    List<FamilyInstance> doorsOnLevel1 = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsNotElementType().Cast<FamilyInstance>().Where(fi => fi.LevelId == level1.Id).ToList();\n    foreach(FamilyInstance door in doorsOnLevel1)\n    {\n        Parameter commentsParam = door.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n        if (commentsParam != null && !commentsParam.IsReadOnly) commentsParam.Set(\"Fire Rating - 93 min\");\n    }\n}"}
{"prompt":"Ubica una instancia de la familia 'Mesa de Oficina' en el centro de la habitación 'Despacho 98'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 98\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Mesa de Oficina\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);"}
{"prompt":"Position all selected elements on the 'Facade' workset.","completion":"using (Transaction t = new Transaction(doc, \"Assign to Workset\"))\n{\n    t.Start();\n    if(doc.IsWorkshared)\n    {\n        UIDocument localUidoc = uidoc;\n        ICollection<ElementId> selectedIds = localUidoc.Selection.GetElementIds();\n        \n        Workset workset = new FilteredWorksetCollector(doc).OfKind(WorksetKind.UserWorkset).FirstOrDefault(ws => ws.Name == \"Facade\");\n        if(workset == null) workset = Workset.Create(doc, \"Facade\");\n\n        if (selectedIds != null && selectedIds.Count > 0 && workset != null)\n        {\n            foreach(ElementId id in selectedIds)\n            {\n                Element elem = doc.GetElement(id);\n                Parameter wsparam = elem.get_Parameter(BuiltInParameter.ELEM_PARTITION_PARAM);\n                if(wsparam != null && !wsparam.IsReadOnly) wsparam.Set(workset.Id.IntegerValue);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Construct a new window schedule that includes Type Mark, Width, and Height.","completion":"string scheduleName = \"Window Schedule\";\nViewSchedule schedule = ViewSchedule.CreateSchedule(doc, new ElementId(BuiltInCategory.OST_Windows));\n\nif (schedule != null)\n{\n    schedule.Name = scheduleName;\n    ScheduleDefinition def = schedule.Definition;\n    if (def != null)\n    {\n        SchedulableField typeMarkField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.ALL_MODEL_TYPE_MARK);\n        SchedulableField widthField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.FAMILY_WIDTH_PARAM);\n        SchedulableField heightField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.FAMILY_HEIGHT_PARAM);\n        \n        if (typeMarkField != null) def.AddField(typeMarkField);\n        if (widthField != null) def.AddField(widthField);\n        if (heightField != null) def.AddField(heightField);\n    }\n}"}
{"prompt":"Build a structural column at position X=10, Y=5.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null && columnSymbol != null)\n{\n    if (!columnSymbol.IsActive)\n    {\n        columnSymbol.Activate();\n    }\n    doc.Create.NewFamilyInstance(new XYZ(10, 5, 0), columnSymbol, level, StructuralType.Column);\n}"}
{"prompt":"Place a material tag on a wall face.","completion":"using (Transaction t = new Transaction(doc, \"Place Material Tag\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference faceRef = localUidoc.Selection.PickObject(ObjectType.Face, \"Select a face to tag\");\n    XYZ point = localUidoc.Selection.PickPoint(\"Select the tag location\");\n    View activeView = doc.ActiveView;\n\n    if (faceRef != null && point != null && activeView != null)\n    {\n        IndependentTag.Create(doc, activeView.Id, faceRef, true, TagMode.TM_ADDBY_MATERIAL, TagOrientation.Horizontal, point);\n    }\n    t.Commit();\n}"}
{"prompt":"Acota la longitud de un muro seleccionado por el usuario.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference wallRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un muro para acotar\");\n\nif (wallRef != null)\n{\n    Wall wall = doc.GetElement(wallRef) as Wall;\n    View activeView = doc.ActiveView;\n\n    if (wall != null && activeView != null)\n    {\n        LocationCurve locCurve = wall.Location as LocationCurve;\n        if (locCurve != null)\n        {\n            Line wallLine = locCurve.Curve as Line;\n            if (wallLine != null)\n            {\n                ReferenceArray refs = new ReferenceArray();\n                refs.Append(wallLine.GetEndPointReference(0));\n                refs.Append(wallLine.GetEndPointReference(1));\n                XYZ pt1 = wallLine.GetEndPoint(0).Add(XYZ.BasisZ * 2);\n                XYZ pt2 = wallLine.GetEndPoint(1).Add(XYZ.BasisZ * 2);\n                Line dimLine = Line.CreateBound(pt1, pt2);\n                doc.Create.NewDimension(activeView, dimLine, refs);\n            }\n        }\n    }\n}"}
{"prompt":"Cambia el tipo de la ventana seleccionada al tipo 'Fija 124x60'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una ventana\");\nFamilySymbol newType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name == \"Fija 124x60\");\nif (pickedRef != null && newType != null)\n{\n    FamilyInstance window = doc.GetElement(pickedRef.ElementId) as FamilyInstance;\n    if (window != null)\n    {\n        window.Symbol = newType;\n    }\n}"}
{"prompt":"Crea un nuevo tipo de muro de 27cm llamado 'Interiores'.","completion":"WallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif(wallTypeToDuplicate != null)\n{\n    WallType newWallType = null;\n    try { newWallType = wallTypeToDuplicate.Duplicate(\"Interiores\") as WallType; } catch {}\n    if(newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if(cs != null && cs.GetLayers().Any())\n        {\n            int coreLayerIndex = cs.GetFirstCoreLayerIndex();\n            if(coreLayerIndex != -1) \n            {\n                cs.SetLayerFunction(coreLayerIndex, MaterialFunctionAssignment.Structure);\n                cs.SetLayerWidth(coreLayerIndex, UnitUtils.ConvertToInternalUnits(27, UnitTypeId.Centimeters));\n                newWallType.SetCompoundStructure(cs);\n            }\n        }\n    }\n}"}
{"prompt":"Duplicate the 'Level 1' view as a dependent view.","completion":"ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v => v.Name == \"Level 1\") as ViewPlan;\n\nif (viewToDuplicate != null)\n{\n    ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n}"}
{"prompt":"Asigna el material 'Acero' a la primera capa de un tipo de muro.","completion":"using (Transaction t = new Transaction(doc, \"Assign Material\"))\n{\n    t.Start();\n    WallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.GetCompoundStructure() != null);\n    Material steel = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m => m.Name.Contains(\"Steel\") || m.Name.Contains(\"Acero\"));\n\n    if (wallType != null && steel != null)\n    {\n        CompoundStructure cs = wallType.GetCompoundStructure();\n        if (cs != null && cs.LayerCount > 0)\n        {\n            cs.SetMaterialId(0, steel.Id);\n            wallType.SetCompoundStructure(cs);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea un nuevo tipo de texto de 5mm de color verde.","completion":"using (Transaction t = new Transaction(doc, \"Create Green Text Type\"))\n{\n    t.Start();\n    string newTypeName = \"5mm Verde\";\n    TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\n    TextNoteType newType = null;\n    if (defaultType != null)\n    {\n        newType = defaultType.Duplicate(newTypeName) as TextNoteType;\n        if (newType != null)\n        {\n            Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n            if (textSizeParam != null && !textSizeParam.IsReadOnly)\n            {\n                textSizeParam.Set(5 \/ 304.8);\n            }\n            Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n            if (lineColorParam != null && !lineColorParam.IsReadOnly)\n            {\n                 lineColorParam.Set(65280);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea un nuevo tipo de cota lineal con texto azul y tamaño 2mm.","completion":"using (Transaction t = new Transaction(doc, \"Create Dimension Type\"))\n{\n    t.Start();\n    string newTypeName = \"Cota Azul 2mm\";\n    DimensionType linearDimType = new FilteredElementCollector(doc).OfClass(typeof(DimensionType)).Cast<DimensionType>().FirstOrDefault(dt => dt.StyleType == DimensionStyleType.Linear);\n\n    if (linearDimType != null)\n    {\n        DimensionType newDimType = linearDimType.Duplicate(newTypeName) as DimensionType;\n        if (newDimType != null)\n        {\n            Parameter colorParam = newDimType.get_Parameter(BuiltInParameter.LINE_COLOR);\n            if (colorParam != null && !colorParam.IsReadOnly) colorParam.Set(255);\n            Parameter textSizeParam = newDimType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n            if (textSizeParam != null && !textSizeParam.IsReadOnly) textSizeParam.Set(2 \/ 304.8);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Agrega el prefijo 'PLANTA-' a todas las vistas de plano.","completion":"string prefix = \"PLANTA-\";\nList<ViewPlan> planViews = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().Where(v => !v.IsTemplate).ToList();\nforeach(ViewPlan view in planViews)\n{\n    if(!view.Name.StartsWith(prefix))\n    {\n        view.Name = prefix + view.Name;\n    }\n}"}
{"prompt":"Crea un nuevo tipo de muro de 30cm llamado 'Muro Estructural 21cm'.","completion":"WallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif(wallTypeToDuplicate != null)\n{\n    WallType newWallType = null;\n    try { newWallType = wallTypeToDuplicate.Duplicate(\"Muro Estructural 21cm\") as WallType; } catch {}\n    if(newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if(cs != null && cs.GetLayers().Any())\n        {\n            int coreLayerIndex = cs.GetFirstCoreLayerIndex();\n            if(coreLayerIndex != -1) \n            {\n                cs.SetLayerWidth(coreLayerIndex, UnitUtils.ConvertToInternalUnits(30, UnitTypeId.Centimeters));\n                newWallType.SetCompoundStructure(cs);\n            }\n        }\n    }\n}"}
{"prompt":"How many doors of type 'Single-Flush 0915 x 2134mm' are in the model?","completion":"FamilySymbol doorType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name == \"Single-Flush 0915 x 2134mm\");\nint doorCount = 0;\n\nif (doorType != null)\n{\n    FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsNotElementType();\n    doorCount = collector.Cast<FamilyInstance>().Count(fi => fi.Symbol.Id == doorType.Id);\n}"}
{"prompt":"Place lighting posts every 10m along a 100m path.","completion":"FamilySymbol lightSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsElementType().FirstOrDefault(s => s.Name.Contains(\"Post\") || s.Name.Contains(\"Pole\")) as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (lightSymbol != null && level != null)\n{\n    if (!lightSymbol.IsActive)\n    {\n        lightSymbol.Activate();\n    }\n    double spacing = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\n    double pathLength = UnitUtils.ConvertToInternalUnits(100, UnitTypeId.Meters);\n    int postCount = (int)(pathLength \/ spacing);\n    for (int i = 0; i <= postCount; i++)\n    {\n        XYZ point = new XYZ(i * spacing, 0, 0);\n        doc.Create.NewFamilyInstance(point, lightSymbol, level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Insert a window 1m wide and 1.2m high into a wall.","completion":"FamilySymbol originalSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nWall hostWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\n\nif (originalSymbol != null && hostWall != null)\n{\n    \/\/ Duplica el tipo para no modificar el original y asegura un nombre único\n    string newTypeName = $\"Window {UnitUtils.ConvertFromInternalUnits(UnitUtils.ConvertToInternalUnits(1.0, UnitTypeId.Meters), UnitTypeId.Meters)}m x {UnitUtils.ConvertFromInternalUnits(UnitUtils.ConvertToInternalUnits(1.2, UnitTypeId.Meters), UnitTypeId.Meters)}m - {Guid.NewGuid().ToString().Substring(0, 4)}\";\n    FamilySymbol newSymbol = originalSymbol.Duplicate(newTypeName) as FamilySymbol;\n\n    if (!newSymbol.IsActive)\n    {\n        newSymbol.Activate();\n    }\n\n    \/\/ Establece las dimensiones en el nuevo tipo\n    Parameter widthParam = newSymbol.LookupParameter(\"Width\");\n    Parameter heightParam = newSymbol.LookupParameter(\"Height\");\n\n    if (widthParam != null && heightParam != null)\n    {\n        widthParam.Set(UnitUtils.ConvertToInternalUnits(1.0, UnitTypeId.Meters));\n        heightParam.Set(UnitUtils.ConvertToInternalUnits(1.2, UnitTypeId.Meters));\n    }\n\n    Level level = doc.GetElement(hostWall.LevelId) as Level;\n    LocationCurve locationCurve = hostWall.Location as LocationCurve;\n    if (level != null && locationCurve != null)\n    {\n        XYZ insertionPoint = locationCurve.Curve.Evaluate(0.5, true);\n        doc.Create.NewFamilyInstance(insertionPoint, newSymbol, hostWall, level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Rota la columna seleccionada 45 grados.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una columna para rotar\");\nif (pickedRef != null)\n{\n    Element elem = doc.GetElement(pickedRef.ElementId);\n    LocationPoint lp = elem.Location as LocationPoint;\n    if (lp != null)\n    {\n        Line axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\n        double angle = 45 * Math.PI \/ 180.0;\n        ElementTransformUtils.RotateElement(doc, elem.Id, axis, angle);\n    }\n}"}
{"prompt":"Crea una cubierta a dos aguas con una pendiente del 10% sobre los muros existentes, usando el tipo 'Generic - 400mm'.","completion":"RoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault(rt => rt.Name == \"Generic - 400mm\") as RoofType;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level; \/\/ Assuming roof is based on Level 1\n\nif (roofType != null && level != null)\n{\n    \/\/ This is a complex operation that requires multiple steps and\/or user interaction and is not supported by the agent.\n}"}
{"prompt":"Build a new 3D view oriented from point (10,10,10) looking at the origin.","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v=>v.ViewFamily==ViewFamily.ThreeDimensional);\n\nif (vft != null)\n{\n    View3D view = View3D.CreateIsometric(doc, vft.Id);\n    if (view != null)\n    {\n        XYZ eyePos = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters));\n        XYZ upDir = XYZ.BasisZ;\n        XYZ forwardDir = XYZ.Zero - eyePos;\n        ViewOrientation3D vo = new ViewOrientation3D(eyePos, upDir, forwardDir);\n        view.SetOrientation(vo);\n        view.Name = \"View from (10,10,10)\";\n    }\n}"}
{"prompt":"Generate a floor with a circular hole in the center.","completion":"using (Transaction t = new Transaction(doc, \"Create Floor with Hole\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    FloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\n\n    if (level != null && floorType != null)\n    {\n        XYZ p1 = new XYZ(-10 \/ 0.3048, -10 \/ 0.3048, 0);\n        XYZ p2 = new XYZ(10 \/ 0.3048, -10 \/ 0.3048, 0);\n        XYZ p3 = new XYZ(10 \/ 0.3048, 10 \/ 0.3048, 0);\n        XYZ p4 = new XYZ(-10 \/ 0.3048, 10 \/ 0.3048, 0);\n        CurveLoop outerLoop = new CurveLoop();\n        outerLoop.Append(Line.CreateBound(p1, p2));\n        outerLoop.Append(Line.CreateBound(p2, p3));\n        outerLoop.Append(Line.CreateBound(p3, p4));\n        outerLoop.Append(Line.CreateBound(p4, p1));\n\n        XYZ center = XYZ.Zero;\n        double radius = 2 \/ 0.3048;\n        CurveLoop innerLoop = new CurveLoop();\n        innerLoop.Append(Arc.Create(center - XYZ.BasisX * radius, center + XYZ.BasisX * radius, center + XYZ.BasisY * radius));\n        innerLoop.Append(Arc.Create(center + XYZ.BasisX * radius, center - XYZ.BasisX * radius, center - XYZ.BasisY * radius));\n\n        Floor.Create(doc, new List<CurveLoop> { outerLoop, innerLoop }, floorType.Id, level.Id);\n    }\n    t.Commit();\n}"}
{"prompt":"Align the centerlines of two user-selected walls.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference r1 = uidoc.Selection.PickObject(ObjectType.Element, \"Select the first wall (the one that will move)\");\nReference r2 = uidoc.Selection.PickObject(ObjectType.Element, \"Select the second wall (the reference)\");\n\nif (r1 != null && r2 != null)\n{\n    Wall w1 = doc.GetElement(r1) as Wall;\n    Wall w2 = doc.GetElement(r2) as Wall;\n    View activeView = doc.ActiveView;\n\n    if (w1 != null && w2 != null && activeView != null)\n    {\n        LocationCurve lc1 = w1.Location as LocationCurve;\n        LocationCurve lc2 = w2.Location as LocationCurve;\n        if (lc1 != null && lc2 != null)\n        {\n            doc.Create.NewAlignment(activeView, lc1.Curve.Reference, lc2.Curve.Reference);\n        }\n    }\n}"}
{"prompt":"Position an instance of the 'Office Desk' family in the center of the 'Office 102' room.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Office 102\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Office Desk\") as FamilySymbol;\nif(furnitureSymbol != null && !furnitureSymbol.IsActive) furnitureSymbol.Activate();\nif(room != null)\n{\n    LocationPoint roomCenter = room.Location as LocationPoint;\n    if(roomCenter != null && furnitureSymbol != null && room.Level != null)\n    {\n        doc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Construct a structural beam between (1,1,1) and (9,1,5) on Level 3","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 3\") as Level;\nFamilySymbol beamType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (beamType != null && level != null)\n{\n    if(!beamType.IsActive) beamType.Activate();\n    XYZ start = new XYZ(1, 1, 1);\n    XYZ end = new XYZ(9, 1, 5);\n    if (start.IsAlmostEqualTo(end)) return;\n    Line beamCurve = Line.CreateBound(start, end);\n    doc.Create.NewFamilyInstance(beamCurve, beamType, level, Autodesk.Revit.DB.Structure.StructuralType.Beam);\n}"}
{"prompt":"Construct a new level named 'Mezzanine' at 7.8 meters elevation.","completion":"string levelName = \"Mezzanine\";\ndouble elevation = UnitUtils.ConvertToInternalUnits(7.8, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Crea una nueva habitación en el Nivel 1 en el punto (10, 10).","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\n\nif (level1 != null)\n{\n    UV point = new UV(10, 10);\n    Room room = doc.Create.NewRoom(level1, point);\n}"}
{"prompt":"Sitúa un mueble en las coordenadas (2,3).","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null && furnitureSymbol != null)\n{\n    if (!furnitureSymbol.IsActive)\n    {\n        furnitureSymbol.Activate();\n    }\n    doc.Create.NewFamilyInstance(new XYZ(2, 3, 0), furnitureSymbol, level, StructuralType.NonStructural);\n}"}
{"prompt":"Carga la familia 'Mesa.rfa' y colócala en (2,6,3) en el Nivel 1","completion":"string levelName = \"Nivel 1\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nstring familyName = \"Mesa\";\nFamilySymbol symbol = new FilteredElementCollector(doc).OfClass(typeof(FamilySymbol)).Cast<FamilySymbol>().FirstOrDefault(fs => fs.Family.Name == familyName);\nif (symbol != null && targetLevel != null)\n{\n    if (!symbol.IsActive) { symbol.Activate(); doc.Regenerate(); }\n    XYZ location = new XYZ(2, 6, 3);\n    doc.Create.NewFamilyInstance(location, symbol, targetLevel, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n}"}
{"prompt":"Coloca una armadura (truss) de 6 metros entre dos puntos.","completion":"using (Transaction t = new Transaction(doc, \"Create Truss\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    FamilySymbol trussSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Family.Name.Contains(\"Truss\"));\n\n    if (level != null && trussSymbol != null)\n    {\n        if (!trussSymbol.IsActive) { trussSymbol.Activate(); }\n        Line trussLine = Line.CreateBound(new XYZ(0, 10, 0), new XYZ(6 \/ 0.3048, 10, 0));\n        doc.Create.NewFamilyInstance(trussLine, trussSymbol, level, StructuralType.NonStructural);\n    }\n    t.Commit();\n}"}
{"prompt":"Create a door 0.9m wide and 2.1m high in the wall.","completion":"Wall hostWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nFamilySymbol originalSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (originalSymbol != null && hostWall != null)\n{\n    string newTypeName = \"Door 0.9m x 2.1m\";\n    FamilySymbol newSymbol = originalSymbol.Duplicate(newTypeName) as FamilySymbol;\n    if (newSymbol == null) return;\n\n    if (!newSymbol.IsActive)\n    {\n        newSymbol.Activate();\n    }\n\n    Parameter widthParam = newSymbol.get_Parameter(BuiltInParameter.FAMILY_WIDTH_PARAM);\n    Parameter heightParam = newSymbol.get_Parameter(BuiltInParameter.FAMILY_HEIGHT_PARAM);\n\n    if (widthParam != null && heightParam != null && !widthParam.IsReadOnly && !heightParam.IsReadOnly)\n    {\n        widthParam.Set(UnitUtils.ConvertToInternalUnits(0.9, UnitTypeId.Meters));\n        heightParam.Set(UnitUtils.ConvertToInternalUnits(2.1, UnitTypeId.Meters));\n    }\n\n    Level level = doc.GetElement(hostWall.LevelId) as Level;\n    LocationCurve locationCurve = hostWall.Location as LocationCurve;\n    if (level != null && locationCurve != null)\n    {\n        XYZ insertionPoint = locationCurve.Curve.Evaluate(0.5, true);\n        doc.Create.NewFamilyInstance(insertionPoint, newSymbol, hostWall, level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Build a new room on Level 4 at point (9, 14).","completion":"string levelName = \"Level 4\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    UV point = new UV(9, 14);\n    Room newRoom = doc.Create.NewRoom(targetLevel, point);\n}"}
{"prompt":"Duplicate level 4 with a 1m offset and name it 'Mezzanine'.","completion":"string levelName = \"Level 4\";\nLevel levelToCopy = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (levelToCopy != null)\n{\n    double offset = UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, levelToCopy.Elevation + offset);\n    newLevel.Name = \"Mezzanine\";\n}"}
{"prompt":"Crea una nueva vista de alzado mirando al sur.","completion":"string viewName = \"Alzado Sur (Nuevo)\";\nViewFamilyType elevationVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(vft => vft.ViewFamily == ViewFamily.Elevation);\nElevationMarker marker = ElevationMarker.CreateElevationMarker(doc, elevationVFT.Id, new XYZ(0, -20, 0), 100);\nView aev = marker.CreateElevation(doc, doc.ActiveView.Id, 0);\naev.Name = viewName;"}
{"prompt":"Importa una topografía desde un archivo CSV.","completion":"using (Transaction t = new Transaction(doc, \"Create Topography\"))\n{\n    t.Start();\n    \/\/ CSV file reading is not directly supported by a single API call.\n    \/\/ You would typically read the file line by line, parse the XYZ coordinates,\n    \/\/ and then use the TopographySurface.Create method with a list of points.\n    \/\/ As a placeholder, here's how to create a simple topography from a list of points:\n    IList<XYZ> points = new List<XYZ>();\n    points.Add(new XYZ(0, 0, 0));\n    points.Add(new XYZ(10, 0, 0));\n    points.Add(new XYZ(0, 10, 0));\n    points.Add(new XYZ(10, 10, 5));\n    TopographySurface.Create(doc, points);\n    t.Commit();\n}"}
{"prompt":"Cambia el tipo de una losa por uno que contenga 'Concreto'.","completion":"Floor floorToChange = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault() as Floor;\nif(floorToChange != null)\n{\n    FloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name.Contains(\"Concreto\") || ft.Name.Contains(\"Concrete\"));\n    if(newType!=null)\n        floorToChange.ChangeTypeId(newType.Id);\n}"}
{"prompt":"Assign the sill height of all windows to 895mm.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits(895, UnitTypeId.Millimeters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Crea una rejilla de 5 ejes horizontales y 5 verticales, espaciados 6 metros.","completion":"double spacing = UnitUtils.ConvertToInternalUnits(6, UnitTypeId.Meters);\nint count = 5;\nfor (int i = 0; i < count; i++)\n{\n    Line line = Line.CreateBound(new XYZ(0, i * spacing, 0), new XYZ((count - 1) * spacing, i * spacing, 0));\n    Grid.Create(doc, line);\n}\nfor (int i = 0; i < count; i++)\n{\n    Line line = Line.CreateBound(new XYZ(i * spacing, 0, 0), new XYZ(i * spacing, (count - 1) * spacing, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Aplica el estilo visual 'Rayos X' a la vista 3D activa.","completion":"View3D view3D = doc.ActiveView as View3D;\nif (view3D != null && !view3D.IsTemplate)\n{\n    view3D.DisplayStyle = DisplayStyle.Wireframe;\n}"}
{"prompt":"Build a 'Roof Terrace' level at 20m.","completion":"string levelName = \"Roof Terrace\";\ndouble elev = UnitUtils.ConvertToInternalUnits(20, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elev);\nnewLevel.Name = levelName;\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Moldea una bandeja de cables entre dos puntos.","completion":"CableTrayType trayType = new FilteredElementCollector(doc).OfClass(typeof(CableTrayType)).FirstOrDefault() as CableTrayType;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(trayType != null && level != null)\n{\n    XYZ start = new XYZ(0,10,3);\n    XYZ end = new XYZ(15,10,3);\n    CableTray.Create(doc, trayType.Id, start, end, level.Id);\n}"}
{"prompt":"Spin a selected element 87 degrees around its Z-axis.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select an element to rotate\");\nElement elem = doc.GetElement(pickedRef.ElementId);\nLocationPoint lp = elem.Location as LocationPoint;\nLine axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\nElementTransformUtils.RotateElement(doc, elem.Id, axis, Math.PI \/ 87);"}
{"prompt":"Generate a 'Generic - 200mm' wall on 'Level 1' from (0,0) to (10,5).","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == \"Generic - 200mm\") as WallType;\n\nif (level != null && wallType != null)\n{\n    XYZ startPoint = new XYZ(0, 0, 0);\n    XYZ endPoint = new XYZ(10, 5, 0);\n    Line wallCurve = Line.CreateBound(startPoint, endPoint);\n    \/\/ Use a default height of 10ft as it's not specified in the prompt\n    double height = 10.0;\n    Wall.Create(doc, wallCurve, wallType.Id, level.Id, height, 0, false, false);\n}"}
{"prompt":"Crea un nuevo Nivel llamado 'Nivel 8' a una elevación de 16 metros.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(16, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Nivel 8\";\n}"}
{"prompt":"Based on the perimeter of the 'Conference Room', create a 'Polished Concrete' floor.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Conference Room\") as Room;\n\nif (room != null)\n{\n    Level level = room.Level;\n    FloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault(ft => ft.Name == \"Polished Concrete\") as FloorType;\n\n    if (level != null && floorType != null)\n    {\n        SpatialElementBoundaryOptions options = new SpatialElementBoundaryOptions();\n        IList<IList<BoundarySegment>> boundarySegments = room.GetBoundarySegments(options);\n        IList<BoundarySegment> outerBoundary = boundarySegments.FirstOrDefault();\n\n        if (outerBoundary != null && outerBoundary.Any())\n        {\n            CurveLoop curveLoop = new CurveLoop();\n            foreach (BoundarySegment segment in outerBoundary)\n            {\n                curveLoop.Append(segment.GetCurve());\n            }\n            Floor.Create(doc, new List<CurveLoop> { curveLoop }, floorType.Id, level.Id);\n        }\n    }\n}"}
{"prompt":"Place an instance of the 'Office Desk' family in the center of the 'Office 97' room.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Office 97\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Office Desk\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);"}
{"prompt":"Construct an MEP space for each room on Level 2","completion":"string levelName = \"Level 2\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    FilteredElementCollector roomCollector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WherePasses(new ElementLevelFilter(targetLevel.Id));\n    foreach (Room room in roomCollector.ToElements().Cast<Room>())\n    {\n        if (room.Location != null)\n        {\n            LocationPoint locPoint = room.Location as LocationPoint;\n            if(locPoint != null)\n            {\n                UV point = new UV(locPoint.Point.X, locPoint.Point.Y);\n                doc.Create.NewSpace(targetLevel, point);\n            }\n        }\n    }\n}"}
{"prompt":"Inserta una etiqueta de material en una cara de muro.","completion":"using (Transaction t = new Transaction(doc, \"Place Material Tag\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference faceRef = localUidoc.Selection.PickObject(ObjectType.Face, \"Selecciona una cara para etiquetar\");\n    XYZ point = localUidoc.Selection.PickPoint(\"Selecciona la ubicación de la etiqueta\");\n    View activeView = doc.ActiveView;\n\n    if (faceRef != null && point != null && activeView != null)\n    {\n        IndependentTag.Create(doc, activeView.Id, faceRef, true, TagMode.TM_ADDBY_MATERIAL, TagOrientation.Horizontal, point);\n    }\n    t.Commit();\n}"}
{"prompt":"Ubica una instancia de la familia 'M_Chair-Breuer' en el centro de la habitación 'Despacho 97'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 97\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"M_Chair-Breuer\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);"}
{"prompt":"Create a new Level named 'Level 6' at an elevation of 8 meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Level 6\";\n}"}
{"prompt":"Oculta los elementos seleccionados en la vista activa.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> idsToHide = uidoc.Selection.GetElementIds();\nView activeView = doc.ActiveView;\n\nif (activeView != null && idsToHide.Count > 0)\n{\n    activeView.HideElements(idsToHide);\n}"}
{"prompt":"Create a rectangular opening in a floor.","completion":"using (Transaction t = new Transaction(doc, \"Create Opening\"))\n{\n    t.Start();\n    Floor floor = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault() as Floor;\n\n    if (floor != null)\n    {\n        XYZ p1 = new XYZ(1 \/ 0.3048, 1 \/ 0.3048, 0);\n        XYZ p2 = new XYZ(3 \/ 0.3048, 1 \/ 0.3048, 0);\n        XYZ p3 = new XYZ(3 \/ 0.3048, 3 \/ 0.3048, 0);\n        XYZ p4 = new XYZ(1 \/ 0.3048, 3 \/ 0.3048, 0);\n        CurveArray profile = new CurveArray();\n        profile.Append(Line.CreateBound(p1, p2));\n        profile.Append(Line.CreateBound(p2, p3));\n        profile.Append(Line.CreateBound(p3, p4));\n        profile.Append(Line.CreateBound(p4, p1));\n        doc.Create.NewOpening(floor, profile, true);\n    }\n    t.Commit();\n}"}
{"prompt":"Inserta una instancia de la familia 'Mesa de Oficina' en el centro de la habitación 'Despacho 98'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 98\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Mesa de Oficina\") as FamilySymbol;\nif(furnitureSymbol != null && !furnitureSymbol.IsActive) furnitureSymbol.Activate();\nif(room != null)\n{\n    LocationPoint roomCenter = room.Location as LocationPoint;\n    if(roomCenter != null && furnitureSymbol != null && room.Level != null)\n    {\n        doc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Generate a new level named 'Mezzanine' at 8.3 meters elevation.","completion":"string levelName = \"Mezzanine\";\ndouble elevation = UnitUtils.ConvertToInternalUnits(8.3, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Crea una viga estructural entre (0,0,3) y (5,0,3) en el Nivel 2.","completion":"FamilySymbol beamType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (beamType != null && level != null)\n{\n    if(!beamType.IsActive) beamType.Activate();\n    XYZ start = new XYZ(0, 0, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters));\n    XYZ end = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters));\n    Line beamCurve = Line.CreateBound(start, end);\n    doc.Create.NewFamilyInstance(beamCurve, beamType, level, StructuralType.Beam);\n}"}
{"prompt":"Calcula el área total de todas las habitaciones.","completion":"double totalArea = 0.0;\nList<Room> rooms = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>().ToList();\nforeach (Room room in rooms)\n{\n    totalArea += room.Area;\n}"}
{"prompt":"Obtén el número total de advertencias en el proyecto.","completion":"int totalWarnings = doc.GetWarnings().Count;\n"}
{"prompt":"Encuentra el elemento de pórtico estructural con la marca 'B-101'.","completion":"string markValue = \"B-101\";\nElement framingElement = new FilteredElementCollector(doc)\n    .OfCategory(BuiltInCategory.OST_StructuralFraming)\n    .WhereElementIsNotElementType()\n    .FirstOrDefault(e => {\n        Parameter p = e.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n        return p != null && p.AsString() == markValue;\n    });"}
{"prompt":"Assign the visibility of the 'Furniture' category to false in the active view.","completion":"Category furnitureCat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Furniture);\nView activeView = doc.ActiveView;\n\nif (furnitureCat != null && activeView != null)\n{\n    activeView.SetCategoryHidden(furnitureCat.Id, true);\n}\n"}
{"prompt":"Crea una nota de texto con un texto, una ubicación y un elemento de destino dados.","completion":"using (Transaction t = new Transaction(doc, \"Create Text Note\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference targetRef = localUidoc.Selection.PickObject(ObjectType.Element, \"Selecciona el elemento a anotar\");\n    XYZ textLocation = localUidoc.Selection.PickPoint(\"Elige la ubicación del texto\");\n\n    View activeView = doc.ActiveView;\n    ElementId defaultTypeId = doc.GetDefaultElementTypeId(ElementTypeGroup.TextNoteType);\n\n    if (targetRef != null && textLocation != null && activeView != null && defaultTypeId != ElementId.InvalidElementId)\n    {\n        TextNoteOptions opts = new TextNoteOptions(defaultTypeId);\n        TextNote note = TextNote.Create(doc, activeView.Id, textLocation, \"REVISAR CLASH\", opts);\n        if (note != null)\n        {\n            note.AddLeader(TextNoteLeaderTypes.TNLT_STRAIGHT_L).End = targetRef.GlobalPoint;\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea un nuevo tipo de texto de 5mm de color verde.","completion":"using (Transaction t = new Transaction(doc, \"Create Green Text Type\"))\n{\n    t.Start();\n    string newTypeName = \"5mm Verde\";\n    TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\n    if (defaultType != null)\n    {\n        TextNoteType newType = defaultType.Duplicate(newTypeName) as TextNoteType;\n        if (newType != null)\n        {\n            Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n            if (textSizeParam != null && !textSizeParam.IsReadOnly)\n            {\n                textSizeParam.Set(5 \/ 304.8);\n            }\n            Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n            if (lineColorParam != null && !lineColorParam.IsReadOnly)\n            {\n                 lineColorParam.Set(65280);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Tag all rooms with their area.","completion":"using (Transaction t = new Transaction(doc, \"Tag All Rooms\"))\n{\n    t.Start();\n    View activeView = doc.ActiveView;\n\n    if (activeView != null)\n    {\n        List<Room> rooms = new FilteredElementCollector(doc, activeView.Id).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>().ToList();\n        foreach(Room room in rooms)\n        {\n            LocationPoint loc = room.Location as LocationPoint;\n            if(loc != null)\n            {\n                doc.Create.NewRoomTag(new LinkElementId(room.Id), new UV(loc.Point.X, loc.Point.Y), activeView.Id);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create a 'Concrete-Rectangular 30x60' column at each grid intersection.","completion":"using (Transaction t = new Transaction(doc, \"Create Columns at Grids\"))\n{\n    t.Start();\n    FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(s => s.Name == \"Concrete-Rectangular 30x60\");\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderBy(l => l.Elevation).FirstOrDefault();\n    List<Grid> grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().ToList();\n    if (columnSymbol != null && level != null)\n    {\n        if (!columnSymbol.IsActive) columnSymbol.Activate();\n        for (int i = 0; i < grids.Count; i++)\n        {\n            for (int j = i + 1; j < grids.Count; j++)\n            {\n                IntersectionResultArray results;\n                if(grids[i].Curve.Intersect(grids[j].Curve, out results) == SetComparisonResult.Overlap)\n                {\n                    if (results != null && !results.IsEmpty)\n                    {\n                        foreach (IntersectionResult ir in results)\n                        {\n                            doc.Create.NewFamilyInstance(ir.XYZPoint, columnSymbol, level, StructuralType.Column);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Connect two cable trays with an elbow fitting.","completion":"List<CableTray> trays = new FilteredElementCollector(doc).OfClass(typeof(CableTray)).Cast<CableTray>().ToList();\n\nif (trays.Count >= 2)\n{\n    Connector c1 = trays[0].ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n    Connector c2 = trays[1].ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n    \n    if (c1 != null && c2 != null)\n    {\n        doc.Create.NewUnionFitting(c1, c2);\n    }\n}"}
{"prompt":"Calcula la longitud total de todos los ductos de Suministro de Aire.","completion":"List<Duct> ducts = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_DuctCurves).WhereElementIsNotElementType().Cast<Duct>().Where(d => d.get_Parameter(BuiltInParameter.RBS_SYSTEM_CLASSIFICATION_PARAM).AsString() == \"SupplyAir\").ToList();\ndouble totalLength = 0.0;\nforeach (Duct d in ducts)\n{\n    totalLength += d.get_Parameter(BuiltInParameter.CURVE_ELEM_LENGTH).AsDouble();\n}"}
{"prompt":"Crea un nuevo plano con el número 'A-101' y nombre 'Planta Baja'.","completion":"FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (titleBlock != null)\n{\n    ViewSheet sheet = ViewSheet.Create(doc, titleBlock.Id);\n    if (sheet != null)\n    {\n        sheet.SheetNumber = \"A-101\";\n        sheet.Name = \"Planta Baja\";\n    }\n}"}
{"prompt":"Construct a new wall type 'Generic Wall 300mm' with a thickness of 30cm.","completion":"WallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif(oldWallType != null)\n{\n    WallType newWallType = null;\n    try { newWallType = oldWallType.Duplicate(\"Generic Wall 300mm\") as WallType; } catch {}\n    if(newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if(cs != null && cs.GetLayers().Any())\n        {\n            int coreLayerIndex = cs.GetFirstCoreLayerIndex();\n            if(coreLayerIndex != -1)\n            {\n                cs.SetLayerWidth(coreLayerIndex, UnitUtils.ConvertToInternalUnits(30, UnitTypeId.Centimeters));\n                newWallType.SetCompoundStructure(cs);\n            }\n        }\n    }\n}"}
{"prompt":"Crea un nuevo nivel 'Nivel 3' a una elevación de 12 metros.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(12, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Nivel 3\";\n}"}
{"prompt":"Temporarily isolate all furniture in the active view.","completion":"ICollection<ElementId> furnitureIds = new FilteredElementCollector(doc, doc.ActiveView.Id).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsNotElementType().ToElementIds();\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.IsolateElementsTemporary(furnitureIds);\n}"}
{"prompt":"Start and commit a transaction for 'Modify Project'.","completion":""}
{"prompt":"Insert a 6-meter truss between two points.","completion":"using (Transaction t = new Transaction(doc, \"Create Truss\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    FamilySymbol trussSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Family.Name.Contains(\"Truss\"));\n\n    if (level != null && trussSymbol != null)\n    {\n        if (!trussSymbol.IsActive) { trussSymbol.Activate(); }\n        Line trussLine = Line.CreateBound(new XYZ(0, 10, 0), new XYZ(6 \/ 0.3048, 10, 0));\n        doc.Create.NewFamilyInstance(trussLine, trussSymbol, level, StructuralType.NonStructural);\n    }\n    t.Commit();\n}"}
{"prompt":"Construct a floor plan view for 'Level 4'.","completion":"string levelName = \"Level 4\";\nLevel level3 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.FloorPlan);\n\nif (level3 != null && vft != null)\n{\n    ViewPlan viewPlan = ViewPlan.Create(doc, vft.Id, level3.Id);\n}"}
{"prompt":"Find all views that do not have an assigned view template.","completion":"List<View> viewsWithoutTemplate = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().Where(v => v.CanBePrinted && !v.IsTemplate && v.ViewTemplateId.Equals(ElementId.InvalidElementId)).ToList();"}
{"prompt":"Mueve un elemento seleccionado a la posición (1,10).","completion":"ICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds.Any())\n{\n    foreach (ElementId id in selectedIds)\n    {\n        Element elem = doc.GetElement(id);\n        if (elem != null)\n        {\n            LocationPoint lp = elem.Location as LocationPoint;\n            if (lp != null)\n            {\n                XYZ newPosition = new XYZ(1, 10, lp.Point.Z);\n                lp.Point = newPosition;\n            }\n        }\n    }\n}"}
{"prompt":"How many doors of type 'Single-Flush 0915 x 2134mm' are in the model?","completion":"FamilySymbol doorType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name == \"Single-Flush 0915 x 2134mm\");\nint doorCount = 0;\n\nif (doorType != null)\n{\n    FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsNotElementType();\n    doorCount = collector.Cast<FamilyInstance>().Count(fi => fi.Symbol.Id == doorType.Id);\n}"}
{"prompt":"Clone the 'Level 3' view as a dependent view.","completion":"ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v => v.Name == \"Level 3\") as ViewPlan;\n\nif (viewToDuplicate != null)\n{\n    ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n}"}
{"prompt":"Coloca la vista 'Nivel 1' en el centro de la hoja activa.","completion":"ViewPlan viewToPlace = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v => v.Name == \"Nivel 1\") as ViewPlan;\nViewSheet activeSheet = doc.ActiveView as ViewSheet;\n\nif (viewToPlace != null && activeSheet != null)\n{\n    BoundingBoxUV sheetBox = activeSheet.Outline;\n    XYZ centerPoint = new XYZ((sheetBox.Min.U + sheetBox.Max.U) \/ 2, (sheetBox.Min.V + sheetBox.Max.V) \/ 2, 0);\n    Viewport.Create(doc, activeSheet.Id, viewToPlace.Id, centerPoint);\n}"}
{"prompt":"Create a new level named 'Basement Floor' at an elevation of -4.5 meters.","completion":"double elevationInternal = UnitUtils.ConvertToInternalUnits(-4.5, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevationInternal);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Basement Floor\";\n}"}
{"prompt":"Determina el volumen total de hormigón de todas las zapatas de cimentación.","completion":"double totalVolume = 0.0;\nList<FamilyInstance> footings = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFoundation).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach (FamilyInstance footing in footings)\n{\n    Parameter volumeParam = footing.get_Parameter(BuiltInParameter.HOST_VOLUME_COMPUTED);\n    if (volumeParam != null && volumeParam.HasValue)\n    {\n        totalVolume += volumeParam.AsDouble();\n    }\n}\n\/\/ El volumen está en pies cúbicos. El orquestador puede convertirlo a metros cúbicos."}
{"prompt":"Fetch a list of all annotation families.","completion":"List<Family> annotationFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.CategoryType == CategoryType.Annotation).ToList();\n"}
{"prompt":"Actualiza el tipo de la ventana seleccionada al tipo 'Ventana Fija 123x60'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una ventana\");\nFamilySymbol newType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name == \"Ventana Fija 123x60\");\nif (pickedRef != null && newType != null)\n{\n    FamilyInstance window = doc.GetElement(pickedRef.ElementId) as FamilyInstance;\n    if (window != null)\n    {\n        window.Symbol = newType;\n    }\n}"}
{"prompt":"Append a reference point at coordinates (1,1,1) inside the family editor.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(1,1,1));"}
{"prompt":"Copia el tipo de muro 'Genérico - 122mm' y nómbralo 'Interior - 15cm Yeso'.","completion":"string originalName = \"Genérico - 122mm\";\nstring newName = \"Interior - 15cm Yeso\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif(originalType!=null)\n    originalType.Duplicate(newName);"}
{"prompt":"Selecciona todos los muros del 'Nivel 4' y cambia su comentario a 'REVISAR AISLAMIENTO'.","completion":"string levelName = \"Nivel 4\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(targetLevel.Id);\n    FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(levelFilter);\n    foreach (Element wall in collector)\n    {\n        Parameter commentsParam = wall.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n        if (commentsParam != null && !commentsParam.IsReadOnly) { commentsParam.Set(\"REVISAR AISLAMIENTO\"); }\n    }\n}"}
{"prompt":"Clona el tipo de muro 'Genérico - 183mm' y nómbralo 'Interior - 15cm Yeso'.","completion":"string originalName = \"Genérico - 183mm\";\nstring newName = \"Interior - 15cm Yeso\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif (originalType != null)\n{\n    WallType newType = originalType.Duplicate(newName) as WallType;\n}"}
{"prompt":"Obtén el espacio MEP asociado a la habitación 'Oficina 102'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Cast<Room>().FirstOrDefault(r => r.Name == \"Oficina 102\");\nList<Space> spaces = new List<Space>();\n\nif (room != null)\n{\n    spaces = new FilteredElementCollector(doc).OfClass(typeof(Space)).Cast<Space>().Where(s => s.Room != null && s.Room.Id == room.Id).ToList();\n}"}
{"prompt":"Generate a new wall type 'Generic Wall 300mm' with a thickness of 30cm.","completion":"string newTypeName = \"Generic Wall 300mm\";\nWallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif (oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(newTypeName) as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(30, UnitTypeId.Centimeters));\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n}"}
{"prompt":"Agrega un nivel llamado 'Nivel Azotea' a 15.7 metros.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(15.7, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Nivel Azotea\";\n}"}
{"prompt":"Aísla temporalmente los elementos seleccionados en la vista activa.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> idsToIsolate = uidoc.Selection.GetElementIds();\nView activeView = doc.ActiveView;\n\nif (activeView != null && idsToIsolate.Count > 0)\n{\n    activeView.IsolateElementsTemporary(idsToIsolate);\n}"}
{"prompt":"Obtain the total length of all walls in the project.","completion":"double totalLength = 0.0;\nList<Wall> walls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Cast<Wall>().ToList();\nforeach (Wall wall in walls)\n{\n    Parameter lengthParam = wall.get_Parameter(BuiltInParameter.CURVE_ELEM_LENGTH);\n    if (lengthParam != null && lengthParam.HasValue)\n    {\n        totalLength += lengthParam.AsDouble();\n    }\n}"}
{"prompt":"Create a structural beam between (0,0,3) and (5,0,3) on Level 2.","completion":"FamilySymbol beamType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 2\");\n\nif (beamType != null && level != null)\n{\n    if(!beamType.IsActive) beamType.Activate();\n    XYZ start = new XYZ(0, 0, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters));\n    XYZ end = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters));\n    Line beamCurve = Line.CreateBound(start, end);\n    doc.Create.NewFamilyInstance(beamCurve, beamType, level, StructuralType.Beam);\n}"}
{"prompt":"Crea un parámetro global de longitud llamado 'dimension tipo' con valor de 0.8m.","completion":"string paramName = \"AnchoCorredor\";\nGlobalParameter gp = GlobalParameter.Create(doc, paramName, SpecTypeId.Length);\n\nif (gp != null)\n{\n    gp.SetValue(new DoubleParameterValue(UnitUtils.ConvertToInternalUnits(0.8, UnitTypeId.Meters)));\n}"}
{"prompt":"Agrega un punto de referencia en las coordenadas (1,2,2) dentro del editor de familias.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(1,2,2));"}
{"prompt":"Adjust the detail level of the active view to 'Medium'.","completion":"View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.DetailLevel = ViewDetailLevel.Medium;\n}"}
{"prompt":"Carga un enlace DWG preservando los colores.","completion":"string filePath = \"C:\/CAD\/Planos.dwg\";\nDWGImportOptions opts = new DWGImportOptions();\nopts.ColorMode = ImportColorMode.Preserved;\nElementId linkId;\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    doc.Link(filePath, opts, activeView, out linkId);\n}"}
{"prompt":"Create a new 3D view oriented from point (10,10,10) looking at the origin.","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v=>v.ViewFamily==ViewFamily.ThreeDimensional);\n\nif (vft != null)\n{\n    View3D view = View3D.CreateIsometric(doc, vft.Id);\n    if (view != null)\n    {\n        XYZ eyePos = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters));\n        XYZ upDir = XYZ.BasisZ;\n        XYZ forwardDir = XYZ.Zero - eyePos;\n        ViewOrientation3D vo = new ViewOrientation3D(eyePos, upDir, forwardDir);\n        view.SetOrientation(vo);\n        view.Name = \"View from (10,10,10)\";\n    }\n}"}
{"prompt":"Display a dialog box with 'Yes' and 'Vista de Trabajo' options.","completion":""}
{"prompt":"Define the 'Mark' parameter of all selected walls to 'W-EXT-01'.","completion":"using (Transaction t = new Transaction(doc, \"Set Wall Mark\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    ICollection<ElementId> selectedIds = localUidoc.Selection.GetElementIds();\n\n    if (selectedIds != null && selectedIds.Count > 0)\n    {\n        foreach(ElementId id in selectedIds)\n        {\n            Element elem = doc.GetElement(id);\n            if(elem is Wall)\n            {\n                Parameter markParam = elem.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n                if (markParam != null && !markParam.IsReadOnly) markParam.Set(\"W-EXT-01\");\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Build a floor plan view for 'Level 1'.","completion":"string levelName = \"Level 1\";\nLevel level3 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.FloorPlan);\n\nif (level3 != null && vft != null)\n{\n    ViewPlan viewPlan = ViewPlan.Create(doc, vft.Id, level3.Id);\n}"}
{"prompt":"Inserta un punto de referencia en las coordenadas (6,5,7) dentro del editor de familias.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(6,5,7));"}
{"prompt":"Actualiza el tipo de una losa seleccionada a 'Roble Oscuro'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una losa\");\n\nif (pickedRef != null)\n{\n    Floor floorToChange = doc.GetElement(pickedRef) as Floor;\n    FloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name == \"Roble Oscuro\");\n    \n    if (floorToChange != null && newType != null)\n    {\n        floorToChange.ChangeTypeId(newType.Id);\n    }\n}"}
{"prompt":"Encuentra todas las vistas de sección en el proyecto.","completion":"List<ViewSection> sectionViews = new FilteredElementCollector(doc).OfClass(typeof(ViewSection)).Cast<ViewSection>().ToList();"}
{"prompt":"Generate a new level named 'Mezzanine' at 7.3 meters elevation.","completion":"string levelName = \"Mezzanine\";\ndouble elevation = UnitUtils.ConvertToInternalUnits(7.3, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Create a new 25cm wall type named 'Structural Wall 25cm'.","completion":"using (Transaction t = new Transaction(doc, \"Create Wall Type\"))\n{\n    t.Start();\n    string newTypeName = \"Structural Wall 25cm\";\n    WallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\n    if (wallTypeToDuplicate != null)\n    {\n        WallType newWallType = wallTypeToDuplicate.Duplicate(newTypeName) as WallType;\n        if (newWallType != null)\n        {\n            CompoundStructure cs = newWallType.GetCompoundStructure();\n            int coreLayerIndex = cs.GetFirstCoreLayerIndex();\n            cs.SetLayerFunction(coreLayerIndex, MaterialFunctionAssignment.Structure);\n            cs.SetLayerWidth(coreLayerIndex, 0.25 \/ 0.3048);\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Incorpora los campos 'Nivel 1', 'Marca' y 'Volumen' a la tabla de pilares.","completion":"ViewSchedule schedule = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().FirstOrDefault(s => s.Name.Contains(\"Pilares\") || s.Name.Contains(\"Column\"));\nif (schedule != null)\n{\n    ScheduleDefinition def = schedule.Definition;\n    SchedulableField levelField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.FAMILY_LEVEL_PARAM);\n    if (levelField != null) def.AddField(levelField);\n    SchedulableField markField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.ALL_MODEL_MARK);\n    if (markField != null) def.AddField(markField);\n    SchedulableField volumeField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.HOST_VOLUME_COMPUTED);\n    if (volumeField != null) def.AddField(volumeField);\n}"}
{"prompt":"Place a text note with 'Review' in the current view.","completion":"View activeView = doc.ActiveView;\nElementId defaultTypeId = doc.GetDefaultElementTypeId(ElementTypeGroup.TextNoteType);\n\nif (activeView != null && defaultTypeId != ElementId.InvalidElementId)\n{\n    \/\/ Place note at a default position as none was specified\n    XYZ position = new XYZ(5, 5, 0);\n    TextNote.Create(doc, activeView.Id, position, \"Review\", defaultTypeId);\n}"}
{"prompt":"Position an instance of the 'Office Desk' family in the center of the 'Office 97' room.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Office 97\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Office Desk\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);"}
{"prompt":"Retrieve the MEP space associated with the room 'Office 99'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Cast<Room>().FirstOrDefault(r => r.Name == \"Office 99\");\nList<Space> spaces = new List<Space>();\n\nif (room != null)\n{\n    spaces = new FilteredElementCollector(doc).OfClass(typeof(Space)).Cast<Space>().Where(s => s.Room != null && s.Room.Id == room.Id).ToList();\n}"}
{"prompt":"Construct a new room on Level 5 at point (7, 7).","completion":"string levelName = \"Level 5\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    UV point = new UV(7, 7);\n    Room newRoom = doc.Create.NewRoom(targetLevel, point);\n}"}
{"prompt":"Create a new material named 'Dark Oak' with a wood surface pattern.","completion":"string materialName = \"Dark Oak\";\nElementId materialId = Material.Create(doc, materialName);\n\nif (materialId != ElementId.InvalidElementId)\n{\n    Material material = doc.GetElement(materialId) as Material;\n    FillPatternElement fillPattern = new FilteredElementCollector(doc).OfClass(typeof(FillPatternElement)).FirstOrDefault(p => p.Name.Contains(\"Wood\") || p.Name.Contains(\"Madera\")) as FillPatternElement;\n    \n    if (material != null && fillPattern != null)\n    {\n        material.SurfaceForegroundPatternId = fillPattern.Id;\n        material.Color = new Color(139, 69, 19);\n    }\n}"}
{"prompt":"Cambia el tipo de una losa por uno que contenga 'Concreto'.","completion":"Floor floorToChange = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault() as Floor;\nFloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name.Contains(\"Concreto\") || ft.Name.Contains(\"Concrete\"));\n\nif (floorToChange != null && newType != null)\n{\n    floorToChange.ChangeTypeId(newType.Id);\n}"}
{"prompt":"Gira un elemento seleccionado 95 grados sobre su eje Z.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un elemento para rotar\");\nElement elem = doc.GetElement(pickedRef.ElementId);\nLocationPoint lp = elem.Location as LocationPoint;\nLine axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\nElementTransformUtils.RotateElement(doc, elem.Id, axis, Math.PI \/ 95);"}
{"prompt":"Create a stair between Level 1 and Level 1.1","completion":"\/\/ This is a complex operation that requires multiple steps and\/or user interaction and is not supported by the agent."}
{"prompt":"Change the detail level of the current view to 'Coarse'.","completion":"View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.DetailLevel = ViewDetailLevel.Coarse;\n}"}
{"prompt":"Crea un nuevo Nivel llamado 'Nivel 3' a una elevación de 8 metros.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Nivel 3\";\n}"}
{"prompt":"Construct a new elevation view looking south.","completion":"string viewName = \"South Elevation (New)\";\nViewFamilyType elevationVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(vft => vft.ViewFamily == ViewFamily.Elevation);\nElevationMarker marker = ElevationMarker.CreateElevationMarker(doc, elevationVFT.Id, new XYZ(0, -20, 0), 100);\nView aev = marker.CreateElevation(doc, doc.ActiveView.Id, 0);\naev.Name = viewName;"}
{"prompt":"Reproduce el tipo de muro 'Genérico - 149mm' y nómbralo 'Interior - 17cm Yeso'.","completion":"string originalName = \"Genérico - 149mm\";\nstring newName = \"Interior - 17cm Yeso\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif(originalType!=null)\n    originalType.Duplicate(newName);"}
{"prompt":"Generate a new level 'Level 4' at an elevation of 7 meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(7, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Level 4\";\n}"}
{"prompt":"Sitúa una instancia de la familia 'Ventana Fija 121x60' en el centro de la habitación 'Despacho 99'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 121\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Ventana Fija 99x60\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);"}
{"prompt":"Inserta una armadura (truss) de 6 metros entre dos puntos.","completion":"using (Transaction t = new Transaction(doc, \"Create Truss\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    FamilySymbol trussSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Family.Name.Contains(\"Truss\"));\n\n    if (level != null && trussSymbol != null)\n    {\n        if (!trussSymbol.IsActive) { trussSymbol.Activate(); }\n        Line trussLine = Line.CreateBound(new XYZ(0, 10, 0), new XYZ(6 \/ 0.3048, 10, 0));\n        doc.Create.NewFamilyInstance(trussLine, trussSymbol, level, StructuralType.NonStructural);\n    }\n    t.Commit();\n}"}
{"prompt":"Set the 'Mark' parameter of all selected walls to 'W-EXT-3'.","completion":"using (Transaction t = new Transaction(doc, \"Set Wall Mark\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    ICollection<ElementId> selectedIds = localUidoc.Selection.GetElementIds();\n\n    if (selectedIds != null && selectedIds.Count > 3)\n    {\n        foreach(ElementId id in selectedIds)\n        {\n            Element elem = doc.GetElement(id);\n            if(elem is Wall)\n            {\n                Parameter p = elem.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n                if (p != null && !p.IsReadOnly)\n                {\n                    p.Set(\"W-EXT-01\");\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea una nueva cota de nivel llamada 'Nivel 3' a una elevación de 12 metros.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(12, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\nnewLevel.Name = \"Nivel 3\";"}
{"prompt":"Permite al usuario seleccionar un muro y obtén su ElementId.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un muro\");\nElementId selectedWallId = ElementId.InvalidElementId;\nif (pickedRef != null)\n{\n    selectedWallId = pickedRef.ElementId;\n}"}
{"prompt":"Crea un techo por extrusión con un perfil en arco.","completion":"using (Transaction t = new Transaction(doc, \"Create Extrusion Roof\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    RoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n\n    if (level != null && roofType != null && doc.ActiveView != null)\n    {\n        CurveArray profile = new CurveArray();\n        profile.Append(Arc.Create(new XYZ(-10,0,0), new XYZ(10,0,0), new XYZ(0,5,0)));\n        Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisY, XYZ.Zero);\n        ReferencePlane refPlane = doc.Create.NewReferencePlane(plane.Origin, plane.Origin + XYZ.BasisX, plane.Normal, doc.ActiveView);\n        if(refPlane != null)\n            doc.Create.NewExtrusionRoof(profile, refPlane, level, roofType, 0, 20);\n    }\n    t.Commit();\n}"}
{"prompt":"Position an instance of the 'Office Desk' family in the center of the 'Office 96' room.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Office 96\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Office Desk\") as FamilySymbol;\nif(furnitureSymbol != null && !furnitureSymbol.IsActive) furnitureSymbol.Activate();\nif(room != null)\n{\n    LocationPoint roomCenter = room.Location as LocationPoint;\n    if(roomCenter != null && furnitureSymbol != null && room.Level != null)\n    {\n        doc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Modifica el tipo de la ventana seleccionada al tipo 'Fija 120x60'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una ventana\");\nFamilySymbol newType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name == \"Fija 120x60\");\nif (pickedRef != null && newType != null)\n{\n    FamilyInstance window = doc.GetElement(pickedRef.ElementId) as FamilyInstance;\n    if (window != null)\n    {\n        window.Symbol = newType;\n    }\n}"}
{"prompt":"Ubica un rociador en las coordenadas (6,1,1).","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol sprinklerSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Sprinklers).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (level != null && sprinklerSymbol != null)\n{\n    if (!sprinklerSymbol.IsActive) sprinklerSymbol.Activate();\n    XYZ placementPoint = new XYZ(UnitUtils.ConvertToInternalUnits(6, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters));\n    doc.Create.NewFamilyInstance(placementPoint, sprinklerSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n}"}
{"prompt":"Duplica el tipo de muro 'Genérico - 132mm' y nómbralo 'Interior - 15cm Yeso'.","completion":"string originalName = \"Genérico - 132mm\";\nstring newName = \"Interior - 15cm Yeso\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif(originalType!=null)\n    originalType.Duplicate(newName);"}
{"prompt":"Add a reference point at coordinates (1,2,3) inside the family editor.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(1,2,3));"}
{"prompt":"Create a new room on Level 5 at point (14, 12).","completion":"string levelName = \"Level 5\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    UV point = new UV(14, 12);\n    Room newRoom = doc.Create.NewRoom(targetLevel, point);\n}"}
{"prompt":"Oculta todos los elementos de anotación en la vista activa.","completion":"if (doc.ActiveView != null)\n{\n    List<BuiltInCategory> annotationCategories = new List<BuiltInCategory>\n    {\n        BuiltInCategory.OST_GenericAnnotation,\n        BuiltInCategory.OST_TextNotes,\n        BuiltInCategory.OST_Tags,\n        BuiltInCategory.OST_Dimensions,\n        BuiltInCategory.OST_DetailComponents\n    };\n    ElementMulticategoryFilter multiCategoryFilter = new ElementMulticategoryFilter(annotationCategories);\n    ICollection<ElementId> elementsToHide = new FilteredElementCollector(doc, doc.ActiveView.Id).WherePasses(multiCategoryFilter).ToElementIds();\n    if(elementsToHide.Any())\n    {\n        doc.ActiveView.HideElements(elementsToHide);\n    }\n}"}
{"prompt":"Place a spot elevation on a given face and view point.","completion":"using (Transaction t = new Transaction(doc, \"Place Spot Elevation\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference faceRef = localUidoc.Selection.PickObject(ObjectType.Face, \"Select the top face of the floor\");\n\n    View activeView = doc.ActiveView;\n\n    if (faceRef != null && activeView != null)\n    {\n        XYZ pointOnFace = faceRef.GlobalPoint;\n        XYZ leaderEnd = pointOnFace + new XYZ(1 \/ 0.3048, 1 \/ 0.3048, 0);\n        doc.Create.NewSpotElevation(activeView, faceRef, pointOnFace, pointOnFace, leaderEnd, pointOnFace, true);\n    }\n    t.Commit();\n}"}
{"prompt":"Aplica el estilo visual 'Wireframe' a la vista 3D activa.","completion":"View3D view3D = doc.ActiveView as View3D;\nif (view3D != null && !view3D.IsTemplate)\n{\n    view3D.DisplayStyle = DisplayStyle.Wireframe; \/\/ Simula el efecto 'Rayos X'\n}"}
{"prompt":"Coloca las vistas 'Planta Nivel 1' y 'Planta Nivel 2' en el plano 'A-101'.","completion":"ViewSheet sheet = new FilteredElementCollector(doc).OfClass(typeof(ViewSheet)).Cast<ViewSheet>().FirstOrDefault(s => s.SheetNumber == \"A-101\");\nView view1 = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().FirstOrDefault(v => v.Name == \"Planta Nivel 1\");\nView view2 = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().FirstOrDefault(v => v.Name == \"Planta Nivel 2\");\nif (sheet != null && view1 != null && view2 != null)\n{\n    XYZ insertPoint1 = new XYZ(1.0, 1.0, 0);\n    Viewport.Create(doc, sheet.Id, view1.Id, insertPoint1);\n    XYZ insertPoint2 = new XYZ(1.0, 2.0, 0);\n    Viewport.Create(doc, sheet.Id, view2.Id, insertPoint2);\n}"}
{"prompt":"Crea un nuevo tipo de muro 'Muro Genérico 300mm' con un grosor de 30cm.","completion":"string newTypeName = \"Muro Genérico 300mm\";\nWallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif(oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(newTypeName) as WallType;\n    if(newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if(cs != null)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(300, UnitTypeId.Millimeters));\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n}"}
{"prompt":"Add reinforcement to a column.","completion":"RebarBarType barType = new FilteredElementCollector(doc).OfClass(typeof(RebarBarType)).FirstOrDefault() as RebarBarType;\nRebarShape shape = new FilteredElementCollector(doc).OfClass(typeof(RebarShape)).FirstOrDefault() as RebarShape;\nFamilyInstance column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\n\nif (barType != null && shape != null && column != null)\n{\n    Rebar.CreateFromRebarShape(doc, shape, barType, column, column.GetTransform().Origin, XYZ.BasisX, XYZ.BasisY);\n}"}
{"prompt":"Find all walls that have no base level assigned.","completion":"ElementFilter unassociatedFilter = new ElementLevelFilter(ElementId.InvalidElementId);\nList<Element> unassignedWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(unassociatedFilter).ToList();"}
{"prompt":"Construct a new level 'Level 8' at an elevation of 8 meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Level 8\";\n}"}
{"prompt":"Build a 'Generic - 200mm' wall on 'Level 1' from (0,0) to (10,5).","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == \"Generic - 200mm\") as WallType;\nif (level != null && wallType != null)\n{\n    XYZ startPoint = new XYZ(0, 0, 0);\n    XYZ endPoint = new XYZ(10, 5, 0);\n    Line wallCurve = Line.CreateBound(startPoint, endPoint);\n    double height = UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\n    Wall.Create(doc, wallCurve, wallType.Id, level.Id, height, 0, false, false);\n}"}
{"prompt":"Ajusta el tipo de una losa seleccionada a 'Concreto 13cm'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una losa\");\n\nif (pickedRef != null)\n{\n    Floor floorToChange = doc.GetElement(pickedRef) as Floor;\n    FloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name == \"Concreto 13cm\");\n    \n    if (floorToChange != null && newType != null)\n    {\n        floorToChange.ChangeTypeId(newType.Id);\n    }\n}"}
{"prompt":"Modifica el tipo de la ventana seleccionada al tipo 'Fija 124x60'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una ventana\");\nFamilySymbol newType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name == \"Fija 124x60\");\nif (pickedRef != null && newType != null)\n{\n    FamilyInstance window = doc.GetElement(pickedRef.ElementId) as FamilyInstance;\n    if (window != null)\n    {\n        window.Symbol = newType;\n    }\n}"}
{"prompt":"Sitúa una instancia de la familia 'Mesa de Oficina' en el centro de la habitación 'Despacho 102'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 102\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Mesa de Oficina\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);"}
{"prompt":"Aplica aislamiento térmico de 24mm a todas las tuberías de agua caliente.","completion":"PipeInsulationType insulationType = new FilteredElementCollector(doc).OfClass(typeof(PipeInsulationType)).FirstOrDefault() as PipeInsulationType;\nPipingSystemType hotWaterSystem = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).Cast<PipingSystemType>().FirstOrDefault(s => s.Name.Contains(\"Hot Water\") || s.Name.Contains(\"Agua Caliente\"));\n\nif (insulationType != null && hotWaterSystem != null)\n{\n    List<Pipe> pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast<Pipe>().Where(p => \n    {\n        Parameter systemParam = p.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM);\n        return systemParam != null && systemParam.HasValue && systemParam.AsElementId() == hotWaterSystem.Id;\n    }).ToList();\n    \n    foreach(Pipe p in pipes)\n    {\n        PipeInsulation.Create(doc, p.Id, insulationType.Id, UnitUtils.ConvertToInternalUnits(24, UnitTypeId.Millimeters));\n    }\n}"}
{"prompt":"Copia el nivel 6 con un desfase de 2m y llámalo 'Mezanine'.","completion":"string levelName = \"Nivel 6\";\nLevel levelToCopy = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (levelToCopy != null)\n{\n    double offset = UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, levelToCopy.Elevation + offset);\n    newLevel.Name = \"Mezanine\";\n}"}
{"prompt":"Actualiza el tipo de la ventana seleccionada al tipo 'Ventana Fija 121x60'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una ventana\");\nFamilySymbol newType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name == \"Ventana Fija 121x60\");\nif (pickedRef != null && newType != null)\n{\n    FamilyInstance window = doc.GetElement(pickedRef.ElementId) as FamilyInstance;\n    if (window != null)\n    {\n        window.Symbol = newType;\n    }\n}"}
{"prompt":"Duplica el tipo de muro 'Genérico - 146mm' y nómbralo 'Interior - 12cm Yeso'.","completion":"string originalName = \"Genérico - 146mm\";\nstring newName = \"Interior - 12cm Yeso\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif(originalType!=null)\n    originalType.Duplicate(newName);"}
{"prompt":"Build a new wall type 'Generic Wall 300mm' with a thickness of 30cm.","completion":"string newTypeName = \"Generic Wall 300mm\";\nWallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif (oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(newTypeName) as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(30, UnitTypeId.Centimeters));\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n}"}
{"prompt":"Vira un elemento seleccionado 88 grados sobre su eje Z.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un elemento para rotar\");\nElement elem = doc.GetElement(pickedRef.ElementId);\nLocationPoint lp = elem.Location as LocationPoint;\nLine axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\nElementTransformUtils.RotateElement(doc, elem.Id, axis, Math.PI \/ 88);"}
{"prompt":"Crea un nuevo tipo de texto de 5mm de color verde.","completion":"using (Transaction t = new Transaction(doc, \"Create Green Text Type\"))\n{\n    t.Start();\n    string newTypeName = \"5mm Verde\";\n    TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\n    if (defaultType != null)\n    {\n        TextNoteType newType = defaultType.Duplicate(newTypeName) as TextNoteType;\n        if (newType != null)\n        {\n            Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n            if (textSizeParam != null && !textSizeParam.IsReadOnly)\n            {\n                textSizeParam.Set(5 \/ 304.8);\n            }\n            Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n            if (lineColorParam != null && !lineColorParam.IsReadOnly)\n            {\n                 lineColorParam.Set(65280);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Build a new room on Level 1 at point (10, 10).","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nif (level1 != null)\n{\n    UV point = new UV(10, 10);\n    Room newRoom = doc.Create.NewRoom(level1, point);\n}"}
{"prompt":"Recarga el vínculo de Revit 'MEP'.","completion":"RevitLinkType linkType = new FilteredElementCollector(doc).OfClass(typeof(RevitLinkType)).Cast<RevitLinkType>().FirstOrDefault(lt => lt.Name == \"MEP\");\n\nif (linkType != null)\n{\n    linkType.Reload();\n}"}
{"prompt":"Insert an instance of the 'Office Desk' family in the center of the 'Office 99' room.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Office 99\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Office Desk\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);"}
{"prompt":"Clone the active view and name it 'Working Copy'.","completion":"View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    ElementId newViewId = activeView.Duplicate(ViewDuplicateOption.Duplicate);\n    View newView = doc.GetElement(newViewId) as View;\n    if (newView != null)\n    {\n        newView.Name = \"Working Copy\";\n    }\n}"}
{"prompt":"Create a 'Concrete-Rectangular 30x60' column at each grid intersection.","completion":"using (Transaction t = new Transaction(doc, \"Create Columns at Grids\"))\n{\n    t.Start();\n    FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(s => s.Name == \"Concrete-Rectangular 30x60\");\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderBy(l => l.Elevation).FirstOrDefault();\n    List<Grid> grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().ToList();\n    if (columnSymbol != null && level != null)\n    {\n        if (!columnSymbol.IsActive) columnSymbol.Activate();\n        for (int i = 0; i < grids.Count; i++)\n        {\n            for (int j = i + 1; j < grids.Count; j++)\n            {\n                IntersectionResultArray results;\n                if(grids[i].Curve.Intersect(grids[j].Curve, out results) == SetComparisonResult.Overlap)\n                {\n                    if (results != null && !results.IsEmpty)\n                    {\n                        foreach (IntersectionResult ir in results)\n                        {\n                            doc.Create.NewFamilyInstance(ir.XYZPoint, columnSymbol, level, StructuralType.Column);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Import a CAD file named 'BasePlan.dwg' into the current view.","completion":"string filePath = \"C:\/CAD\/BasePlan.dwg\";\nDWGImportOptions options = new DWGImportOptions();\noptions.Placement = ImportPlacement.Origin;\nElementId importId;\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    doc.Import(filePath, options, activeView, out importId);\n}"}
{"prompt":"Retrieve all instances of the Furniture category.","completion":"List<Element> furnitureInstances = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsNotElementType().ToList();"}
{"prompt":"Selecciona todos los muros del 'Nivel 2' y cambia su comentario a 'REVISAR AISLAMIENTO'.","completion":"Level level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 2\") as Level;\nList<Wall> wallsOnLevel2 = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Where(w => w.LevelId == level2.Id).Cast<Wall>().ToList();\nforeach(Wall wall in wallsOnLevel2)\n{\n    wall.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS).Set(\"REVISAR AISLAMIENTO\");\n}"}
{"prompt":"Generate a new Ribbon panel named 'My Tools' with a button.","completion":""}
{"prompt":"Clona el tipo de muro 'Genérico - 185mm' y nómbralo 'Interior - 15cm Yeso'.","completion":"string originalName = \"Genérico - 185mm\";\nstring newName = \"Interior - 15cm Yeso\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif (originalType != null)\n{\n    WallType newType = originalType.Duplicate(newName) as WallType;\n}"}
{"prompt":"Create a shaft opening that passes through from Level 1 to Level 3.","completion":"using (Transaction t = new Transaction(doc, \"Create Shaft Opening\"))\n{\n    t.Start();\n    Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 1\");\n    Level topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 3\");\n\n    if (bottomLevel != null && topLevel != null)\n    {\n        XYZ p1 = new XYZ(5 \/ 0.3048, 5 \/ 0.3048,0);\n        XYZ p2 = new XYZ(8 \/ 0.3048, 5 \/ 0.3048,0);\n        XYZ p3 = new XYZ(8 \/ 0.3048, 8 \/ 0.3048,0);\n        XYZ p4 = new XYZ(5 \/ 0.3048, 8 \/ 0.3048,0);\n        CurveArray profile = new CurveArray();\n        profile.Append(Line.CreateBound(p1,p2));\n        profile.Append(Line.CreateBound(p2,p3));\n        profile.Append(Line.CreateBound(p3,p4));\n        profile.Append(Line.CreateBound(p4,p1));\n        Opening shaft = doc.Create.NewOpening(bottomLevel, topLevel, profile);\n    }\n    t.Commit();\n}"}
{"prompt":"Copia la vista 'Losa 96' como una vista dependiente.","completion":"ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v => v.Name == \"Losa 96\") as ViewPlan;\n\nif (viewToDuplicate != null)\n{\n    ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n}"}
{"prompt":"Obtain the MEP space associated with the room 'Office 101'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Cast<Room>().FirstOrDefault(r => r.Name == \"Office 101\");\nList<Space> spaces = new List<Space>();\n\nif (room != null)\n{\n    spaces = new FilteredElementCollector(doc).OfClass(typeof(Space)).Cast<Space>().Where(s => s.Room != null && s.Room.Id == room.Id).ToList();\n}"}
{"prompt":"Adjust the type of all 'Fixed' windows to 'Casement'.","completion":"FamilySymbol newType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name.Contains(\"Casement\"));\nFamilySymbol oldType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name.Contains(\"Fixed\"));\n\nif (newType != null && oldType != null)\n{\n    List<FamilyInstance> windowsToChange = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().Where(fi => fi.Symbol.Id == oldType.Id).ToList();\n    foreach (FamilyInstance window in windowsToChange)\n    {\n        window.Symbol = newType;\n    }\n}"}
{"prompt":"Generate an MEP space for each room on Level 7","completion":"string levelName = \"Level 7\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    FilteredElementCollector roomCollector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WherePasses(new ElementLevelFilter(targetLevel.Id));\n    foreach (Room room in roomCollector.ToElements().Cast<Room>())\n    {\n        LocationPoint locPoint = room.Location as LocationPoint;\n        if (locPoint != null)\n        {\n            UV point = new UV(locPoint.Point.X, locPoint.Point.Y);\n            doc.Create.NewSpace(targetLevel, point);\n        }\n    }\n}"}
{"prompt":"Create a new room on Level 4 at point (5, 9).","completion":"string levelName = \"Level 4\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    UV point = new UV(5, 9);\n    Room newRoom = doc.Create.NewRoom(targetLevel, point);\n}"}
{"prompt":"Crea un nuevo nivel llamado 'Mezzanine' a 7.5 metros de elevación.","completion":"string levelName = \"Mezzanine\";\ndouble elevation = UnitUtils.ConvertToInternalUnits(7.5, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Sitúa una instancia de la familia 'Mesa de Oficina' en el centro de la habitación 'Despacho 104'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 104\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Mesa de Oficina\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);"}
{"prompt":"Define the 'Mark' parameter of all selected walls to 'W-EXT-4'.","completion":"using (Transaction t = new Transaction(doc, \"Set Wall Mark\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    ICollection<ElementId> selectedIds = localUidoc.Selection.GetElementIds();\n\n    if (selectedIds != null && selectedIds.Count > 4)\n    {\n        foreach(ElementId id in selectedIds)\n        {\n            Element elem = doc.GetElement(id);\n            if(elem is Wall)\n            {\n                Parameter p = elem.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n                if (p != null && !p.IsReadOnly)\n                {\n                    p.Set(\"W-EXT-01\");\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Actualiza la escala de la vista activa a 1:50.","completion":"View activeView = doc.ActiveView;\nif (activeView != null)\n{\n    activeView.Scale = 50;\n}"}
{"prompt":"Fetch the MEP space associated with the room 'Office 97'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Cast<Room>().FirstOrDefault(r => r.Name == \"Office 97\");\nList<Space> spaces = new List<Space>();\n\nif (room != null)\n{\n    spaces = new FilteredElementCollector(doc).OfClass(typeof(Space)).Cast<Space>().Where(s => s.Room != null && s.Room.Id == room.Id).ToList();\n}"}
{"prompt":"Clone level 6 with a 3m offset and name it 'Mezzanine'.","completion":"string levelName = \"Level 6\";\nLevel levelToCopy = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (levelToCopy != null)\n{\n    double offset = UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, levelToCopy.Elevation + offset);\n    newLevel.Name = \"Mezzanine\";\n}"}
{"prompt":"Crea un espacio MEP para cada habitación en el Nivel 1","completion":"string levelName = \"Nivel 1\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    FilteredElementCollector roomCollector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WherePasses(new ElementLevelFilter(targetLevel.Id));\n    foreach (Room room in roomCollector.ToElements().Cast<Room>())\n    {\n        LocationPoint locPoint = room.Location as LocationPoint;\n        if (locPoint != null)\n        {\n            UV point = new UV(locPoint.Point.X, locPoint.Point.Y);\n            doc.Create.NewSpace(targetLevel, point);\n        }\n    }\n}"}
{"prompt":"Create a text note with given text, location, and target element.","completion":"using (Transaction t = new Transaction(doc, \"Create Text Note\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference targetRef = localUidoc.Selection.PickObject(ObjectType.Element, \"Select an element to annotate\");\n    XYZ textLocation = localUidoc.Selection.PickPoint(\"Choose the text location\");\n\n    View activeView = doc.ActiveView;\n    ElementId defaultTypeId = doc.GetDefaultElementTypeId(ElementTypeGroup.TextNoteType);\n\n    if (targetRef != null && textLocation != null && activeView != null && defaultTypeId != ElementId.InvalidElementId)\n    {\n        TextNoteOptions opts = new TextNoteOptions(defaultTypeId);\n        TextNote note = TextNote.Create(doc, activeView.Id, textLocation, \"REVIEW CLASH\", opts);\n        if (note != null)\n        {\n            Leader leader = note.AddLeader(TextNoteLeaderTypes.TNLT_STRAIGHT_L);\n            leader.End = targetRef.GlobalPoint;\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Activate all family symbols loaded in the project.","completion":"List<FamilySymbol> symbols = new FilteredElementCollector(doc).OfClass(typeof(FamilySymbol)).Cast<FamilySymbol>().ToList();\nforeach (var sym in symbols)\n{\n    if (!sym.IsActive) \n    {\n        sym.Activate();\n    }\n}"}
{"prompt":"Create a curtain wall 6 meters wide and 4 meters high.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nWallType cwType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Kind == WallKind.Curtain);\n\nif (level != null && cwType != null)\n{\n    Line baseLine = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits(6, UnitTypeId.Meters), 0, 0));\n    Wall.Create(doc, baseLine, cwType.Id, level.Id, UnitUtils.ConvertToInternalUnits(4.0, UnitTypeId.Meters), 0.0, false, false);\n}"}
{"prompt":"Activa todos los FamilySymbol del proyecto.","completion":"List<FamilySymbol> symbols = new FilteredElementCollector(doc).OfClass(typeof(FamilySymbol)).Cast<FamilySymbol>().ToList();\nforeach (FamilySymbol sym in symbols)\n{\n    if (!sym.IsActive)\n    {\n        sym.Activate();\n    }\n}"}
{"prompt":"Construct a structural column at position X=10, Y=5.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (level != null && columnSymbol != null)\n{\n    if (!columnSymbol.IsActive) { columnSymbol.Activate(); }\n    XYZ point = new XYZ(10, 5, 0);\n    doc.Create.NewFamilyInstance(point, columnSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n}"}
{"prompt":"Create a curtain wall 6 meters wide and 4 meters high.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nWallType cwType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Kind == WallKind.Curtain);\n\nif (level != null && cwType != null)\n{\n    Line baseLine = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits(6, UnitTypeId.Meters), 0, 0));\n    Wall.Create(doc, baseLine, cwType.Id, level.Id, UnitUtils.ConvertToInternalUnits(4.0, UnitTypeId.Meters), 0.0, false, false);\n}"}
{"prompt":"Obtén los IDs de todas las vistas 3D que empiezan con 'Coord' para exportación.","completion":"List<ElementId> viewsToExport = new FilteredElementCollector(doc).OfClass(typeof(View3D)).Cast<View3D>().Where(v => v.Name.StartsWith(\"Coord\") && !v.IsTemplate).Select(v => v.Id).ToList();\n"}
{"prompt":"Create a 'Roof Terrace' level at 13m.","completion":"string levelName = \"Roof Terrace\";\ndouble elev = UnitUtils.ConvertToInternalUnits(13, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elev);\nnewLevel.Name = levelName;\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Crea un grupo de detalles con los elementos de detalle seleccionados.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds != null && selectedIds.Count > 0)\n{\n    List<ElementId> detailIds = new List<ElementId>();\n    foreach(ElementId id in selectedIds)\n    {\n        Element elem = doc.GetElement(id);\n        if (elem != null && elem.Category != null && elem.Category.CategoryType == CategoryType.Annotation)\n        {\n            detailIds.Add(id);\n        }\n    }\n\n    if (detailIds.Count > 0)\n    {\n        Group group = doc.Create.NewGroup(detailIds);\n        if (group != null)\n        {\n            group.Name = \"Detalle Típico 1\";\n        }\n    }\n}"}
{"prompt":"Build a group from the current selection and move it 10 meters to the right.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds != null && selectedIds.Count > 0)\n{\n    Group group = doc.Create.NewGroup(selectedIds);\n    if (group != null)\n    {\n        XYZ translation = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), 0, 0);\n        ElementTransformUtils.MoveElement(doc, group.Id, translation);\n    }\n}"}
{"prompt":"Create a new 5mm text type in green color.","completion":"using (Transaction t = new Transaction(doc, \"Create Green Text Type\"))\n{\n    t.Start();\n    string newTypeName = \"5mm Green\";\n    TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\n    TextNoteType newType = null;\n    if (defaultType != null)\n    {\n        newType = defaultType.Duplicate(newTypeName) as TextNoteType;\n        if (newType != null)\n        {\n            Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n            if (textSizeParam != null && !textSizeParam.IsReadOnly)\n            {\n                textSizeParam.Set(5 \/ 304.8);\n            }\n            Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n            if (lineColorParam != null && !lineColorParam.IsReadOnly)\n            {\n                 lineColorParam.Set(65280);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create a 30cm 'Double-Wall' type and then create a wall of that type.","completion":"using (Transaction t = new Transaction(doc, \"Create Wall Type and Wall\"))\n{\n    t.Start();\n    string newTypeName = \"Double-Wall\";\n    WallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n    WallType newWallType = null;\n    if (wallTypeToDuplicate != null)\n    {\n        newWallType = wallTypeToDuplicate.Duplicate(newTypeName) as WallType;\n        if (newWallType != null)\n        {\n            CompoundStructure cs = newWallType.GetCompoundStructure();\n            if (cs != null && cs.LayerCount > 0)\n            {\n                cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), 0.3 \/ 0.3048);\n                newWallType.SetCompoundStructure(cs);\n            }\n        }\n    }\n    if (newWallType != null)\n    {\n        Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n        Line wallCurve = Line.CreateBound(XYZ.Zero, new XYZ(10 \/ 0.3048, 0, 0));\n        double height = 3 \/ 0.3048;\n        if (level != null)\n        {\n            Wall.Create(doc, wallCurve, newWallType.Id, level.Id, height, 0, false, false);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Acota la longitud de un muro seleccionado por el usuario.","completion":"using (Transaction t = new Transaction(doc, \"Dimension Wall\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference wallRef = localUidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un muro para acotar\");\n    if(wallRef != null)\n    {\n        Wall wall = doc.GetElement(wallRef) as Wall;\n        if(wall != null)\n        {\n            LocationCurve locCurve = wall.Location as LocationCurve;\n            Curve wallCurve = locCurve != null ? locCurve.Curve : null;\n            if(wallCurve != null && wallCurve is Line)\n            {\n                Line wallLine = wallCurve as Line;\n                ReferenceArray refs = new ReferenceArray();\n                refs.Append(wallLine.GetEndPointReference(0));\n                refs.Append(wallLine.GetEndPointReference(1));\n                XYZ pt1 = wallLine.GetEndPoint(0).Add(XYZ.BasisZ * 2);\n                XYZ pt2 = wallLine.GetEndPoint(1).Add(XYZ.BasisZ * 2);\n                Line dimLine = Line.CreateBound(pt1, pt2);\n                doc.Create.NewDimension(doc.ActiveView, dimLine, refs);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Apply the 'X-Ray' visual style to the active 3D view.","completion":"View3D view3D = doc.ActiveView as View3D;\nif (view3D != null && !view3D.IsTemplate)\n{\n    view3D.DisplayStyle = DisplayStyle.Wireframe; \/\/ Simulates 'X-Ray' effect\n}"}
{"prompt":"Crea 8 ejes horizontales separados por 10 metros.","completion":"double separation = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\nfor(int i = 0; i < 8; i++)\n{\n    Line line = Line.CreateBound(new XYZ(0, i * separation, 0), new XYZ(50, i * separation, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Place a material tag on a wall face.","completion":"using (Transaction t = new Transaction(doc, \"Place Material Tag\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference faceRef = localUidoc.Selection.PickObject(ObjectType.Face, \"Select a face to tag\");\n    XYZ point = localUidoc.Selection.PickPoint(\"Select the tag location\");\n    View activeView = doc.ActiveView;\n\n    if (faceRef != null && point != null && activeView != null)\n    {\n        IndependentTag.Create(doc, activeView.Id, faceRef, true, TagMode.TM_ADDBY_MATERIAL, TagOrientation.Horizontal, point);\n    }\n    t.Commit();\n}"}
{"prompt":"Obtén todas las familias de puertas cargadas en el proyecto.","completion":"List<Family> doorFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.Id.IntegerValue == (int)BuiltInCategory.OST_Doors).ToList();"}
{"prompt":"Get the IDs of all 3D views starting with 'Coord' for export.","completion":"List<ElementId> viewsToExport = new FilteredElementCollector(doc).OfClass(typeof(View3D)).Cast<View3D>().Where(v => v.Name.StartsWith(\"Coord\") && !v.IsTemplate).Select(v => v.Id).ToList();\n"}
{"prompt":"Muestra un cuadro de diálogo con las opciones 'Sí', 'Plano de Fontanería' y 'Cancelar'.","completion":""}
{"prompt":"Select all walls on 'Level 2' and change their comment to 'REVIEW INSULATION'.","completion":"Level level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 2\") as Level;\nList<Wall> wallsOnLevel2 = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Where(w => w.LevelId == level2.Id).Cast<Wall>().ToList();\nforeach(Wall wall in wallsOnLevel2)\n{\n    wall.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS).Set(\"REVIEW INSULATION\");\n}"}
{"prompt":"Extrae todos los muros de un modelo vinculado que se cruzan con una caja de delimitación.","completion":"RevitLinkInstance linkInstance = new FilteredElementCollector(doc).OfClass(typeof(RevitLinkInstance)).FirstOrDefault() as RevitLinkInstance;\n\nif (linkInstance != null)\n{\n    Document linkDoc = linkInstance.GetLinkDocument();\n    if (linkDoc != null)\n    {\n        \/\/ Create a default 50ft x 50ft x 20ft bounding box as it's not specified in the prompt\n        BoundingBoxXYZ bbox = new BoundingBoxXYZ();\n        bbox.Min = new XYZ(0, 0, 0);\n        bbox.Max = new XYZ(50, 50, 20);\n        Outline outline = new Outline(bbox.Min, bbox.Max);\n        BoundingBoxIntersectsFilter filter = new BoundingBoxIntersectsFilter(outline);\n        List<Element> linkedWalls = new FilteredElementCollector(linkDoc).OfClass(typeof(Wall)).WherePasses(filter).ToList();\n    }\n}"}
{"prompt":"Ajusta todas las ventanas para que la altura del antepecho sea 1 metro.","completion":"using (Transaction t = new Transaction(doc, \"Set Sill Height\"))\n{\n    t.Start();\n    double sillHeight = 1 \/ 0.3048;\n    List<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\n    foreach(FamilyInstance window in windows)\n    {\n        Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n        if (sillHeightParam != null && !sillHeightParam.IsReadOnly)\n        {\n            sillHeightParam.Set(sillHeight);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Find the structural column type named \"304 x 445mm\" and place it at X=1, Y=12.9","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(s => s.Name == \"304 x 445mm\");\nif (level != null && columnSymbol != null)\n{\n    if (!columnSymbol.IsActive) { columnSymbol.Activate(); }\n    XYZ point = new XYZ(1, 12.9, 0);\n    doc.Create.NewFamilyInstance(point, columnSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n}"}
{"prompt":"Agrega un punto de referencia en las coordenadas (7,2,1) dentro del editor de familias.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(7,2,1));"}
{"prompt":"Obtén la longitud total de todos los muros del proyecto.","completion":"double totalLength = 0.0;\nList<Wall> walls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Cast<Wall>().ToList();\nforeach (Wall wall in walls)\n{\n    Parameter lengthParam = wall.get_Parameter(BuiltInParameter.CURVE_ELEM_LENGTH);\n    if (lengthParam != null && lengthParam.HasValue)\n    {\n        totalLength += lengthParam.AsDouble();\n    }\n}"}
{"prompt":"Create an assembly from the selected elements.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds != null && selectedIds.Count > 0)\n{\n    AssemblyInstance assemblyInstance = AssemblyInstance.Create(doc, selectedIds, new ElementId(BuiltInCategory.OST_Assemblies));\n    if (assemblyInstance != null)\n    {\n        assemblyInstance.Name = \"New Assembly\";\n    }\n}"}
{"prompt":"Adjust a glass panel in a curtain wall to a solid panel.","completion":"using (Transaction t = new Transaction(doc, \"Change Curtain Panel\"))\n{\n    t.Start();\n    Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Cast<Wall>().FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain);\n    FamilySymbol solidPanelType = new FilteredElementCollector(doc).OfClass(typeof(FamilySymbol)).Cast<FamilySymbol>().FirstOrDefault(fs => fs.Family.FamilyCategory.Id.IntegerValue == (int)BuiltInCategory.OST_CurtainWallPanels && fs.Name.Contains(\"Solid\"));\n\n    if (curtainWall != null && solidPanelType != null)\n    {\n        CurtainGrid grid = curtainWall.CurtainGrid;\n        if (grid != null)\n        {\n            ElementId panelIdToChange = grid.GetPanelIds().FirstOrDefault();\n            if (panelIdToChange != ElementId.InvalidElementId)\n            {\n                Panel panelToChange = doc.GetElement(panelIdToChange) as Panel;\n                if (panelToChange != null) panelToChange.ChangeTypeId(solidPanelType.Id);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea un conducto eléctrico de 1 pulgada de diámetro.","completion":"using (Transaction t = new Transaction(doc, \"Create Conduit\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    ElementId conduitTypeId = new FilteredElementCollector(doc).OfClass(typeof(ConduitType)).FirstElementId();\n\n    if (level != null && conduitTypeId != null && conduitTypeId != ElementId.InvalidElementId)\n    {\n        XYZ start = new XYZ(0, 0, 3 \/ 0.3048);\n        XYZ end = new XYZ(5 \/ 0.3048, 0, 3 \/ 0.3048);\n        Conduit conduit = Conduit.Create(doc, conduitTypeId, start, end, level.Id);\n\n        if (conduit != null)\n        {\n            Parameter diameterParam = conduit.get_Parameter(BuiltInParameter.RBS_CONDUIT_DIAMETER_PARAM);\n            if (diameterParam != null && !diameterParam.IsReadOnly)\n            {\n                diameterParam.Set(1.0 \/ 12.0);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea un nivel intermedio llamado 'Mezzanine' a mitad de camino entre el Nivel 1 y el Nivel 2.","completion":"string newLevelName = \"Mezzanine\";\nLevel lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Nivel 1\");\nLevel lvl2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Nivel 2\");\nif (lvl1 != null && lvl2 != null)\n{\ndouble midElevation = (lvl1.ProjectElevation + lvl2.ProjectElevation) \/ 2.0;\nLevel newLevel = Level.Create(doc, midElevation);\n    if(newLevel != null)\n    {\nnewLevel.Name = newLevelName;\n    }\n}"}
{"prompt":"Generate a new wall type 'Generic Wall 282mm' with a thickness of 30cm.","completion":"WallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif(oldWallType != null)\n{\n    WallType newWallType = null;\n    try { newWallType = oldWallType.Duplicate(\"Generic Wall 282mm\") as WallType; } catch {}\n    if(newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if(cs != null && cs.GetLayers().Any())\n        {\n            int coreLayerIndex = cs.GetFirstCoreLayerIndex();\n            if(coreLayerIndex != -1)\n            {\n                cs.SetLayerWidth(coreLayerIndex, UnitUtils.ConvertToInternalUnits(30, UnitTypeId.Centimeters));\n                newWallType.SetCompoundStructure(cs);\n            }\n        }\n    }\n}"}
{"prompt":"Inserta pilares en todos los cruces de la rejilla.","completion":"FamilySymbol colSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nList<Grid> grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().ToList();\n\nif (colSymbol != null && level != null && grids.Count >= 2)\n{\n    for (int i = 0; i < grids.Count; i++)\n    {\n        for (int j = i + 1; j < grids.Count; j++)\n        {\n            IntersectionResultArray results = null;\n            grids[i].Curve.Intersect(grids[j].Curve, out results);\n            if(results != null)\n            {\n                 foreach (IntersectionResult ir in results)\n                 {\n                     doc.Create.NewFamilyInstance(ir.XYZPoint, colSymbol, level, StructuralType.Column);\n                 }\n            }\n        }\n    }\n}"}
{"prompt":"Crea un techo por contorno en el 'Nivel de Cubierta'.","completion":"using (Transaction t = new Transaction(doc, \"Create Roof\"))\n{\n    t.Start();\n    Level roofLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel de Cubierta\");\n    RoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n    if(roofLevel != null && roofType != null)\n    {\n        CurveArray roofProfile = new CurveArray();\n        roofProfile.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(20,0,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(20,0,0), new XYZ(20,30,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(20,30,0), new XYZ(0,30,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(0,30,0), new XYZ(0,0,0)));\n        ModelCurveArray mapping = new ModelCurveArray();\n        doc.Create.NewFootPrintRoof(roofProfile, roofLevel, roofType, out mapping);\n    }\n    t.Commit();\n}"}
{"prompt":"Ajusta el tipo de una losa seleccionada a 'Concreto 15cm'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una losa\");\n\nif (pickedRef != null)\n{\n    Floor floorToChange = doc.GetElement(pickedRef) as Floor;\n    FloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name == \"Concreto 15cm\");\n    \n    if (floorToChange != null && newType != null)\n    {\n        floorToChange.ChangeTypeId(newType.Id);\n    }\n}"}
{"prompt":"Generate a structural beam between (0,0,3) and (5,0,3) on Level 2.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 2\") as Level;\nFamilySymbol beamType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (beamType != null && level != null)\n{\n    if(!beamType.IsActive) beamType.Activate();\n    XYZ start = new XYZ(0, 0, 3);\n    XYZ end = new XYZ(5, 0, 3);\n    if (start.IsAlmostEqualTo(end)) return;\n    Line beamCurve = Line.CreateBound(start, end);\n    doc.Create.NewFamilyInstance(beamCurve, beamType, level, Autodesk.Revit.DB.Structure.StructuralType.Beam);\n}"}
{"prompt":"Pin the selected element so it cannot be moved.","completion":"UIDocument uidoc = new UIDocument(doc);\nElementId selectedId = uidoc.Selection.GetElementIds().FirstOrDefault();\n\nif (selectedId != ElementId.InvalidElementId)\n{\n    Element elementToPin = doc.GetElement(selectedId);\n    if (elementToPin != null)\n    {\n        elementToPin.Pinned = true;\n    }\n}"}
{"prompt":"Incorpora un punto de referencia en las coordenadas (5,2,5) dentro del editor de familias.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(5,2,5));"}
{"prompt":"Crea un muro del tipo específico 'Exterior - Ladrillo sobre Bloque' de 10 metros.","completion":"string wallTypeName = \"Exterior - Ladrillo sobre Bloque\";\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Name == wallTypeName);\n\nif (level != null && wallType != null)\n{\n    Line line = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), 0, 0));\n    \/\/ Use a default height of 10ft as it's not specified in the prompt\n    double height = 10.0;\n    Wall.Create(doc, line, wallType.Id, level.Id, height, 0.0, false, false);\n}"}
{"prompt":"Find all walls taller than 4 meters.","completion":"double heightThreshold = UnitUtils.ConvertToInternalUnits(4, UnitTypeId.Meters);\nParameterValueProvider pvp = new ParameterValueProvider(new ElementId(BuiltInParameter.WALL_USER_HEIGHT_PARAM));\nFilterRule rule = new FilterDoubleRule(pvp, new FilterNumericGreater(), heightThreshold, 1e-6);\nList<Element> tallWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(new ElementParameterFilter(rule)).ToList();"}
{"prompt":"Duplica el nivel 6 con un desfase de 7m y llámalo 'Mezanine'.","completion":"string levelName = \"Nivel 6\";\nLevel levelToCopy = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (levelToCopy != null)\n{\n    double offset = UnitUtils.ConvertToInternalUnits(7, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, levelToCopy.Elevation + offset);\n    newLevel.Name = \"Mezanine\";\n}"}
{"prompt":"Build a new wall type 'Generic Wall 299mm' with a thickness of 27cm.","completion":"string newTypeName = \"Generic Wall 299mm\";\nWallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif (oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(newTypeName) as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(27, UnitTypeId.Centimeters));\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n}"}
{"prompt":"Exporta cada tabla de planificación a un archivo CSV individual.","completion":"string exportPath = \"C:\/RevitExports\/\";\nList<ViewSchedule> schedules = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().Where(vs => !vs.IsTemplate).ToList();\nViewScheduleExportOptions options = new ViewScheduleExportOptions();\noptions.FieldDelimiter = \",\";\nforeach(ViewSchedule schedule in schedules)\n{\n    schedule.Export(exportPath, schedule.Name + \".csv\", options);\n}"}
{"prompt":"Ubica una instancia de la familia 'Puerta Sencilla' en el centro de la habitación 'Despacho 106'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 106\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Puerta Sencilla\") as FamilySymbol;\nif(furnitureSymbol != null && !furnitureSymbol.IsActive) furnitureSymbol.Activate();\nif(room != null)\n{\n    LocationPoint roomCenter = room.Location as LocationPoint;\n    if(roomCenter != null && furnitureSymbol != null && room.Level != null)\n    {\n        doc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Move a selected element to position (9,8).","completion":"ICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds.Any())\n{\n    foreach (ElementId id in selectedIds)\n    {\n        Element elem = doc.GetElement(id);\n        if (elem != null)\n        {\n            LocationPoint lp = elem.Location as LocationPoint;\n            if (lp != null)\n            {\n                XYZ newPosition = new XYZ(9, 8, lp.Point.Z);\n                lp.Point = newPosition;\n            }\n        }\n    }\n}"}
{"prompt":"Build a new A1 sheet using the first available title block.","completion":"FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (titleBlock != null)\n{\n    ViewSheet sheet = ViewSheet.Create(doc, titleBlock.Id);\n    if (sheet != null)\n    {\n        sheet.Name = \"A1 - New Sheet\";\n        sheet.SheetNumber = \"A1\";\n    }\n}"}
{"prompt":"Agrega un codo de 90 grados entre dos tuberías.","completion":"using (Transaction t = new Transaction(doc, \"Add Elbow\"))\n{\n    t.Start();\n    List<Pipe> pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast<Pipe>().Where(p => p.ConnectorManager != null && p.ConnectorManager.UnusedConnectors.Size > 0).Take(2).ToList();\n\n    if (pipes.Count >= 2)\n    {\n        Connector c1 = pipes[0].ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n        Connector c2 = pipes[1].ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n        \n        if (c1 != null && c2 != null)\n        {\n            doc.Create.NewElbowFitting(c1, c2);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Unjoin the geometry of two given elements.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference ref1 = uidoc.Selection.PickObject(ObjectType.Element, \"Select the first element\");\nReference ref2 = uidoc.Selection.PickObject(ObjectType.Element, \"Select the second element\");\n\nif (ref1 != null && ref2 != null)\n{\n    Element e1 = doc.GetElement(ref1.ElementId);\n    Element e2 = doc.GetElement(ref2.ElementId);\n    if (e1 != null && e2 != null)\n    {\n        JoinGeometryUtils.UnjoinGeometry(doc, e1, e2);\n    }\n}"}
{"prompt":"Set the sill height of all windows to 1 meter.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Find all section views in the project.","completion":"List<ViewSection> sectionViews = new FilteredElementCollector(doc).OfClass(typeof(ViewSection)).Cast<ViewSection>().ToList();"}
{"prompt":"Crea un nuevo tipo de muro de 21cm llamado 'Muro Estructural 22cm'.","completion":"string newTypeName = \"Muro Estructural 22cm\";\nWallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif (oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(newTypeName) as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(21, UnitTypeId.Centimeters));\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n}"}
{"prompt":"Duplicate the 'Level 2' plan view and make it a view template.","completion":"using (Transaction t = new Transaction(doc, \"Create View Template\"))\n{\n    t.Start();\n    ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().FirstOrDefault(v => v.Name == \"Level 2\");\n    string templateName = \"Level 2 Template\";\n\n    if (viewToDuplicate != null)\n    {\n        ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n        View newView = doc.GetElement(newViewId) as View;\n        if (newView != null)\n        {\n           \/\/ Direct conversion to a template may not be available in older APIs.\n           \/\/ A common workaround is to set the IsTemplate property if available and writable, \n           \/\/ which is not the case here. This is left as a comment for conceptual understanding.\n           \/\/ newView.IsTemplate = true;\n            newView.Name = templateName;\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Generate a structural beam between (8,1,2) and (1,1,3) on Level 1","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nFamilySymbol beamType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (beamType != null && level != null)\n{\n    if(!beamType.IsActive) beamType.Activate();\n    XYZ start = new XYZ(8, 1, 2);\n    XYZ end = new XYZ(1, 1, 3);\n    if (start.IsAlmostEqualTo(end)) return;\n    Line beamCurve = Line.CreateBound(start, end);\n    doc.Create.NewFamilyInstance(beamCurve, beamType, level, Autodesk.Revit.DB.Structure.StructuralType.Beam);\n}"}
{"prompt":"Reproduce la vista activa y ponle el nombre 'Vista Duplicada'.","completion":"View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    ElementId newViewId = activeView.Duplicate(ViewDuplicateOption.Duplicate);\n    View newView = doc.GetElement(newViewId) as View;\n    if (newView != null)\n    {\n        newView.Name = \"Vista Duplicada\";\n    }\n}"}
{"prompt":"Crea un nuevo tipo de texto de 3mm de color azul.","completion":"using (Transaction t = new Transaction(doc, \"Create Text Type\"))\n{\n    t.Start();\n    string newTypeName = \"3mm Azul\";\n    TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\n\n    if (defaultType != null)\n    {\n        TextNoteType newType = defaultType.Duplicate(newTypeName) as TextNoteType;\n        if (newType != null)\n        {\n            Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n            if (textSizeParam != null && !textSizeParam.IsReadOnly) textSizeParam.Set(3 \/ 304.8);\n            \n            Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n            if (lineColorParam != null && !lineColorParam.IsReadOnly) lineColorParam.Set(255);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Inserta una instancia de la familia 'Mesa de Oficina' en el centro de la habitación 'Despacho 100'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 100\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Mesa de Oficina\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);"}
{"prompt":"Duplica el tipo de muro 'Basic Wall' y renómbralo.","completion":"string typeToDuplicate = \"Basic Wall\";\nstring newTypeName = \"Basic Wall Copy\";\nWallType wt = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(w=>w.Name==typeToDuplicate);\n\nif (wt != null)\n{\n    WallType newWt = wt.Duplicate(newTypeName) as WallType;\n}"}
{"prompt":"Find a wall by searching for the value 'W-01' in its Mark parameter.","completion":"string markValue = \"W-01\";\nElementId markParamId = new ElementId(BuiltInParameter.ALL_MODEL_MARK);\nParameterValueProvider pvp = new ParameterValueProvider(markParamId);\nFilterStringRuleEvaluator evaluator = new FilterStringEquals();\nFilterRule rule = new FilterStringRule(pvp, evaluator, markValue);\nElementFilter filter = new ElementParameterFilter(rule);\nWall wall = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().WherePasses(filter).FirstOrDefault() as Wall;"}
{"prompt":"Get the coordinates of the project base point and the survey point.","completion":"BasePoint surveyPoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(p => p.IsShared);\nBasePoint projectBasePoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(p => !p.IsShared);\n\nXYZ surveyCoords = null;\nif (surveyPoint != null) surveyCoords = surveyPoint.get_BoundingBox(null).Min;\n\nXYZ projectCoords = null;\nif (projectBasePoint != null) projectCoords = projectBasePoint.get_BoundingBox(null).Min;"}
{"prompt":"Crea una nueva hoja A3 y colócale una leyenda.","completion":"using (Transaction t = new Transaction(doc, \"Create Sheet with Legend\"))\n{\n    t.Start();\n    FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(tb => tb.Name.Contains(\"A3\"));\n    View legendView = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().FirstOrDefault(v => v.ViewType == ViewType.Legend);\n\n    if (titleBlock != null && legendView != null)\n    {\n        ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n        if (newSheet != null)\n        {\n            BoundingBoxUV sheetBox = newSheet.Outline;\n            UV centerUv = (sheetBox.Min + sheetBox.Max) \/ 2.0;\n            XYZ centerPoint = new XYZ(centerUv.U, centerUv.V, 0);\n            Viewport.Create(doc, newSheet.Id, legendView.Id, centerPoint);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea un techo por extrusión con un perfil en arco.","completion":"using (Transaction t = new Transaction(doc, \"Create Extrusion Roof\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    RoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n\n    if (level != null && roofType != null && doc.ActiveView != null)\n    {\n        CurveArray profile = new CurveArray();\n        profile.Append(Arc.Create(new XYZ(-10,0,0), new XYZ(10,0,0), new XYZ(0,5,0)));\n        Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisY, XYZ.Zero);\n        ReferencePlane refPlane = doc.Create.NewReferencePlane(plane.Origin, plane.Origin + XYZ.BasisX, plane.Normal, doc.ActiveView);\n        if(refPlane != null)\n            doc.Create.NewExtrusionRoof(profile, refPlane, level, roofType, 0, 20);\n    }\n    t.Commit();\n}"}
{"prompt":"Inserta un punto de referencia en las coordenadas (1,6,3) dentro del editor de familias.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(1,6,3));"}
{"prompt":"Obtén el espacio MEP asociado a la habitación 'Oficina 101'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Cast<Room>().FirstOrDefault(r => r.Name == \"Oficina 101\");\nList<Space> spaces = new List<Space>();\n\nif (room != null)\n{\n    spaces = new FilteredElementCollector(doc).OfClass(typeof(Space)).Cast<Space>().Where(s => s.Room != null && s.Room.Id == room.Id).ToList();\n}"}
{"prompt":"Create a 'Generic - 200mm' wall on 'Level 1' from (0,0) to (10,5).","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == \"Generic - 200mm\") as WallType;\nXYZ startPoint = new XYZ(0, 0, 0);\nXYZ endPoint = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0);\nLine wallCurve = Line.CreateBound(startPoint, endPoint);\ndouble height = UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\nif (level != null && wallType != null)\n{\n    Wall.Create(doc, wallCurve, wallType.Id, level.Id, height, 0, false, false);\n}"}
{"prompt":"Añade un punto de referencia en las coordenadas (1,4,4) dentro del editor de familias.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(1,4,4));"}
{"prompt":"Recupera todos los muros de un modelo vinculado que se cruzan con una caja de delimitación.","completion":"RevitLinkInstance linkInstance = new FilteredElementCollector(doc).OfClass(typeof(RevitLinkInstance)).FirstOrDefault() as RevitLinkInstance;\n\nif (linkInstance != null)\n{\n    Document linkDoc = linkInstance.GetLinkDocument();\n    if (linkDoc != null)\n    {\n        \/\/ Create a default 50ft x 50ft x 20ft bounding box as it's not specified in the prompt\n        BoundingBoxXYZ bbox = new BoundingBoxXYZ();\n        bbox.Min = new XYZ(0, 0, 0);\n        bbox.Max = new XYZ(50, 50, 20);\n        Outline outline = new Outline(bbox.Min, bbox.Max);\n        BoundingBoxIntersectsFilter filter = new BoundingBoxIntersectsFilter(outline);\n        List<Element> linkedWalls = new FilteredElementCollector(linkDoc).OfClass(typeof(Wall)).WherePasses(filter).ToList();\n    }\n}"}
{"prompt":"Coloca una cota de elevación en una cara y un punto de vista dados.","completion":"using (Transaction t = new Transaction(doc, \"Place Spot Elevation\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference faceRef = localUidoc.Selection.PickObject(ObjectType.Face, \"Selecciona la cara superior del suelo\");\n\n    View activeView = doc.ActiveView;\n\n    if (faceRef != null && activeView != null)\n    {\n        XYZ pointOnFace = faceRef.GlobalPoint;\n        XYZ leaderEnd = pointOnFace + new XYZ(1 \/ 0.3048, 1 \/ 0.3048, 0);\n        doc.Create.NewSpotElevation(activeView, faceRef, pointOnFace, pointOnFace, leaderEnd, pointOnFace, true);\n    }\n    t.Commit();\n}"}
{"prompt":"Create 4 vertical grids spaced 10 meters apart.","completion":"double separation = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\nfor(int i=0; i<4; i++)\n{\n    Line line = Line.CreateBound(new XYZ(i * separation, 0, 0), new XYZ(i * separation, 40, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Pinta la cara interior de los muros exteriores con 'Pintura Blanca'.","completion":"using(Transaction t = new Transaction(doc, \"Paint Walls\"))\n{\n    t.Start();\n    Material paintMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m => m.Name == \"Pintura Blanca\");\n    var exteriorWalls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Cast<Wall>().Where(w => w.WallType.Function == WallFunction.Exterior).ToList();\n    if(paintMaterial != null)\n    {\n        foreach (Wall w in exteriorWalls)\n        {\n            IList<Reference> interiorFaceRefs = HostObjectUtils.GetSideFaces(w, ShellLayerType.Interior);\n            if(interiorFaceRefs.Count > 0)\n            {\n                Face interiorFace = w.GetGeometryObjectFromReference(interiorFaceRefs.First()) as Face;\n                if (interiorFace != null)\n                {\n                    doc.Paint(w.Id, interiorFace, paintMaterial.Id);\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Insert a 6-meter truss between two points.","completion":"using (Transaction t = new Transaction(doc, \"Create Truss\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    FamilySymbol trussSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Family.Name.Contains(\"Truss\"));\n\n    if (level != null && trussSymbol != null)\n    {\n        if (!trussSymbol.IsActive) { trussSymbol.Activate(); }\n        Line trussLine = Line.CreateBound(new XYZ(0, 10, 0), new XYZ(6 \/ 0.3048, 10, 0));\n        doc.Create.NewFamilyInstance(trussLine, trussSymbol, level, StructuralType.NonStructural);\n    }\n    t.Commit();\n}"}
{"prompt":"Inserta un nivel llamado 'Nivel Azotea' a 15.2 metros.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(15.2, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Nivel Azotea\";\n}"}
{"prompt":"Aplica la plantilla de vista 'Plantilla Arquitectónica' a la vista activa.","completion":"View activeView = doc.ActiveView;\nView viewTemplate = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().FirstOrDefault(v => v.IsTemplate && v.Name == \"Plantilla Arquitectónica\");\n\nif (activeView != null && viewTemplate != null)\n{\n    activeView.ViewTemplateId = viewTemplate.Id;\n}"}
{"prompt":"Place a piece of furniture at coordinates (2,3).","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (level != null && furnitureSymbol != null)\n{\n    if (!furnitureSymbol.IsActive) { furnitureSymbol.Activate(); }\n    XYZ point = new XYZ(2, 3, 0);\n    doc.Create.NewFamilyInstance(point, furnitureSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n}"}
{"prompt":"Sitúa una instancia de la familia 'Ventana Fija 115x60' en el centro de la habitación 'Despacho 97'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 115\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Ventana Fija 97x60\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);"}
{"prompt":"Crea una escalera entre Nivel 1 y Nivel 2.","completion":"Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel 1\");\nLevel topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel 2\");\n\nif (bottomLevel != null && topLevel != null)\n{\n    \/\/ TODO: Stairs.Create(doc, bottomLevel.Id, topLevel.Id); is not a valid Revit API call.\n    \/\/ Stairs creation requires using the StairsEditScope class.\n}"}
{"prompt":"Modifica el tipo de una losa seleccionada a 'Concreto 14cm'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una losa\");\n\nif (pickedRef != null)\n{\n    Floor floorToChange = doc.GetElement(pickedRef) as Floor;\n    FloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name == \"Concreto 14cm\");\n    \n    if (floorToChange != null && newType != null)\n    {\n        floorToChange.ChangeTypeId(newType.Id);\n    }\n}"}
{"prompt":"Create a rectangular opening in a floor.","completion":"using (Transaction t = new Transaction(doc, \"Create Opening\"))\n{\n    t.Start();\n    Floor floor = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault() as Floor;\n\n    if (floor != null)\n    {\n        XYZ p1 = new XYZ(1 \/ 0.3048, 1 \/ 0.3048, 0);\n        XYZ p2 = new XYZ(3 \/ 0.3048, 1 \/ 0.3048, 0);\n        XYZ p3 = new XYZ(3 \/ 0.3048, 3 \/ 0.3048, 0);\n        XYZ p4 = new XYZ(1 \/ 0.3048, 3 \/ 0.3048, 0);\n        CurveArray profile = new CurveArray();\n        profile.Append(Line.CreateBound(p1, p2));\n        profile.Append(Line.CreateBound(p2, p3));\n        profile.Append(Line.CreateBound(p3, p4));\n        profile.Append(Line.CreateBound(p4, p1));\n        doc.Create.NewOpening(floor, profile, true);\n    }\n    t.Commit();\n}"}
{"prompt":"Generate a grid of 5 horizontal and 5 vertical grids, spaced 6 meters apart.","completion":"double spacing = UnitUtils.ConvertToInternalUnits(6, UnitTypeId.Meters);\nint count = 5;\nfor (int i = 0; i < count; i++)\n{\n    Line line = Line.CreateBound(new XYZ(0, i * spacing, 0), new XYZ((count - 1) * spacing, i * spacing, 0));\n    Grid.Create(doc, line);\n}\nfor (int i = 0; i < count; i++)\n{\n    Line line = Line.CreateBound(new XYZ(i * spacing, 0, 0), new XYZ(i * spacing, (count - 1) * spacing, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Clone the 'Generic - 145mm' wall type and name it 'Interior - 12cm Plaster'.","completion":"string originalName = \"Generic - 145mm\";\nstring newName = \"Interior - 12cm Plaster\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif(originalType!=null)\n    originalType.Duplicate(newName);"}
{"prompt":"Replicate level 4 with a 2m offset and name it 'Mezzanine'.","completion":"string levelName = \"Level 4\";\nLevel levelToCopy = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (levelToCopy != null)\n{\n    double offset = UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, levelToCopy.Elevation + offset);\n    newLevel.Name = \"Mezzanine\";\n}"}
{"prompt":"Extrae la longitud total de todos los muros del proyecto.","completion":"double totalLength = 0.0;\nList<Wall> walls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Cast<Wall>().ToList();\nforeach (Wall wall in walls)\n{\n    Parameter lengthParam = wall.get_Parameter(BuiltInParameter.CURVE_ELEM_LENGTH);\n    if (lengthParam != null && lengthParam.HasValue)\n    {\n        totalLength += lengthParam.AsDouble();\n    }\n}"}
{"prompt":"Copia el tipo de muro 'Genérico - 113mm' y nómbralo 'Interior - 15cm Yeso'.","completion":"string originalName = \"Genérico - 113mm\";\nstring newName = \"Interior - 15cm Yeso\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif(originalType!=null)\n    originalType.Duplicate(newName);"}
{"prompt":"Given a wall, find all pipes passing through it.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference wallRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a wall\");\n\nList<ElementId> intersectingPipes = new List<ElementId>();\nif (wallRef != null)\n{\n    Element wall = doc.GetElement(wallRef);\n    if (wall != null)\n    {\n        ElementIntersectsElementFilter filter = new ElementIntersectsElementFilter(wall);\n        intersectingPipes = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_PipeCurves).WherePasses(filter).ToElementIds().ToList();\n    }\n}\n"}
{"prompt":"Replicate level 1 with a 2m offset and name it 'Mezzanine'.","completion":"string levelName = \"Mezzanine\";\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\n\nif (level1 != null)\n{\n    double newElevation = level1.ProjectElevation + UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, newElevation);\n    if (newLevel != null)\n    {\n        newLevel.Name = levelName;\n    }\n}"}
{"prompt":"Replicate level 1 with a 5m offset and name it 'Mezzanine'.","completion":"string levelName = \"Mezzanine\";\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\n\nif (level1 != null)\n{\n    double newElevation = level1.ProjectElevation + UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, newElevation);\n    if (newLevel != null)\n    {\n        newLevel.Name = levelName;\n    }\n}"}
{"prompt":"Suma el área total de todas las habitaciones.","completion":"double totalArea = 0.0;\nList<Room> rooms = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>().ToList();\nforeach (Room room in rooms)\n{\n    totalArea += room.Area;\n}"}
{"prompt":"Inserta un punto de referencia en las coordenadas (4,4,6) dentro del editor de familias.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(4,4,6));"}
{"prompt":"Obtén los IDs de todas las vistas 3D que empiezan con 'Coord' para exportación.","completion":"List<ElementId> viewsToExport = new FilteredElementCollector(doc).OfClass(typeof(View3D)).Cast<View3D>().Where(v => v.Name.StartsWith(\"Coord\") && !v.IsTemplate).Select(v => v.Id).ToList();\n"}
{"prompt":"Sincroniza el modelo local con el central, añadiendo el comentario 'Actualización de diseño'.","completion":"if (doc.IsWorkshared)\n{\n    TransactWithCentralOptions tco = new TransactWithCentralOptions();\n    SynchronizeWithCentralOptions swcOpts = new SynchronizeWithCentralOptions();\n    swcOpts.Comment = \"Actualización de diseño\";\n    swcOpts.SaveLocalAfter = true;\n    doc.SynchronizeWithCentral(tco, swcOpts);\n}"}
{"prompt":"Define the sill height of all windows to 898mm.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits(898, UnitTypeId.Millimeters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Define the 'Comments' parameter for all doors on Level 1 to 'Fire Rating - 93 min'.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\n\nif (level1 != null)\n{\n    List<FamilyInstance> doorsOnLevel1 = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsNotElementType().Cast<FamilyInstance>().Where(fi => fi.LevelId == level1.Id).ToList();\n    foreach(FamilyInstance door in doorsOnLevel1)\n    {\n        Parameter commentsParam = door.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n        if (commentsParam != null && !commentsParam.IsReadOnly) commentsParam.Set(\"Fire Rating - 93 min\");\n    }\n}"}
{"prompt":"Encuentra todas las puertas del Nivel 2 que sean de la familia 'M_Chair-Breuer'.","completion":"Level level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel 2\");\nList<Element> doors = new List<Element>();\n\nif (level2 != null)\n{\n    ElementCategoryFilter catFilter = new ElementCategoryFilter(BuiltInCategory.OST_Doors);\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level2.Id);\n    FilterableValueProvider provider = new ParameterValueProvider(new ElementId(BuiltInParameter.ELEM_FAMILY_PARAM));\n    FilterStringRuleEvaluator evaluator = new FilterStringEquals();\n    FilterRule famNameRule = new FilterStringRule(provider, evaluator, \"M_Chair-Breuer\");\n    ElementParameterFilter famFilter = new ElementParameterFilter(famNameRule);\n    LogicalAndFilter andFilter = new LogicalAndFilter(new List<ElementFilter> { catFilter, levelFilter, famFilter });\n    doors = new FilteredElementCollector(doc).WherePasses(andFilter).ToList();\n}"}
{"prompt":"Mueve un muro 5 metros a la derecha.","completion":"Wall wall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\n\nif (wall != null)\n{\n    XYZ translation = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters),0,0);\n    ElementTransformUtils.MoveElement(doc, wall.Id, translation);\n}"}
{"prompt":"Construct a new level 'Level 5' at an elevation of 17 meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(17, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Level 5\";\n}"}
{"prompt":"Create a new level 'Level 7' at an elevation of 15 meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(15, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Level 7\";\n}"}
{"prompt":"Construct a new 3mm text type in blue color.","completion":"using (Transaction t = new Transaction(doc, \"Create Text Type\"))\n{\n    t.Start();\n    string newTypeName = \"3mm Blue\";\n    TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\n\n    if (defaultType != null)\n    {\n        TextNoteType newType = defaultType.Duplicate(newTypeName) as TextNoteType;\n        if (newType != null)\n        {\n            Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n            if (textSizeParam != null && !textSizeParam.IsReadOnly) textSizeParam.Set(3 \/ 304.8);\n            \n            Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n            if (lineColorParam != null && !lineColorParam.IsReadOnly) lineColorParam.Set(255);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Importa topografía georreferenciada desde un archivo LandXML.","completion":"\/\/ The Revit API in the provided context does not support direct LandXML import.\n\/\/ This functionality typically requires additional add-ins like the Site Designer, which are not available here.\n\/\/ As a placeholder, this code will show how to create a simple topography surface from a list of points.\nusing(Transaction t = new Transaction(doc, \"Create Topography\"))\n{\n    t.Start();\n    IList<XYZ> points = new List<XYZ>();\n    points.Add(new XYZ(0, 0, 0));\n    points.Add(new XYZ(50, 0, 5));\n    points.Add(new XYZ(0, 50, 10));\n    TopographySurface.Create(doc, points);\n    t.Commit();\n}"}
{"prompt":"Incorpora un punto de referencia en las coordenadas (1,5,2) dentro del editor de familias.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(1,5,2));"}
{"prompt":"Modela un plafón a 2.8 metros de altura en el Nivel 1.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\nCeilingType ceilingType = new FilteredElementCollector(doc).OfClass(typeof(CeilingType)).FirstOrDefault() as CeilingType;\nif (ceilingType != null && level != null)\n{\n    CurveLoop profile = new CurveLoop();\n    profile.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(10,0,0)));\n    profile.Append(Line.CreateBound(new XYZ(10,0,0), new XYZ(10,10,0)));\n    profile.Append(Line.CreateBound(new XYZ(10,10,0), new XYZ(0,10,0)));\n    profile.Append(Line.CreateBound(new XYZ(0,10,0), new XYZ(0,0,0)));\n    Ceiling ceiling = Ceiling.Create(doc, new List<CurveLoop>{profile}, ceilingType.Id, level.Id);\n    if (ceiling != null)\n    {\n        Parameter heightParam = ceiling.get_Parameter(BuiltInParameter.CEILING_HEIGHTABOVELEVEL_PARAM);\n        if (heightParam != null && !heightParam.IsReadOnly) heightParam.Set(UnitUtils.ConvertToInternalUnits(2.8, UnitTypeId.Meters));\n    }\n}"}
{"prompt":"Duplica el nivel 1 con un desfase de 8m y llámalo 'Mezanine'.","completion":"string levelName = \"Mezanine\";\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\n\nif (level1 != null)\n{\n    double newElevation = level1.ProjectElevation + UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, newElevation);\n    if (newLevel != null)\n    {\n        newLevel.Name = levelName;\n    }\n}"}
{"prompt":"Agrega un punto de referencia en las coordenadas (1,7,1) dentro del editor de familias.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(1,7,1));"}
{"prompt":"Put an instance of the 'Office Desk' family in the center of the 'Office 97' room.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Office 97\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Office Desk\") as FamilySymbol;\nif(furnitureSymbol != null && !furnitureSymbol.IsActive) furnitureSymbol.Activate();\nif(room != null)\n{\n    LocationPoint roomCenter = room.Location as LocationPoint;\n    if(roomCenter != null && furnitureSymbol != null && room.Level != null)\n    {\n        doc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Create an MEP space for each room on Level 1","completion":"string levelName = \"Level 1\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    FilteredElementCollector roomCollector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WherePasses(new ElementLevelFilter(targetLevel.Id));\n    foreach (Room room in roomCollector.ToElements().Cast<Room>())\n    {\n        LocationPoint locPoint = room.Location as LocationPoint;\n        if (locPoint != null)\n        {\n            UV point = new UV(locPoint.Point.X, locPoint.Point.Y);\n            doc.Create.NewSpace(targetLevel, point);\n        }\n    }\n}"}
{"prompt":"Create a global length parameter named 'CorridorWidth' with a value of 1.2m.","completion":"string paramName = \"CorridorWidth\";\nGlobalParameter gp = GlobalParameter.Create(doc, paramName, SpecTypeId.Length);\n\nif (gp != null)\n{\n    gp.SetValue(new DoubleParameterValue(UnitUtils.ConvertToInternalUnits(1.2, UnitTypeId.Meters)));\n}"}
{"prompt":"Inserta una instancia de la familia 'Mesa de Oficina' en el centro de la habitación 'Despacho 99'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 99\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Mesa de Oficina\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);"}
{"prompt":"Modify the type of a selected floor to 'Concrete 15cm'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a floor\");\n\nif (pickedRef != null)\n{\n    Floor floorToChange = doc.GetElement(pickedRef) as Floor;\n    FloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name == \"Concrete 15cm\");\n    \n    if (floorToChange != null && newType != null)\n    {\n        floorToChange.ChangeTypeId(newType.Id);\n    }\n}"}
{"prompt":"Create a section view using a 10x10x3 meter box.","completion":"ViewFamilyType sectionVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(vft => vft.ViewFamily == ViewFamily.Section);\n\nif (sectionVFT != null)\n{\n    BoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\n    sectionBox.Min = new XYZ(0,0,0);\n    sectionBox.Max = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters));\n    Transform transform = Transform.Identity;\n    sectionBox.Transform = transform;\n    ViewSection.CreateSection(doc, sectionVFT.Id, sectionBox);\n}"}
{"prompt":"Copia la vista 'Losa 101' como una vista dependiente.","completion":"ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v => v.Name == \"Losa 101\") as ViewPlan;\n\nif (viewToDuplicate != null)\n{\n    ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n}"}
{"prompt":"Carga la familia 'Mesa.rfa' y colócala en (2,1,5) en el Nivel 8","completion":"string levelName = \"Nivel 8\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nstring familyName = \"Mesa\";\nFamilySymbol symbol = new FilteredElementCollector(doc).OfClass(typeof(FamilySymbol)).Cast<FamilySymbol>().FirstOrDefault(fs => fs.Family.Name == familyName);\nif (symbol != null && targetLevel != null)\n{\n    if (!symbol.IsActive) { symbol.Activate(); doc.Regenerate(); }\n    XYZ location = new XYZ(2, 1, 5);\n    doc.Create.NewFamilyInstance(location, symbol, targetLevel, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n}"}
{"prompt":"Sitúa una instancia de la familia 'Mesa de Oficina' en el centro de la habitación 'Despacho 97'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 97\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Mesa de Oficina\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);"}
{"prompt":"Add a point to the selected Path of Travel.","completion":"\/\/ PathOfTravel related methods are likely inaccessible in this environment.\n\/\/ The following code is a placeholder to show the intent.\n\/*\nusing (Transaction t = new Transaction(doc, \"Update Path of Travel\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference pickedRef = localUidoc.Selection.PickObject(ObjectType.Element, \"Select a Path of Travel\");\n\n    if (pickedRef != null)\n    {\n        PathOfTravel pot = doc.GetElement(pickedRef) as PathOfTravel;\n        if (pot != null)\n        {\n            IList<XYZ> points = pot.GetPath();\n            if (points != null && points.Count >= 2)\n            {\n                XYZ midPoint = (points[0] + points[1]) \/ 2;\n                points.Insert(1, midPoint);\n                pot.Update(points);\n            }\n        }\n    }\n    t.Commit();\n}\n*\/"}
{"prompt":"Configure the 'Mark' parameter of all selected walls to 'W-EXT-1'.","completion":"using (Transaction t = new Transaction(doc, \"Set Wall Mark\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    ICollection<ElementId> selectedIds = localUidoc.Selection.GetElementIds();\n\n    if (selectedIds != null && selectedIds.Count > 1)\n    {\n        foreach(ElementId id in selectedIds)\n        {\n            Element elem = doc.GetElement(id);\n            if(elem is Wall)\n            {\n                Parameter markParam = elem.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n                if (markParam != null && !markParam.IsReadOnly) markParam.Set(\"W-EXT-01\");\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Fija el elemento seleccionado para que no se mueva.","completion":"UIDocument uidoc = new UIDocument(doc);\nElementId selectedId = uidoc.Selection.GetElementIds().FirstOrDefault();\n\nif (selectedId != ElementId.InvalidElementId)\n{\n    Element elementToPin = doc.GetElement(selectedId);\n    if (elementToPin != null)\n    {\n        elementToPin.Pinned = true;\n    }\n}"}
{"prompt":"Cambia el tipo de la ventana seleccionada al tipo 'Fija 125x60'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una ventana\");\nFamilySymbol newType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name == \"Fija 125x60\");\nif (pickedRef != null && newType != null)\n{\n    FamilyInstance window = doc.GetElement(pickedRef.ElementId) as FamilyInstance;\n    if (window != null)\n    {\n        window.Symbol = newType;\n    }\n}"}
{"prompt":"Group a room schedule by Level.","completion":"using (Transaction t = new Transaction(doc, \"Group Schedule\"))\n{\n    t.Start();\n    ViewSchedule schedule = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().FirstOrDefault(vs => vs.Definition.CategoryId.IntegerValue == (int)BuiltInCategory.OST_Rooms);\n\n    if (schedule != null)\n    {\n        ScheduleDefinition def = schedule.Definition;\n        if (def != null)\n        {\n            SchedulableField schedulableField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.ROOM_LEVEL_ID);\n            if (schedulableField != null)\n            {\n                ScheduleField field = def.AddField(schedulableField);\n                ScheduleSortGroupField sortGroupField = new ScheduleSortGroupField(field.FieldId);\n                sortGroupField.ShowHeader = true;\n                def.AddSortGroupField(sortGroupField);\n                def.IsItemized = false;\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Replicate level 4 with a 7m offset and name it 'Mezzanine'.","completion":"string levelName = \"Level 4\";\nLevel levelToCopy = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (levelToCopy != null)\n{\n    double offset = UnitUtils.ConvertToInternalUnits(7, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, levelToCopy.Elevation + offset);\n    newLevel.Name = \"Mezzanine\";\n}"}
{"prompt":"Create a new material named 'Reflective Glass' and assign it a base color.","completion":"string materialName = \"Reflective Glass\";\nElementId materialId = Material.Create(doc, materialName);\n\nif (materialId != ElementId.InvalidElementId)\n{\n    Material material = doc.GetElement(materialId) as Material;\n    if (material != null)\n    {\n        material.Color = new Color(210, 230, 240); \/\/ A light bluish color for glass\n        material.Transparency = 80;\n    }\n}"}
{"prompt":"Crea una vista 3D axonométrica orientada al Noroeste.","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft != null)\n{\n    View3D view3d = View3D.CreateIsometric(doc, vft.Id);\n    if (view3d != null)\n    {\n        XYZ eye = new XYZ(-1, 1, 1);\n        XYZ up = new XYZ(0, 0, 1);\n        XYZ forward = new XYZ(1, -1, -1);\n        view3d.SetOrientation(new ViewOrientation3D(eye, up, forward));\n        view3d.Name = \"Vista 3D Noroeste\";\n    }\n}"}
{"prompt":"Get all rooms on Level 3.","completion":"Level level3 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 3\") as Level;\nList<Element> roomsOnLevel3 = new List<Element>();\n\nif (level3 != null)\n{\n    roomsOnLevel3 = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Where(r => r.LevelId == level3.Id).ToList();\n}"}
{"prompt":"Generate an electrical circuit connecting light fixtures to a panel.","completion":"using (Transaction t = new Transaction(doc, \"Create Electrical Circuit\"))\n{\n    t.Start();\n    FamilyInstance panel = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_ElectricalEquipment).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\n    List<ElementId> fixtureIds = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsNotElementType().ToElementIds().ToList();\n\n    if (panel != null && fixtureIds.Count > 0)\n    {\n        ElectricalSystem electricalSystem = ElectricalSystem.Create(doc, fixtureIds, ElectricalSystemType.PowerCircuit);\n        if(electricalSystem != null)\n        {\n            electricalSystem.SelectPanel(panel);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Clone level 6 with a 1m offset and name it 'Mezzanine'.","completion":"string levelName = \"Level 6\";\nLevel levelToCopy = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (levelToCopy != null)\n{\n    double offset = UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, levelToCopy.Elevation + offset);\n    newLevel.Name = \"Mezzanine\";\n}"}
{"prompt":"Suma el volumen total de concreto de todas las zapatas de cimentación.","completion":"double totalVolume = 0.0;\nList<FamilyInstance> footings = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFoundation).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach (FamilyInstance footing in footings)\n{\n    Parameter volumeParam = footing.get_Parameter(BuiltInParameter.HOST_VOLUME_COMPUTED);\n    if (volumeParam != null && volumeParam.HasValue)\n    {\n        totalVolume += volumeParam.AsDouble();\n    }\n}\n\/\/ El volumen está en pies cúbicos. El orquestador puede convertirlo a metros cúbicos."}
{"prompt":"Coloca una instancia de la familia 'Mesa de Oficina' en el centro de la habitación 'Despacho 101'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 101\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Mesa de Oficina\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);"}
{"prompt":"Allow the user to select a wall and get its ElementId.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a wall\");\nElementId selectedWallId = ElementId.InvalidElementId;\nif (pickedRef != null)\n{\n    selectedWallId = pickedRef.ElementId;\n}"}
{"prompt":"Inserta una ventana de 1 metro de ancho y 1.2 metros de alto en un muro, creando un nuevo tipo si es necesario.","completion":"Wall hostWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nFamilySymbol originalSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (originalSymbol != null && hostWall != null)\n{\n    \/\/ Duplica el tipo para no modificar el original\n    string newTypeName = $\"Window 1.0m x 1.2m - {Guid.NewGuid().ToString().Substring(0, 4)}\";\n    FamilySymbol newSymbol = originalSymbol.Duplicate(newTypeName) as FamilySymbol;\n\n    \/\/ Activa el nuevo tipo si no lo está\n    if (!newSymbol.IsActive)\n    {\n        newSymbol.Activate();\n    }\n\n    \/\/ Establece las dimensiones en el nuevo tipo\n    Parameter widthParam = newSymbol.LookupParameter(\"Width\");\n    if(widthParam != null) widthParam.Set(UnitUtils.ConvertToInternalUnits(1.0, UnitTypeId.Meters));\n\n    Parameter heightParam = newSymbol.LookupParameter(\"Height\");\n    if(heightParam != null) heightParam.Set(UnitUtils.ConvertToInternalUnits(1.2, UnitTypeId.Meters));\n\n    \/\/ Obtén la información necesaria para la inserción\n    Level level = doc.GetElement(hostWall.LevelId) as Level;\n    LocationCurve locationCurve = hostWall.Location as LocationCurve;\n    if (locationCurve != null)\n    {\n        XYZ insertionPoint = locationCurve.Curve.Evaluate(0.5, true);\n        \/\/ Inserta una instancia del NUEVO tipo\n        doc.Create.NewFamilyInstance(insertionPoint, newSymbol, hostWall, level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Find all annotation families and count how many there are.","completion":"List<Family> annotationFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.CategoryType == CategoryType.Annotation).ToList();"}
{"prompt":"Change the type of a selected floor to 'Concrete 13cm'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a floor\");\n\nif (pickedRef != null)\n{\n    Floor floorToChange = doc.GetElement(pickedRef) as Floor;\n    FloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name == \"Concrete 13cm\");\n    \n    if (floorToChange != null && newType != null)\n    {\n        floorToChange.ChangeTypeId(newType.Id);\n    }\n}"}
{"prompt":"Coloca una etiqueta de material en una cara de muro.","completion":"using (Transaction t = new Transaction(doc, \"Place Material Tag\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference faceRef = localUidoc.Selection.PickObject(ObjectType.Face, \"Selecciona una cara para etiquetar\");\n    XYZ point = localUidoc.Selection.PickPoint(\"Selecciona la ubicación de la etiqueta\");\n    View activeView = doc.ActiveView;\n\n    if (faceRef != null && point != null && activeView != null)\n    {\n        IndependentTag.Create(doc, activeView.Id, faceRef, true, TagMode.TM_ADDBY_MATERIAL, TagOrientation.Horizontal, point);\n    }\n    t.Commit();\n}"}
{"prompt":"Construct a new level 'Level 4' at an elevation of 16 meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(16, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\nif (newLevel != null)\n{\n    try { newLevel.Name = \"Level 4\"; } catch {}\n}"}
{"prompt":"Adjust the type of a selected floor to 'Concrete 10cm'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a floor\");\n\nif (pickedRef != null)\n{\n    Floor floorToChange = doc.GetElement(pickedRef) as Floor;\n    FloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name == \"Concrete 10cm\");\n    \n    if (floorToChange != null && newType != null)\n    {\n        floorToChange.ChangeTypeId(newType.Id);\n    }\n}"}
{"prompt":"Cambia el tipo de una losa seleccionada a 'Concreto 13cm'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una losa\");\n\nif (pickedRef != null)\n{\n    Floor floorToChange = doc.GetElement(pickedRef) as Floor;\n    FloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name == \"Concreto 13cm\");\n    \n    if (floorToChange != null && newType != null)\n    {\n        floorToChange.ChangeTypeId(newType.Id);\n    }\n}"}
{"prompt":"Añade refuerzo a una columna.","completion":"RebarBarType barType = new FilteredElementCollector(doc).OfClass(typeof(RebarBarType)).FirstOrDefault() as RebarBarType;\nRebarShape shape = new FilteredElementCollector(doc).OfClass(typeof(RebarShape)).FirstOrDefault() as RebarShape;\nFamilyInstance column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\n\nif (barType != null && shape != null && column != null)\n{\n    \/\/ Para simplificar, asume que la columna tiene una LocationPoint y una Transform válida.\n    \/\/ Para mayor robustez, se podría validar column.Location y column.GetTransform().\n    Rebar.CreateFromRebarShape(doc, shape, barType, column, column.GetTransform().Origin, XYZ.BasisX, XYZ.BasisY);\n}"}
{"prompt":"Inserta la vista 'Nivel 1' en el centro de la hoja activa.","completion":"ViewPlan viewToPlace = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v => v.Name == \"Nivel 1\") as ViewPlan;\nViewSheet activeSheet = doc.ActiveView as ViewSheet;\n\nif (viewToPlace != null && activeSheet != null)\n{\n    BoundingBoxUV sheetBox = activeSheet.Outline;\n    XYZ centerPoint = new XYZ((sheetBox.Min.U + sheetBox.Max.U) \/ 2, (sheetBox.Min.V + sheetBox.Max.V) \/ 2, 0);\n    Viewport.Create(doc, activeSheet.Id, viewToPlace.Id, centerPoint);\n}"}
{"prompt":"Put an instance of the 'Office Desk' family in the center of the 'Office 104' room.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Office 104\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Office Desk\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);"}
{"prompt":"Create a structural column at position X=10, Y=5.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null && columnSymbol != null)\n{\n    if (!columnSymbol.IsActive)\n    {\n        columnSymbol.Activate();\n    }\n    doc.Create.NewFamilyInstance(new XYZ(10, 5, 0), columnSymbol, level, StructuralType.Column);\n}"}
{"prompt":"Generate a new level named 'Basement Floor' at an elevation of -4.5 meters.","completion":"double elevationInternal = UnitUtils.ConvertToInternalUnits(-4.5, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevationInternal);\nif(newLevel != null)\n{\n    try { newLevel.Name = \"Basement Floor\"; } catch {}\n}"}
{"prompt":"Crea una nueva vista de alzado mirando al norte.","completion":"using (Transaction t = new Transaction(doc, \"Create North Elevation\"))\n{\n    t.Start();\n    ViewFamilyType elevationVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(vft => vft.ViewFamily == ViewFamily.Elevation);\n    View activeView = doc.ActiveView;\n\n    if (elevationVFT != null && activeView != null)\n    {\n        ElevationMarker marker = ElevationMarker.CreateElevationMarker(doc, elevationVFT.Id, new XYZ(0, 20 \/ 0.3048, 0), 100);\n        \n        if (marker != null)\n        {\n            View aev = marker.CreateElevation(doc, activeView.Id, 2);\n            if (aev != null)\n            {\n                aev.Name = \"Alzado Norte\";\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Cambia el tipo de una losa seleccionada a 'Pintura Blanca'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una losa\");\n\nif (pickedRef != null)\n{\n    Floor floorToChange = doc.GetElement(pickedRef) as Floor;\n    FloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name == \"Pintura Blanca\");\n    \n    if (floorToChange != null && newType != null)\n    {\n        floorToChange.ChangeTypeId(newType.Id);\n    }\n}"}
{"prompt":"Crea un nuevo tipo de tubería con material de Cobre.","completion":"string newTypeName = \"Tubería de Cobre\";\nPipeType pipeTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(PipeType)).FirstOrDefault() as PipeType;\nMaterial copper = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name.Contains(\"Copper\") || m.Name.Contains(\"Cobre\")) as Material;\n\nif (pipeTypeToDuplicate != null && copper != null)\n{\n    PipeType newType = pipeTypeToDuplicate.Duplicate(newTypeName) as PipeType;\n    if (newType != null)\n    {\n        Parameter materialParam = newType.get_Parameter(BuiltInParameter.MATERIAL_ID_PARAM);\n        if (materialParam != null && !materialParam.IsReadOnly) materialParam.Set(copper.Id);\n    }\n}"}
{"prompt":"Create a ceiling in the 'Living Room' at a height of 9 feet.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Living Room\") as Room;\n\nif (room != null)\n{\n    Level level = room.Level;\n    CeilingType ceilingType = new FilteredElementCollector(doc).OfClass(typeof(CeilingType)).FirstOrDefault() as CeilingType;\n\n    if (level != null && ceilingType != null)\n    {\n        SpatialElementBoundaryOptions options = new SpatialElementBoundaryOptions();\n        IList<IList<BoundarySegment>> boundarySegments = room.GetBoundarySegments(options);\n        IList<BoundarySegment> outerBoundary = boundarySegments.FirstOrDefault();\n\n        if (outerBoundary != null && outerBoundary.Any())\n        {\n            CurveLoop curveLoop = new CurveLoop();\n            foreach (BoundarySegment segment in outerBoundary)\n            {\n                curveLoop.Append(segment.GetCurve());\n            }\n            Ceiling ceiling = Ceiling.Create(doc, new List<CurveLoop> { curveLoop }, ceilingType.Id, level.Id);\n            if (ceiling != null)\n            {\n                Parameter heightParam = ceiling.get_Parameter(BuiltInParameter.CEILING_HEIGHTABOVELEVEL_PARAM);\n                if (heightParam != null && !heightParam.IsReadOnly) heightParam.Set(9.0);\n            }\n        }\n    }\n}"}
{"prompt":"Copy the 'Generic - 148mm' wall type and name it 'Interior - 12cm Plaster'.","completion":"string originalName = \"Generic - 148mm\";\nstring newName = \"Interior - 12cm Plaster\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif(originalType!=null)\n    originalType.Duplicate(newName);"}
{"prompt":"Inserta una instancia de la familia 'Mesa de Oficina' en el centro de la habitación 'Despacho 104'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 104\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Mesa de Oficina\") as FamilySymbol;\nif(furnitureSymbol != null && !furnitureSymbol.IsActive) furnitureSymbol.Activate();\nif(room != null)\n{\n    LocationPoint roomCenter = room.Location as LocationPoint;\n    if(roomCenter != null && furnitureSymbol != null && room.Level != null)\n    {\n        doc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Extrae una lista de todas las vistas de planta del proyecto.","completion":"List<ViewPlan> planViews = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().Where(v => !v.IsTemplate).ToList();"}
{"prompt":"Put an instance of the 'Office Desk' family in the center of the 'Office 96' room.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Office 96\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Office Desk\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);"}
{"prompt":"Reload the Revit link 'Structure_LINK.rvt'.","completion":"RevitLinkType linkType = new FilteredElementCollector(doc).OfClass(typeof(RevitLinkType)).Cast<RevitLinkType>().FirstOrDefault(lt => lt.Name == \"Structure_LINK.rvt\");\n\nif (linkType != null)\n{\n    linkType.Reload();\n}"}
{"prompt":"Get the MEP space associated with the room 'Office 101'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Cast<Room>().FirstOrDefault(r => r.Name == \"Office 101\");\nList<Space> spaces = new List<Space>();\n\nif (room != null)\n{\n    spaces = new FilteredElementCollector(doc).OfClass(typeof(Space)).Cast<Space>().Where(s => s.Room != null && s.Room.Id == room.Id).ToList();\n}"}
{"prompt":"Copia el tipo de muro 'Genérico - 111mm' y nómbralo 'Interior - 15cm Yeso'.","completion":"string originalName = \"Genérico - 111mm\";\nstring newName = \"Interior - 15cm Yeso\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif(originalType!=null)\n    originalType.Duplicate(newName);"}
{"prompt":"Configure the 'Mark' parameter of all selected walls to 'W-EXT-01'.","completion":"using (Transaction t = new Transaction(doc, \"Set Wall Mark\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    ICollection<ElementId> selectedIds = localUidoc.Selection.GetElementIds();\n\n    if (selectedIds != null && selectedIds.Count > 0)\n    {\n        foreach(ElementId id in selectedIds)\n        {\n            Element elem = doc.GetElement(id);\n            if(elem is Wall)\n            {\n                Parameter markParam = elem.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n                if (markParam != null && !markParam.IsReadOnly) markParam.Set(\"W-EXT-01\");\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Agrega un punto de referencia en las coordenadas (1,4,1) dentro del editor de familias.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(1,4,1));"}
{"prompt":"Coloca todos los elementos seleccionados en el workset 'Fachada'.","completion":"using (Transaction t = new Transaction(doc, \"Assign to Workset\"))\n{\n    t.Start();\n    if(doc.IsWorkshared)\n    {\n        UIDocument localUidoc = uidoc;\n        ICollection<ElementId> selectedIds = localUidoc.Selection.GetElementIds();\n        \n        Workset workset = new FilteredWorksetCollector(doc).OfKind(WorksetKind.UserWorkset).FirstOrDefault(ws => ws.Name == \"Fachada\");\n        if(workset == null) workset = Workset.Create(doc, \"Fachada\");\n\n        if (selectedIds != null && selectedIds.Count > 0 && workset != null)\n        {\n            foreach(ElementId id in selectedIds)\n            {\n                Element elem = doc.GetElement(id);\n                Parameter wsparam = elem.get_Parameter(BuiltInParameter.ELEM_PARTITION_PARAM);\n                if(wsparam != null && !wsparam.IsReadOnly) wsparam.Set(workset.Id.IntegerValue);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Etiqueta todas las habitaciones con su área.","completion":"using (Transaction t = new Transaction(doc, \"Tag All Rooms\"))\n{\n    t.Start();\n    View activeView = doc.ActiveView;\n\n    if (activeView != null)\n    {\n        List<Room> rooms = new FilteredElementCollector(doc, activeView.Id).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>().ToList();\n        foreach(Room room in rooms)\n        {\n            LocationPoint locPoint = room.Location as LocationPoint;\n            if(locPoint != null)\n            {\n                doc.Create.NewRoomTag(new LinkElementId(room.Id), new UV(locPoint.Point.X, locPoint.Point.Y), activeView.Id);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Activate all FamilySymbols in the project.","completion":"List<FamilySymbol> symbols = new FilteredElementCollector(doc).OfClass(typeof(FamilySymbol)).Cast<FamilySymbol>().ToList();\nforeach (FamilySymbol sym in symbols)\n{\n    if (!sym.IsActive)\n    {\n        sym.Activate();\n    }\n}"}
{"prompt":"Copy all walls from Level 1 to Level 2.","completion":"using (Transaction t = new Transaction(doc, \"Copy Walls\"))\n{\n    t.Start();\n    Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 1\");\n    Level level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 2\");\n\n    if (level1 != null && level2 != null)\n    {\n        ICollection<ElementId> wallsToCopy = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Where(e => (e as Wall) != null && (e as Wall).LevelId.Equals(level1.Id)).Select(e => e.Id).ToList();\n        double elevationDiff = level2.ProjectElevation - level1.ProjectElevation;\n        XYZ translation = new XYZ(0, 0, elevationDiff);\n        if (wallsToCopy.Count > 0)\n        {\n            ElementTransformUtils.CopyElements(doc, wallsToCopy, translation);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Construct an MEP space for each room on Level 1","completion":"string levelName = \"Level 1\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    FilteredElementCollector roomCollector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WherePasses(new ElementLevelFilter(targetLevel.Id));\n    foreach (Room room in roomCollector.ToElements().Cast<Room>())\n    {\n        LocationPoint locPoint = room.Location as LocationPoint;\n        if (locPoint != null)\n        {\n            UV point = new UV(locPoint.Point.X, locPoint.Point.Y);\n            doc.Create.NewSpace(targetLevel, point);\n        }\n    }\n}"}
{"prompt":"Copy level 4 with a 4m offset and name it 'Mezzanine'.","completion":"string levelName = \"Level 4\";\nLevel levelToCopy = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (levelToCopy != null)\n{\n    double offset = UnitUtils.ConvertToInternalUnits(4, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, levelToCopy.Elevation + offset);\n    newLevel.Name = \"Mezzanine\";\n}"}
{"prompt":"Include a reference point at coordinates (4,2,1) inside the family editor.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(4,2,1));"}
{"prompt":"Extrae el espacio MEP asociado a la habitación 'Oficina 100'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Cast<Room>().FirstOrDefault(r => r.Name == \"Oficina 100\");\nList<Space> spaces = new List<Space>();\n\nif (room != null)\n{\n    spaces = new FilteredElementCollector(doc).OfClass(typeof(Space)).Cast<Space>().Where(s => s.Room != null && s.Room.Id == room.Id).ToList();\n}"}
{"prompt":"Crea columnas en cada intersección de ejes.","completion":"FamilySymbol colSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nList<Grid> grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().ToList();\n\nif (colSymbol != null && level != null && grids.Count >= 2)\n{\n    for (int i = 0; i < grids.Count; i++)\n    {\n        for (int j = i + 1; j < grids.Count; j++)\n        {\n            IntersectionResultArray results = null;\n            grids[i].Curve.Intersect(grids[j].Curve, out results);\n            if(results != null)\n            {\n                 foreach (IntersectionResult ir in results)\n                 {\n                     doc.Create.NewFamilyInstance(ir.XYZPoint, colSymbol, level, StructuralType.Column);\n                 }\n            }\n        }\n    }\n}"}
{"prompt":"Remove the selected furniture from the model.","completion":"ICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nif (selectedIds.Any())\n{\n    doc.Delete(selectedIds);\n}"}
{"prompt":"Actualiza el estilo visual de la vista activa a 'Línea Oculta'.","completion":"View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.DisplayStyle = DisplayStyle.HLR;\n}"}
{"prompt":"Inserta un rociador en las coordenadas (10,9,5).","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol sprinklerSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Sprinklers).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (level != null && sprinklerSymbol != null)\n{\n    if (!sprinklerSymbol.IsActive) sprinklerSymbol.Activate();\n    XYZ placementPoint = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(9, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters));\n    doc.Create.NewFamilyInstance(placementPoint, sprinklerSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n}"}
{"prompt":"Place a 6-meter truss between two points.","completion":"using (Transaction t = new Transaction(doc, \"Create Truss\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    FamilySymbol trussSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Family.Name.Contains(\"Truss\"));\n\n    if (level != null && trussSymbol != null)\n    {\n        if (!trussSymbol.IsActive) { trussSymbol.Activate(); }\n        Line trussLine = Line.CreateBound(new XYZ(0, 10, 0), new XYZ(6 \/ 0.3048, 10, 0));\n        doc.Create.NewFamilyInstance(trussLine, trussSymbol, level, StructuralType.NonStructural);\n    }\n    t.Commit();\n}"}
{"prompt":"Set the 'Mark' parameter to 'D-01' for the selected door.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a door\");\nif (pickedRef != null)\n{\n    Element door = doc.GetElement(pickedRef.ElementId);\n    if (door != null)\n    {\n        Parameter markParam = door.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n        if (markParam != null && !markParam.IsReadOnly)\n        {\n            markParam.Set(\"D-01\");\n        }\n    }\n}"}
{"prompt":"Plot a filled region with a diagonal pattern.","completion":"using (Transaction t = new Transaction(doc, \"Draw Filled Region\"))\n{\n    t.Start();\n    View activeView = doc.ActiveView;\n    FillPatternElement fillPattern = new FilteredElementCollector(doc).OfClass(typeof(FillPatternElement)).Cast<FillPatternElement>().FirstOrDefault(p => !p.GetFillPattern().IsSolidFill);\n\n    if (activeView != null && fillPattern != null)\n    {\n        FilledRegionType filledRegionType = new FilteredElementCollector(doc, activeView.Id).OfClass(typeof(FilledRegionType)).FirstOrDefault() as FilledRegionType;\n        if (filledRegionType != null)\n        {\n            FilledRegionType newType = filledRegionType.Duplicate(\"Temp Diagonal Region\") as FilledRegionType;\n            if (newType != null)\n            {\n                newType.ForegroundPatternId = fillPattern.Id;\n                XYZ p1 = new XYZ(0,0,0);\n                XYZ p2 = new XYZ(5 \/ 0.3048,0,0);\n                XYZ p3 = new XYZ(5 \/ 0.3048,5 \/ 0.3048,0);\n                XYZ p4 = new XYZ(0,5 \/ 0.3048,0);\n                CurveLoop profile = new CurveLoop();\n                profile.Append(Line.CreateBound(p1,p2));\n                profile.Append(Line.CreateBound(p2,p3));\n                profile.Append(Line.CreateBound(p3,p4));\n                profile.Append(Line.CreateBound(p4,p1));\n                FilledRegion.Create(doc, newType.Id, activeView.Id, new List<CurveLoop>{profile});\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Apply 25mm thermal insulation to all hot water pipes.","completion":"PipeInsulationType insulationType = new FilteredElementCollector(doc).OfClass(typeof(PipeInsulationType)).FirstOrDefault() as PipeInsulationType;\nPipingSystemType hotWaterSystem = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).Cast<PipingSystemType>().FirstOrDefault(s => s.Name.Contains(\"Hot Water\"));\n\nif (insulationType != null && hotWaterSystem != null)\n{\n    List<Pipe> pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast<Pipe>().Where(p => \n    {\n        Parameter systemParam = p.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM);\n        return systemParam != null && systemParam.HasValue && systemParam.AsElementId() == hotWaterSystem.Id;\n    }).ToList();\n    \n    foreach(Pipe p in pipes)\n    {\n        PipeInsulation.Create(doc, p.Id, insulationType.Id, UnitUtils.ConvertToInternalUnits(25, UnitTypeId.Millimeters));\n    }\n}"}
{"prompt":"Modifica el tipo de una losa seleccionada a 'Vidrio Templado'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una losa\");\n\nif (pickedRef != null)\n{\n    Floor floorToChange = doc.GetElement(pickedRef) as Floor;\n    FloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name == \"Vidrio Templado\");\n    \n    if (floorToChange != null && newType != null)\n    {\n        floorToChange.ChangeTypeId(newType.Id);\n    }\n}"}
{"prompt":"Actualiza el tipo de la ventana seleccionada al tipo 'Ventana Fija 119x60'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una ventana\");\nFamilySymbol newType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name == \"Ventana Fija 119x60\");\nif (pickedRef != null && newType != null)\n{\n    FamilyInstance window = doc.GetElement(pickedRef.ElementId) as FamilyInstance;\n    if (window != null)\n    {\n        window.Symbol = newType;\n    }\n}"}
{"prompt":"Create an 8-meter long foundation beam.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol foundationSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFoundation).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null && foundationSymbol != null)\n{\n    Line line = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters), 0, 0));\n    doc.Create.NewFamilyInstance(line, foundationSymbol, level, StructuralType.Footing);\n}"}
{"prompt":"Crea una viga estructural entre (0,0,3) y (5,0,3) en el Nivel 2.","completion":"FamilySymbol beamType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (beamType != null && level != null)\n{\n    if(!beamType.IsActive) beamType.Activate();\n    XYZ start = new XYZ(0, 0, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters));\n    XYZ end = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters));\n    Line beamCurve = Line.CreateBound(start, end);\n    doc.Create.NewFamilyInstance(beamCurve, beamType, level, StructuralType.Beam);\n}"}
{"prompt":"Obtén el elemento anfitrión de la primera ventana que encuentres.","completion":"FamilyInstance windowInstance = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\nif (windowInstance != null)\n{\n    Element hostElement = windowInstance.Host;\n}"}
{"prompt":"Include a reference point at coordinates (1,1,1) inside the family editor.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(1,1,1));"}
{"prompt":"Aísla temporalmente todo el mobiliario en la vista activa.","completion":"ICollection<ElementId> furnitureIds = new FilteredElementCollector(doc, doc.ActiveView.Id).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsNotElementType().ToElementIds();\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.IsolateElementsTemporary(furnitureIds);\n}"}
{"prompt":"Exporta la geometría de un elemento seleccionado a un archivo SAT.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un elemento para exportar\");\n\nif (pickedRef != null)\n{\n    Element elem = doc.GetElement(pickedRef.ElementId);\n    if (elem != null)\n    {\n        string folderPath = \"C:\/RevitExports\/\";\n        string fileName = elem.Name + \".sat\";\n        SATExportOptions options = new SATExportOptions();\n        doc.Export(folderPath, fileName, new List<ElementId>{elem.Id}, options);\n    }\n}"}
{"prompt":"Encuentra todos los muros que no están asociados a ningún nivel.","completion":"ElementFilter unassociatedFilter = new ElementLevelFilter(ElementId.InvalidElementId);\nList<Element> unassignedWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(unassociatedFilter).ToList();"}
{"prompt":"Crea un muro en Nivel 1 de (0,0,0) a (5,0,0) con 5m de alto.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (level1 != null && wallType != null)\n{\n    Line wallCurve = Line.CreateBound(new XYZ(0, 0, 0), new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0, 0));\n    double height = UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters);\n    Wall.Create(doc, wallCurve, wallType.Id, level1.Id, height, 0.0, false, false);\n}"}
{"prompt":"Situa una ventana de 1 metro de ancho y 1.2 metros de alto en un muro, creando un nuevo tipo si es necesario.","completion":"Wall hostWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nFamilySymbol originalSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (originalSymbol != null && hostWall != null)\n{\n    \/\/ Duplica el tipo para no modificar el original\n    string newTypeName = $\"Window 1.0m x 1.2m - {Guid.NewGuid().ToString().Substring(0, 4)}\";\n    FamilySymbol newSymbol = originalSymbol.Duplicate(newTypeName) as FamilySymbol;\n\n    \/\/ Activa el nuevo tipo si no lo está\n    if (!newSymbol.IsActive)\n    {\n        newSymbol.Activate();\n    }\n\n    \/\/ Establece las dimensiones en el nuevo tipo\n    Parameter widthParam = newSymbol.LookupParameter(\"Width\");\n    if(widthParam != null) widthParam.Set(UnitUtils.ConvertToInternalUnits(1.0, UnitTypeId.Meters));\n\n    Parameter heightParam = newSymbol.LookupParameter(\"Height\");\n    if(heightParam != null) heightParam.Set(UnitUtils.ConvertToInternalUnits(1.2, UnitTypeId.Meters));\n\n    \/\/ Obtén la información necesaria para la inserción\n    Level level = doc.GetElement(hostWall.LevelId) as Level;\n    LocationCurve locationCurve = hostWall.Location as LocationCurve;\n    if (locationCurve != null)\n    {\n        XYZ insertionPoint = locationCurve.Curve.Evaluate(0.5, true);\n        \/\/ Inserta una instancia del NUEVO tipo\n        doc.Create.NewFamilyInstance(insertionPoint, newSymbol, hostWall, level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Crea 8 ejes horizontales separados por 10.3 metros.","completion":"double separation = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\nfor(int i = 0; i < 8; i++)\n{\n    Line line = Line.CreateBound(new XYZ(0, i * separation, 0), new XYZ(50, i * separation, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Copia el nivel 6 con un desfase de 4m y llámalo 'Mezanine'.","completion":"string levelName = \"Nivel 6\";\nLevel levelToCopy = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (levelToCopy != null)\n{\n    double offset = UnitUtils.ConvertToInternalUnits(4, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, levelToCopy.Elevation + offset);\n    newLevel.Name = \"Mezanine\";\n}"}
{"prompt":"Build a new room on Level 6 at point (9, 6).","completion":"string levelName = \"Level 6\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    UV point = new UV(9, 6);\n    Room newRoom = doc.Create.NewRoom(targetLevel, point);\n}"}
{"prompt":"Get a list of all material names.","completion":"List<Material> materials = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().ToList();\nList<string> materialNames = new List<string>();\nforeach(Material m in materials)\n{\n    materialNames.Add(m.Name);\n}\n"}
{"prompt":"Define the visibility of the 'Furniture' category to false in the active view.","completion":"Category furnitureCat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Furniture);\nif (furnitureCat != null && doc.ActiveView != null)\n{\n    doc.ActiveView.SetCategoryHidden(furnitureCat.Id, true);\n}"}
{"prompt":"Reproduce la vista 'Primer Piso' como una vista dependiente.","completion":"ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v => v.Name == \"Primer Piso\") as ViewPlan;\n\nif (viewToDuplicate != null)\n{\n    ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n}"}
{"prompt":"Etiqueta todas las habitaciones con su área.","completion":"using (Transaction t = new Transaction(doc, \"Tag All Rooms\"))\n{\n    t.Start();\n    View activeView = doc.ActiveView;\n\n    if (activeView != null)\n    {\n        List<Room> rooms = new FilteredElementCollector(doc, activeView.Id).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>().ToList();\n        foreach(Room room in rooms)\n        {\n            LocationPoint loc = room.Location as LocationPoint;\n            if(loc != null)\n            {\n                doc.Create.NewRoomTag(new LinkElementId(room.Id), new UV(loc.Point.X, loc.Point.Y), activeView.Id);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Clone the 'Generic - 164mm' wall type and name it 'Interior - 15cm Plaster'.","completion":"string originalName = \"Generic - 164mm\";\nstring newName = \"Interior - 15cm Plaster\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif (originalType != null)\n{\n    WallType newType = originalType.Duplicate(newName) as WallType;\n}"}
{"prompt":"Pinta la cara interior de los muros exteriores con 'Pintura Blanca'.","completion":"using (Transaction t = new Transaction(doc, \"Paint Walls\"))\n{\n    t.Start();\n    Material paintMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m => m.Name == \"Pintura Blanca\");\n    var exteriorWalls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Cast<Wall>().Where(w => w.WallType.Function == WallFunction.Exterior).ToList();\n\n    if (paintMaterial != null)\n    {\n        foreach (Wall w in exteriorWalls)\n        {\n            IList<Reference> interiorFaceRefs = HostObjectUtils.GetSideFaces(w, ShellLayerType.Interior);\n            if(interiorFaceRefs.Count > 0)\n            {\n                Face interiorFace = w.GetGeometryObjectFromReference(interiorFaceRefs.First()) as Face;\n                if (interiorFace != null)\n                {\n                    doc.Paint(w.Id, interiorFace, paintMaterial.Id);\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Aplica la plantilla de vista 'Plano de PLANTA PARA CLIENTE' a todas las vistas de planta que contengan 'PLANTA PARA CLIENTE' en su nombre.","completion":"View viewTemplate = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().FirstOrDefault(v => v.IsTemplate && v.Name == \"Plano de PLANTA PARA CLIENTE\");\nif (viewTemplate != null)\n{\n    List<ViewPlan> planViews = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().Where(v => !v.IsTemplate && v.Name.Contains(\"PLANTA PARA CLIENTE\")).ToList();\n    foreach (ViewPlan view in planViews)\n    {\n        view.ViewTemplateId = viewTemplate.Id;\n    }\n}"}
{"prompt":"Mueve los elementos seleccionados 3 metros hacia arriba.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds != null && selectedIds.Count > 0)\n{\n    XYZ translation = new XYZ(0, 0, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters));\n    ElementTransformUtils.MoveElements(doc, selectedIds, translation);\n}"}
{"prompt":"Aplica el estilo visual 'Rayos X' a la vista 3D activa.","completion":"View3D view3D = doc.ActiveView as View3D;\nif (view3D != null && !view3D.IsTemplate)\n{\n    view3D.DisplayStyle = DisplayStyle.Wireframe;\n}"}
{"prompt":"Añade una línea de rejilla vertical a la mitad de un muro cortina.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Cast<Wall>().FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain);\nif (curtainWall != null)\n{\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    if (grid != null)\n    {\n        grid.AddGridLine(true, new XYZ(0,0,0), false);\n    }\n}"}
{"prompt":"Crea un nuevo tipo de muro de 30cm llamado 'Estructura'.","completion":"WallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif(wallTypeToDuplicate != null)\n{\n    WallType newWallType = null;\n    try { newWallType = wallTypeToDuplicate.Duplicate(\"Estructura\") as WallType; } catch {}\n    if(newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if(cs != null && cs.GetLayers().Any())\n        {\n            int coreLayerIndex = cs.GetFirstCoreLayerIndex();\n            if(coreLayerIndex != -1) \n            {\n                cs.SetLayerFunction(coreLayerIndex, MaterialFunctionAssignment.Structure);\n                cs.SetLayerWidth(coreLayerIndex, UnitUtils.ConvertToInternalUnits(30, UnitTypeId.Centimeters));\n                newWallType.SetCompoundStructure(cs);\n            }\n        }\n    }\n}"}
{"prompt":"Group a room schedule by Level.","completion":"using (Transaction t = new Transaction(doc, \"Group Schedule\"))\n{\n    t.Start();\n    ViewSchedule schedule = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().FirstOrDefault(vs => vs.Definition.CategoryId.IntegerValue == (int)BuiltInCategory.OST_Rooms);\n\n    if (schedule != null)\n    {\n        ScheduleDefinition def = schedule.Definition;\n        if (def != null)\n        {\n            SchedulableField schedulableField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.ROOM_LEVEL_ID);\n            if (schedulableField != null)\n            {\n                ScheduleField field = def.AddField(schedulableField);\n                ScheduleSortGroupField sortGroupField = new ScheduleSortGroupField(field.FieldId);\n                sortGroupField.ShowHeader = true;\n                def.AddSortGroupField(sortGroupField);\n                def.IsItemized = false;\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Generate a new level named 'Basement Floor' at an elevation of 0.1 meters.","completion":"string levelName = \"Basement Floor\";\ndouble elevationInternal = UnitUtils.ConvertToInternalUnits(0.1, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevationInternal);\nnewLevel.Name = levelName;"}
{"prompt":"Coloca una instancia de la familia 'Ventana Fija 123x60' en el centro de la habitación 'Despacho 102'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 123\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Ventana Fija 102x60\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);"}
{"prompt":"Extrae todas las subcategorías de la categoría Puertas.","completion":"Category doorCat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Doors);\nCategoryNameMap subcategories = doorCat.SubCategories;"}
{"prompt":"Get the host element of the first window found.","completion":"FamilyInstance windowInstance = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\n\nif (windowInstance != null)\n{\n    Element hostElement = windowInstance.Host;\n}"}
{"prompt":"Build a wall on Level 1 from (0,0,0) to (10,0,0) with a height of 4 meters.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (level1 != null && wallType != null)\n{\n    XYZ p1 = new XYZ(0, 0, 0);\n    XYZ p2 = new XYZ(10, 0, 0);\n    Line wallCurve = Line.CreateBound(p1, p2);\n    double height = UnitUtils.ConvertToInternalUnits(4, UnitTypeId.Meters);\n    Wall.Create(doc, wallCurve, wallType.Id, level1.Id, height, 0.0, false, false);\n}"}
{"prompt":"Create a section view using a 10x10x3 meter box.","completion":"ViewFamilyType sectionVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(vft => vft.ViewFamily == ViewFamily.Section);\nif (sectionVFT != null)\n{\n    BoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\n    sectionBox.Min = new XYZ(0,0,0);\n    sectionBox.Max = new XYZ(\n        UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),\n        UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),\n        UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters));\n    Transform transform = Transform.Identity;\n    sectionBox.Transform = transform;\n    ViewSection.CreateSection(doc, sectionVFT.Id, sectionBox);\n}"}
{"prompt":"Reproduce el tipo de muro 'Genérico - 204mm' y nómbralo 'Interior - 15cm Yeso'.","completion":"string originalName = \"Genérico - 204mm\";\nstring newName = \"Interior - 15cm Yeso\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif(originalType!=null)\n    originalType.Duplicate(newName);"}
{"prompt":"Crea una nueva vista 3D orientada desde el punto (10,10,10) mirando hacia el origen.","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v=>v.ViewFamily==ViewFamily.ThreeDimensional);\n\nif (vft != null)\n{\n    View3D view = View3D.CreateIsometric(doc, vft.Id);\n    if (view != null)\n    {\n        XYZ eyePos = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters));\n        XYZ upDir = XYZ.BasisZ;\n        XYZ forwardDir = XYZ.Zero - eyePos;\n        ViewOrientation3D vo = new ViewOrientation3D(eyePos, upDir, forwardDir);\n        view.SetOrientation(vo);\n        view.Name = \"Vista desde (10,10,10)\";\n    }\n}"}
{"prompt":"Duplica el nivel 1 con un desfase de 1m y llámalo 'Mezanine'.","completion":"string levelName = \"Mezanine\";\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\n\nif (level1 != null)\n{\n    double newElevation = level1.ProjectElevation + UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, newElevation);\n    if (newLevel != null)\n    {\n        newLevel.Name = levelName;\n    }\n}"}
{"prompt":"Create a new door type named 'FR-90 Door' and set its fire rating to '90 min'.","completion":"string newTypeName = \"FR-90 Door\";\nFamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (doorTypeToDuplicate != null)\n{\n    FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\n    if (newDoorType != null)\n    {\n        Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n        if (fireRatingParam != null && !fireRatingParam.IsReadOnly) fireRatingParam.Set(\"90 min\");\n    }\n}"}
{"prompt":"Actualiza el tipo de una losa seleccionada a 'Concreto 11cm'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una losa\");\n\nif (pickedRef != null)\n{\n    Floor floorToChange = doc.GetElement(pickedRef) as Floor;\n    FloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name == \"Concreto 11cm\");\n    \n    if (floorToChange != null && newType != null)\n    {\n        floorToChange.ChangeTypeId(newType.Id);\n    }\n}"}
{"prompt":"Create a stair between Level 1 and Level 2.","completion":"Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 1\");\nLevel topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 2\");\n\nif (bottomLevel != null && topLevel != null)\n{\n    \/\/ TODO: Stairs.Create(doc, bottomLevel.Id, topLevel.Id); is not a valid Revit API call.\n    \/\/ Stairs creation requires using the StairsEditScope class.\n}"}
{"prompt":"Crea un Path of Travel entre los puntos (1,1) y (10,10) en la vista de planta.","completion":"\/\/ PathOfTravel.Create is likely inaccessible in this environment.\n\/\/ A comment is left as a placeholder for the intended functionality.\n\/*\nusing (Transaction t = new Transaction(doc, \"Create Path of Travel\"))\n{\n    t.Start();\n    ViewPlan viewPlan = doc.ActiveView as ViewPlan;\n\n    if (viewPlan != null && viewPlan.ViewType == ViewType.FloorPlan)\n    {\n        ElementId levelId = viewPlan.get_Parameter(BuiltInParameter.PLAN_VIEW_LEVEL).AsElementId();\n        Level level = doc.GetElement(levelId) as Level;\n        if (level != null)\n        {\n            XYZ startPoint = new XYZ(1 \/ 0.3048, 1 \/ 0.3048, level.Elevation);\n            XYZ endPoint = new XYZ(10 \/ 0.3048, 10 \/ 0.3048, level.Elevation);\n            \/\/ PathOfTravel.Create(viewPlan, startPoint, endPoint);\n        }\n    }\n    t.Commit();\n}\n*\/"}
{"prompt":"Crea una nueva cota de nivel llamada 'Nivel 7' a una elevación de 13 metros.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(13, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\nif (newLevel != null)\n{\n    try { newLevel.Name = \"Nivel 7\"; } catch {}\n}"}
{"prompt":"Duplica el tipo de muro 'Genérico - 147mm' y nómbralo 'Interior - 20cm Yeso'.","completion":"string originalName = \"Genérico - 147mm\";\nstring newName = \"Interior - 20cm Yeso\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif (originalType != null)\n{\n    WallType newType = originalType.Duplicate(newName) as WallType;\n}"}
{"prompt":"Crea los worksets 'Arquitectura', 'Estructura' y 'MEP'.","completion":"if (doc.IsWorkshared)\n{\n    Workset.Create(doc, \"Arquitectura\");\n    Workset.Create(doc, \"Estructura\");\n    Workset.Create(doc, \"MEP\");\n}"}
{"prompt":"Adjust the type of a selected floor to 'Concrete 13cm'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a floor\");\n\nif (pickedRef != null)\n{\n    Floor floorToChange = doc.GetElement(pickedRef) as Floor;\n    FloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name == \"Concrete 13cm\");\n    \n    if (floorToChange != null && newType != null)\n    {\n        floorToChange.ChangeTypeId(newType.Id);\n    }\n}"}
{"prompt":"Generate a new level named 'Mezzanine' at 6.9 meters elevation.","completion":"string levelName = \"Mezzanine\";\ndouble elevation = UnitUtils.ConvertToInternalUnits(6.9, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Crea un workset llamado 'Estructura'.","completion":"string wsName = \"Estructura\";\nWorkset newWorkset = Workset.Create(doc, wsName);\n"}
{"prompt":"Spin the given element 45 degrees about its center.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select an element to rotate\");\n\nif (pickedRef != null)\n{\n    Element elem = doc.GetElement(pickedRef.ElementId);\n    if (elem != null)\n    {\n        LocationPoint lp = elem.Location as LocationPoint;\n        if (lp != null)\n        {\n            Line axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\n            double angle = 45 * Math.PI \/ 180.0;\n            ElementTransformUtils.RotateElement(doc, elem.Id, axis, angle);\n        }\n    }\n}"}
{"prompt":"Build a filled region with a 'Concrete' pattern.","completion":"using (Transaction t = new Transaction(doc, \"Create Filled Region\"))\n{\n    t.Start();\n    FilledRegionType regionType = new FilteredElementCollector(doc).OfClass(typeof(FilledRegionType)).Cast<FilledRegionType>().FirstOrDefault(frt => frt.Name.Contains(\"Concrete\"));\n    View activeView = doc.ActiveView;\n\n    if (regionType != null && activeView != null)\n    {\n        XYZ p1 = new XYZ(0,0,0);\n        XYZ p2 = new XYZ(5 \/ 0.3048, 0,0);\n        XYZ p3 = new XYZ(5 \/ 0.3048, 5 \/ 0.3048,0);\n        XYZ p4 = new XYZ(0, 5 \/ 0.3048,0);\n        CurveLoop profile = new CurveLoop();\n        profile.Append(Line.CreateBound(p1,p2));\n        profile.Append(Line.CreateBound(p2,p3));\n        profile.Append(Line.CreateBound(p3,p4));\n        profile.Append(Line.CreateBound(p4,p1));\n        FilledRegion.Create(doc, regionType.Id, activeView.Id, new List<CurveLoop>{profile});\n    }\n    t.Commit();\n}"}
{"prompt":"Oculta los elementos seleccionados en la vista activa.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> idsToHide = uidoc.Selection.GetElementIds();\nView activeView = doc.ActiveView;\n\nif (activeView != null && idsToHide.Count > 0)\n{\n    activeView.HideElements(idsToHide);\n}"}
{"prompt":"Crea un nuevo Nivel llamado 'Nivel 4' a una elevación de 12 metros.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(12, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Nivel 4\";\n}"}
{"prompt":"Generate a 'Generic - 200mm' wall on 'Level 1' from (0,0) to (10,5).","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == \"Generic - 200mm\") as WallType;\n\nif (level != null && wallType != null)\n{\n    XYZ startPoint = new XYZ(0, 0, 0);\n    XYZ endPoint = new XYZ(10, 5, 0);\n    Line wallCurve = Line.CreateBound(startPoint, endPoint);\n    \/\/ Use a default height of 10ft as it's not specified in the prompt\n    double height = 10.0;\n    Wall.Create(doc, wallCurve, wallType.Id, level.Id, height, 0, false, false);\n}"}
{"prompt":"Agrega un punto de referencia en las coordenadas (6,1,2) dentro del editor de familias.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(6,1,2));"}
{"prompt":"Retrieve a list of all material names.","completion":"List<Material> materials = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().ToList();\nList<string> materialNames = new List<string>();\nforeach(Material m in materials)\n{\n    materialNames.Add(m.Name);\n}\n"}
{"prompt":"Get all rooms on Level 4","completion":"string levelName = \"Level 4\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(targetLevel.Id);\n    FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WherePasses(levelFilter);\n    uidoc.Selection.SetElementIds(collector.ToElementIds());\n}"}
{"prompt":"Change the type of all 'Fixed' windows to 'Casement'.","completion":"FamilySymbol newType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name.Contains(\"Casement\"));\nFamilySymbol oldType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name.Contains(\"Fixed\"));\n\nif (newType != null && oldType != null)\n{\n    List<FamilyInstance> windowsToChange = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().Where(fi => fi.Symbol.Id == oldType.Id).ToList();\n    foreach (FamilyInstance window in windowsToChange)\n    {\n        window.Symbol = newType;\n    }\n}"}
{"prompt":"Retrieve all subcategories from the Walls category.","completion":"Category wallCat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Walls);\nCategoryNameMap subcategories = wallCat.SubCategories;"}
{"prompt":"Modifica el tipo de muro de un muro existente a uno que contenga 'Aislamiento Térmico'.","completion":"Wall wallToChange = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nWallType newType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(x => x.Name.Contains(\"Aislamiento Térmico\") || x.Name.Contains(\"Insulation\"));\n\nif (wallToChange != null && newType != null)\n{\n    wallToChange.ChangeTypeId(newType.Id);\n}"}
{"prompt":"Create a new A1 sheet using the first available title block.","completion":"FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (titleBlock != null)\n{\n    ViewSheet sheet = ViewSheet.Create(doc, titleBlock.Id);\n    if (sheet != null)\n    {\n        sheet.Name = \"A1 - New Sheet\";\n        sheet.SheetNumber = \"A1\";\n    }\n}"}
{"prompt":"Build a 'Roof Terrace' level at 16m.","completion":"string levelName = \"Roof Terrace\";\ndouble elev = UnitUtils.ConvertToInternalUnits(16, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elev);\nnewLevel.Name = levelName;\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Create a new linear dimension type with blue text and 2mm size.","completion":"using (Transaction t = new Transaction(doc, \"Create Dimension Type\"))\n{\n    t.Start();\n    string newTypeName = \"Blue Dimension 2mm\";\n    DimensionType linearDimType = new FilteredElementCollector(doc).OfClass(typeof(DimensionType)).Cast<DimensionType>().FirstOrDefault(dt => dt.StyleType == DimensionStyleType.Linear);\n\n    if (linearDimType != null)\n    {\n        DimensionType newDimType = linearDimType.Duplicate(newTypeName) as DimensionType;\n        if (newDimType != null)\n        {\n            Parameter colorParam = newDimType.get_Parameter(BuiltInParameter.LINE_COLOR);\n            if (colorParam != null && !colorParam.IsReadOnly) colorParam.Set(255);\n            Parameter textSizeParam = newDimType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n            if (textSizeParam != null && !textSizeParam.IsReadOnly) textSizeParam.Set(2 \/ 304.8);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Move a selected element to position (7,8).","completion":"ICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds.Any())\n{\n    foreach (ElementId id in selectedIds)\n    {\n        Element elem = doc.GetElement(id);\n        if (elem != null)\n        {\n            LocationPoint lp = elem.Location as LocationPoint;\n            if (lp != null)\n            {\n                XYZ newPosition = new XYZ(7, 8, lp.Point.Z);\n                lp.Point = newPosition;\n            }\n        }\n    }\n}"}
{"prompt":"Coloca un mueble en las coordenadas (2,3).","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null && furnitureSymbol != null)\n{\n    doc.Create.NewFamilyInstance(new XYZ(UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0), furnitureSymbol, level, StructuralType.NonStructural);\n}"}
{"prompt":"Generate a global length parameter named 'CorridorWidth' with a value of 0.8m.","completion":"string paramName = \"CorridorWidth\";\nGlobalParameter gp = GlobalParameter.Create(doc, paramName, SpecTypeId.Length);\n\nif (gp != null)\n{\n    gp.SetValue(new DoubleParameterValue(UnitUtils.ConvertToInternalUnits(0.8, UnitTypeId.Meters)));\n}"}
{"prompt":"Generate a new 3mm text type in blue color.","completion":"using (Transaction t = new Transaction(doc, \"Create Text Type\"))\n{\n    t.Start();\n    string newTypeName = \"3mm Blue\";\n    TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\n\n    if (defaultType != null)\n    {\n        TextNoteType newType = defaultType.Duplicate(newTypeName) as TextNoteType;\n        if (newType != null)\n        {\n            Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n            if (textSizeParam != null && !textSizeParam.IsReadOnly) textSizeParam.Set(3 \/ 304.8);\n            \n            Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n            if (lineColorParam != null && !lineColorParam.IsReadOnly) lineColorParam.Set(255);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Include a horizontal reference plane named 'Centerline A'.","completion":"using (Transaction t = new Transaction(doc, \"Add Reference Plane\"))\n{\n    t.Start();\n    string rpName = \"Centerline A\";\n    View activeView = doc.ActiveView;\n\n    if (activeView != null)\n    {\n        XYZ bubbleEnd = new XYZ(0, 10, 0);\n        XYZ freeEnd = new XYZ(10, 10, 0);\n        XYZ cutVec = XYZ.BasisZ;\n        ReferencePlane rp = doc.Create.NewReferencePlane(bubbleEnd, freeEnd, cutVec, activeView);\n        if (rp != null)\n        {\n            rp.Name = rpName;\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Pon un pilar estructural en las coordenadas 10,5.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null && columnSymbol != null)\n{\n    doc.Create.NewFamilyInstance(new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0), columnSymbol, level, StructuralType.Column);\n}"}
{"prompt":"Create a new level named 'Basement Floor' at an elevation of -4.5 meters.","completion":"string levelName = \"Basement Floor\";\ndouble elevationInternal = UnitUtils.ConvertToInternalUnits(-4.5, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevationInternal);\nnewLevel.Name = levelName;"}
{"prompt":"Fill the material parameter of all walls with 'Concrete'.","completion":"Material concreteMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name.Contains(\"Concrete\")) as Material;\nvar walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>().ToList();\n\nif (concreteMaterial != null)\n{\n    foreach(Wall w in walls)\n    {\n        Parameter materialParam = w.get_Parameter(BuiltInParameter.STRUCTURAL_MATERIAL_PARAM);\n        if(materialParam != null && !materialParam.IsReadOnly) materialParam.Set(concreteMaterial.Id);\n    }\n}"}
{"prompt":"Sitúa una instancia de la familia 'Ventana Fija 119x60' en el centro de la habitación 'Despacho 102'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 119\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Ventana Fija 102x60\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);"}
{"prompt":"Sitúa las vistas 'Planta Nivel 1' y 'Primer Piso' en el plano 'A-101'.","completion":"ViewSheet sheet = new FilteredElementCollector(doc).OfClass(typeof(ViewSheet)).Cast<ViewSheet>().FirstOrDefault(s => s.SheetNumber == \"A-101\");\nView view1 = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().FirstOrDefault(v => v.Name == \"Planta Nivel 1\");\nView view2 = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().FirstOrDefault(v => v.Name == \"Primer Piso\");\nif (sheet != null && view1 != null && view2 != null)\n{\n    XYZ insertPoint1 = new XYZ(1.0, 1.0, 0);\n    Viewport.Create(doc, sheet.Id, view1.Id, insertPoint1);\n    XYZ insertPoint2 = new XYZ(1.0, 2.0, 0);\n    Viewport.Create(doc, sheet.Id, view2.Id, insertPoint2);\n}"}
{"prompt":"Crea un ensamblaje a partir de los elementos seleccionados.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds != null && selectedIds.Count > 0)\n{\n    AssemblyInstance assemblyInstance = AssemblyInstance.Create(doc, selectedIds, new ElementId(BuiltInCategory.OST_Assemblies));\n    if (assemblyInstance != null)\n    {\n        assemblyInstance.Name = \"Nuevo Ensamblaje\";\n    }\n}"}
{"prompt":"Vira un elemento seleccionado 91 grados sobre su eje Z.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un elemento para rotar\");\nElement elem = doc.GetElement(pickedRef.ElementId);\nLocationPoint lp = elem.Location as LocationPoint;\nLine axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\nElementTransformUtils.RotateElement(doc, elem.Id, axis, Math.PI \/ 91);"}
{"prompt":"Crea una nueva vista de alzado mirando al sur.","completion":"using (Transaction t = new Transaction(doc, \"Create South Elevation\"))\n{\n    t.Start();\n    ViewFamilyType elevationVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(vft => vft.ViewFamily == ViewFamily.Elevation);\n    View activeView = doc.ActiveView;\n\n    if (elevationVFT != null && activeView != null)\n    {\n        ElevationMarker marker = ElevationMarker.CreateElevationMarker(doc, elevationVFT.Id, new XYZ(0, -20 \/ 0.3048, 0), 100);\n        \n        if (marker != null)\n        {\n            View aev = marker.CreateElevation(doc, activeView.Id, 0);\n            if (aev != null)\n            {\n                aev.Name = \"Alzado Sur\";\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Duplica la vista de planta 'Nivel 2' y conviértela en una plantilla de vista.","completion":"using (Transaction t = new Transaction(doc, \"Create View Template\"))\n{\n    t.Start();\n    ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().FirstOrDefault(v => v.Name == \"Nivel 2\");\n    string templateName = \"Plantilla Nivel 2\";\n\n    if (viewToDuplicate != null)\n    {\n        ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n        View newView = doc.GetElement(newViewId) as View;\n        if (newView != null)\n        {\n           \/\/ In older APIs, direct conversion to a template may not be available.\n           \/\/ A common workaround is to set the IsTemplate property if available and writable, \n           \/\/ which is not the case here. This is left as a comment for conceptual understanding.\n           \/\/ newView.IsTemplate = true;\n            newView.Name = templateName;\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Reproduce el nivel 7 con un desfase de 3m y llámalo 'Mezanine'.","completion":"string levelName = \"Nivel 7\";\nLevel levelToCopy = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (levelToCopy != null)\n{\n    double offset = UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, levelToCopy.Elevation + offset);\n    newLevel.Name = \"Mezanine\";\n}"}
{"prompt":"Reload the Revit link 'Structure_LINK.rvt'.","completion":"RevitLinkType linkType = new FilteredElementCollector(doc).OfClass(typeof(RevitLinkType)).Cast<RevitLinkType>().FirstOrDefault(lt => lt.Name == \"Structure_LINK.rvt\");\n\nif (linkType != null)\n{\n    linkType.Reload();\n}"}
{"prompt":"Obtén todas las habitaciones que están en el Nivel 2","completion":"string levelName = \"Nivel 2\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(targetLevel.Id);\n    FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WherePasses(levelFilter);\n    uidoc.Selection.SetElementIds(collector.ToElementIds());\n}"}
{"prompt":"Ubica una instancia de la familia 'Mesa de Oficina' en el centro de la habitación 'Despacho 100'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 100\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Mesa de Oficina\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);"}
{"prompt":"Create a 'Roof Terrace' level at 11m.","completion":"string levelName = \"Roof Terrace\";\ndouble elev = UnitUtils.ConvertToInternalUnits(11, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elev);\nnewLevel.Name = levelName;\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Importa una topografía desde un archivo CSV.","completion":"using (Transaction t = new Transaction(doc, \"Create Topography\"))\n{\n    t.Start();\n    \/\/ CSV file reading is not directly supported by a single API call.\n    \/\/ You would typically read the file line by line, parse the XYZ coordinates,\n    \/\/ and then use the TopographySurface.Create method with a list of points.\n    \/\/ As a placeholder, here's how to create a simple topography from a list of points:\n    IList<XYZ> points = new List<XYZ>();\n    points.Add(new XYZ(0, 0, 0));\n    points.Add(new XYZ(10, 0, 0));\n    points.Add(new XYZ(0, 10, 0));\n    points.Add(new XYZ(10, 10, 5));\n    TopographySurface.Create(doc, points);\n    t.Commit();\n}"}
{"prompt":"Agrega un punto de referencia en las coordenadas (1,2,3) dentro del editor de familias.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(1,2,3));"}
{"prompt":"Position an instance of the 'Office Desk' family in the center of the 'Office 100' room.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Office 100\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Office Desk\") as FamilySymbol;\nif(furnitureSymbol != null && !furnitureSymbol.IsActive) furnitureSymbol.Activate();\nif(room != null)\n{\n    LocationPoint roomCenter = room.Location as LocationPoint;\n    if(roomCenter != null && furnitureSymbol != null && room.Level != null)\n    {\n        doc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Sitúa una etiqueta de material en una cara de muro.","completion":"using (Transaction t = new Transaction(doc, \"Place Material Tag\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference faceRef = localUidoc.Selection.PickObject(ObjectType.Face, \"Selecciona una cara para etiquetar\");\n    XYZ point = localUidoc.Selection.PickPoint(\"Selecciona la ubicación de la etiqueta\");\n    View activeView = doc.ActiveView;\n\n    if (faceRef != null && point != null && activeView != null)\n    {\n        IndependentTag.Create(doc, activeView.Id, faceRef, true, TagMode.TM_ADDBY_MATERIAL, TagOrientation.Horizontal, point);\n    }\n    t.Commit();\n}"}
{"prompt":"Crea una vista de sección llamada 'Sección Longitudinal'.","completion":"ViewFamilyType sectionType = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.Section);\nif (sectionType != null)\n{\n    BoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\n    sectionBox.Min = new XYZ(-30, -3, 0);\n    sectionBox.Max = new XYZ(30, 3, 30);\n    Transform transform = Transform.Identity;\n    sectionBox.Transform = transform;\n    ViewSection sectionView = ViewSection.CreateSection(doc, sectionType.Id, sectionBox);\n    if (sectionView != null)\n    {\n        try { sectionView.Name = \"Sección Longitudinal\"; } catch {}\n    }\n}"}
{"prompt":"Create a text note with given text, location, and target element.","completion":"using (Transaction t = new Transaction(doc, \"Create Text Note\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference targetRef = localUidoc.Selection.PickObject(ObjectType.Element, \"Select an element to annotate\");\n    XYZ textLocation = localUidoc.Selection.PickPoint(\"Choose the text location\");\n\n    View activeView = doc.ActiveView;\n    ElementId defaultTypeId = doc.GetDefaultElementTypeId(ElementTypeGroup.TextNoteType);\n\n    if (targetRef != null && textLocation != null && activeView != null && defaultTypeId != ElementId.InvalidElementId)\n    {\n        TextNoteOptions opts = new TextNoteOptions(defaultTypeId);\n        TextNote note = TextNote.Create(doc, activeView.Id, textLocation, \"REVIEW CLASH\", opts);\n        if (note != null)\n        {\n            note.AddLeader(TextNoteLeaderTypes.TNLT_STRAIGHT_L).End = targetRef.GlobalPoint;\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Pivot a selected element 88 degrees around its Z-axis.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select an element to rotate\");\nElement elem = doc.GetElement(pickedRef.ElementId);\nLocationPoint lp = elem.Location as LocationPoint;\nLine axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\nElementTransformUtils.RotateElement(doc, elem.Id, axis, Math.PI \/ 88);"}
{"prompt":"Construct a new revision and apply it to the active sheet.","completion":"Revision rev = Revision.Create(doc);\nViewSheet sheet = doc.ActiveView as ViewSheet;\n\nif (rev != null && sheet != null)\n{\n    rev.Description = \"Issued for Construction\";\n    rev.RevisionDate = DateTime.Now.ToString(\"yyyy-MM-dd\");\n    rev.IssuedBy = \"BIM Department\";\n    \n    ICollection<ElementId> revisions = sheet.GetAdditionalRevisionIds();\n    revisions.Add(rev.Id);\n    sheet.SetAdditionalRevisionIds(revisions);\n}"}
{"prompt":"Incorpora un punto de referencia en las coordenadas (6,1,8) dentro del editor de familias.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(6,1,8));"}
{"prompt":"Dibuja una región rellena con patrón diagonal.","completion":"using (Transaction t = new Transaction(doc, \"Draw Filled Region\"))\n{\n    t.Start();\n    View activeView = doc.ActiveView;\n    FillPatternElement fillPattern = new FilteredElementCollector(doc).OfClass(typeof(FillPatternElement)).Cast<FillPatternElement>().FirstOrDefault(p => !p.GetFillPattern().IsSolidFill);\n    if (activeView != null && fillPattern != null)\n    {\n        FilledRegionType filledRegionType = new FilteredElementCollector(doc, activeView.Id).OfClass(typeof(FilledRegionType)).FirstOrDefault() as FilledRegionType;\n        if (filledRegionType != null)\n        {\n            FilledRegionType newType = filledRegionType.Duplicate(\"Temp Diagonal Region\") as FilledRegionType;\n            if (newType != null)\n            {\n                newType.ForegroundPatternId = fillPattern.Id;\n                CurveLoop profile = new CurveLoop();\n                profile.Append(Line.CreateBound(new XYZ(0, 0, 0), new XYZ(5, 0, 0)));\n                profile.Append(Line.CreateBound(new XYZ(5, 0, 0), new XYZ(5, 5, 0)));\n                profile.Append(Line.CreateBound(new XYZ(5, 5, 0), new XYZ(0, 5, 0)));\n                profile.Append(Line.CreateBound(new XYZ(0, 5, 0), new XYZ(0, 0, 0)));\n                FilledRegion.Create(doc, newType.Id, activeView.Id, new List<CurveLoop> { profile });\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Ubica un rociador en las coordenadas (1,4,4).","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol sprinklerSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Sprinklers).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (level != null && sprinklerSymbol != null)\n{\n    if (!sprinklerSymbol.IsActive) sprinklerSymbol.Activate();\n    XYZ placementPoint = new XYZ(UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(4, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(4, UnitTypeId.Meters));\n    doc.Create.NewFamilyInstance(placementPoint, sprinklerSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n}"}
{"prompt":"Crea un nuevo Nivel llamado 'Nivel 4' a una elevación de 12 metros.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(12, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Nivel 4\";\n}"}
{"prompt":"Clona el tipo de muro 'Genérico - 150mm' y nómbralo 'Interior - 15cm Yeso'.","completion":"string originalName = \"Genérico - 150mm\";\nstring newName = \"Interior - 15cm Yeso\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif(originalType!=null)\n    originalType.Duplicate(newName);"}
{"prompt":"Obtain the MEP space associated with the room 'Office 104'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Cast<Room>().FirstOrDefault(r => r.Name == \"Office 104\");\nList<Space> spaces = new List<Space>();\n\nif (room != null)\n{\n    spaces = new FilteredElementCollector(doc).OfClass(typeof(Space)).Cast<Space>().Where(s => s.Room != null && s.Room.Id == room.Id).ToList();\n}"}
{"prompt":"Coloca una ventana de 1x1.2 metros en la pared más cercana.","completion":"FamilySymbol originalSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nWall hostWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\n\nif (originalSymbol != null && hostWall != null)\n{\n    \/\/ Duplica el tipo para no modificar el original y asegura un nombre único\n    string newTypeName = $\"Window {UnitUtils.ConvertFromInternalUnits(UnitUtils.ConvertToInternalUnits(1.0, UnitTypeId.Meters), UnitTypeId.Meters)}m x {UnitUtils.ConvertFromInternalUnits(UnitUtils.ConvertToInternalUnits(1.2, UnitTypeId.Meters), UnitTypeId.Meters)}m - {Guid.NewGuid().ToString().Substring(0, 4)}\";\n    FamilySymbol newSymbol = originalSymbol.Duplicate(newTypeName) as FamilySymbol;\n\n    if (!newSymbol.IsActive)\n    {\n        newSymbol.Activate();\n    }\n\n    \/\/ Establece las dimensiones en el nuevo tipo\n    Parameter widthParam = newSymbol.LookupParameter(\"Width\");\n    Parameter heightParam = newSymbol.LookupParameter(\"Height\");\n\n    if (widthParam != null && heightParam != null)\n    {\n        widthParam.Set(UnitUtils.ConvertToInternalUnits(1.0, UnitTypeId.Meters));\n        heightParam.Set(UnitUtils.ConvertToInternalUnits(1.2, UnitTypeId.Meters));\n    }\n\n    Level level = doc.GetElement(hostWall.LevelId) as Level;\n    LocationCurve locationCurve = hostWall.Location as LocationCurve;\n    if (level != null && locationCurve != null)\n    {\n        XYZ insertionPoint = locationCurve.Curve.Evaluate(0.5, true);\n        doc.Create.NewFamilyInstance(insertionPoint, newSymbol, hostWall, level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Build a global length parameter named 'CorridorWidth' with a value of 0.4m.","completion":"string paramName = \"CorridorWidth\";\nGlobalParameter gp = GlobalParameter.Create(doc, paramName, SpecTypeId.Length);\n\nif (gp != null)\n{\n    gp.SetValue(new DoubleParameterValue(UnitUtils.ConvertToInternalUnits(0.4, UnitTypeId.Meters)));\n}"}
{"prompt":"Crea una nueva vista de alzado mirando al sur.","completion":"using (Transaction t = new Transaction(doc, \"Create South Elevation\"))\n{\n    t.Start();\n    ViewFamilyType elevationVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(vft => vft.ViewFamily == ViewFamily.Elevation);\n    View activeView = doc.ActiveView;\n\n    if (elevationVFT != null && activeView != null)\n    {\n        ElevationMarker marker = ElevationMarker.CreateElevationMarker(doc, elevationVFT.Id, new XYZ(0, -20 \/ 0.3048, 0), 100);\n        \n        if (marker != null)\n        {\n            View aev = marker.CreateElevation(doc, activeView.Id, 0);\n            if (aev != null)\n            {\n                aev.Name = \"Alzado Sur\";\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Modify the type of a selected floor to 'Concrete 20cm'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a floor\");\n\nif (pickedRef != null)\n{\n    Floor floorToChange = doc.GetElement(pickedRef) as Floor;\n    FloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name == \"Concrete 20cm\");\n    \n    if (floorToChange != null && newType != null)\n    {\n        floorToChange.ChangeTypeId(newType.Id);\n    }\n}"}
{"prompt":"Select all walls on 'Level 5' and change their comment to 'REVIEW INSULATION'.","completion":"string levelName = \"Level 5\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(targetLevel.Id);\n    FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(levelFilter);\n    foreach (Element wall in collector)\n    {\n        Parameter commentsParam = wall.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n        if (commentsParam != null && !commentsParam.IsReadOnly) { commentsParam.Set(\"REVIEW INSULATION\"); }\n    }\n}"}
{"prompt":"Asigna el material 'Roble Oscuro' a la primera capa de un tipo de muro.","completion":"using (Transaction t = new Transaction(doc, \"Assign Material\"))\n{\n    t.Start();\n    WallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.GetCompoundStructure() != null);\n    Material steel = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m => m.Name.Contains(\"Steel\") || m.Name.Contains(\"Roble Oscuro\"));\n\n    if (wallType != null && steel != null)\n    {\n        CompoundStructure cs = wallType.GetCompoundStructure();\n        if (cs != null && cs.LayerCount > 0)\n        {\n            cs.SetMaterialId(0, steel.Id);\n            wallType.SetCompoundStructure(cs);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea una nueva cota de nivel llamada 'Nivel 5' a una elevación de 10 metros.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\nif (newLevel != null)\n{\n    try { newLevel.Name = \"Nivel 5\"; } catch {}\n}"}
{"prompt":"Construct a new level named 'Basement Floor' at an elevation of -4.5 meters.","completion":"double elevationInternal = UnitUtils.ConvertToInternalUnits(-4.5, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevationInternal);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Basement Floor\";\n}"}
{"prompt":"Temporarily isolate all furniture in the active view.","completion":"ICollection<ElementId> furnitureIds = new FilteredElementCollector(doc, doc.ActiveView.Id).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsNotElementType().ToElementIds();\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.IsolateElementsTemporary(furnitureIds);\n}"}
{"prompt":"Crea un nuevo tipo de muro de 27cm llamado 'Muro Estructural 21cm'.","completion":"WallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif(wallTypeToDuplicate != null)\n{\n    WallType newWallType = null;\n    try { newWallType = wallTypeToDuplicate.Duplicate(\"Muro Estructural 21cm\") as WallType; } catch {}\n    if(newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if(cs != null && cs.GetLayers().Any())\n        {\n            int coreLayerIndex = cs.GetFirstCoreLayerIndex();\n            if(coreLayerIndex != -1) \n            {\n                cs.SetLayerFunction(coreLayerIndex, MaterialFunctionAssignment.Structure);\n                cs.SetLayerWidth(coreLayerIndex, UnitUtils.ConvertToInternalUnits(27, UnitTypeId.Centimeters));\n                newWallType.SetCompoundStructure(cs);\n            }\n        }\n    }\n}"}
{"prompt":"Clona el nivel 1 con un desfase de 8m y llámalo 'Mezanine'.","completion":"string levelName = \"Mezanine\";\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\n\nif (level1 != null)\n{\n    double newElevation = level1.ProjectElevation + UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, newElevation);\n    if (newLevel != null)\n    {\n        newLevel.Name = levelName;\n    }\n}"}
{"prompt":"Fetch the MEP space associated with the room 'Office 98'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Cast<Room>().FirstOrDefault(r => r.Name == \"Office 98\");\nList<Space> spaces = new List<Space>();\n\nif (room != null)\n{\n    spaces = new FilteredElementCollector(doc).OfClass(typeof(Space)).Cast<Space>().Where(s => s.Room != null && s.Room.Id == room.Id).ToList();\n}"}
{"prompt":"Ubica una instancia de la familia 'Mesa de Oficina' en el centro de la habitación 'Despacho 97'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 97\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Mesa de Oficina\") as FamilySymbol;\nif(furnitureSymbol != null && !furnitureSymbol.IsActive) furnitureSymbol.Activate();\nif(room != null)\n{\n    LocationPoint roomCenter = room.Location as LocationPoint;\n    if(roomCenter != null && furnitureSymbol != null && room.Level != null)\n    {\n        doc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Draw a 300x200 millimeter rectangular ventilation duct.","completion":"using (Transaction t = new Transaction(doc, \"Create Duct\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    DuctType ductType = new FilteredElementCollector(doc).OfClass(typeof(DuctType)).Cast<DuctType>().FirstOrDefault(d => d.Shape == ConnectorProfileType.Rectangular);\n    MEPSystemType systemType = new FilteredElementCollector(doc).OfClass(typeof(MEPSystemType)).Cast<MEPSystemType>().FirstOrDefault(s => s.SystemClassification == MEPSystemClassification.SupplyAir);\n\n    if (level != null && ductType != null && systemType != null)\n    {\n        XYZ p1 = new XYZ(0, 0, 3 \/ 0.3048);\n        XYZ p2 = new XYZ(10 \/ 0.3048, 0, 3 \/ 0.3048);\n        Duct duct = Duct.Create(doc, systemType.Id, ductType.Id, level.Id, p1, p2);\n\n        if (duct != null)\n        {\n            Parameter widthParam = duct.get_Parameter(BuiltInParameter.RBS_CURVE_WIDTH_PARAM);\n            Parameter heightParam = duct.get_Parameter(BuiltInParameter.RBS_CURVE_HEIGHT_PARAM);\n            if (widthParam != null && !widthParam.IsReadOnly) widthParam.Set(300 \/ 304.8);\n            if (heightParam != null && !heightParam.IsReadOnly) heightParam.Set(200 \/ 304.8);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Generate a floor plan view for 'Level 2'.","completion":"string levelName = \"Level 2\";\nLevel level3 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.FloorPlan);\n\nif (level3 != null && vft != null)\n{\n    ViewPlan viewPlan = ViewPlan.Create(doc, vft.Id, level3.Id);\n}"}
{"prompt":"Une la geometría de una columna y un suelo que se cruzan.","completion":"Element column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().FirstOrDefault();\nElement floor = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault();\n\nif (column != null && floor != null)\n{\n    JoinGeometryUtils.JoinGeometry(doc, column, floor);\n}"}
{"prompt":"Vira un elemento seleccionado 85 grados sobre su eje Z.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un elemento para rotar\");\nElement elem = doc.GetElement(pickedRef.ElementId);\nLocationPoint lp = elem.Location as LocationPoint;\nLine axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\nElementTransformUtils.RotateElement(doc, elem.Id, axis, Math.PI \/ 85);"}
{"prompt":"Build a new level named 'Mezzanine' at 7.9 meters elevation.","completion":"string levelName = \"Mezzanine\";\ndouble elevation = UnitUtils.ConvertToInternalUnits(7.9, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Create a new Level named 'Level 1' at an elevation of 11 meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(11, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Level 1\";\n}"}
{"prompt":"Copy the 'Generic - 145mm' wall type and name it 'Interior - 18cm Plaster'.","completion":"string originalName = \"Generic - 145mm\";\nstring newName = \"Interior - 18cm Plaster\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif(originalType!=null)\n    originalType.Duplicate(newName);"}
{"prompt":"Ubica una instancia de la familia 'M_Chair-Breuer' en el centro de la habitación 'Despacho 100'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 100\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"M_Chair-Breuer\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);"}
{"prompt":"Crea una nueva vista de alzado mirando al sur.","completion":"string viewName = \"Alzado Sur (Nuevo)\";\nViewFamilyType elevationVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(vft => vft.ViewFamily == ViewFamily.Elevation);\nElevationMarker marker = ElevationMarker.CreateElevationMarker(doc, elevationVFT.Id, new XYZ(0, -20, 0), 100);\nView aev = marker.CreateElevation(doc, doc.ActiveView.Id, 0);\naev.Name = viewName;"}
{"prompt":"Encuentra el elemento de pórtico estructural con la marca 'B-101'.","completion":"string markValue = \"B-101\";\nElement framingElement = new FilteredElementCollector(doc)\n    .OfCategory(BuiltInCategory.OST_StructuralFraming)\n    .WhereElementIsNotElementType()\n    .FirstOrDefault(e => {\n        Parameter p = e.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n        return p != null && p.AsString() == markValue;\n    });"}
{"prompt":"Assign the 'Steel' material to the first layer of a wall type.","completion":"using (Transaction t = new Transaction(doc, \"Assign Material\"))\n{\n    t.Start();\n    WallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.GetCompoundStructure() != null);\n    Material steel = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m => m.Name.Contains(\"Steel\"));\n\n    if (wallType != null && steel != null)\n    {\n        CompoundStructure cs = wallType.GetCompoundStructure();\n        if (cs != null && cs.LayerCount > 0)\n        {\n            cs.SetMaterialId(0, steel.Id);\n            wallType.SetCompoundStructure(cs);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Replicate the 'Generic - 144mm' wall type and name it 'Interior - 15cm Plaster'.","completion":"string originalName = \"Generic - 144mm\";\nstring newName = \"Interior - 15cm Plaster\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif (originalType != null)\n{\n    WallType newType = originalType.Duplicate(newName) as WallType;\n}"}
{"prompt":"Coloca pilares 'MLO-UC305x305x97' en cada intersección de la retícula de ejes en el 'Nivel 1'.","completion":"FamilySymbol columnType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(s => s.Name == \"MLO-UC305x305x97\");\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\n\nFilteredElementCollector gridCollector = new FilteredElementCollector(doc).OfClass(typeof(Grid));\nIList<Grid> grids = gridCollector.Cast<Grid>().ToList();\n\nif (columnType != null && level != null && grids.Count > 1)\n{\n    if (!columnType.IsActive) columnType.Activate();\n\n    for (int i = 0; i < grids.Count; i++)\n    {\n        for (int j = i + 1; j < grids.Count; j++)\n        {\n            SetComparisonResult result = grids[i].Curve.Intersect(grids[j].Curve, out IntersectionResultArray results);\n            if (result == SetComparisonResult.Overlap && results != null && !results.IsEmpty)\n            {\n                XYZ intersectionPoint = results.get_Item(0).XYZPoint;\n                doc.Create.NewFamilyInstance(intersectionPoint, columnType, level, StructuralType.Column);\n            }\n        }\n    }\n}"}
{"prompt":"Obtén los IDs de todas las vistas 3D que empiezan con 'Coord' para exportación.","completion":"List<ElementId> viewsToExport = new FilteredElementCollector(doc).OfClass(typeof(View3D)).Cast<View3D>().Where(v => v.Name.StartsWith(\"Coord\") && !v.IsTemplate).Select(v => v.Id).ToList();\n"}
{"prompt":"Find all clashes between pipes and beams.","completion":"ICollection<ElementId> pipeIds = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_PipeCurves).WhereElementIsNotElementType().ToElementIds();\nICollection<ElementId> beamIds = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsNotElementType().ToElementIds();\n\nif(pipeIds.Count > 0 && beamIds.Count > 0)\n{\n    List<ElementFilter> beamFilters = new List<ElementFilter>();\n    foreach(ElementId beamId in beamIds)\n    {\n        Element beam = doc.GetElement(beamId);\n        if(beam != null) beamFilters.Add(new ElementIntersectsElementFilter(beam));\n    }\n    LogicalOrFilter clashFilter = new LogicalOrFilter(beamFilters);\n    ICollection<ElementId> clashingPipeIds = new FilteredElementCollector(doc, pipeIds).WherePasses(clashFilter).ToElementIds();\n    \/\/ clashingPipeIds contains the IDs of clashing elements; selection\/display is external.\n}"}
{"prompt":"Define the sill height of all windows to 902mm.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits(902, UnitTypeId.Millimeters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Coloca una instancia de la familia 'Mesa de Oficina' en el centro de la habitación 'Despacho 106'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 106\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Mesa de Oficina\") as FamilySymbol;\nif(furnitureSymbol != null && !furnitureSymbol.IsActive) furnitureSymbol.Activate();\nif(room != null)\n{\n    LocationPoint roomCenter = room.Location as LocationPoint;\n    if(roomCenter != null && furnitureSymbol != null && room.Level != null)\n    {\n        doc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Generate a floor that matches the boundary of the 'Kitchen' room.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Kitchen\") as Room;\n\nif (room != null)\n{\n    Level level = room.Level;\n    FloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\n\n    if (level != null && floorType != null)\n    {\n        SpatialElementBoundaryOptions options = new SpatialElementBoundaryOptions();\n        IList<IList<BoundarySegment>> boundarySegments = room.GetBoundarySegments(options);\n        IList<BoundarySegment> outerBoundary = boundarySegments.FirstOrDefault();\n\n        if (outerBoundary != null && outerBoundary.Any())\n        {\n            CurveLoop curveLoop = new CurveLoop();\n            foreach (BoundarySegment segment in outerBoundary)\n            {\n                curveLoop.Append(segment.GetCurve());\n            }\n            Floor.Create(doc, new List<CurveLoop> { curveLoop }, floorType.Id, level.Id);\n        }\n    }\n}"}
{"prompt":"Cambia el tipo de una losa por uno que contenga 'Vidrio Templado'.","completion":"Floor floorToChange = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault() as Floor;\nFloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name.Contains(\"Vidrio Templado\") || ft.Name.Contains(\"Concrete\"));\n\nif (floorToChange != null && newType != null)\n{\n    floorToChange.ChangeTypeId(newType.Id);\n}"}
{"prompt":"Construct a detail group with the selected detail items.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds != null && selectedIds.Count > 0)\n{\n    List<ElementId> detailIds = new List<ElementId>();\n    foreach(ElementId id in selectedIds)\n    {\n        Element elem = doc.GetElement(id);\n        if (elem != null && elem.Category != null && elem.Category.CategoryType == CategoryType.Annotation)\n        {\n            detailIds.Add(id);\n        }\n    }\n\n    if (detailIds.Count > 0)\n    {\n        Group group = doc.Create.NewGroup(detailIds);\n        if (group != null)\n        {\n            group.Name = \"Typical Detail 1\";\n        }\n    }\n}"}
{"prompt":"Modify the type of a floor to one that contains 'Concrete'.","completion":"Floor floorToChange = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault() as Floor;\nFloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name.Contains(\"Concrete\"));\n\nif (floorToChange != null && newType != null)\n{\n    floorToChange.ChangeTypeId(newType.Id);\n}"}
{"prompt":"Agrega un nivel llamado 'Nivel Azotea' a 16.2 metros.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(16.2, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Nivel Azotea\";\n}"}
{"prompt":"Assign the 'Mark' parameter of all selected walls to 'W-EXT-01'.","completion":"using (Transaction t = new Transaction(doc, \"Set Wall Mark\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    ICollection<ElementId> selectedIds = localUidoc.Selection.GetElementIds();\n\n    if (selectedIds != null && selectedIds.Count > 0)\n    {\n        foreach(ElementId id in selectedIds)\n        {\n            Element elem = doc.GetElement(id);\n            if(elem is Wall)\n            {\n                Parameter p = elem.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n                if (p != null && !p.IsReadOnly)\n                {\n                    p.Set(\"W-EXT-01\");\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Update the type of all 'Fixed' windows to 'Casement'.","completion":"FamilySymbol newType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name.Contains(\"Casement\"));\nFamilySymbol oldType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name.Contains(\"Fixed\"));\n\nif (newType != null && oldType != null)\n{\n    List<FamilyInstance> windowsToChange = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().Where(fi => fi.Symbol.Id == oldType.Id).ToList();\n    foreach (FamilyInstance window in windowsToChange)\n    {\n        window.Symbol = newType;\n    }\n}"}
{"prompt":"Add a horizontal grid line to a curtain wall at a height of 1.5 meters.","completion":"using (Transaction t = new Transaction(doc, \"Add Curtain Grid Line\"))\n{\n    t.Start();\n    Wall cw = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Cast<Wall>().FirstOrDefault(w => w.CurtainGrid != null);\n\n    if (cw != null)\n    {\n        CurtainGrid cg = cw.CurtainGrid;\n        if (cg != null)\n        {\n            LocationCurve locCurve = cw.Location as LocationCurve;\n            if(locCurve != null)\n            {\n                 XYZ startPoint = locCurve.Curve.GetEndPoint(0);\n                 XYZ endPoint = locCurve.Curve.GetEndPoint(1);\n                 XYZ midPoint = (startPoint + endPoint) \/ 2;\n                 XYZ gridLinePoint = new XYZ(midPoint.X, midPoint.Y, 1.5 \/ 0.3048);\n                 cg.AddGridLine(false, gridLinePoint, false);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Incorpora un punto al Path of Travel seleccionado.","completion":"\/\/ PathOfTravel related methods like GetPath and Update are likely inaccessible in this environment.\n\/\/ The following code is a placeholder to show the intent.\n\/*\nusing (Transaction t = new Transaction(doc, \"Update Path of Travel\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference pickedRef = localUidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un Path of Travel\");\n\n    if (pickedRef != null)\n    {\n        PathOfTravel pot = doc.GetElement(pickedRef) as PathOfTravel;\n        if (pot != null)\n        {\n            IList<XYZ> points = pot.GetPath();\n            if (points != null && points.Count >= 2)\n            {\n                XYZ midPoint = (points[0] + points[1]) \/ 2;\n                points.Insert(1, midPoint); \n                pot.Update(points);\n            }\n        }\n    }\n    t.Commit();\n}\n*\/"}
{"prompt":"Generate an electrical conduit with a 1-inch diameter.","completion":"using (Transaction t = new Transaction(doc, \"Create Conduit\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    ElementId conduitTypeId = new FilteredElementCollector(doc).OfClass(typeof(ConduitType)).FirstElementId();\n\n    if (level != null && conduitTypeId != null && conduitTypeId != ElementId.InvalidElementId)\n    {\n        XYZ start = new XYZ(0, 0, 3 \/ 0.3048);\n        XYZ end = new XYZ(5 \/ 0.3048, 0, 3 \/ 0.3048);\n        Conduit conduit = Conduit.Create(doc, conduitTypeId, start, end, level.Id);\n\n        if (conduit != null)\n        {\n            Parameter diameterParam = conduit.get_Parameter(BuiltInParameter.RBS_CONDUIT_DIAMETER_PARAM);\n            if (diameterParam != null && !diameterParam.IsReadOnly)\n            {\n                diameterParam.Set(1.0\/12.0);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Incorpora una etiqueta a la columna más cercana al origen.","completion":"using (Transaction t = new Transaction(doc, \"Tag Column\"))\n{\n    t.Start();\n    View activeView = doc.ActiveView;\n    FamilyInstance column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().Cast<FamilyInstance>().OrderBy(c => {\n        LocationPoint lp = c.Location as LocationPoint;\n        return lp != null ? lp.Point.DistanceTo(XYZ.Zero) : double.MaxValue;\n    }).FirstOrDefault();\n\n    if (activeView != null && column != null)\n    {\n        LocationPoint loc = column.Location as LocationPoint;\n        if (loc != null)\n        {\n            IndependentTag.Create(doc, activeView.Id, new Reference(column), true, TagMode.TM_ADDBY_CATEGORY, TagOrientation.Horizontal, loc.Point);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Reproduce el nivel 6 con un desfase de 3m y llámalo 'Mezanine'.","completion":"string levelName = \"Nivel 6\";\nLevel levelToCopy = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (levelToCopy != null)\n{\n    double offset = UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, levelToCopy.Elevation + offset);\n    newLevel.Name = \"Mezanine\";\n}"}
{"prompt":"Obtén una lista de los nombres de todos los materiales.","completion":"List<Material> materials = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().ToList();\nList<string> materialNames = new List<string>();\nforeach(Material m in materials)\n{\n    materialNames.Add(m.Name);\n}\n"}
{"prompt":"Hide all walls shorter than 2 meters.","completion":"double lengthThreshold = UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\nList<Wall> walls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Cast<Wall>().ToList();\nList<ElementId> shortWallIds = new List<ElementId>();\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    foreach(Wall wall in walls)\n    {\n        Parameter lengthParam = wall.get_Parameter(BuiltInParameter.CURVE_ELEM_LENGTH);\n        if(lengthParam != null && lengthParam.HasValue && lengthParam.AsDouble() < lengthThreshold)\n        {\n            shortWallIds.Add(wall.Id);\n        }\n    }\n    if (shortWallIds.Count > 0)\n    {\n        activeView.HideElements(shortWallIds);\n    }\n}"}
{"prompt":"Create a global length parameter named 'CorridorWidth' with a value of 0.8m.","completion":"string paramName = \"CorridorWidth\";\nGlobalParameter gp = GlobalParameter.Create(doc, paramName, SpecTypeId.Length);\n\nif (gp != null)\n{\n    gp.SetValue(new DoubleParameterValue(UnitUtils.ConvertToInternalUnits(0.8, UnitTypeId.Meters)));\n}"}
{"prompt":"Crea un nivel 'Roof Terrace' a 19m.","completion":"string levelName = \"Roof Terrace\";\ndouble elev = UnitUtils.ConvertToInternalUnits(19, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elev);\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Copia todos los elementos del Nivel 1 al Nivel 2.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\nLevel level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 2\") as Level;\n\nif (level1 != null && level2 != null)\n{\n    ICollection<ElementId> elementsToCopy = new FilteredElementCollector(doc, level1.Id).WhereElementIsNotElementType().ToElementIds();\n    double elevationDiff = level2.ProjectElevation - level1.ProjectElevation;\n    XYZ translation = new XYZ(0, 0, elevationDiff);\n    if (elementsToCopy.Count > 0)\n    {\n        ElementTransformUtils.CopyElements(doc, elementsToCopy, translation);\n    }\n}"}
{"prompt":"Obtén una lista de todas las familias y sus tipos.","completion":"List<string> familyAndTypeNames = new List<string>();\nList<Family> families = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().ToList();\nforeach (Family fam in families)\n{\n    familyAndTypeNames.Add($\"Familia: {fam.Name}\");\n    foreach (ElementId symbolId in fam.GetFamilySymbolIds())\n    {\n        FamilySymbol sym = doc.GetElement(symbolId) as FamilySymbol;\n        if (sym != null)\n        {\n            familyAndTypeNames.Add($\"\\tTipo: {sym.Name}\");\n        }\n    }\n}"}
{"prompt":"Build a new A3 sheet and place a legend on it.","completion":"using (Transaction t = new Transaction(doc, \"Create Sheet with Legend\"))\n{\n    t.Start();\n    FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(tb => tb.Name.Contains(\"A3\"));\n    View legendView = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().FirstOrDefault(v => v.ViewType == ViewType.Legend);\n\n    if (titleBlock != null && legendView != null)\n    {\n        ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n        if (newSheet != null)\n        {\n            BoundingBoxUV sheetBox = newSheet.Outline;\n            UV centerUv = (sheetBox.Min + sheetBox.Max) \/ 2.0;\n            XYZ centerPoint = new XYZ(centerUv.U, centerUv.V, 0);\n            Viewport.Create(doc, newSheet.Id, legendView.Id, centerPoint);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea una nueva vista de alzado mirando al sur.","completion":"using (Transaction t = new Transaction(doc, \"Create South Elevation\"))\n{\n    t.Start();\n    ViewFamilyType elevationVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(vft => vft.ViewFamily == ViewFamily.Elevation);\n    View activeView = doc.ActiveView;\n\n    if (elevationVFT != null && activeView != null)\n    {\n        ElevationMarker marker = ElevationMarker.CreateElevationMarker(doc, elevationVFT.Id, new XYZ(0, -20 \/ 0.3048, 0), 100);\n        \n        if (marker != null)\n        {\n            View aev = marker.CreateElevation(doc, activeView.Id, 0);\n            if (aev != null)\n            {\n                aev.Name = \"Alzado Sur\";\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Add a reference point at coordinates (1,2,3) inside the family editor.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(1,2,3));"}
{"prompt":"Modifica el tipo de la ventana seleccionada al tipo 'Fija 119x60'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una ventana\");\nFamilySymbol newType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name == \"Fija 119x60\");\nif (pickedRef != null && newType != null)\n{\n    FamilyInstance window = doc.GetElement(pickedRef.ElementId) as FamilyInstance;\n    if (window != null)\n    {\n        window.Symbol = newType;\n    }\n}"}
{"prompt":"Establece el parámetro 'Marca' de todos los muros seleccionados a 'M-EXT-6'.","completion":"using (Transaction t = new Transaction(doc, \"Set Wall Mark\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    ICollection<ElementId> selectedIds = localUidoc.Selection.GetElementIds();\n\n    if (selectedIds != null && selectedIds.Count > 6)\n    {\n        foreach(ElementId id in selectedIds)\n        {\n            Element elem = doc.GetElement(id);\n            if(elem is Wall)\n            {\n                Parameter markParam = elem.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n                if (markParam != null && !markParam.IsReadOnly) markParam.Set(\"M-EXT-01\");\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea un suelo con un hueco circular en el centro.","completion":"using (Transaction t = new Transaction(doc, \"Create Floor with Hole\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    FloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\n\n    if (level != null && floorType != null)\n    {\n        XYZ p1 = new XYZ(-10 \/ 0.3048, -10 \/ 0.3048, 0);\n        XYZ p2 = new XYZ(10 \/ 0.3048, -10 \/ 0.3048, 0);\n        XYZ p3 = new XYZ(10 \/ 0.3048, 10 \/ 0.3048, 0);\n        XYZ p4 = new XYZ(-10 \/ 0.3048, 10 \/ 0.3048, 0);\n        CurveLoop outerLoop = new CurveLoop();\n        outerLoop.Append(Line.CreateBound(p1, p2));\n        outerLoop.Append(Line.CreateBound(p2, p3));\n        outerLoop.Append(Line.CreateBound(p3, p4));\n        outerLoop.Append(Line.CreateBound(p4, p1));\n\n        XYZ center = XYZ.Zero;\n        double radius = 2 \/ 0.3048;\n        CurveLoop innerLoop = new CurveLoop();\n        innerLoop.Append(Arc.Create(center - XYZ.BasisX * radius, center + XYZ.BasisX * radius, center + XYZ.BasisY * radius));\n        innerLoop.Append(Arc.Create(center + XYZ.BasisX * radius, center - XYZ.BasisX * radius, center - XYZ.BasisY * radius));\n\n        Floor.Create(doc, new List<CurveLoop> { outerLoop, innerLoop }, floorType.Id, level.Id);\n    }\n    t.Commit();\n}"}
{"prompt":"Create a new level 'Level 6' at an elevation of 9 meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(9, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\nif (newLevel != null)\n{\n    try { newLevel.Name = \"Level 6\"; } catch {}\n}"}
{"prompt":"Coloca un pilar estructural en (10,5), asegurándote de que el tipo de familia esté activo.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null && columnSymbol != null)\n{\n    if (!columnSymbol.IsActive)\n    {\n        columnSymbol.Activate();\n    }\n    doc.Create.NewFamilyInstance(new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0), columnSymbol, level, StructuralType.Column);\n}"}
{"prompt":"Get a list of all material names.","completion":"List<Material> materials = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().ToList();\nList<string> materialNames = new List<string>();\nforeach(Material m in materials)\n{\n    materialNames.Add(m.Name);\n}\n"}
{"prompt":"Pon un pilar estructural en las coordenadas 10,5.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (level != null && columnSymbol != null)\n{\n    if (!columnSymbol.IsActive) { columnSymbol.Activate(); }\n    XYZ point = new XYZ(10, 5, 0);\n    doc.Create.NewFamilyInstance(point, columnSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n}"}
{"prompt":"Define the sill height of all windows to 900mm.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits(900, UnitTypeId.Millimeters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Set the sill height of all windows to 896mm.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits(896, UnitTypeId.Millimeters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Replicate the active view and name it 'Working Copy'.","completion":"View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    ElementId newViewId = activeView.Duplicate(ViewDuplicateOption.Duplicate);\n    View newView = doc.GetElement(newViewId) as View;\n    if (newView != null)\n    {\n        newView.Name = \"Working Copy\";\n    }\n}"}
{"prompt":"Incorpora un punto al Path of Travel seleccionado.","completion":"\/\/ PathOfTravel related methods are likely inaccessible in this environment.\n\/\/ The following code is a placeholder to show the intent.\n\/*\nusing (Transaction t = new Transaction(doc, \"Update Path of Travel\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference pickedRef = localUidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un Path of Travel\");\n\n    if (pickedRef != null)\n    {\n        PathOfTravel pot = doc.GetElement(pickedRef) as PathOfTravel;\n        if (pot != null)\n        {\n            IList<XYZ> points = pot.GetPath();\n            if (points != null && points.Count >= 2)\n            {\n                XYZ midPoint = (points[0] + points[1]) \/ 2;\n                points.Insert(1, midPoint); \n                pot.Update(points);\n            }\n        }\n    }\n    t.Commit();\n}\n*\/"}
{"prompt":"Put the 'Level 1' view in the center of the active sheet.","completion":"ViewPlan viewToPlace = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v => v.Name == \"Level 1\") as ViewPlan;\nViewSheet activeSheet = doc.ActiveView as ViewSheet;\n\nif (viewToPlace != null && activeSheet != null)\n{\n    BoundingBoxUV sheetBox = activeSheet.Outline;\n    XYZ centerPoint = new XYZ((sheetBox.Min.U + sheetBox.Max.U) \/ 2, (sheetBox.Min.V + sheetBox.Max.V) \/ 2, 0);\n    Viewport.Create(doc, activeSheet.Id, viewToPlace.Id, centerPoint);\n}"}
{"prompt":"Cambia el tipo de la ventana seleccionada al tipo 'Fija 121x60'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una ventana\");\nFamilySymbol newType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name == \"Fija 121x60\");\nif (pickedRef != null && newType != null)\n{\n    FamilyInstance window = doc.GetElement(pickedRef.ElementId) as FamilyInstance;\n    if (window != null)\n    {\n        window.Symbol = newType;\n    }\n}"}
{"prompt":"Inserta el prefijo 'PLANTA-' a todas las vistas de plano.","completion":"string prefix = \"PLANTA-\";\nList<ViewPlan> planViews = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().Where(v => !v.IsTemplate).ToList();\nforeach(ViewPlan view in planViews)\n{\n    if (view != null)\n    {\n        view.Name = prefix + view.Name;\n    }\n}"}
{"prompt":"Define the sill height of all windows to 901mm.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits(901, UnitTypeId.Millimeters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Create a structural beam between (1,1,6) and (5,1,6) on Level 2","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 2\") as Level;\nFamilySymbol beamType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (beamType != null && level != null)\n{\n    if(!beamType.IsActive) beamType.Activate();\n    XYZ start = new XYZ(1, 1, 6);\n    XYZ end = new XYZ(5, 1, 6);\n    if (start.IsAlmostEqualTo(end)) return;\n    Line beamCurve = Line.CreateBound(start, end);\n    doc.Create.NewFamilyInstance(beamCurve, beamType, level, Autodesk.Revit.DB.Structure.StructuralType.Beam);\n}"}
{"prompt":"Coloca una instancia de la familia 'Mesa de Oficina' en el centro de la habitación 'Despacho 96'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 96\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Mesa de Oficina\") as FamilySymbol;\nif(furnitureSymbol != null && !furnitureSymbol.IsActive) furnitureSymbol.Activate();\nif(room != null)\n{\n    LocationPoint roomCenter = room.Location as LocationPoint;\n    if(roomCenter != null && furnitureSymbol != null && room.Level != null)\n    {\n        doc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Copy the 'Generic - 148mm' wall type and name it 'Interior - 14cm Plaster'.","completion":"string originalName = \"Generic - 148mm\";\nstring newName = \"Interior - 14cm Plaster\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif (originalType != null)\n{\n    WallType newType = originalType.Duplicate(newName) as WallType;\n}"}
{"prompt":"Duplica el nivel 1 con un desfase de 3m y llámalo 'Mezanine'.","completion":"string levelName = \"Mezanine\";\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\n\nif (level1 != null)\n{\n    double newElevation = level1.ProjectElevation + UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, newElevation);\n    if (newLevel != null)\n    {\n        newLevel.Name = levelName;\n    }\n}"}
{"prompt":"Duplica el tipo de muro 'Genérico - 181mm' y nómbralo 'Interior - 15cm Yeso'.","completion":"string originalName = \"Genérico - 181mm\";\nstring newName = \"Interior - 15cm Yeso\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif (originalType != null)\n{\n    WallType newType = originalType.Duplicate(newName) as WallType;\n}"}
{"prompt":"Position a window 1m wide and 1.2m high into a wall.","completion":"Wall hostWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nFamilySymbol originalSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (originalSymbol != null && hostWall != null)\n{\n    string newTypeName = \"Window 1.0m x 1.2m\";\n    FamilySymbol newSymbol = null;\n    try { newSymbol = originalSymbol.Duplicate(newTypeName) as FamilySymbol; } catch {}\n    if (newSymbol == null) { newSymbol = new FilteredElementCollector(doc).OfClass(typeof(FamilySymbol)).Cast<FamilySymbol>().FirstOrDefault(s => s.Name == newTypeName); }\n    if(newSymbol != null)\n    {\n        if (!newSymbol.IsActive) { newSymbol.Activate(); }\n        Parameter widthParam = newSymbol.LookupParameter(\"Width\");\n        if (widthParam != null) widthParam.Set(UnitUtils.ConvertToInternalUnits(1.0, UnitTypeId.Meters));\n        Parameter heightParam = newSymbol.LookupParameter(\"Height\");\n        if (heightParam != null) heightParam.Set(UnitUtils.ConvertToInternalUnits(1.2, UnitTypeId.Meters));\n        Level level = doc.GetElement(hostWall.LevelId) as Level;\n        LocationCurve locationCurve = hostWall.Location as LocationCurve;\n        if (level != null && locationCurve != null)\n        {\n            XYZ insertionPoint = locationCurve.Curve.Evaluate(0.5, true);\n            doc.Create.NewFamilyInstance(insertionPoint, newSymbol, hostWall, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n        }\n    }\n}"}
{"prompt":"Add 'Bearing Footing - 36 x 12' foundations to all walls on Level 1.","completion":"WallFoundationType foundationType = new FilteredElementCollector(doc).OfClass(typeof(WallFoundationType)).FirstOrDefault(f => f.Name == \"Bearing Footing - 36 x 12\") as WallFoundationType;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\n\nif (foundationType != null && level != null)\n{\n    IList<Wall> wallsOnLevel = new FilteredElementCollector(doc)\n        .OfClass(typeof(Wall))\n        .Cast<Wall>()\n        .Where(w => w.LevelId == level.Id)\n        .ToList();\n\n    if (wallsOnLevel.Any())\n    {\n        foreach (Wall wall in wallsOnLevel)\n        {\n            WallFoundation.Create(doc, foundationType.Id, wall.Id);\n        }\n    }\n}"}
{"prompt":"Limpia los nombres de los materiales eliminando el prefijo 'TEMP_'.","completion":"string prefixToRemove = \"TEMP_\";\nIList<Material> materials = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().ToList();\n\nif (materials.Any())\n{\n    HashSet<string> existingNames = new HashSet<string>(materials.Select(m => m.Name));\n    foreach (Material mat in materials)\n    {\n        if (mat.Name.StartsWith(prefixToRemove))\n        {\n            existingNames.Remove(mat.Name);\n            string newName = mat.Name.Substring(prefixToRemove.Length);\n            string finalName = newName;\n            int i = 1;\n            while (existingNames.Contains(finalName))\n            {\n                finalName = $\"{newName}_{i++}\";\n            }\n            mat.Name = finalName;\n            existingNames.Add(finalName);\n        }\n    }\n}"}
{"prompt":"Obtén una lista de todas las familias de anotación.","completion":"List<Family> annotationFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.CategoryType == CategoryType.Annotation).ToList();\n"}
{"prompt":"Reproduce el tipo de muro 'Genérico - 114mm' y nómbralo 'Interior - 15cm Yeso'.","completion":"string originalName = \"Genérico - 114mm\";\nstring newName = \"Interior - 15cm Yeso\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif (originalType != null)\n{\n    WallType newType = originalType.Duplicate(newName) as WallType;\n}"}
{"prompt":"Establece el parámetro 'Marca' de todos los muros seleccionados a 'M-EXT-01'.","completion":"using (Transaction t = new Transaction(doc, \"Set Wall Mark\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    ICollection<ElementId> selectedIds = localUidoc.Selection.GetElementIds();\n\n    if (selectedIds != null && selectedIds.Count > 0)\n    {\n        foreach(ElementId id in selectedIds)\n        {\n            Element elem = doc.GetElement(id);\n            if(elem is Wall)\n            {\n                Parameter p = elem.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n                if (p != null && !p.IsReadOnly) \n                {\n                    p.Set(\"M-EXT-01\");\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Load the 'Table.rfa' family and place it at (5,5,0) on Level 1.","completion":"string familyPath = \"C:\/Common\/Paths\/Table.rfa\";\nFamily tableFamily = null;\nbool familyLoaded = doc.LoadFamily(familyPath, out tableFamily);\n\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\n\nif (familyLoaded && tableFamily != null && level1 != null)\n{\n    FamilySymbol tableSymbol = doc.GetElement(tableFamily.GetFamilySymbolIds().FirstOrDefault()) as FamilySymbol;\n    if (tableSymbol != null)\n    {\n        if (!tableSymbol.IsActive) tableSymbol.Activate();\n        XYZ point = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0);\n        doc.Create.NewFamilyInstance(point, tableSymbol, level1, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Generate a roof by footprint on the 'Roof Level'.","completion":"using (Transaction t = new Transaction(doc, \"Create Roof\"))\n{\n    t.Start();\n    Level roofLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Roof Level\");\n    RoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n\n    if (roofLevel != null && roofType != null)\n    {\n        CurveArray roofProfile = new CurveArray();\n        roofProfile.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(20 \/ 0.3048,0,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(20 \/ 0.3048,0,0), new XYZ(20 \/ 0.3048,30 \/ 0.3048,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(20 \/ 0.3048,30 \/ 0.3048,0), new XYZ(0,30 \/ 0.3048,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(0,30 \/ 0.3048,0), new XYZ(0,0,0)));\n        ModelCurveArray mapping = new ModelCurveArray();\n        doc.Create.NewFootPrintRoof(roofProfile, roofLevel, roofType, out mapping);\n    }\n    t.Commit();\n}"}
{"prompt":"Crea una losa de cimentación de 20x15 metros.","completion":"using (Transaction t = new Transaction(doc, \"Create Foundation Slab\"))\n{\n    t.Start();\n    Level foundationLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderBy(l => l.Elevation).FirstOrDefault();\n    FloorType slabType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.get_Parameter(BuiltInParameter.FLOOR_PARAM_IS_STRUCTURAL).AsInteger() == 1);\n\n    if (foundationLevel != null && slabType != null)\n    {\n        XYZ p1 = new XYZ(0,0,0);\n        XYZ p2 = new XYZ(20\/0.3048, 0, 0);\n        XYZ p3 = new XYZ(20\/0.3048, 15\/0.3048, 0);\n        XYZ p4 = new XYZ(0, 15\/0.3048, 0);\n        CurveLoop profile = new CurveLoop();\n        profile.Append(Line.CreateBound(p1,p2));\n        profile.Append(Line.CreateBound(p2,p3));\n        profile.Append(Line.CreateBound(p3,p4));\n        profile.Append(Line.CreateBound(p4,p1));\n        Floor.Create(doc, new List<CurveLoop>{profile}, slabType.Id, foundationLevel.Id);\n    }\n    t.Commit();\n}"}
{"prompt":"Ubica un rociador en las coordenadas (6,1,3).","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol sprinklerSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Sprinklers).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (level != null && sprinklerSymbol != null)\n{\n    if (!sprinklerSymbol.IsActive) sprinklerSymbol.Activate();\n    XYZ placementPoint = new XYZ(UnitUtils.ConvertToInternalUnits(6, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters));\n    doc.Create.NewFamilyInstance(placementPoint, sprinklerSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n}"}
{"prompt":"Build a new Ribbon panel named 'My Tools' with a button.","completion":""}
{"prompt":"Crea un muro en el Nivel 1 que vaya de (0,0,0) a (10,0,0) con una altura de 4 metros.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (level1 != null && wallType != null)\n{\n    XYZ p1 = new XYZ(0, 0, 0);\n    XYZ p2 = new XYZ(10, 0, 0);\n    Line wallCurve = Line.CreateBound(p1, p2);\n    double height = UnitUtils.ConvertToInternalUnits(4, UnitTypeId.Meters);\n    Wall.Create(doc, wallCurve, wallType.Id, level1.Id, height, 0.0, false, false);\n}"}
{"prompt":"Exporta la geometría de un elemento seleccionado a un archivo SAT.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un elemento para exportar\");\n\nif (pickedRef != null)\n{\n    Element elem = doc.GetElement(pickedRef.ElementId);\n    if (elem != null)\n    {\n        string folderPath = \"C:\/RevitExports\/\";\n        string fileName = elem.Name + \".sat\";\n        SATExportOptions options = new SATExportOptions();\n        doc.Export(folderPath, fileName, new List<ElementId>{elem.Id}, options);\n    }\n}"}
{"prompt":"Generate a new level 'Level 4' at an elevation of 8 meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Level 4\";\n}"}
{"prompt":"Create a shaft opening that passes through from Level 1 to Level 3.","completion":"using (Transaction t = new Transaction(doc, \"Create Shaft Opening\"))\n{\n    t.Start();\n    Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 1\");\n    Level topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 3\");\n\n    if (bottomLevel != null && topLevel != null)\n    {\n        XYZ p1 = new XYZ(5 \/ 0.3048, 5 \/ 0.3048,0);\n        XYZ p2 = new XYZ(8 \/ 0.3048, 5 \/ 0.3048,0);\n        XYZ p3 = new XYZ(8 \/ 0.3048, 8 \/ 0.3048,0);\n        XYZ p4 = new XYZ(5 \/ 0.3048, 8 \/ 0.3048,0);\n        CurveArray profile = new CurveArray();\n        profile.Append(Line.CreateBound(p1,p2));\n        profile.Append(Line.CreateBound(p2,p3));\n        profile.Append(Line.CreateBound(p3,p4));\n        profile.Append(Line.CreateBound(p4,p1));\n        doc.Create.NewOpening(bottomLevel, topLevel, profile);\n    }\n    t.Commit();\n}"}
{"prompt":"Recarga el vínculo de Revit 'Arquitectura'.","completion":"RevitLinkType linkType = new FilteredElementCollector(doc).OfClass(typeof(RevitLinkType)).Cast<RevitLinkType>().FirstOrDefault(lt => lt.Name == \"Arquitectura\");\nif(linkType != null)\n{\n    linkType.Reload();\n}"}
{"prompt":"Inserta las vistas 'Planta Nivel 1' y 'Nivel 1' en el plano 'A-101'.","completion":"ViewSheet sheet = new FilteredElementCollector(doc).OfClass(typeof(ViewSheet)).Cast<ViewSheet>().FirstOrDefault(s => s.SheetNumber == \"A-101\");\nView view1 = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().FirstOrDefault(v => v.Name == \"Planta Nivel 1\");\nView view2 = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().FirstOrDefault(v => v.Name == \"Nivel 1\");\nif (sheet != null && view1 != null && view2 != null)\n{\n    XYZ insertPoint1 = new XYZ(1.0, 1.0, 0);\n    Viewport.Create(doc, sheet.Id, view1.Id, insertPoint1);\n    XYZ insertPoint2 = new XYZ(1.0, 2.0, 0);\n    Viewport.Create(doc, sheet.Id, view2.Id, insertPoint2);\n}"}
{"prompt":"Extrae todas las habitaciones que están en el Nivel 3","completion":"string levelName = \"Nivel 3\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(targetLevel.Id);\n    FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WherePasses(levelFilter);\n    uidoc.Selection.SetElementIds(collector.ToElementIds());\n}"}
{"prompt":"Build a new elevation view looking south.","completion":"string viewName = \"South Elevation (New)\";\nViewFamilyType elevationVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(vft => vft.ViewFamily == ViewFamily.Elevation);\nElevationMarker marker = ElevationMarker.CreateElevationMarker(doc, elevationVFT.Id, new XYZ(0, -20, 0), 100);\nView aev = marker.CreateElevation(doc, doc.ActiveView.Id, 0);\naev.Name = viewName;"}
{"prompt":"Obtain all rooms on Level 2","completion":"string levelName = \"Level 2\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(targetLevel.Id);\n    FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WherePasses(levelFilter);\n    uidoc.Selection.SetElementIds(collector.ToElementIds());\n}"}
{"prompt":"Crea un nuevo nivel llamado 'Mezzanine' a 7.3 metros de elevación.","completion":"string levelName = \"Mezzanine\";\ndouble elevation = UnitUtils.ConvertToInternalUnits(7.3, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Construct a stair between Level 3 and Level 2","completion":"\/\/ This is a complex operation that requires multiple steps and\/or user interaction and is not supported by the agent."}
{"prompt":"Create an extrusion roof with a 10% slope.","completion":"using (Transaction t = new Transaction(doc, \"Create Extrusion Roof\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    RoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n\n    if (level != null && roofType != null)\n    {\n        CurveArray profile = new CurveArray();\n        profile.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(10 \/ 0.3048, 0, 1 \/ 0.3048)));\n        \n        Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisY, XYZ.Zero);\n        ReferencePlane refPlane = doc.Create.NewReferencePlane(plane.Origin, plane.Origin + XYZ.BasisX, plane.Normal, doc.ActiveView);\n        \n        if (refPlane != null)\n        {\n            doc.Create.NewExtrusionRoof(profile, refPlane, level, roofType, 0, 10 \/ 0.3048);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Coloca una cámara en la vista activa.","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(f => f.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft != null)\n{\n    View3D cameraView = View3D.CreatePerspective(doc, vft.Id);\n    if (cameraView != null)\n    {\n        cameraView.Name = \"Nueva Vista de Cámara\";\n        \/\/ Default position as it is not specified in prompt\n        XYZ eyePos = new XYZ(30, -30, 20);\n        XYZ upDir = XYZ.BasisZ;\n        XYZ forwardDir = new XYZ(-1, 1, -0.5);\n        ViewOrientation3D orientation = new ViewOrientation3D(eyePos, upDir, forwardDir);\n        cameraView.SetOrientation(orientation);\n    }\n}"}
{"prompt":"Duplicate level 1 with a 2m offset and name it 'Mezzanine'.","completion":"string levelName = \"Mezzanine\";\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\n\nif (level1 != null)\n{\n    double newElevation = level1.ProjectElevation + UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, newElevation);\n    if (newLevel != null)\n    {\n        newLevel.Name = levelName;\n    }\n}"}
{"prompt":"Modifica el tipo de la ventana seleccionada al tipo 'Fija 115x60'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una ventana\");\nFamilySymbol newType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name == \"Fija 115x60\");\nif (pickedRef != null && newType != null)\n{\n    FamilyInstance window = doc.GetElement(pickedRef.ElementId) as FamilyInstance;\n    if (window != null)\n    {\n        window.Symbol = newType;\n    }\n}"}
{"prompt":"Crea una losa de cimentación de 20x15 metros.","completion":"using (Transaction t = new Transaction(doc, \"Create Foundation Slab\"))\n{\n    t.Start();\n    Level foundationLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderBy(l => l.Elevation).FirstOrDefault();\n    FloorType slabType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.get_Parameter(BuiltInParameter.FLOOR_PARAM_IS_STRUCTURAL).AsInteger() == 1);\n\n    if (foundationLevel != null && slabType != null)\n    {\n        XYZ p1 = new XYZ(0,0,0);\n        XYZ p2 = new XYZ(20\/0.3048, 0, 0);\n        XYZ p3 = new XYZ(20\/0.3048, 15\/0.3048, 0);\n        XYZ p4 = new XYZ(0, 15\/0.3048, 0);\n        CurveLoop profile = new CurveLoop();\n        profile.Append(Line.CreateBound(p1,p2));\n        profile.Append(Line.CreateBound(p2,p3));\n        profile.Append(Line.CreateBound(p3,p4));\n        profile.Append(Line.CreateBound(p4,p1));\n        Floor.Create(doc, new List<CurveLoop>{profile}, slabType.Id, foundationLevel.Id);\n    }\n    t.Commit();\n}"}
{"prompt":"Generate a new 3D view oriented from point (10,10,10) looking at the origin.","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v=>v.ViewFamily==ViewFamily.ThreeDimensional);\n\nif (vft != null)\n{\n    View3D view = View3D.CreateIsometric(doc, vft.Id);\n    if (view != null)\n    {\n        XYZ eyePos = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters));\n        XYZ upDir = XYZ.BasisZ;\n        XYZ forwardDir = XYZ.Zero - eyePos;\n        ViewOrientation3D vo = new ViewOrientation3D(eyePos, upDir, forwardDir);\n        view.SetOrientation(vo);\n        view.Name = \"View from (10,10,10)\";\n    }\n}"}
{"prompt":"Sitúa una instancia de la familia 'Ventana Fija 123x60' en el centro de la habitación 'Despacho 106'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 123\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Ventana Fija 106x60\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);"}
{"prompt":"Get the coordinates of the project base point and the survey point.","completion":"BasePoint surveyPoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(p => p.IsShared);\nBasePoint projectBasePoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(p => !p.IsShared);\n\nXYZ surveyCoords = null;\nif (surveyPoint != null) surveyCoords = surveyPoint.get_BoundingBox(null).Min;\n\nXYZ projectCoords = null;\nif (projectBasePoint != null) projectCoords = projectBasePoint.get_BoundingBox(null).Min;"}
{"prompt":"Ajusta todas las ventanas para que la altura del antepecho sea 1 metro.","completion":"using (Transaction t = new Transaction(doc, \"Set Sill Height\"))\n{\n    t.Start();\n    double sillHeight = 1 \/ 0.3048;\n    List<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\n    foreach(FamilyInstance window in windows)\n    {\n        Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n        if (sillHeightParam != null && !sillHeightParam.IsReadOnly)\n        {\n            sillHeightParam.Set(sillHeight);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea un nuevo tipo de muro de 25cm llamado 'Muro Estructural 25cm'.","completion":"string newTypeName = \"Muro Estructural 25cm\";\nWallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (wallTypeToDuplicate != null)\n{\n    WallType newWallType = wallTypeToDuplicate.Duplicate(newTypeName) as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        int coreLayerIndex = cs.GetFirstCoreLayerIndex();\n        cs.SetLayerFunction(coreLayerIndex, MaterialFunctionAssignment.Structure);\n        cs.SetLayerWidth(coreLayerIndex, UnitUtils.ConvertToInternalUnits(0.25, UnitTypeId.Meters));\n        newWallType.SetCompoundStructure(cs);\n    }\n}"}
{"prompt":"Set the 'Mark' parameter of all selected walls to 'W-EXT-01'.","completion":"using (Transaction t = new Transaction(doc, \"Set Wall Mark\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    ICollection<ElementId> selectedIds = localUidoc.Selection.GetElementIds();\n\n    if (selectedIds != null && selectedIds.Count > 0)\n    {\n        foreach(ElementId id in selectedIds)\n        {\n            Element elem = doc.GetElement(id);\n            if(elem is Wall)\n            {\n                Parameter p = elem.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n                if (p != null && !p.IsReadOnly)\n                {\n                    p.Set(\"W-EXT-01\");\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Incorpora un punto de referencia en las coordenadas (1,1,8) dentro del editor de familias.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(1,1,8));"}
{"prompt":"Crea un nuevo material llamado 'Vidrio Reflectante' y asígnale un color base.","completion":"string materialName = \"Vidrio Reflectante\";\nElementId materialId = Material.Create(doc, materialName);\n\nif (materialId != ElementId.InvalidElementId)\n{\n    Material material = doc.GetElement(materialId) as Material;\n    if (material != null)\n    {\n        material.Color = new Color(210, 230, 240); \/\/ Un color azulado claro para el vidrio\n        material.Transparency = 80;\n    }\n}"}
{"prompt":"Create a new 5mm text type in green color.","completion":"using (Transaction t = new Transaction(doc, \"Create Green Text Type\"))\n{\n    t.Start();\n    string newTypeName = \"5mm Green\";\n    TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\n    if (defaultType != null)\n    {\n        TextNoteType newType = defaultType.Duplicate(newTypeName) as TextNoteType;\n        if (newType != null)\n        {\n            Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n            if (textSizeParam != null && !textSizeParam.IsReadOnly)\n            {\n                textSizeParam.Set(5 \/ 304.8);\n            }\n            Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n            if (lineColorParam != null && !lineColorParam.IsReadOnly)\n            {\n                 lineColorParam.Set(65280);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Aplica la plantilla de vista 'Plano de Fontanería' a todas las vistas de planta que contengan 'Fontanería' en su nombre.","completion":"View viewTemplate = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().FirstOrDefault(v => v.IsTemplate && v.Name == \"Plano de Fontanería\");\nif (viewTemplate != null)\n{\n    List<ViewPlan> planViews = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().Where(v => !v.IsTemplate && v.Name.Contains(\"Fontanería\")).ToList();\n    foreach (ViewPlan view in planViews)\n    {\n        view.ViewTemplateId = viewTemplate.Id;\n    }\n}"}
{"prompt":"Temporarily isolate all furniture in the active view.","completion":"ICollection<ElementId> furnitureIds = new FilteredElementCollector(doc, doc.ActiveView.Id).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsNotElementType().ToElementIds();\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.IsolateElementsTemporary(furnitureIds);\n}"}
{"prompt":"Incorpora el prefijo 'PLANTA-' a todas las vistas de plano.","completion":"string prefix = \"PLANTA-\";\nList<ViewPlan> planViews = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().Where(v => !v.IsTemplate).ToList();\nforeach(ViewPlan view in planViews)\n{\n    if (view != null)\n    {\n        view.Name = prefix + view.Name;\n    }\n}"}
{"prompt":"Pivot a selected element 94 degrees around its Z-axis.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select an element to rotate\");\nElement elem = doc.GetElement(pickedRef.ElementId);\nLocationPoint lp = elem.Location as LocationPoint;\nLine axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\nElementTransformUtils.RotateElement(doc, elem.Id, axis, Math.PI \/ 94);"}
{"prompt":"Crea un muro del tipo específico 'Genérico - 250mm' de 10 metros.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Name == \"Genérico - 250mm\");\nif (level != null && wallType != null)\n{\n    Line line = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), 0, 0));\n    double height = UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters); \/\/ Default height\n    Wall.Create(doc, line, wallType.Id, level.Id, height, 0.0, false, false);\n}"}
{"prompt":"Vira un elemento seleccionado 90 grados sobre su eje Z.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un elemento para rotar\");\nElement elem = doc.GetElement(pickedRef.ElementId);\nLocationPoint lp = elem.Location as LocationPoint;\nLine axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\nElementTransformUtils.RotateElement(doc, elem.Id, axis, Math.PI \/ 2.0);"}
{"prompt":"Crea un nuevo nivel llamado 'Mezzanine' a 8.2 metros de elevación.","completion":"string levelName = \"Mezzanine\";\ndouble elevation = UnitUtils.ConvertToInternalUnits(8.2, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Crea una apertura de hueco (shaft) que atraviese desde el Nivel 1 al Nivel 3.","completion":"using (Transaction t = new Transaction(doc, \"Create Shaft Opening\"))\n{\n    t.Start();\n    Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel 1\");\n    Level topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel 3\");\n\n    if (bottomLevel != null && topLevel != null)\n    {\n        XYZ p1 = new XYZ(5 \/ 0.3048, 5 \/ 0.3048,0);\n        XYZ p2 = new XYZ(8 \/ 0.3048, 5 \/ 0.3048,0);\n        XYZ p3 = new XYZ(8 \/ 0.3048, 8 \/ 0.3048,0);\n        XYZ p4 = new XYZ(5 \/ 0.3048, 8 \/ 0.3048,0);\n        CurveArray profile = new CurveArray();\n        profile.Append(Line.CreateBound(p1,p2));\n        profile.Append(Line.CreateBound(p2,p3));\n        profile.Append(Line.CreateBound(p3,p4));\n        profile.Append(Line.CreateBound(p4,p1));\n        doc.Create.NewOpening(bottomLevel, topLevel, profile);\n    }\n    t.Commit();\n}"}
{"prompt":"Incorpora un punto de referencia en las coordenadas (1,1,1) dentro del editor de familias.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(1,1,1));"}
{"prompt":"Recupera el espacio MEP asociado a la habitación 'Oficina 102'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Cast<Room>().FirstOrDefault(r => r.Name == \"Oficina 102\");\nList<Space> spaces = new List<Space>();\n\nif (room != null)\n{\n    spaces = new FilteredElementCollector(doc).OfClass(typeof(Space)).Cast<Space>().Where(s => s.Room != null && s.Room.Id == room.Id).ToList();\n}"}
{"prompt":"Crea un equipo eléctrico en X=1,Y=1.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol panelSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_ElectricalEquipment).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (level != null && panelSymbol != null)\n{\n    if (!panelSymbol.IsActive) { panelSymbol.Activate(); }\n    XYZ point = new XYZ(1, 1, 0);\n    doc.Create.NewFamilyInstance(point, panelSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n}"}
{"prompt":"Generate a new A1 sheet using the first available title block.","completion":"FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (titleBlock != null)\n{\n    ViewSheet sheet = ViewSheet.Create(doc, titleBlock.Id);\n    if (sheet != null)\n    {\n        sheet.Name = \"A1 - New Sheet\";\n        sheet.SheetNumber = \"A1\";\n    }\n}"}
{"prompt":"Cambia el tipo de una losa seleccionada a 'Concreto 18cm'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una losa\");\n\nif (pickedRef != null)\n{\n    Floor floorToChange = doc.GetElement(pickedRef) as Floor;\n    FloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name == \"Concreto 18cm\");\n    \n    if (floorToChange != null && newType != null)\n    {\n        floorToChange.ChangeTypeId(newType.Id);\n    }\n}"}
{"prompt":"Construct a floor plan view for 'Level 1'.","completion":"string levelName = \"Level 1\";\nLevel level3 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.FloorPlan);\n\nif (level3 != null && vft != null)\n{\n    ViewPlan viewPlan = ViewPlan.Create(doc, vft.Id, level3.Id);\n}"}
{"prompt":"Export the model to IFC4 format for coordination.","completion":"string folderPath = \"C:\/RevitExports\/\";\nstring fileName = doc.Title + \"-Coordination.ifc\";\nIFCExportOptions options = new IFCExportOptions();\noptions.FileVersion = IFCVersion.IFC4;\ndoc.Export(folderPath, fileName, options);"}
{"prompt":"Define un filtro de vista para ocultar las líneas de detalle.","completion":"string filterName = \"Ocultar Líneas de Detalle\";\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    ICollection<ElementId> catsToHide = new List<ElementId>{new ElementId(BuiltInCategory.OST_Lines)};\n    ElementFilter filter = new ElementCategoryFilter(new ElementId(BuiltInCategory.OST_Lines));\n    ParameterFilterElement pfe = ParameterFilterElement.Create(doc, filterName, catsToHide, filter);\n    \n    if (pfe != null)\n    {\n        activeView.AddFilter(pfe.Id);\n        activeView.SetFilterVisibility(pfe.Id, false);\n    }\n}"}
{"prompt":"Modela una bandeja de cables entre dos puntos.","completion":"CableTrayType trayType = new FilteredElementCollector(doc).OfClass(typeof(CableTrayType)).FirstOrDefault() as CableTrayType;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(trayType != null && level != null)\n{\n    XYZ start = new XYZ(0, 0, 10);\n    XYZ end = new XYZ(15, 0, 10);\n    CableTray.Create(doc, trayType.Id, start, end, level.Id);\n}"}
{"prompt":"Build an MEP space for each room on Level 3","completion":"string levelName = \"Level 3\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    FilteredElementCollector roomCollector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WherePasses(new ElementLevelFilter(targetLevel.Id));\n    foreach (Room room in roomCollector.ToElements().Cast<Room>())\n    {\n        LocationPoint locPoint = room.Location as LocationPoint;\n        if (locPoint != null)\n        {\n            UV point = new UV(locPoint.Point.X, locPoint.Point.Y);\n            doc.Create.NewSpace(targetLevel, point);\n        }\n    }\n}"}
{"prompt":"Clone level 2 with a 7m offset and name it 'Mezzanine'.","completion":"string levelName = \"Level 2\";\nLevel levelToCopy = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (levelToCopy != null)\n{\n    double offset = UnitUtils.ConvertToInternalUnits(7, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, levelToCopy.Elevation + offset);\n    newLevel.Name = \"Mezzanine\";\n}"}
{"prompt":"Crea una cuadrícula de columnas 5x5 con separación de 8 metros.","completion":"FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (columnSymbol != null && level != null)\n{\n    if(!columnSymbol.IsActive) columnSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters);\n    for(int i=0; i<5; i++)\n    {\n        for(int j=0; j<5; j++)\n        {\n            doc.Create.NewFamilyInstance(new XYZ(i*spacing, j*spacing, 0), columnSymbol, level, StructuralType.Column);\n        }\n    }\n}"}
{"prompt":"Rename all schedules containing 'Doors' to 'Door Schedule'.","completion":"List<ViewSchedule> schedules = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().Where(vs => vs.Name.Contains(\"Doors\")).ToList();\nforeach(ViewSchedule schedule in schedules)\n{\n    schedule.Name = schedule.Name.Replace(\"Doors\", \"Door Schedule\");\n}"}
{"prompt":"Necesito ver todos los tipos de puertas que están cargados.","completion":"FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType();\nList<string> doorTypeNames = collector.Select(e => e.Name).ToList();"}
{"prompt":"Crea ocho ejes horizontales con una separación de 10m.","completion":"double separation = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\nfor(int i = 0; i < 8; i++)\n{\n    Line line = Line.CreateBound(new XYZ(0, i * separation, 0), new XYZ(50, i * separation, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Actualiza el tipo de la ventana seleccionada al tipo 'Fija 119x60'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una ventana\");\nFamilySymbol newType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name == \"Fija 119x60\");\nif (pickedRef != null && newType != null)\n{\n    FamilyInstance window = doc.GetElement(pickedRef.ElementId) as FamilyInstance;\n    if (window != null)\n    {\n        window.Symbol = newType;\n    }\n}"}
{"prompt":"Load a DWG link, preserving its colors.","completion":"string filePath = \"C:\/CAD\/Plans.dwg\";\nDWGImportOptions opts = new DWGImportOptions();\nopts.ColorMode = ImportColorMode.Preserved;\nElementId linkId;\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    doc.Link(filePath, opts, activeView, out linkId);\n}"}
{"prompt":"Duplica el tipo de muro 'Genérico - 146mm' y nómbralo 'Interior - 13cm Yeso'.","completion":"string originalName = \"Genérico - 146mm\";\nstring newName = \"Interior - 13cm Yeso\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif(originalType!=null)\n    originalType.Duplicate(newName);"}
{"prompt":"Crea un nuevo tipo de texto de 5mm de color verde.","completion":"using (Transaction t = new Transaction(doc, \"Create Green Text Type\"))\n{\n    t.Start();\n    string newTypeName = \"5mm Verde\";\n    TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\n    if (defaultType != null)\n    {\n        TextNoteType newType = defaultType.Duplicate(newTypeName) as TextNoteType;\n        if (newType != null)\n        {\n            Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n            if (textSizeParam != null && !textSizeParam.IsReadOnly)\n            {\n                textSizeParam.Set(5 \/ 304.8);\n            }\n            Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n            if (lineColorParam != null && !lineColorParam.IsReadOnly)\n            {\n                 lineColorParam.Set(65280);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Build a 30cm 'Double-Wall' type and then create a wall of that type.","completion":"WallType newWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == \"Double-Wall\") as WallType;\nif (newWallType == null)\n{\n    WallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n    if(wallTypeToDuplicate != null)\n    {\n        try { newWallType = wallTypeToDuplicate.Duplicate(\"Double-Wall\") as WallType; } catch {}\n        if(newWallType!=null)\n        {\n            CompoundStructure cs = newWallType.GetCompoundStructure();\n            if(cs != null && cs.GetLayers().Any())\n            {\n                 int coreIndex = cs.GetFirstCoreLayerIndex();\n                 if(coreIndex != -1) \n                 {\n                     cs.SetLayerWidth(coreIndex, UnitUtils.ConvertToInternalUnits(30, UnitTypeId.Centimeters));\n                     newWallType.SetCompoundStructure(cs);\n                 }\n            }\n        }\n    }\n}\nif (newWallType != null)\n{\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    if (level != null)\n    {\n        Line wallCurve = Line.CreateBound(XYZ.Zero, new XYZ(30,0,0));\n        double height = UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\n        Wall.Create(doc, wallCurve, newWallType.Id, level.Id, height, 0, false, false);\n    }\n}"}
{"prompt":"Coloca una instancia de la familia 'Mesa de Oficina' en el centro de la habitación 'Despacho 103'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 103\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Mesa de Oficina\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);"}
{"prompt":"Crea un nuevo tipo de muro de 29cm llamado 'Estructura'.","completion":"string newTypeName = \"Estructura\";\nWallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(newTypeName) as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(29, UnitTypeId.Centimeters));\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n}"}
{"prompt":"Recupera todas las habitaciones en el Nivel 'Losa 102'.","completion":"Level groundFloor = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Losa 102\") as Level;\nList<Element> roomsOnGround = new List<Element>();\n\nif (groundFloor != null)\n{\n    roomsOnGround = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Where(r => r.LevelId == groundFloor.Id).ToList();\n}"}
{"prompt":"Include a reference point at coordinates (5,6,6) inside the family editor.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(5,6,6));"}
{"prompt":"Mueve un muro 5 metros a la derecha.","completion":"Wall wall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\n\nif (wall != null)\n{\n    XYZ translation = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters),0,0);\n    ElementTransformUtils.MoveElement(doc, wall.Id, translation);\n}"}
{"prompt":"Encuentra el tipo de columna estructural llamado \"305 x 453mm\" y colócalo en X=1, Y=11.8","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(s => s.Name == \"305 x 453mm\");\nif (level != null && columnSymbol != null)\n{\n    if (!columnSymbol.IsActive) { columnSymbol.Activate(); }\n    XYZ point = new XYZ(1, 11.8, 0);\n    doc.Create.NewFamilyInstance(point, columnSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n}"}
{"prompt":"Gira un elemento seleccionado 89 grados sobre su eje Z.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un elemento para rotar\");\nElement elem = doc.GetElement(pickedRef.ElementId);\nLocationPoint lp = elem.Location as LocationPoint;\nLine axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\nElementTransformUtils.RotateElement(doc, elem.Id, axis, Math.PI \/ 89);"}
{"prompt":"Add reinforcement to a column.","completion":"RebarBarType barType = new FilteredElementCollector(doc).OfClass(typeof(RebarBarType)).FirstOrDefault() as RebarBarType;\nRebarShape shape = new FilteredElementCollector(doc).OfClass(typeof(RebarShape)).FirstOrDefault() as RebarShape;\nFamilyInstance column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\n\nif (barType != null && shape != null && column != null)\n{\n    Rebar.CreateFromRebarShape(doc, shape, barType, column, column.GetTransform().Origin, XYZ.BasisX, XYZ.BasisY);\n}"}
{"prompt":"Exporta el documento a un archivo IFC con la versión IFC4x3.","completion":"string folderPath = \"C:\/RevitExports\/\";\nstring fileName = doc.Title + \"_IFC4x3.ifc\";\nIFCExportOptions options = new IFCExportOptions();\noptions.FileVersion = IFCVersion.IFC4x3;\ndoc.Export(folderPath, fileName, options);"}
{"prompt":"Temporarily isolate the selected elements in the active view.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> idsToIsolate = uidoc.Selection.GetElementIds();\nView activeView = doc.ActiveView;\n\nif (activeView != null && idsToIsolate.Count > 0)\n{\n    activeView.IsolateElementsTemporary(idsToIsolate);\n}"}
{"prompt":"Fetch the MEP space associated with the room 'Office 96'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Cast<Room>().FirstOrDefault(r => r.Name == \"Office 96\");\nList<Space> spaces = new List<Space>();\n\nif (room != null)\n{\n    spaces = new FilteredElementCollector(doc).OfClass(typeof(Space)).Cast<Space>().Where(s => s.Room != null && s.Room.Id == room.Id).ToList();\n}"}
{"prompt":"Create 8 horizontal grids spaced 10 meters apart.","completion":"double separation = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\nfor(int i = 0; i < 8; i++)\n{\n    Line line = Line.CreateBound(new XYZ(0, i * separation, 0), new XYZ(50, i * separation, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Crea 4 ejes en sentido vertical separados 10 metros.","completion":"double separation = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\nfor(int i=0; i<4; i++)\n{\n    Line line = Line.CreateBound(new XYZ(i * separation, 0, 0), new XYZ(i * separation, 40, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Export a list of all project warnings to a text file on the desktop.","completion":"string desktopPath = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);\nstring filePath = System.IO.Path.Combine(desktopPath, \"RevitWarnings.txt\");\nIList<FailureMessage> warnings = doc.GetWarnings();\nList<string> warningDescriptions = warnings.Select(w => w.GetDescriptionText()).ToList();\nSystem.IO.File.WriteAllLines(filePath, warningDescriptions);"}
{"prompt":"Actualiza el tipo de una losa seleccionada a 'Concreto 13cm'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una losa\");\n\nif (pickedRef != null)\n{\n    Floor floorToChange = doc.GetElement(pickedRef) as Floor;\n    FloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name == \"Concreto 13cm\");\n    \n    if (floorToChange != null && newType != null)\n    {\n        floorToChange.ChangeTypeId(newType.Id);\n    }\n}"}
{"prompt":"Include a reference point at coordinates (1,2,3) inside the family editor.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(1,2,3));"}
{"prompt":"Create an axonometric 3D view oriented to the Northwest.","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft != null)\n{\n    View3D view3d = View3D.CreateIsometric(doc, vft.Id);\n    if (view3d != null)\n    {\n        XYZ eye = new XYZ(-1, 1, 1);\n        XYZ up = new XYZ(0, 0, 1);\n        XYZ forward = new XYZ(1, -1, -1);\n        view3d.SetOrientation(new ViewOrientation3D(eye, up, forward));\n        view3d.Name = \"3D View Northwest\";\n    }\n}"}
{"prompt":"Establece el parámetro 'Comentarios' de todas las puertas del Nivel 1 a 'Clasificación Fuego - 87 min'.","completion":"using(Transaction t = new Transaction(doc, \"Set Door Comments\"))\n{\n    t.Start();\n    Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel 1\");\n    if(level1 != null)\n    {\n        List<FamilyInstance> doorsOnLevel1 = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsNotElementType().Cast<FamilyInstance>().Where(fi => fi.LevelId.Equals(level1.Id)).ToList();\n        foreach(FamilyInstance door in doorsOnLevel1)\n        {\n            Parameter commentsParam = door.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n            if(commentsParam != null && !commentsParam.IsReadOnly)\n            {\n                commentsParam.Set(\"Clasificación Fuego - 87 min\");\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Unjoin the geometry of two given elements.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference ref1 = uidoc.Selection.PickObject(ObjectType.Element, \"Select the first element\");\nReference ref2 = uidoc.Selection.PickObject(ObjectType.Element, \"Select the second element\");\n\nif (ref1 != null && ref2 != null)\n{\n    Element e1 = doc.GetElement(ref1.ElementId);\n    Element e2 = doc.GetElement(ref2.ElementId);\n    if (e1 != null && e2 != null)\n    {\n        JoinGeometryUtils.UnjoinGeometry(doc, e1, e2);\n    }\n}"}
{"prompt":"Cambia el tipo de todos los muros seleccionados a 'Muro Exterior'.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nWallType targetWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Name == \"Muro Exterior\");\n\nif (selectedIds.Count > 0 && targetWallType != null)\n{\n    foreach(ElementId id in selectedIds)\n    {\n        Wall wall = doc.GetElement(id) as Wall;\n        if(wall != null) wall.ChangeTypeId(targetWallType.Id);\n    }\n}"}
{"prompt":"Move a selected element to position (5,5).","completion":"ICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nElementId selectedId = selectedIds.FirstOrDefault();\nif (selectedId != null && selectedId != ElementId.InvalidElementId)\n{\n    Element elem = doc.GetElement(selectedId);\n    if (elem != null)\n    {\n        LocationPoint lp = elem.Location as LocationPoint;\n        if (lp != null)\n        {\n            XYZ currentPoint = lp.Point;\n            XYZ newPosition = new XYZ(5, 5, currentPoint.Z);\n            XYZ translation = newPosition - currentPoint;\n            if(translation.GetLength() > 0.001)\n            {\n                ElementTransformUtils.MoveElement(doc, elem.Id, translation);\n            }\n        }\n    }\n}"}
{"prompt":"Crea 10 worksets de arquitectura.","completion":"List<string> worksetNames = new List<string> { \"TAD_ARQ_MAM\", \"TAD_ARQ_ACA\", \"TAD_ARQ_PLA\", \"TAD_ARQ_PSO\", \"TAD_ARQ_HRE\", \"TAD_ARQ_ALU\", \"TAD_ARQ_CAR\", \"TAD_ARQ_MOB\", \"TAD_ARQ_PLO\", \"TAD_ARQ_EXT\" };\nforeach(string name in worksetNames)\n{\n    Workset newWorkset = Workset.Create(doc, name);\n}"}
{"prompt":"Obtén todas las habitaciones que están en el Nivel 3.","completion":"Level level3 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 3\") as Level;\nList<Element> roomsOnLevel3 = new List<Element>();\n\nif (level3 != null)\n{\n    roomsOnLevel3 = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Where(r => r.LevelId == level3.Id).ToList();\n}"}
{"prompt":"Move the selected elements 3 meters up.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds != null && selectedIds.Count > 0)\n{\n    XYZ translation = new XYZ(0, 0, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters));\n    ElementTransformUtils.MoveElements(doc, selectedIds, translation);\n}"}
{"prompt":"Find all walls with the comment 'Review'.","completion":"ElementId commentParamId = new ElementId(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\nParameterValueProvider pvp = new ParameterValueProvider(commentParamId);\nFilterStringRuleEvaluator evaluator = new FilterStringContains();\nFilterRule rule = new FilterStringRule(pvp, evaluator, \"Review\");\nElementFilter filter = new ElementParameterFilter(rule);\nList<Element> wallsToReview = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(filter).ToList();"}
{"prompt":"Sitúa un rociador en las coordenadas (5,5,3).","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol sprinklerSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Sprinklers).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (level != null && sprinklerSymbol != null)\n{\n    if (!sprinklerSymbol.IsActive) sprinklerSymbol.Activate();\n    XYZ placementPoint = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters));\n    doc.Create.NewFamilyInstance(placementPoint, sprinklerSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n}"}
{"prompt":"Acota la longitud de un muro seleccionado por el usuario.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference wallRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un muro para acotar\");\n\nif (wallRef != null)\n{\n    Wall wall = doc.GetElement(wallRef) as Wall;\n    View activeView = doc.ActiveView;\n\n    if (wall != null && activeView != null)\n    {\n        LocationCurve locCurve = wall.Location as LocationCurve;\n        if (locCurve != null)\n        {\n            Line wallLine = locCurve.Curve as Line;\n            if (wallLine != null)\n            {\n                ReferenceArray refs = new ReferenceArray();\n                refs.Append(wallLine.GetEndPointReference(0));\n                refs.Append(wallLine.GetEndPointReference(1));\n                XYZ pt1 = wallLine.GetEndPoint(0).Add(XYZ.BasisZ * 2);\n                XYZ pt2 = wallLine.GetEndPoint(1).Add(XYZ.BasisZ * 2);\n                Line dimLine = Line.CreateBound(pt1, pt2);\n                doc.Create.NewDimension(activeView, dimLine, refs);\n            }\n        }\n    }\n}"}
{"prompt":"Tag every structural column in the active view.","completion":"View activeView = doc.ActiveView;\nif (activeView == null) return;\n\nFilteredElementCollector collector = new FilteredElementCollector(doc, activeView.Id)\n    .OfCategory(BuiltInCategory.OST_StructuralColumns)\n    .WhereElementIsNotElementType();\n\nIList<Element> elementsToTag = collector.ToElements();\n\nif (elementsToTag.Any())\n{\n    foreach (Element elem in elementsToTag)\n    {\n        Reference elemRef = new Reference(elem);\n        BoundingBoxXYZ bbox = elem.get_BoundingBox(activeView);\n        if (bbox == null) continue;\n\n        XYZ tagLocation = (bbox.Min + bbox.Max) \/ 2.0;\n        IndependentTag.Create(doc, activeView.Id, elemRef, true, TagMode.TM_ADDBY_CATEGORY, TagOrientation.Horizontal, tagLocation);\n    }\n}"}
{"prompt":"Replicate level 1 with a 3m offset and name it 'Mezzanine'.","completion":"string levelName = \"Mezzanine\";\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\n\nif (level1 != null)\n{\n    double newElevation = level1.ProjectElevation + UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, newElevation);\n    if (newLevel != null)\n    {\n        newLevel.Name = levelName;\n    }\n}"}
{"prompt":"Clona el tipo de muro 'Genérico - 148mm' y nómbralo 'Interior - 18cm Yeso'.","completion":"string originalName = \"Genérico - 148mm\";\nstring newName = \"Interior - 18cm Yeso\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif (originalType != null)\n{\n    WallType newType = originalType.Duplicate(newName) as WallType;\n}"}
{"prompt":"Coloca una instancia de la familia 'Mesa de Oficina' en el centro de la habitación 'Despacho 100'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 100\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Mesa de Oficina\") as FamilySymbol;\nif(furnitureSymbol != null && !furnitureSymbol.IsActive) furnitureSymbol.Activate();\nif(room != null)\n{\n    LocationPoint roomCenter = room.Location as LocationPoint;\n    if(roomCenter != null && furnitureSymbol != null && room.Level != null)\n    {\n        doc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Build a floor plan view for 'Level 4'.","completion":"string levelName = \"Level 4\";\nLevel level3 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.FloorPlan);\n\nif (level3 != null && vft != null)\n{\n    ViewPlan viewPlan = ViewPlan.Create(doc, vft.Id, level3.Id);\n}"}
{"prompt":"Retrieve a list of all annotation families.","completion":"List<Family> annotationFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.CategoryType == CategoryType.Annotation).ToList();\n"}
{"prompt":"Modela una bandeja de cables entre dos puntos.","completion":"CableTrayType trayType = new FilteredElementCollector(doc).OfClass(typeof(CableTrayType)).FirstOrDefault() as CableTrayType;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (trayType != null && level != null)\n{\n    \/\/ Create a default cable tray between two points as they are not specified\n    XYZ p1 = new XYZ(0, 10, 10);\n    XYZ p2 = new XYZ(20, 10, 10);\n    CableTray.Create(doc, trayType.Id, p1, p2, level.Id);\n}"}
{"prompt":"Sitúa una instancia de la familia 'Mesa de Oficina' en el centro de la habitación 'Despacho 103'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 103\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Mesa de Oficina\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);"}
{"prompt":"Import a topography from a CSV file.","completion":"using (Transaction t = new Transaction(doc, \"Create Topography\"))\n{\n    t.Start();\n    \/\/ CSV file reading is not directly supported by a single API call.\n    \/\/ You would typically read the file line by line, parse the XYZ coordinates,\n    \/\/ and then use the TopographySurface.Create method with a list of points.\n    \/\/ As a placeholder, here's how to create a simple topography from a list of points:\n    IList<XYZ> points = new List<XYZ>();\n    points.Add(new XYZ(0, 0, 0));\n    points.Add(new XYZ(10, 0, 0));\n    points.Add(new XYZ(0, 10, 0));\n    points.Add(new XYZ(10, 10, 5));\n    TopographySurface.Create(doc, points);\n    t.Commit();\n}"}
{"prompt":"Encuentra todos los muros con el comentario 'Revisar'.","completion":"ElementId commentParamId = new ElementId(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\nParameterValueProvider pvp = new ParameterValueProvider(commentParamId);\nFilterStringRuleEvaluator evaluator = new FilterStringContains();\nFilterRule rule = new FilterStringRule(pvp, evaluator, \"Revisar\");\nElementFilter filter = new ElementParameterFilter(rule);\nList<Element> wallsToReview = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(filter).ToList();"}
{"prompt":"Construct a new level named 'Mezzanine' at 7.2 meters elevation.","completion":"string levelName = \"Mezzanine\";\ndouble elevation = UnitUtils.ConvertToInternalUnits(7.2, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Clone level 4 with a 4m offset and name it 'Mezzanine'.","completion":"string levelName = \"Level 4\";\nLevel levelToCopy = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (levelToCopy != null)\n{\n    double offset = UnitUtils.ConvertToInternalUnits(4, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, levelToCopy.Elevation + offset);\n    newLevel.Name = \"Mezzanine\";\n}"}
{"prompt":"Calculate the total area of 'Paint - White' applied to walls.","completion":"Material paintMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name == \"Paint - White\") as Material;\ndouble totalPaintArea = 0.0;\n\nif (paintMaterial != null)\n{\n    FilteredElementCollector wallCollector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType();\n    foreach (Element wall in wallCollector)\n    {\n        totalPaintArea += wall.GetMaterialArea(paintMaterial.Id, false);\n    }\n}\ndouble totalPaintAreaM2 = UnitUtils.ConvertFromInternalUnits(totalPaintArea, UnitTypeId.SquareMeters);"}
{"prompt":"Crea una nueva cota de nivel llamada 'Nivel 3' a una elevación de 12 metros.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(12, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\nnewLevel.Name = \"Nivel 3\";"}
{"prompt":"Get the host element of the first window found.","completion":"FamilyInstance windowInstance = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\n\nif (windowInstance != null)\n{\n    Element hostElement = windowInstance.Host;\n}"}
{"prompt":"Incorpora un nivel llamado 'Nivel Azotea' a 16.2 metros.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(16.2, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Nivel Azotea\";\n}"}
{"prompt":"Mueve el muro seleccionado 5 metros hacia arriba.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un muro para mover\");\nif (pickedRef != null)\n{\n    XYZ translation = new XYZ(0, 0, UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters));\n    ElementTransformUtils.MoveElement(doc, pickedRef.ElementId, translation);\n}"}
{"prompt":"Duplica el tipo de muro 'Genérico - 150mm' y nómbralo 'Interior - 15cm Yeso'.","completion":"string originalName = \"Genérico - 150mm\";\nstring newName = \"Interior - 15cm Yeso\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif (originalType != null)\n{\n    WallType newType = originalType.Duplicate(newName) as WallType;\n}"}
{"prompt":"Define the 'Mark' parameter of all selected walls to 'W-EXT-6'.","completion":"using (Transaction t = new Transaction(doc, \"Set Wall Mark\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    ICollection<ElementId> selectedIds = localUidoc.Selection.GetElementIds();\n\n    if (selectedIds != null && selectedIds.Count > 6)\n    {\n        foreach(ElementId id in selectedIds)\n        {\n            Element elem = doc.GetElement(id);\n            if(elem is Wall)\n            {\n                Parameter markParam = elem.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n                if (markParam != null && !markParam.IsReadOnly) markParam.Set(\"W-EXT-01\");\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea una nueva vista de alzado mirando al norte.","completion":"using (Transaction t = new Transaction(doc, \"Create North Elevation\"))\n{\n    t.Start();\n    ViewFamilyType elevationVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(vft => vft.ViewFamily == ViewFamily.Elevation);\n    View activeView = doc.ActiveView;\n\n    if (elevationVFT != null && activeView != null)\n    {\n        ElevationMarker marker = ElevationMarker.CreateElevationMarker(doc, elevationVFT.Id, new XYZ(0, 20 \/ 0.3048, 0), 100);\n        \n        if (marker != null)\n        {\n            View aev = marker.CreateElevation(doc, activeView.Id, 2);\n            if (aev != null)\n            {\n                aev.Name = \"Alzado Norte\";\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Rename the active view to 'Working View'.","completion":"string newName = \"Working View\";\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.Name = newName;\n}"}
{"prompt":"Clone level 1 with a 6m offset and name it 'Mezzanine'.","completion":"string levelName = \"Mezzanine\";\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\n\nif (level1 != null)\n{\n    double newElevation = level1.ProjectElevation + UnitUtils.ConvertToInternalUnits(6, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, newElevation);\n    if (newLevel != null)\n    {\n        newLevel.Name = levelName;\n    }\n}"}
{"prompt":"Generate a text note with given text, location, and target element.","completion":"using (Transaction t = new Transaction(doc, \"Create Text Note\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference targetRef = localUidoc.Selection.PickObject(ObjectType.Element, \"Select an element to annotate\");\n    XYZ textLocation = localUidoc.Selection.PickPoint(\"Choose the text location\");\n\n    View activeView = doc.ActiveView;\n    ElementId defaultTypeId = doc.GetDefaultElementTypeId(ElementTypeGroup.TextNoteType);\n\n    if (targetRef != null && textLocation != null && activeView != null && defaultTypeId != ElementId.InvalidElementId)\n    {\n        TextNoteOptions opts = new TextNoteOptions(defaultTypeId);\n        TextNote note = TextNote.Create(doc, activeView.Id, textLocation, \"REVIEW CLASH\", opts);\n        if (note != null)\n        {\n            Leader leader = note.AddLeader(TextNoteLeaderTypes.TNLT_STRAIGHT_L);\n            leader.End = targetRef.GlobalPoint;\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Encuentra todas las vistas que no tienen una plantilla de vista asignada.","completion":"List<View> viewsWithoutTemplate = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().Where(v => v.CanBePrinted && !v.IsTemplate && v.ViewTemplateId.Equals(ElementId.InvalidElementId)).ToList();"}
{"prompt":"Sitúa un rociador en las coordenadas (1,2,1).","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol sprinklerSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Sprinklers).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (level != null && sprinklerSymbol != null)\n{\n    if (!sprinklerSymbol.IsActive) sprinklerSymbol.Activate();\n    XYZ placementPoint = new XYZ(UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters));\n    doc.Create.NewFamilyInstance(placementPoint, sprinklerSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n}"}
{"prompt":"Agrega una línea de rejilla vertical a la mitad de un muro cortina.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Cast<Wall>().FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain);\nif (curtainWall != null)\n{\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    if (grid != null)\n    {\n        grid.AddGridLine(true, new XYZ(0,0,0), false);\n    }\n}"}
{"prompt":"Export the document to an IFC file with version IFC4x3.","completion":"string folderPath = \"C:\/RevitExports\/\";\nstring fileName = doc.Title + \"_IFC4x3.ifc\";\nIFCExportOptions options = new IFCExportOptions();\noptions.FileVersion = IFCVersion.IFC4x3;\ndoc.Export(folderPath, fileName, options);"}
{"prompt":"Delete all unused wall types in the project.","completion":"ICollection<ElementId> allWallTypes = new FilteredElementCollector(doc).OfClass(typeof(WallType)).ToElementIds();\nICollection<ElementId> usedWallTypes = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Select(w => w.GetTypeId()).Distinct().ToList();\nList<ElementId> unusedWallTypes = allWallTypes.Except(usedWallTypes).ToList();\ndoc.Delete(unusedWallTypes);"}
{"prompt":"Dibuja una pared de 5m de largo por 3m de altura.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (level != null && wallType != null)\n{\n    Line line = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0, 0));\n    Wall.Create(doc, line, wallType.Id, level.Id, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0.0, false, false);\n}"}
{"prompt":"Configure the sill height of all windows to 900mm.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits(900, UnitTypeId.Millimeters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Duplica la vista 'Nivel 6' como una vista dependiente.","completion":"ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v => v.Name == \"Nivel 6\") as ViewPlan;\n\nif (viewToDuplicate != null)\n{\n    ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n}"}
{"prompt":"Sitúa una instancia de la familia 'Ventana Fija 123x60' en el centro de la habitación 'Despacho 103'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 123\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Ventana Fija 103x60\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);"}
{"prompt":"Encuentra el tipo de columna estructural llamado \"298 x 452mm\" y colócalo en X=1, Y=12.6","completion":"string columnTypeName = \"298 x 452mm\";\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(s => s.Name == columnTypeName);\n\nif (level != null && columnSymbol != null)\n{\n    if (!columnSymbol.IsActive)\n    {\n        columnSymbol.Activate();\n    }\n    doc.Create.NewFamilyInstance(new XYZ(1, 12.6, 0), columnSymbol, level, StructuralType.Column);\n}"}
{"prompt":"Reproduce el nivel 1 con un desfase de 3m y llámalo 'Mezanine'.","completion":"string levelName = \"Mezanine\";\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\n\nif (level1 != null)\n{\n    double newElevation = level1.ProjectElevation + UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, newElevation);\n    if (newLevel != null)\n    {\n        newLevel.Name = levelName;\n    }\n}"}
{"prompt":"Actualiza el nombre de todas las tablas que contienen 'Puertas' por 'Listado de Puertas'.","completion":"List<ViewSchedule> schedules = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().Where(vs => vs.Name.Contains(\"Puertas\")).ToList();\nforeach(ViewSchedule schedule in schedules)\n{\n    schedule.Name = schedule.Name.Replace(\"Puertas\", \"Listado de Puertas\");\n}"}
{"prompt":"Set the sill height of all windows to 1 meter.","completion":"using (Transaction t = new Transaction(doc, \"Set Sill Height\"))\n{\n    t.Start();\n    double sillHeight = 1 \/ 0.3048;\n    List<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\n    foreach(FamilyInstance window in windows)\n    {\n        Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n        if (sillHeightParam != null && !sillHeightParam.IsReadOnly)\n        {\n            sillHeightParam.Set(sillHeight);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Clone level 4 with a 1m offset and name it 'Mezzanine'.","completion":"string levelName = \"Level 4\";\nLevel levelToCopy = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (levelToCopy != null)\n{\n    double offset = UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, levelToCopy.Elevation + offset);\n    newLevel.Name = \"Mezzanine\";\n}"}
{"prompt":"Crea un espacio MEP para cada habitación en el Nivel 2","completion":"string levelName = \"Nivel 2\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    FilteredElementCollector roomCollector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WherePasses(new ElementLevelFilter(targetLevel.Id));\n    foreach (Room room in roomCollector.ToElements().Cast<Room>())\n    {\n        LocationPoint locPoint = room.Location as LocationPoint;\n        if (locPoint != null)\n        {\n            UV point = new UV(locPoint.Point.X, locPoint.Point.Y);\n            doc.Create.NewSpace(targetLevel, point);\n        }\n    }\n}"}
{"prompt":"Generate a floor plan view for 'Level 5'.","completion":"string levelName = \"Level 5\";\nLevel level3 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.FloorPlan);\n\nif (level3 != null && vft != null)\n{\n    ViewPlan viewPlan = ViewPlan.Create(doc, vft.Id, level3.Id);\n}"}
{"prompt":"Establece la visibilidad de la categoría 'Mobiliario' en falso en la vista activa.","completion":"Category furnitureCat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Furniture);\nView activeView = doc.ActiveView;\n\nif (furnitureCat != null && activeView != null)\n{\n    activeView.SetCategoryHidden(furnitureCat.Id, true);\n}"}
{"prompt":"Crea un nuevo tipo de puerta llamado 'Puerta RF-90' y establece su resistencia al fuego a '90 min'.","completion":"using (Transaction t = new Transaction(doc, \"Create Door Type\"))\n{\n    t.Start();\n    string newTypeName = \"Puerta RF-90\";\n    FamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n    if (doorTypeToDuplicate != null)\n    {\n        FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\n        if (newDoorType != null)\n        {\n            Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n            if(fireRatingParam != null && !fireRatingParam.IsReadOnly)\n            {\n                fireRatingParam.Set(\"90 min\");\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Build a roof by footprint on the 'Roof Level'.","completion":"using (Transaction t = new Transaction(doc, \"Create Roof\"))\n{\n    t.Start();\n    Level roofLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Roof Level\");\n    RoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n\n    if (roofLevel != null && roofType != null)\n    {\n        CurveArray roofProfile = new CurveArray();\n        roofProfile.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(20 \/ 0.3048,0,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(20 \/ 0.3048,0,0), new XYZ(20 \/ 0.3048,30 \/ 0.3048,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(20 \/ 0.3048,30 \/ 0.3048,0), new XYZ(0,30 \/ 0.3048,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(0,30 \/ 0.3048,0), new XYZ(0,0,0)));\n        ModelCurveArray mapping = new ModelCurveArray();\n        doc.Create.NewFootPrintRoof(roofProfile, roofLevel, roofType, out mapping);\n    }\n    t.Commit();\n}"}
{"prompt":"Encuentra el host de una luminaria basada en cara.","completion":"FamilyInstance lightFixture = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsNotElementType().Cast<FamilyInstance>().FirstOrDefault(fi => fi.HostFace != null);\n\nElement host = null;\nif (lightFixture != null)\n{\n    Reference hostFaceRef = lightFixture.HostFace;\n    if (hostFaceRef != null)\n    {\n        host = doc.GetElement(hostFaceRef.ElementId);\n    }\n}"}
{"prompt":"Aísla temporalmente la categoría de Puertas en la vista activa.","completion":"ElementId doorCategoryId = new ElementId(BuiltInCategory.OST_Doors);\nICollection<ElementId> categoryIds = new List<ElementId> { doorCategoryId };\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.IsolateCategoriesTemporary(categoryIds);\n}"}
{"prompt":"Place a piece of furniture at coordinates (2,3).","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null && furnitureSymbol != null)\n{\n    doc.Create.NewFamilyInstance(new XYZ(UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0), furnitureSymbol, level, StructuralType.NonStructural);\n}"}
{"prompt":"Sketch a 300x200 millimeter rectangular ventilation duct.","completion":"using (Transaction t = new Transaction(doc, \"Create Duct\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    DuctType ductType = new FilteredElementCollector(doc).OfClass(typeof(DuctType)).Cast<DuctType>().FirstOrDefault(d => d.Shape == ConnectorProfileType.Rectangular);\n    MEPSystemType systemType = new FilteredElementCollector(doc).OfClass(typeof(MEPSystemType)).Cast<MEPSystemType>().FirstOrDefault(s => s.SystemClassification == MEPSystemClassification.SupplyAir);\n\n    if (level != null && ductType != null && systemType != null)\n    {\n        XYZ p1 = new XYZ(0, 0, 3 \/ 0.3048);\n        XYZ p2 = new XYZ(10 \/ 0.3048, 0, 3 \/ 0.3048);\n        Duct duct = Duct.Create(doc, systemType.Id, ductType.Id, level.Id, p1, p2);\n\n        if (duct != null)\n        {\n            Parameter widthParam = duct.get_Parameter(BuiltInParameter.RBS_CURVE_WIDTH_PARAM);\n            Parameter heightParam = duct.get_Parameter(BuiltInParameter.RBS_CURVE_HEIGHT_PARAM);\n            if (widthParam != null && !widthParam.IsReadOnly) widthParam.Set(300 \/ 304.8);\n            if (heightParam != null && !heightParam.IsReadOnly) heightParam.Set(200 \/ 304.8);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea un nuevo nivel llamado 'Mezzanine' a 6.7 metros de elevación.","completion":"string levelName = \"Mezzanine\";\ndouble elevation = UnitUtils.ConvertToInternalUnits(6.7, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Define the 'Comments' parameter for all doors on Level 6 to 'Fire Rating - 86 min'.","completion":"string levelName = \"Level 6\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(targetLevel.Id);\n    FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WherePasses(levelFilter);\n    foreach (Element door in collector)\n    {\n        Parameter commentsParam = door.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n        if (commentsParam != null && !commentsParam.IsReadOnly) { commentsParam.Set(\"Fire Rating - 86 min\"); }\n    }\n}"}
{"prompt":"Change the detail level of the active view to 'Medium'.","completion":"View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.DetailLevel = ViewDetailLevel.Medium;\n}"}
{"prompt":"Assign the 'Mark' parameter of all selected walls to 'W-EXT-1'.","completion":"using (Transaction t = new Transaction(doc, \"Set Wall Mark\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    ICollection<ElementId> selectedIds = localUidoc.Selection.GetElementIds();\n\n    if (selectedIds != null && selectedIds.Count > 1)\n    {\n        foreach(ElementId id in selectedIds)\n        {\n            Element elem = doc.GetElement(id);\n            if(elem is Wall)\n            {\n                Parameter markParam = elem.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n                if (markParam != null && !markParam.IsReadOnly) markParam.Set(\"W-EXT-01\");\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Extrae todas las habitaciones que están en el Nivel 3","completion":"string levelName = \"Nivel 3\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(targetLevel.Id);\n    FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WherePasses(levelFilter);\n    uidoc.Selection.SetElementIds(collector.ToElementIds());\n}"}
{"prompt":"Set the 'Comments' parameter for all doors on Level 6 to 'Fire Rating - 87 min'.","completion":"string levelName = \"Level 6\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(targetLevel.Id);\n    FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WherePasses(levelFilter);\n    foreach (Element door in collector)\n    {\n        Parameter commentsParam = door.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n        if (commentsParam != null && !commentsParam.IsReadOnly) { commentsParam.Set(\"Fire Rating - 87 min\"); }\n    }\n}"}
{"prompt":"Cambia el nombre de la vista activa a 'Vista de Trabajo'.","completion":"string newName = \"Vista de Trabajo\";\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.Name = newName;\n}"}
{"prompt":"Modela un plafón a 2.8 metros de altura en Nivel 1.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\nCeilingType ceilingType = new FilteredElementCollector(doc).OfClass(typeof(CeilingType)).FirstOrDefault() as CeilingType;\n\nif (level != null && ceilingType != null)\n{\n    \/\/ Create a default 10ft x 10ft rectangular profile as the prompt is not specific\n    CurveLoop profile = new CurveLoop();\n    profile.Append(Line.CreateBound(new XYZ(0, 0, 0), new XYZ(10, 0, 0)));\n    profile.Append(Line.CreateBound(new XYZ(10, 0, 0), new XYZ(10, 10, 0)));\n    profile.Append(Line.CreateBound(new XYZ(10, 10, 0), new XYZ(0, 10, 0)));\n    profile.Append(Line.CreateBound(new XYZ(0, 10, 0), new XYZ(0, 0, 0)));\n\n    Ceiling ceiling = Ceiling.Create(doc, new List<CurveLoop> { profile }, ceilingType.Id, level.Id);\n    if (ceiling != null)\n    {\n        Parameter heightParam = ceiling.get_Parameter(BuiltInParameter.CEILING_HEIGHTABOVELEVEL_PARAM);\n        if (heightParam != null && !heightParam.IsReadOnly)\n        {\n            heightParam.Set(UnitUtils.ConvertToInternalUnits(2.8, UnitTypeId.Meters));\n        }\n    }\n}"}
{"prompt":"Cambia el nivel de detalle de la vista activa a 'Medio'.","completion":"View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.DetailLevel = ViewDetailLevel.Medium;\n}"}
{"prompt":"Sitúa una instancia de la familia 'Mesa de Oficina' en el centro de la habitación 'Despacho 103'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 103\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Mesa de Oficina\") as FamilySymbol;\nif(furnitureSymbol != null && !furnitureSymbol.IsActive) furnitureSymbol.Activate();\nif(room != null)\n{\n    LocationPoint roomCenter = room.Location as LocationPoint;\n    if(roomCenter != null && furnitureSymbol != null && room.Level != null)\n    {\n        doc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Crea un espacio MEP para cada habitación en el Nivel 1","completion":"string levelName = \"Nivel 1\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    FilteredElementCollector roomCollector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WherePasses(new ElementLevelFilter(targetLevel.Id));\n    foreach (Room room in roomCollector.ToElements().Cast<Room>())\n    {\n        LocationPoint locPoint = room.Location as LocationPoint;\n        if (locPoint != null)\n        {\n            UV point = new UV(locPoint.Point.X, locPoint.Point.Y);\n            doc.Create.NewSpace(targetLevel, point);\n        }\n    }\n}"}
{"prompt":"Crea un DirectShape con forma de caja de 2x2x2 metros.","completion":"TessellatedShapeBuilder builder = new TessellatedShapeBuilder();\nbuilder.OpenConnectedFaceSet(true);\ndouble size = UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\nXYZ p0=new XYZ(0,0,0); XYZ p1=new XYZ(size,0,0); XYZ p2=new XYZ(size,size,0); XYZ p3=new XYZ(0,size,0);\nXYZ p4=new XYZ(0,0,size); XYZ p5=new XYZ(size,0,size); XYZ p6=new XYZ(size,size,size); XYZ p7=new XYZ(0,size,size);\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p0,p1,p2,p3}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p7,p6,p5,p4}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p0,p4,p5,p1}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p1,p5,p6,p2}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p2,p6,p7,p3}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p3,p7,p4,p0}, ElementId.InvalidElementId));\nbuilder.CloseConnectedFaceSet();\nbuilder.Build();\nTessellatedShapeBuilderResult result = builder.GetBuildResult();\nDirectShape ds = DirectShape.CreateElement(doc, new ElementId(BuiltInCategory.OST_GenericModel));\n\nif (ds != null)\n{\n    ds.SetShape(result.GetGeometricalObjects());\n    ds.Name = \"Caja DirectShape\";\n}"}
{"prompt":"Get the coordinates of the project base point and the survey point.","completion":"BasePoint surveyPoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(p => p.IsShared);\nBasePoint projectBasePoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(p => !p.IsShared);\n\nXYZ surveyCoords = null;\nif (surveyPoint != null) surveyCoords = surveyPoint.get_BoundingBox(null).Min;\n\nXYZ projectCoords = null;\nif (projectBasePoint != null) projectCoords = projectBasePoint.get_BoundingBox(null).Min;"}
{"prompt":"Añade un punto de referencia en las coordenadas (1,2,3) dentro del editor de familias.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(1,2,3));"}
{"prompt":"Create a view filter to hide demolished walls.","completion":"using (Transaction t = new Transaction(doc, \"Create Demolition Filter\"))\n{\n    t.Start();\n    Phase demolishedPhase = new FilteredElementCollector(doc).OfClass(typeof(Phase)).Cast<Phase>().FirstOrDefault(p => p.Name.Contains(\"Demolished\") || p.Name.Contains(\"Demolición\"));\n    View activeView = doc.ActiveView;\n\n    if (demolishedPhase != null && activeView != null)\n    {\n        ElementId paramId = new ElementId(BuiltInParameter.PHASE_DEMOLISHED);\n        FilterRule rule = ParameterFilterRuleFactory.CreateEqualsRule(paramId, demolishedPhase.Id);\n        ElementFilter filter = new ElementParameterFilter(rule);\n        ICollection<ElementId> categories = new List<ElementId>{ new ElementId(BuiltInCategory.OST_Walls) };\n        ParameterFilterElement pfe = ParameterFilterElement.Create(doc, \"Demolition Filter\", categories, filter);\n        \n        if (pfe != null)\n        {\n            activeView.AddFilter(pfe.Id);\n            activeView.SetFilterVisibility(pfe.Id, false);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Genera un reporte con el área de todas las habitaciones del proyecto.","completion":"List<Room> rooms = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>().ToList();\nList<double> roomAreas = new List<double>();\nforeach (Room room in rooms)\n{\n    if (room != null && room.Area > 0)\n    {\n        roomAreas.Add(UnitUtils.ConvertFromInternalUnits(room.Area, UnitTypeId.SquareMeters));\n    }\n}\n\/\/ El orquestador puede ahora usar la lista 'roomAreas' para generar el reporte final."}
{"prompt":"Create a stair between Level 6 and Level 3","completion":"\/\/ This is a complex operation that requires multiple steps and\/or user interaction and is not supported by the agent."}
{"prompt":"Crea un tipo de muro 'Muro-Doble' de 30cm y luego crea un muro de ese tipo.","completion":"using (Transaction t = new Transaction(doc, \"Create Wall Type and Wall\"))\n{\n    t.Start();\n    string newTypeName = \"Muro-Doble\";\n    WallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n    WallType newWallType = null;\n    if (wallTypeToDuplicate != null)\n    {\n        newWallType = wallTypeToDuplicate.Duplicate(newTypeName) as WallType;\n        if (newWallType != null)\n        {\n            CompoundStructure cs = newWallType.GetCompoundStructure();\n            if (cs != null && cs.LayerCount > 0)\n            {\n                cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), 0.3 \/ 0.3048);\n                newWallType.SetCompoundStructure(cs);\n            }\n        }\n    }\n    if (newWallType != null)\n    {\n        Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n        Line wallCurve = Line.CreateBound(XYZ.Zero, new XYZ(10 \/ 0.3048, 0, 0));\n        double height = 3 \/ 0.3048;\n        if (level != null)\n        {\n            Wall.Create(doc, wallCurve, newWallType.Id, level.Id, height, 0, false, false);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Traza un conducto de ventilación rectangular de 300x200 milímetros.","completion":"using (Transaction t = new Transaction(doc, \"Create Duct\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    DuctType ductType = new FilteredElementCollector(doc).OfClass(typeof(DuctType)).Cast<DuctType>().FirstOrDefault(d => d.Shape == ConnectorProfileType.Rectangular);\n    MEPSystemType systemType = new FilteredElementCollector(doc).OfClass(typeof(MEPSystemType)).Cast<MEPSystemType>().FirstOrDefault(s => s.SystemClassification == MEPSystemClassification.SupplyAir);\n\n    if (level != null && ductType != null && systemType != null)\n    {\n        XYZ p1 = new XYZ(0, 0, 3 \/ 0.3048);\n        XYZ p2 = new XYZ(10 \/ 0.3048, 0, 3 \/ 0.3048);\n        Duct duct = Duct.Create(doc, systemType.Id, ductType.Id, level.Id, p1, p2);\n\n        if (duct != null)\n        {\n            Parameter widthParam = duct.get_Parameter(BuiltInParameter.RBS_CURVE_WIDTH_PARAM);\n            Parameter heightParam = duct.get_Parameter(BuiltInParameter.RBS_CURVE_HEIGHT_PARAM);\n            if (widthParam != null && !widthParam.IsReadOnly) widthParam.Set(300 \/ 304.8);\n            if (heightParam != null && !heightParam.IsReadOnly) heightParam.Set(200 \/ 304.8);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Generate a new Level named 'Level 6' at an elevation of 16 meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(16, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Level 6\";\n}"}
{"prompt":"Assign the 'Comments' parameter for all doors on Level 5 to 'Fire Rating - 86 min'.","completion":"string levelName = \"Level 5\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(targetLevel.Id);\n    FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WherePasses(levelFilter);\n    foreach (Element door in collector)\n    {\n        Parameter commentsParam = door.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n        if (commentsParam != null && !commentsParam.IsReadOnly) { commentsParam.Set(\"Fire Rating - 86 min\"); }\n    }\n}"}
{"prompt":"Crea un techo por contorno en el 'Nivel de Cubierta'.","completion":"using (Transaction t = new Transaction(doc, \"Create Roof\"))\n{\n    t.Start();\n    Level roofLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel de Cubierta\");\n    RoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n\n    if (roofLevel != null && roofType != null)\n    {\n        CurveArray roofProfile = new CurveArray();\n        roofProfile.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(20 \/ 0.3048,0,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(20 \/ 0.3048,0,0), new XYZ(20 \/ 0.3048,30 \/ 0.3048,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(20 \/ 0.3048,30 \/ 0.3048,0), new XYZ(0,30 \/ 0.3048,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(0,30 \/ 0.3048,0), new XYZ(0,0,0)));\n        ModelCurveArray mapping = new ModelCurveArray();\n        doc.Create.NewFootPrintRoof(roofProfile, roofLevel, roofType, out mapping);\n    }\n    t.Commit();\n}"}
{"prompt":"Replicate the 'Generic - 201mm' wall type and name it 'Interior - 15cm Plaster'.","completion":"string originalName = \"Generic - 201mm\";\nstring newName = \"Interior - 15cm Plaster\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif(originalType!=null)\n    originalType.Duplicate(newName);"}
{"prompt":"Get all rooms on Level 3.","completion":"Level level3 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 3\") as Level;\nList<Element> roomsOnLevel3 = new List<Element>();\n\nif (level3 != null)\n{\n    roomsOnLevel3 = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Where(r => r.LevelId == level3.Id).ToList();\n}"}
{"prompt":"Crea una nueva habitación en el Nivel 2 en el punto (14, 5).","completion":"string levelName = \"Nivel 2\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    UV point = new UV(14, 5);\n    Room newRoom = doc.Create.NewRoom(targetLevel, point);\n}"}
{"prompt":"Fill the material parameter of all walls with 'Concrete'.","completion":"Material concreteMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name.Contains(\"Concrete\")) as Material;\nvar walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>().ToList();\n\nif (concreteMaterial != null)\n{\n    foreach(Wall w in walls)\n    {\n        Parameter materialParam = w.get_Parameter(BuiltInParameter.STRUCTURAL_MATERIAL_PARAM);\n        if(materialParam != null && !materialParam.IsReadOnly) materialParam.Set(concreteMaterial.Id);\n    }\n}"}
{"prompt":"Agrega los campos 'Primer Piso', 'Marca' y 'Volumen' a la tabla de pilares.","completion":"ViewSchedule schedule = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().FirstOrDefault(s => s.Name.Contains(\"Pilares\") || s.Name.Contains(\"Column\"));\nif (schedule != null)\n{\n    ScheduleDefinition def = schedule.Definition;\n    SchedulableField levelField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.FAMILY_LEVEL_PARAM);\n    if (levelField != null) def.AddField(levelField);\n    SchedulableField markField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.ALL_MODEL_MARK);\n    if (markField != null) def.AddField(markField);\n    SchedulableField volumeField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.HOST_VOLUME_COMPUTED);\n    if (volumeField != null) def.AddField(volumeField);\n}"}
{"prompt":"Importa topografía georreferenciada desde un archivo LandXML.","completion":"\/\/ The Revit API in the provided context does not support direct LandXML import.\n\/\/ This functionality typically requires additional add-ins like the Site Designer, which are not available here.\n\/\/ As a placeholder, this code will show how to create a simple topography surface from a list of points.\nusing(Transaction t = new Transaction(doc, \"Create Topography\"))\n{\n    t.Start();\n    IList<XYZ> points = new List<XYZ>();\n    points.Add(new XYZ(0, 0, 0));\n    points.Add(new XYZ(50, 0, 5));\n    points.Add(new XYZ(0, 50, 10));\n    TopographySurface.Create(doc, points);\n    t.Commit();\n}"}
{"prompt":"Change the detail level of the current view to 'Coarse'.","completion":"View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.DetailLevel = ViewDetailLevel.Coarse;\n}"}
{"prompt":"Cambia el tipo de una losa seleccionada a 'Concreto 15cm'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una losa\");\n\nif (pickedRef != null)\n{\n    Floor floorToChange = doc.GetElement(pickedRef) as Floor;\n    FloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name == \"Concreto 15cm\");\n    \n    if (floorToChange != null && newType != null)\n    {\n        floorToChange.ChangeTypeId(newType.Id);\n    }\n}"}
{"prompt":"Inserta una instancia de la familia 'Mesa de Oficina' en el centro de la habitación 'Despacho 103'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 103\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Mesa de Oficina\") as FamilySymbol;\nif(furnitureSymbol != null && !furnitureSymbol.IsActive) furnitureSymbol.Activate();\nif(room != null)\n{\n    LocationPoint roomCenter = room.Location as LocationPoint;\n    if(roomCenter != null && furnitureSymbol != null && room.Level != null)\n    {\n        doc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Duplica el nivel 1 con un desfase de 6m y llámalo 'Mezanine'.","completion":"string levelName = \"Mezanine\";\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\n\nif (level1 != null)\n{\n    double newElevation = level1.ProjectElevation + UnitUtils.ConvertToInternalUnits(6, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, newElevation);\n    if (newLevel != null)\n    {\n        newLevel.Name = levelName;\n    }\n}"}
{"prompt":"Find all walls with an empty 'Mark' parameter and set it to 'WM-01'.","completion":"List<Wall> walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>().ToList();\nforeach(var w in walls)\n{\n  Parameter p = w.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n  if(p != null && !p.IsReadOnly && string.IsNullOrEmpty(p.AsString()))\n  {\n      p.Set(\"WM-01\");\n  }\n}"}
{"prompt":"Create a stair between Level 1 and Level 2.","completion":"Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 1\");\nLevel topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 2\");\n\nif (bottomLevel != null && topLevel != null)\n{\n    \/\/ TODO: Stairs.Create(doc, bottomLevel.Id, topLevel.Id); is not a valid Revit API call.\n    \/\/ Stairs creation requires using the StairsEditScope class.\n}"}
{"prompt":"Construct a new room on Level 1 at point (10, 10).","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\n\nif (level1 != null)\n{\n    UV point = new UV(10, 10);\n    Room room = doc.Create.NewRoom(level1, point);\n}"}
{"prompt":"Construct a floor plan view for 'Level 2'.","completion":"string levelName = \"Level 2\";\nLevel level3 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.FloorPlan);\n\nif (level3 != null && vft != null)\n{\n    ViewPlan viewPlan = ViewPlan.Create(doc, vft.Id, level3.Id);\n}"}
{"prompt":"Generate a new Level named 'Level 9' at an elevation of 17 meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(17, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\nif (newLevel != null)\n{\n    try { newLevel.Name = \"Level 9\"; } catch {}\n}"}
{"prompt":"Alinea las líneas de centro de dos muros seleccionados por el usuario.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference r1 = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona el primer muro (el que se moverá)\");\nReference r2 = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona el segundo muro (el de referencia)\");\n\nif (r1 != null && r2 != null)\n{\n    Wall w1 = doc.GetElement(r1) as Wall;\n    Wall w2 = doc.GetElement(r2) as Wall;\n    View activeView = doc.ActiveView;\n\n    if (w1 != null && w2 != null && activeView != null)\n    {\n        LocationCurve lc1 = w1.Location as LocationCurve;\n        LocationCurve lc2 = w2.Location as LocationCurve;\n        if (lc1 != null && lc2 != null)\n        {\n            doc.Create.NewAlignment(activeView, lc1.Curve.Reference, lc2.Curve.Reference);\n        }\n    }\n}"}
{"prompt":"Create a 30cm 'Double-Wall' type and then create a wall of that type.","completion":"WallType newWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == \"Double-Wall\") as WallType;\nif (newWallType == null)\n{\n    WallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n    if(wallTypeToDuplicate != null)\n    {\n        try { newWallType = wallTypeToDuplicate.Duplicate(\"Double-Wall\") as WallType; } catch {}\n        if(newWallType!=null)\n        {\n            CompoundStructure cs = newWallType.GetCompoundStructure();\n            if(cs != null && cs.GetLayers().Any())\n            {\n                 int coreIndex = cs.GetFirstCoreLayerIndex();\n                 if(coreIndex != -1) \n                 {\n                     cs.SetLayerWidth(coreIndex, UnitUtils.ConvertToInternalUnits(30, UnitTypeId.Centimeters));\n                     newWallType.SetCompoundStructure(cs);\n                 }\n            }\n        }\n    }\n}\nif (newWallType != null)\n{\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    if (level != null)\n    {\n        Line wallCurve = Line.CreateBound(XYZ.Zero, new XYZ(10,0,0));\n        double height = UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\n        Wall.Create(doc, wallCurve, newWallType.Id, level.Id, height, 0, false, false);\n    }\n}"}
{"prompt":"Create a roof by footprint on the 'Roof Level'.","completion":"using (Transaction t = new Transaction(doc, \"Create Roof\"))\n{\n    t.Start();\n    Level roofLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Roof Level\");\n    RoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n\n    if (roofLevel != null && roofType != null)\n    {\n        CurveArray roofProfile = new CurveArray();\n        roofProfile.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(20 \/ 0.3048,0,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(20 \/ 0.3048,0,0), new XYZ(20 \/ 0.3048,30 \/ 0.3048,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(20 \/ 0.3048,30 \/ 0.3048,0), new XYZ(0,30 \/ 0.3048,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(0,30 \/ 0.3048,0), new XYZ(0,0,0)));\n        ModelCurveArray mapping = new ModelCurveArray();\n        doc.Create.NewFootPrintRoof(roofProfile, roofLevel, roofType, out mapping);\n    }\n    t.Commit();\n}"}
{"prompt":"Importa un archivo CAD llamado 'BasePlan.dwg' en la vista actual.","completion":"string filePath = \"C:\/CAD\/BasePlan.dwg\";\nDWGImportOptions options = new DWGImportOptions();\noptions.Placement = ImportPlacement.Origin;\nElementId importId;\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    doc.Import(filePath, options, activeView, out importId);\n}"}
{"prompt":"Insert a spot elevation on Level 1.","completion":"using (Transaction t = new Transaction(doc, \"Place Spot Elevation\"))\n{\n    t.Start();\n    Level lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 1\");\n    View activeView = doc.ActiveView;\n\n    if (lvl1 != null && activeView != null)\n    {\n        Reference levelRef = new Reference(lvl1);\n        XYZ origin = new XYZ(5\/0.3048, 5\/0.3048, lvl1.Elevation);\n        XYZ leaderEnd = origin + new XYZ(2\/0.3048, 2\/0.3048, 0);\n        doc.Create.NewSpotElevation(activeView, levelRef, origin, origin, leaderEnd, origin, true);\n    }\n    t.Commit();\n}"}
{"prompt":"Crea un muro del tipo 'Genérico - 200mm' en el 'Nivel 1' desde (0,0) hasta (10,5).","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == \"Genérico - 200mm\") as WallType;\n\nif (level != null && wallType != null)\n{\n    XYZ startPoint = new XYZ(0, 0, 0);\n    XYZ endPoint = new XYZ(10, 5, 0);\n    Line wallCurve = Line.CreateBound(startPoint, endPoint);\n    \/\/ Use a default height of 10ft as it's not specified in the prompt\n    double height = 10.0;\n    Wall.Create(doc, wallCurve, wallType.Id, level.Id, height, 0, false, false);\n}"}
{"prompt":"Build a new level 'Level 7' at an elevation of 8 meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Level 7\";\n}"}
{"prompt":"Ubica una instancia de la familia 'Mesa de Oficina' en el centro de la habitación 'Despacho 99'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 99\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Mesa de Oficina\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);"}
{"prompt":"Copia el nivel 2 con un desfase de 7m y llámalo 'Mezanine'.","completion":"string levelName = \"Nivel 2\";\nLevel levelToCopy = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (levelToCopy != null)\n{\n    double offset = UnitUtils.ConvertToInternalUnits(7, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, levelToCopy.Elevation + offset);\n    newLevel.Name = \"Mezanine\";\n}"}
{"prompt":"Obtén todas las familias de puertas cargadas en el proyecto.","completion":"List<Family> doorFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.Id.IntegerValue == (int)BuiltInCategory.OST_Doors).ToList();"}
{"prompt":"Inserta el prefijo 'ARQ-' a todas las tablas de planificación.","completion":"string prefix = \"ARQ-\";\nList<ViewSchedule> schedules = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().Where(v => !v.IsTemplate).ToList();\nforeach (ViewSchedule schedule in schedules)\n{\n    if (!schedule.Name.StartsWith(prefix))\n    {\n        schedule.Name = prefix + schedule.Name;\n    }\n}"}
{"prompt":"Clona el nivel 1 con un desfase de 1m y llámalo 'Mezanine'.","completion":"string levelName = \"Mezanine\";\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\n\nif (level1 != null)\n{\n    double newElevation = level1.ProjectElevation + UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, newElevation);\n    if (newLevel != null)\n    {\n        newLevel.Name = levelName;\n    }\n}"}
{"prompt":"Crea un nuevo material llamado 'Vidrio Reflectante' y asígnale un color base.","completion":"string materialName = \"Vidrio Reflectante\";\nElementId materialId = Material.Create(doc, materialName);\n\nif (materialId != ElementId.InvalidElementId)\n{\n    Material material = doc.GetElement(materialId) as Material;\n    if (material != null)\n    {\n        material.Color = new Color(210, 230, 240); \/\/ Un color azulado claro para el vidrio\n        material.Transparency = 80;\n    }\n}"}
{"prompt":"Cambia el parámetro 'Función' de todos los muros seleccionados a 'Exterior - Ladrillo'.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nif (selectedIds.Count > 0)\n{\n    foreach(ElementId id in selectedIds)\n    {\n        Wall wall = doc.GetElement(id) as Wall;\n        if (wall != null)\n        {\n            Parameter funcParam = wall.get_Parameter(BuiltInParameter.FUNCTION_PARAM);\n            if (funcParam != null && !funcParam.IsReadOnly)\n            {\n                funcParam.Set(1); \/\/ 1 corresponde a Exterior - Ladrillo\n            }\n        }\n    }\n}"}
{"prompt":"Get a list of all project warnings.","completion":"IList<FailureMessage> warnings = doc.GetWarnings();\nList<string> warningDescriptions = warnings.Select(w => w.GetDescriptionText()).ToList();\n"}
{"prompt":"Inserta una instancia de la familia 'Mesa de Oficina' en el centro de la habitación 'Despacho 97'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 97\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Mesa de Oficina\") as FamilySymbol;\nif(furnitureSymbol != null && !furnitureSymbol.IsActive) furnitureSymbol.Activate();\nif(room != null)\n{\n    LocationPoint roomCenter = room.Location as LocationPoint;\n    if(roomCenter != null && furnitureSymbol != null && room.Level != null)\n    {\n        doc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Crea un tipo de muro 'Muro-Doble' de 30cm y luego crea un muro de ese tipo.","completion":"using (Transaction t = new Transaction(doc, \"Create Wall Type and Wall\"))\n{\n    t.Start();\n    string newTypeName = \"Muro-Doble\";\n    WallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n    WallType newWallType = null;\n    if (wallTypeToDuplicate != null)\n    {\n        newWallType = wallTypeToDuplicate.Duplicate(newTypeName) as WallType;\n        if (newWallType != null)\n        {\n            CompoundStructure cs = newWallType.GetCompoundStructure();\n            if (cs != null && cs.LayerCount > 0)\n            {\n                cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), 0.3 \/ 0.3048);\n                newWallType.SetCompoundStructure(cs);\n            }\n        }\n    }\n    if (newWallType != null)\n    {\n        Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n        Line wallCurve = Line.CreateBound(XYZ.Zero, new XYZ(10 \/ 0.3048, 0, 0));\n        double height = 3 \/ 0.3048;\n        if (level != null)\n        {\n            Wall.Create(doc, wallCurve, newWallType.Id, level.Id, height, 0, false, false);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Duplicate level 4 with a 7m offset and name it 'Mezzanine'.","completion":"string levelName = \"Level 4\";\nLevel levelToCopy = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (levelToCopy != null)\n{\n    double offset = UnitUtils.ConvertToInternalUnits(7, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, levelToCopy.Elevation + offset);\n    newLevel.Name = \"Mezzanine\";\n}"}
{"prompt":"Get all walls from a linked model that intersect with a bounding box.","completion":"RevitLinkInstance linkInstance = new FilteredElementCollector(doc).OfClass(typeof(RevitLinkInstance)).FirstOrDefault() as RevitLinkInstance;\nList<Element> linkedWalls = new List<Element>();\n\nif (linkInstance != null)\n{\n    Document linkDoc = linkInstance.GetLinkDocument();\n    if (linkDoc != null)\n    {\n        BoundingBoxXYZ bbox = new BoundingBoxXYZ();\n        bbox.Min = new XYZ(0,0,0);\n        bbox.Max = new XYZ(UnitUtils.ConvertToInternalUnits(50, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits(50, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters));\n        BoundingBoxIntersectsFilter filter = new BoundingBoxIntersectsFilter(new Outline(bbox.Min, bbox.Max));\n        linkedWalls = new FilteredElementCollector(linkDoc).OfClass(typeof(Wall)).WherePasses(filter).ToList();\n    }\n}\n"}
{"prompt":"Dame los metros lineales totales de todas las vigas en el proyecto.","completion":"double totalLength = 0.0;\nFilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsNotElementType();\n\nforeach (Element beam in collector)\n{\n    Parameter lengthParam = beam.get_Parameter(BuiltInParameter.CURVE_ELEM_LENGTH);\n    if (lengthParam != null) totalLength += lengthParam.AsDouble();\n}\ndouble totalLengthM = UnitUtils.ConvertFromInternalUnits(totalLength, UnitTypeId.Meters);"}
{"prompt":"Change the visual style of the active view to 'Hidden Line'.","completion":"View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.DisplayStyle = DisplayStyle.HLR;\n}"}
{"prompt":"Crea una tubería con un diámetro de 150mm.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nPipeType pipeType = new FilteredElementCollector(doc).OfClass(typeof(PipeType)).FirstOrDefault() as PipeType;\nPipingSystemType systemType = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).FirstOrDefault() as PipingSystemType;\n\nif (level != null && pipeType != null && systemType != null)\n{\n    XYZ p1 = new XYZ(0,0,0);\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters),0,0);\n    Pipe pipe = Pipe.Create(doc, systemType.Id, pipeType.Id, level.Id, p1, p2);\n\n    if (pipe != null)\n    {\n        Parameter diameterParam = pipe.get_Parameter(BuiltInParameter.RBS_PIPE_DIAMETER_PARAM);\n        if (diameterParam != null) {\n            diameterParam.Set(UnitUtils.ConvertToInternalUnits(150, UnitTypeId.Millimeters));\n        }\n    }\n}"}
{"prompt":"Modifica el tipo de la ventana seleccionada al tipo 'Fija 122x60'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una ventana\");\nFamilySymbol newType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name == \"Fija 122x60\");\nif (pickedRef != null && newType != null)\n{\n    FamilyInstance window = doc.GetElement(pickedRef.ElementId) as FamilyInstance;\n    if (window != null)\n    {\n        window.Symbol = newType;\n    }\n}"}
{"prompt":"Find all walls that have no base level assigned.","completion":"ElementFilter unassociatedFilter = new ElementLevelFilter(ElementId.InvalidElementId);\nList<Element> unassignedWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(unassociatedFilter).ToList();"}
{"prompt":"Esconde mi selección actual en esta vista.","completion":"ICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nView activeView = doc.ActiveView;\n\nif (activeView != null && selectedIds.Any())\n{\n    activeView.HideElements(selectedIds);\n}"}
{"prompt":"Build a new Level named 'Level 7' at an elevation of 17 meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(17, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Level 7\";\n}"}
{"prompt":"Append a reference point at coordinates (1,4,4) inside the family editor.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(1,4,4));"}
{"prompt":"Obtén todos los muros del Nivel 1 que son estructurales.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\nif (level1 != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level1.Id);\n    ElementCategoryFilter categoryFilter = new ElementCategoryFilter(BuiltInCategory.OST_Walls);\n    ParameterValueProvider pvp = new ParameterValueProvider(new ElementId(BuiltInParameter.WALL_STRUCTURAL_SIGNIFICANT));\n    FilterIntegerRule rule = new FilterIntegerRule(pvp, new FilterNumericEquals(), 1);\n    ElementParameterFilter structuralFilter = new ElementParameterFilter(rule);\n    LogicalAndFilter andFilter = new LogicalAndFilter(new List<ElementFilter> { levelFilter, categoryFilter, structuralFilter });\n    List<Element> structuralWalls = new FilteredElementCollector(doc).WherePasses(andFilter).ToList();\n}"}
{"prompt":"Agrega un punto de referencia en las coordenadas (1,1,6) dentro del editor de familias.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(1,1,6));"}
{"prompt":"Create 4 vertical grids spaced 10 meters apart.","completion":"double separation = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\nfor(int i=0; i<4; i++)\n{\n    Line line = Line.CreateBound(new XYZ(i * separation, 0, 0), new XYZ(i * separation, 40, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Build a new room on Level 3 at point (15, 5).","completion":"string levelName = \"Level 3\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    UV point = new UV(15, 5);\n    Room newRoom = doc.Create.NewRoom(targetLevel, point);\n}"}
{"prompt":"Aplica aislamiento térmico de 25mm a todas las tuberías de agua caliente.","completion":"PipeInsulationType insulationType = new FilteredElementCollector(doc).OfClass(typeof(PipeInsulationType)).FirstOrDefault() as PipeInsulationType;\nPipingSystemType hotWaterSystem = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).Cast<PipingSystemType>().FirstOrDefault(s => s.Name.Contains(\"Hot Water\") || s.Name.Contains(\"Agua Caliente\"));\n\nif (insulationType != null && hotWaterSystem != null)\n{\n    List<Pipe> pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast<Pipe>().Where(p => \n    {\n        Parameter systemParam = p.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM);\n        return systemParam != null && systemParam.HasValue && systemParam.AsElementId() == hotWaterSystem.Id;\n    }).ToList();\n    \n    foreach(Pipe p in pipes)\n    {\n        PipeInsulation.Create(doc, p.Id, insulationType.Id, UnitUtils.ConvertToInternalUnits(25, UnitTypeId.Millimeters));\n    }\n}"}
{"prompt":"Duplicate the 'Generic - 135mm' wall type and name it 'Interior - 15cm Plaster'.","completion":"string originalName = \"Generic - 135mm\";\nstring newName = \"Interior - 15cm Plaster\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif (originalType != null)\n{\n    WallType newType = originalType.Duplicate(newName) as WallType;\n}"}
{"prompt":"Insert a window 1m wide and 1.2m high into a wall.","completion":"Wall hostWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nFamilySymbol originalSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (originalSymbol != null && hostWall != null)\n{\n    string newTypeName = \"Window 1.0m x 1.2m\";\n    FamilySymbol newSymbol = null;\n    try { newSymbol = originalSymbol.Duplicate(newTypeName) as FamilySymbol; } catch {}\n    if(newSymbol == null) { newSymbol = new FilteredElementCollector(doc).OfClass(typeof(FamilySymbol)).Cast<FamilySymbol>().FirstOrDefault(s => s.Name == newTypeName); }\n    if(newSymbol != null)\n    {\n        if (!newSymbol.IsActive) { newSymbol.Activate(); }\n        Parameter widthParam = newSymbol.LookupParameter(\"Width\");\n        if(widthParam != null) widthParam.Set(UnitUtils.ConvertToInternalUnits(1.0, UnitTypeId.Meters));\n        Parameter heightParam = newSymbol.LookupParameter(\"Height\");\n        if(heightParam != null) heightParam.Set(UnitUtils.ConvertToInternalUnits(1.2, UnitTypeId.Meters));\n        Level level = doc.GetElement(hostWall.LevelId) as Level;\n        LocationCurve locationCurve = hostWall.Location as LocationCurve;\n        if (level != null && locationCurve != null)\n        {\n            XYZ insertionPoint = locationCurve.Curve.Evaluate(0.5, true);\n            doc.Create.NewFamilyInstance(insertionPoint, newSymbol, hostWall, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n        }\n    }\n}"}
{"prompt":"Obtén la geometría sólida de un elemento seleccionado.","completion":"UIDocument localUidoc = uidoc;\nReference pickedRef = localUidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un elemento para obtener su geometría\");\nif(pickedRef != null)\n{\n    Element elem = doc.GetElement(pickedRef);\n    if(elem != null)\n    {\n        Options opt = new Options() { ComputeReferences = true, DetailLevel = ViewDetailLevel.Fine };\n        GeometryElement geoElem = elem.get_Geometry(opt);\n        if(geoElem != null)\n        {\n            List<Solid> solids = geoElem.OfType<Solid>().Where(s => s.Volume > 0).ToList();\n        }\n    }\n}"}
{"prompt":"Sitúa una instancia de la familia 'Ventana Fija 116x60' en el centro de la habitación 'Despacho 104'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 116\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Ventana Fija 104x60\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);"}
{"prompt":"Position an instance of the 'Office Desk' family in the center of the 'Office 104' room.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Office 104\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Office Desk\") as FamilySymbol;\nif(furnitureSymbol != null && !furnitureSymbol.IsActive) furnitureSymbol.Activate();\nif(room != null)\n{\n    LocationPoint roomCenter = room.Location as LocationPoint;\n    if(roomCenter != null && furnitureSymbol != null && room.Level != null)\n    {\n        doc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Ubica un rociador en las coordenadas (1,2,3).","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol sprinklerSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Sprinklers).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (level != null && sprinklerSymbol != null)\n{\n    if (!sprinklerSymbol.IsActive) sprinklerSymbol.Activate();\n    XYZ placementPoint = new XYZ(UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters));\n    doc.Create.NewFamilyInstance(placementPoint, sprinklerSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n}"}
{"prompt":"Find all walls that are not associated with any level.","completion":"ElementFilter unassociatedFilter = new ElementLevelFilter(ElementId.InvalidElementId);\nList<Element> unassignedWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(unassociatedFilter).ToList();"}
{"prompt":"Configure the sill height of all windows to 903mm.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits(903, UnitTypeId.Millimeters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Create a new door type named 'FR-90 Door' and set its fire rating to '90 min'.","completion":"using (Transaction t = new Transaction(doc, \"Create Door Type\"))\n{\n    t.Start();\n    string newTypeName = \"FR-90 Door\";\n    FamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n    if (doorTypeToDuplicate != null)\n    {\n        FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\n        if (newDoorType != null)\n        {\n            Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n            if(fireRatingParam != null && !fireRatingParam.IsReadOnly)\n            {\n                fireRatingParam.Set(\"90 min\");\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Set the visibility of the 'Furniture' category to false in the active view.","completion":"Category furnitureCat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Furniture);\nif (furnitureCat != null && doc.ActiveView != null)\n{\n    doc.ActiveView.SetCategoryHidden(furnitureCat.Id, true);\n}"}
{"prompt":"Añade refuerzo a una columna.","completion":"RebarBarType barType = new FilteredElementCollector(doc).OfClass(typeof(RebarBarType)).FirstOrDefault() as RebarBarType;\nRebarShape shape = new FilteredElementCollector(doc).OfClass(typeof(RebarShape)).FirstOrDefault() as RebarShape;\nFamilyInstance column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\n\nif (barType != null && shape != null && column != null)\n{\n    \/\/ Para simplificar, asume que la columna tiene una LocationPoint y una Transform válida.\n    \/\/ Para mayor robustez, se podría validar column.Location y column.GetTransform().\n    Rebar.CreateFromRebarShape(doc, shape, barType, column, column.GetTransform().Origin, XYZ.BasisX, XYZ.BasisY);\n}"}
{"prompt":"Synchronize the local model with the central model, adding the comment 'Design update'.","completion":"if (doc.IsWorkshared)\n{\n    TransactWithCentralOptions tco = new TransactWithCentralOptions();\n    SynchronizeWithCentralOptions swcOpts = new SynchronizeWithCentralOptions();\n    swcOpts.Comment = \"Design update\";\n    swcOpts.SaveLocalAfter = true;\n    doc.SynchronizeWithCentral(tco, swcOpts);\n}"}
{"prompt":"Crea un piso rectangular de 10×8 metros.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\n\nif (level != null && floorType != null)\n{\n    double width = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\n    double length = UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters);\n    XYZ p1 = new XYZ(0, 0, 0);\n    XYZ p2 = new XYZ(width, 0, 0);\n    XYZ p3 = new XYZ(width, length, 0);\n    XYZ p4 = new XYZ(0, length, 0);\n    CurveLoop loop = new CurveLoop();\n    loop.Append(Line.CreateBound(p1, p2));\n    loop.Append(Line.CreateBound(p2, p3));\n    loop.Append(Line.CreateBound(p3, p4));\n    loop.Append(Line.CreateBound(p4, p1));\n    Floor.Create(doc, new List<CurveLoop> { loop }, floorType.Id, level.Id);\n}"}
{"prompt":"Create 8 horizontal grids spaced 10 meters apart.","completion":"double separation = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\nfor(int i = 0; i < 8; i++)\n{\n    Line line = Line.CreateBound(new XYZ(0, i * separation, 0), new XYZ(50, i * separation, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Generate a 'Roof Terrace' level at 13m.","completion":"string levelName = \"Roof Terrace\";\ndouble elev = UnitUtils.ConvertToInternalUnits(13, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elev);\nnewLevel.Name = levelName;\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Adjust the type of a floor to one that contains 'Concrete'.","completion":"Floor floorToChange = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault() as Floor;\nif(floorToChange != null)\n{\n    FloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name.Contains(\"Concrete\"));\n    if(newType!=null)\n        floorToChange.ChangeTypeId(newType.Id);\n}"}
{"prompt":"Obtén el espacio MEP asociado a la habitación 'Oficina 106'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Cast<Room>().FirstOrDefault(r => r.Name == \"Oficina 106\");\nList<Space> spaces = new List<Space>();\n\nif (room != null)\n{\n    spaces = new FilteredElementCollector(doc).OfClass(typeof(Space)).Cast<Space>().Where(s => s.Room != null && s.Room.Id == room.Id).ToList();\n}"}
{"prompt":"Copy the 'Generic - 173mm' wall type and name it 'Interior - 15cm Plaster'.","completion":"string originalName = \"Generic - 173mm\";\nstring newName = \"Interior - 15cm Plaster\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif (originalType != null)\n{\n    WallType newType = originalType.Duplicate(newName) as WallType;\n}"}
{"prompt":"Turn a selected element 95 degrees around its Z-axis.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select an element to rotate\");\nElement elem = doc.GetElement(pickedRef.ElementId);\nLocationPoint lp = elem.Location as LocationPoint;\nLine axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\nElementTransformUtils.RotateElement(doc, elem.Id, axis, Math.PI \/ 95);"}
{"prompt":"Encuentra todas las puertas en el Nivel 1 usando un filtro combinado.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\nList<Element> doors = new List<Element>();\n\nif (level1 != null)\n{\n    ElementCategoryFilter categoryFilter = new ElementCategoryFilter(BuiltInCategory.OST_Doors);\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level1.Id);\n    LogicalAndFilter combinedFilter = new LogicalAndFilter(categoryFilter, levelFilter);\n    doors = new FilteredElementCollector(doc).WherePasses(combinedFilter).ToList();\n}"}
{"prompt":"Obtén el tipo de sistema de una tubería seleccionada.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una tubería\");\n\nPipingSystemType systemType = null;\nif (pickedRef != null)\n{\n    Pipe pipe = doc.GetElement(pickedRef.ElementId) as Pipe;\n    if (pipe != null)\n    {\n        Parameter systemTypeParam = pipe.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM);\n        if (systemTypeParam != null && systemTypeParam.HasValue)\n        {\n            systemType = doc.GetElement(systemTypeParam.AsElementId()) as PipingSystemType;\n        }\n    }\n}\n"}
{"prompt":"Spin a selected element 86 degrees around its Z-axis.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select an element to rotate\");\nElement elem = doc.GetElement(pickedRef.ElementId);\nLocationPoint lp = elem.Location as LocationPoint;\nLine axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\nElementTransformUtils.RotateElement(doc, elem.Id, axis, Math.PI \/ 86);"}
{"prompt":"Recupera la geometría sólida de un elemento seleccionado.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un elemento para obtener su geometría\");\n\nList<Solid> solids = new List<Solid>();\nif (pickedRef != null)\n{\n    Element elem = doc.GetElement(pickedRef);\n    if (elem != null)\n    {\n        Options opt = new Options() { ComputeReferences = true, DetailLevel = ViewDetailLevel.Fine };\n        GeometryElement geoElem = elem.get_Geometry(opt);\n        if (geoElem != null)\n        {\n            solids = geoElem.OfType<Solid>().Where(s => s.Volume > 0).ToList();\n        }\n    }\n}"}
{"prompt":"Ajusta el tipo de la ventana seleccionada al tipo 'Fija 119x60'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una ventana\");\nFamilySymbol newType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name == \"Fija 119x60\");\nif (pickedRef != null && newType != null)\n{\n    FamilyInstance window = doc.GetElement(pickedRef.ElementId) as FamilyInstance;\n    if (window != null)\n    {\n        window.Symbol = newType;\n    }\n}"}
{"prompt":"Create a 30cm 'Double-Wall' type and then create a wall of that type.","completion":"using (Transaction t = new Transaction(doc, \"Create Wall Type and Wall\"))\n{\n    t.Start();\n    string newTypeName = \"Double-Wall\";\n    WallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n    WallType newWallType = null;\n    if (wallTypeToDuplicate != null)\n    {\n        newWallType = wallTypeToDuplicate.Duplicate(newTypeName) as WallType;\n        if (newWallType != null)\n        {\n            CompoundStructure cs = newWallType.GetCompoundStructure();\n            if (cs != null && cs.LayerCount > 0)\n            {\n                cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), 0.3 \/ 0.3048);\n                newWallType.SetCompoundStructure(cs);\n            }\n        }\n    }\n    if (newWallType != null)\n    {\n        Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n        Line wallCurve = Line.CreateBound(XYZ.Zero, new XYZ(10 \/ 0.3048, 0, 0));\n        double height = 3 \/ 0.3048;\n        if (level != null)\n        {\n            Wall.Create(doc, wallCurve, newWallType.Id, level.Id, height, 0, false, false);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Recarga el vínculo de Revit 'Estructura_LINK.rvt'.","completion":"RevitLinkType linkType = new FilteredElementCollector(doc).OfClass(typeof(RevitLinkType)).Cast<RevitLinkType>().FirstOrDefault(lt => lt.Name == \"Estructura_LINK.rvt\");\nif(linkType != null)\n{\n    linkType.Reload();\n}"}
{"prompt":"Incorpora un punto de referencia en las coordenadas (6,4,6) dentro del editor de familias.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(6,4,6));"}
{"prompt":"Adjust the type of a floor to one that contains 'Concrete'.","completion":"Floor floorToChange = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault() as Floor;\nFloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name.Contains(\"Concrete\"));\n\nif (floorToChange != null && newType != null)\n{\n    floorToChange.ChangeTypeId(newType.Id);\n}"}
{"prompt":"Establece el parámetro 'Comentarios' de todas las puertas del Nivel 1 a 'Clasificación Fuego - 92 min'.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\n\nif (level1 != null)\n{\n    List<FamilyInstance> doorsOnLevel1 = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsNotElementType().Cast<FamilyInstance>().Where(fi => fi.LevelId == level1.Id).ToList();\n    foreach(FamilyInstance door in doorsOnLevel1)\n    {\n        Parameter commentsParam = door.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n        if (commentsParam != null && !commentsParam.IsReadOnly) commentsParam.Set(\"Clasificación Fuego - 92 min\");\n    }\n}"}
{"prompt":"Create beams between horizontally aligned columns.","completion":"FamilySymbol beamSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nList<FamilyInstance> columns = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().Cast<FamilyInstance>().OrderBy(c => c.GetTransform().Origin.Y).ThenBy(c => c.GetTransform().Origin.X).ToList();\n\nif (beamSymbol != null && level != null && columns.Count >= 2)\n{\n    for(int i=0; i < columns.Count - 1; i++)\n    {\n        LocationPoint p1 = columns[i].Location as LocationPoint;\n        LocationPoint p2 = columns[i+1].Location as LocationPoint;\n        if (p1 != null && p2 != null && Math.Abs(p1.Point.Y - p2.Point.Y) < 0.01)\n        {\n            Line line = Line.CreateBound(p1.Point, p2.Point);\n            doc.Create.NewFamilyInstance(line, beamSymbol, level, StructuralType.Beam);\n        }\n    }\n}"}
{"prompt":"Recupera todas las habitaciones que están en el Nivel 7","completion":"string levelName = \"Nivel 7\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(targetLevel.Id);\n    FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WherePasses(levelFilter);\n    uidoc.Selection.SetElementIds(collector.ToElementIds());\n}"}
{"prompt":"Include a reference point at coordinates (1,4,1) inside the family editor.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(1,4,1));"}
{"prompt":"Create a new wall type 'Generic Wall 324mm' with a thickness of 30cm.","completion":"string newTypeName = \"Generic Wall 324mm\";\nWallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif (oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(newTypeName) as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(30, UnitTypeId.Centimeters));\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n}"}
{"prompt":"Create a Reflected Ceiling Plan view for Level 1.","completion":"string levelName = \"Level 1\";\nstring viewName = \"Level 1 Ceiling Plan\";\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.CeilingPlan);\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\n\nif (vft != null && level1 != null)\n{\n    ViewPlan rcp = ViewPlan.Create(doc, vft.Id, level1.Id);\n    if (rcp != null)\n    {\n        rcp.Name = viewName;\n    }\n}"}
{"prompt":"Calcula el área total de todas las habitaciones.","completion":"double totalArea = 0.0;\nList<Room> rooms = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>().ToList();\nforeach (Room room in rooms)\n{\n    totalArea += room.Area;\n}"}
{"prompt":"Añade un punto de referencia en las coordenadas (1,1,1) dentro del editor de familias.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(1,1,1));"}
{"prompt":"Comprueba si la vista activa es una vista de plano.","completion":"View activeView = doc.ActiveView;\nbool isPlanView = false;\n\nif (activeView != null)\n{\n    isPlanView = activeView.ViewType == ViewType.FloorPlan \n                 || activeView.ViewType == ViewType.CeilingPlan \n                 || activeView.ViewType == ViewType.AreaPlan \n                 || activeView.ViewType == ViewType.EngineeringPlan;\n}\n"}
{"prompt":"Ajusta el estilo visual de la vista activa a 'Línea Oculta'.","completion":"View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.DisplayStyle = DisplayStyle.HLR;\n}"}
{"prompt":"Turn a selected element 85 degrees around its Z-axis.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select an element to rotate\");\nElement elem = doc.GetElement(pickedRef.ElementId);\nLocationPoint lp = elem.Location as LocationPoint;\nLine axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\nElementTransformUtils.RotateElement(doc, elem.Id, axis, Math.PI \/ 85);"}
{"prompt":"Generate a text note with a leader pointing to a given element and location.","completion":"using (Transaction t = new Transaction(doc, \"Create Text Note\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference target = localUidoc.Selection.PickObject(ObjectType.Element, \"Select an element to annotate\");\n    XYZ textLocation = localUidoc.Selection.PickPoint(\"Choose the text location\");\n\n    View activeView = doc.ActiveView;\n    ElementId defaultTypeId = doc.GetDefaultElementTypeId(ElementTypeGroup.TextNoteType);\n\n    if (target != null && textLocation != null && activeView != null && defaultTypeId != ElementId.InvalidElementId)\n    {\n        TextNoteOptions opts = new TextNoteOptions(defaultTypeId);\n        opts.HorizontalAlignment = HorizontalTextAlignment.Left;\n        TextNote note = TextNote.Create(doc, activeView.Id, textLocation, \"Review this element\", opts);\n        if (note != null)\n        {\n            Leader leader = note.AddLeader(TextNoteLeaderTypes.TNLT_STRAIGHT_L);\n            leader.End = target.GlobalPoint;\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Recupera el espacio MEP asociado a la habitación 'Oficina 105'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Cast<Room>().FirstOrDefault(r => r.Name == \"Oficina 105\");\nList<Space> spaces = new List<Space>();\n\nif (room != null)\n{\n    spaces = new FilteredElementCollector(doc).OfClass(typeof(Space)).Cast<Space>().Where(s => s.Room != null && s.Room.Id == room.Id).ToList();\n}"}
{"prompt":"Duplicate level 1 with a 8m offset and name it 'Mezzanine'.","completion":"string levelName = \"Mezzanine\";\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\n\nif (level1 != null)\n{\n    double newElevation = level1.ProjectElevation + UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, newElevation);\n    if (newLevel != null)\n    {\n        newLevel.Name = levelName;\n    }\n}"}
{"prompt":"Create a new level named 'Mezzanine' at 7.5 meters elevation.","completion":"string levelName = \"Mezzanine\";\ndouble elevation = UnitUtils.ConvertToInternalUnits(7.5, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Create a new Level named 'Level 9' at an elevation of 14 meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(14, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\nif (newLevel != null)\n{\n    try { newLevel.Name = \"Level 9\"; } catch {}\n}"}
{"prompt":"Abre una familia, añade un parámetro de tipo 'Código de Material' y guárdala.","completion":""}
{"prompt":"Crea 4 ejes en sentido vertical separados 10 metros.","completion":"double separation = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\nfor(int i=0; i<4; i++)\n{\n    Line line = Line.CreateBound(new XYZ(i * separation, 0, 0), new XYZ(i * separation, 40, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Clone level 2 with a 2m offset and name it 'Mezzanine'.","completion":"string levelName = \"Level 2\";\nLevel levelToCopy = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (levelToCopy != null)\n{\n    double offset = UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, levelToCopy.Elevation + offset);\n    newLevel.Name = \"Mezzanine\";\n}"}
{"prompt":"Configure the 'Comments' parameter for all doors on Level 5 to 'Fire Rating - 95 min'.","completion":"string levelName = \"Level 5\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(targetLevel.Id);\n    FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WherePasses(levelFilter);\n    foreach (Element door in collector)\n    {\n        Parameter commentsParam = door.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n        if (commentsParam != null && !commentsParam.IsReadOnly) { commentsParam.Set(\"Fire Rating - 95 min\"); }\n    }\n}"}
{"prompt":"Find all walls that have no base level assigned.","completion":"ElementFilter unassociatedFilter = new ElementLevelFilter(ElementId.InvalidElementId);\nList<Element> unassignedWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(unassociatedFilter).ToList();"}
{"prompt":"Generate a report with the area of all rooms in the project.","completion":"List<Room> rooms = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>().ToList();\nList<double> roomAreas = new List<double>();\nforeach (Room room in rooms)\n{\n    if (room != null && room.Area > 0)\n    {\n        roomAreas.Add(UnitUtils.ConvertFromInternalUnits(room.Area, UnitTypeId.SquareMeters));\n    }\n}\n\/\/ The orchestrator can now use the 'roomAreas' list to generate the final report."}
{"prompt":"Actualiza el tipo de la ventana seleccionada al tipo 'Fija 123x60'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una ventana\");\nFamilySymbol newType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name == \"Fija 123x60\");\nif (pickedRef != null && newType != null)\n{\n    FamilyInstance window = doc.GetElement(pickedRef.ElementId) as FamilyInstance;\n    if (window != null)\n    {\n        window.Symbol = newType;\n    }\n}"}
{"prompt":"Coloca una instancia de la familia 'Mesa de Oficina' en el centro de la habitación 'Despacho 101'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 101\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Mesa de Oficina\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);"}
{"prompt":"Build a new room on Level 5 at point (11, 11).","completion":"string levelName = \"Level 5\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    UV point = new UV(11, 11);\n    Room newRoom = doc.Create.NewRoom(targetLevel, point);\n}"}
{"prompt":"Incorpora un punto de referencia en las coordenadas (1,1,4) dentro del editor de familias.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(1,1,4));"}
{"prompt":"Create a new level named 'Mezzanine' at 7.3 meters elevation.","completion":"string levelName = \"Mezzanine\";\ndouble elevation = UnitUtils.ConvertToInternalUnits(7.3, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Crea una nueva cota de nivel llamada 'Nivel 6' a una elevación de 9 metros.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(9, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\nif (newLevel != null)\n{\n    newLevel.Name = \"Nivel 6\";\n}"}
{"prompt":"Crea un reporte con el área de todas las habitaciones del proyecto.","completion":"List<Room> rooms = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>().ToList();\nList<double> roomAreas = new List<double>();\nforeach (Room room in rooms)\n{\n    if (room != null && room.Area > 0)\n    {\n        roomAreas.Add(UnitUtils.ConvertFromInternalUnits(room.Area, UnitTypeId.SquareMeters));\n    }\n}\n\/\/ El orquestador puede ahora usar la lista 'roomAreas' para generar el reporte final."}
{"prompt":"Extrae todas las habitaciones que están en el Nivel 2","completion":"string levelName = \"Nivel 2\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(targetLevel.Id);\n    FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WherePasses(levelFilter);\n    uidoc.Selection.SetElementIds(collector.ToElementIds());\n}"}
{"prompt":"Replicate level 4 with a 1m offset and name it 'Mezzanine'.","completion":"string levelName = \"Level 4\";\nLevel levelToCopy = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (levelToCopy != null)\n{\n    double offset = UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, levelToCopy.Elevation + offset);\n    newLevel.Name = \"Mezzanine\";\n}"}
{"prompt":"Build a stair between Level 5 and Level 2","completion":"\/\/ This is a complex operation that requires multiple steps and\/or user interaction and is not supported by the agent."}
{"prompt":"Add a horizontal reference plane named 'Centerline A'.","completion":"using (Transaction t = new Transaction(doc, \"Add Reference Plane\"))\n{\n    t.Start();\n    string rpName = \"Centerline A\";\n    View activeView = doc.ActiveView;\n\n    if (activeView != null)\n    {\n        XYZ bubbleEnd = new XYZ(0, 10, 0);\n        XYZ freeEnd = new XYZ(10, 10, 0);\n        XYZ cutVec = XYZ.BasisZ;\n        ReferencePlane rp = doc.Create.NewReferencePlane(bubbleEnd, freeEnd, cutVec, activeView);\n        if (rp != null)\n        {\n            rp.Name = rpName;\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Duplica la vista 'Nivel 1' como una vista dependiente.","completion":"ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v => v.Name == \"Nivel 1\") as ViewPlan;\n\nif (viewToDuplicate != null)\n{\n    ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n}"}
{"prompt":"Genera una cuadrícula de columnas 5x5 con separación de 8 metros.","completion":"FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (columnSymbol != null && level != null)\n{\n    if(!columnSymbol.IsActive) columnSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters);\n    for(int i=0; i<5; i++)\n    {\n        for(int j=0; j<5; j++)\n        {\n            doc.Create.NewFamilyInstance(new XYZ(i*spacing, j*spacing, 0), columnSymbol, level, StructuralType.Column);\n        }\n    }\n}"}
{"prompt":"Generate a 'Roof Terrace' level at 16m.","completion":"string levelName = \"Roof Terrace\";\ndouble elev = UnitUtils.ConvertToInternalUnits(16, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elev);\nnewLevel.Name = levelName;\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Crea un nuevo tipo de muro 'Muro Genérico 315mm' con un grosor de 31.5cm.","completion":"string newTypeName = \"Muro Genérico 315mm\";\nWallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif (oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(newTypeName) as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(31.5, UnitTypeId.Centimeters));\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n}"}
{"prompt":"Build an MEP space for each room on Level 2","completion":"string levelName = \"Level 2\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    FilteredElementCollector roomCollector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WherePasses(new ElementLevelFilter(targetLevel.Id));\n    foreach (Room room in roomCollector.ToElements().Cast<Room>())\n    {\n        LocationPoint locPoint = room.Location as LocationPoint;\n        if (locPoint != null)\n        {\n            UV point = new UV(locPoint.Point.X, locPoint.Point.Y);\n            doc.Create.NewSpace(targetLevel, point);\n        }\n    }\n}"}
{"prompt":"Obtén una lista de todas las familias de anotación.","completion":"List<Family> annotationFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.CategoryType == CategoryType.Annotation).ToList();\n"}
{"prompt":"Clone the 'Generic - 145mm' wall type and name it 'Interior - 15cm Plaster'.","completion":"string originalName = \"Generic - 145mm\";\nstring newName = \"Interior - 15cm Plaster\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif(originalType!=null)\n    originalType.Duplicate(newName);"}
{"prompt":"Retrieve all subcategories from the Doors category.","completion":"Category doorCat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Doors);\nCategoryNameMap subcategories = doorCat.SubCategories;"}
{"prompt":"Check if the active view is a plan view.","completion":"View activeView = doc.ActiveView;\nbool isPlanView = false;\n\nif (activeView != null)\n{\n    isPlanView = activeView.ViewType == ViewType.FloorPlan \n                 || activeView.ViewType == ViewType.CeilingPlan \n                 || activeView.ViewType == ViewType.AreaPlan \n                 || activeView.ViewType == ViewType.EngineeringPlan;\n}\n"}
{"prompt":"Create a 3D view with the section box enabled.","completion":"string viewName = \"3D View with Section Box\";\nViewFamilyType vft3D = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft3D != null)\n{\n    View3D view3d = View3D.CreateIsometric(doc, vft3D.Id);\n    if (view3d != null)\n    {\n        view3d.Name = viewName;\n        view3d.IsSectionBoxActive = true;\n    }\n}"}
{"prompt":"Position an instance of the 'Office Desk' family in the center of the 'Office 102' room.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Office 102\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Office Desk\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);"}
{"prompt":"Construct a 'Generic - 200mm' wall on 'Level 1' from (0,0) to (10,5).","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == \"Generic - 200mm\") as WallType;\nif (level != null && wallType != null)\n{\n    XYZ startPoint = new XYZ(0, 0, 0);\n    XYZ endPoint = new XYZ(10, 5, 0);\n    Line wallCurve = Line.CreateBound(startPoint, endPoint);\n    double height = UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters); \/\/ Default height\n    Wall.Create(doc, wallCurve, wallType.Id, level.Id, height, 0, false, false);\n}"}
{"prompt":"Create a new door type named 'FR-90 Door' and set its fire rating to '90 min'.","completion":"using (Transaction t = new Transaction(doc, \"Create Door Type\"))\n{\n    t.Start();\n    string newTypeName = \"FR-90 Door\";\n    FamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n    if (doorTypeToDuplicate != null)\n    {\n        FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\n        if (newDoorType != null)\n        {\n            Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n            if(fireRatingParam != null && !fireRatingParam.IsReadOnly)\n            {\n                fireRatingParam.Set(\"90 min\");\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Find all walls with an empty 'Mark' parameter and set it to 'WM-01'.","completion":"List<Wall> walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>().ToList();\nforeach(var w in walls)\n{\n  Parameter p = w.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n  if(p != null && !p.IsReadOnly && string.IsNullOrEmpty(p.AsString()))\n  {\n      p.Set(\"WM-01\");\n  }\n}"}
{"prompt":"Verifica si una tubería está conectada en ambos extremos.","completion":"Pipe pipe = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).FirstOrDefault() as Pipe;\nbool isFullyConnected = false;\n\nif (pipe != null)\n{\n    isFullyConnected = pipe.ConnectorManager.UnusedConnectors.IsEmpty;\n}\n"}
{"prompt":"Exporta la vista 3D activa a NWC para Navisworks.","completion":"View3D view3d = doc.ActiveView as View3D;\n\nif (view3d != null)\n{\n    string folderPath = \"C:\/RevitExports\/\";\n    string fileName = view3d.Name + \".nwc\";\n    NavisworksExportOptions options = new NavisworksExportOptions();\n    options.ExportScope = NavisworksExportScope.View;\n    options.ViewId = view3d.Id;\n    doc.Export(folderPath, fileName, options);\n}"}
{"prompt":"Build a floor plan view for 'Level 3'.","completion":"string levelName = \"Level 3\";\nLevel level3 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.FloorPlan);\n\nif (level3 != null && vft != null)\n{\n    ViewPlan viewPlan = ViewPlan.Create(doc, vft.Id, level3.Id);\n}"}
{"prompt":"Generate a structural beam between (1,4,4) and (1,1,3) on Level 5","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 5\") as Level;\nFamilySymbol beamType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (beamType != null && level != null)\n{\n    if(!beamType.IsActive) beamType.Activate();\n    XYZ start = new XYZ(1, 4, 4);\n    XYZ end = new XYZ(1, 1, 3);\n    if (start.IsAlmostEqualTo(end)) return;\n    Line beamCurve = Line.CreateBound(start, end);\n    doc.Create.NewFamilyInstance(beamCurve, beamType, level, Autodesk.Revit.DB.Structure.StructuralType.Beam);\n}"}
{"prompt":"Define the sill height of all windows to 899mm.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits(899, UnitTypeId.Millimeters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Build a new Level named 'Level 3' at an elevation of 15 meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(15, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\nif (newLevel != null)\n{\n    try { newLevel.Name = \"Level 3\"; } catch {}\n}"}
{"prompt":"Set the 'Mark' parameter to 'D-01' for the selected door.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a door\");\nif (pickedRef != null)\n{\n    Element door = doc.GetElement(pickedRef.ElementId);\n    if (door != null)\n    {\n        Parameter markParam = door.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n        if (markParam != null && !markParam.IsReadOnly)\n        {\n            markParam.Set(\"D-01\");\n        }\n    }\n}"}
{"prompt":"Construct a stair between Level 5 and Level 2","completion":"\/\/ This is a complex operation that requires multiple steps and\/or user interaction and is not supported by the agent."}
{"prompt":"Crea un muro del tipo específico 'Exterior - Ladrillo sobre Bloque' de 10 metros.","completion":"string wallTypeName = \"Exterior - Ladrillo sobre Bloque\";\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Name == wallTypeName);\n\nif (level != null && wallType != null)\n{\n    Line line = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), 0, 0));\n    \/\/ Use a default height of 10ft as it's not specified in the prompt\n    double height = 10.0;\n    Wall.Create(doc, line, wallType.Id, level.Id, height, 0.0, false, false);\n}"}
{"prompt":"Incorpora un punto de referencia en las coordenadas (6,4,3) dentro del editor de familias.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(6,4,3));"}
{"prompt":"Find all section views in the project.","completion":"List<ViewSection> sectionViews = new FilteredElementCollector(doc).OfClass(typeof(ViewSection)).Cast<ViewSection>().ToList();"}
{"prompt":"Genera un piso rectangular de 10×8 metros.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\nif (level != null && floorType != null)\n{\n    double width = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\n    double length = UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters);\n    XYZ p1 = XYZ.Zero;\n    XYZ p2 = new XYZ(width, 0, 0);\n    XYZ p3 = new XYZ(width, length, 0);\n    XYZ p4 = new XYZ(0, length, 0);\n    CurveLoop profile = new CurveLoop();\n    profile.Append(Line.CreateBound(p1, p2));\n    profile.Append(Line.CreateBound(p2, p3));\n    profile.Append(Line.CreateBound(p3, p4));\n    profile.Append(Line.CreateBound(p4, p1));\n    Floor.Create(doc, new List<CurveLoop> { profile }, floorType.Id, level.Id);\n}"}
{"prompt":"Obtén el espacio MEP asociado a la habitación 'Oficina 104'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Cast<Room>().FirstOrDefault(r => r.Name == \"Oficina 104\");\nList<Space> spaces = new List<Space>();\n\nif (room != null)\n{\n    spaces = new FilteredElementCollector(doc).OfClass(typeof(Space)).Cast<Space>().Where(s => s.Room != null && s.Room.Id == room.Id).ToList();\n}"}
{"prompt":"Insert a 6-meter truss between two points.","completion":"using (Transaction t = new Transaction(doc, \"Create Truss\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    FamilySymbol trussSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Family.Name.Contains(\"Truss\"));\n\n    if (level != null && trussSymbol != null)\n    {\n        if (!trussSymbol.IsActive) { trussSymbol.Activate(); }\n        Line trussLine = Line.CreateBound(new XYZ(0, 10, 0), new XYZ(6 \/ 0.3048, 10, 0));\n        doc.Create.NewFamilyInstance(trussLine, trussSymbol, level, StructuralType.NonStructural);\n    }\n    t.Commit();\n}"}
{"prompt":"Actualiza el tipo de la ventana seleccionada al tipo 'Fija 124x60'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una ventana\");\nFamilySymbol newType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name == \"Fija 124x60\");\nif (pickedRef != null && newType != null)\n{\n    FamilyInstance window = doc.GetElement(pickedRef.ElementId) as FamilyInstance;\n    if (window != null)\n    {\n        window.Symbol = newType;\n    }\n}"}
{"prompt":"Obtain all walls on Level 1 that are structural.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nif (level1 != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level1.Id);\n    ElementCategoryFilter categoryFilter = new ElementCategoryFilter(BuiltInCategory.OST_Walls);\n    ParameterValueProvider pvp = new ParameterValueProvider(new ElementId(BuiltInParameter.WALL_STRUCTURAL_SIGNIFICANT));\n    FilterIntegerRule rule = new FilterIntegerRule(pvp, new FilterNumericEquals(), 1);\n    ElementParameterFilter structuralFilter = new ElementParameterFilter(rule);\n    LogicalAndFilter andFilter = new LogicalAndFilter(new List<ElementFilter> { levelFilter, categoryFilter, structuralFilter });\n    List<Element> structuralWalls = new FilteredElementCollector(doc).WherePasses(andFilter).ToList();\n}"}
{"prompt":"Ajusta todas las ventanas para que tengan la altura del antepecho a 902mm.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits(902, UnitTypeId.Millimeters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Coloca una instancia de la familia 'Mesa de Oficina' en el centro de la habitación 'Despacho 104'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 104\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Mesa de Oficina\") as FamilySymbol;\nif(furnitureSymbol != null && !furnitureSymbol.IsActive) furnitureSymbol.Activate();\nif(room != null)\n{\n    LocationPoint roomCenter = room.Location as LocationPoint;\n    if(roomCenter != null && furnitureSymbol != null && room.Level != null)\n    {\n        doc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Duplicate level 1 with a 3m offset and name it 'Mezzanine'.","completion":"string levelName = \"Mezzanine\";\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\n\nif (level1 != null)\n{\n    double newElevation = level1.ProjectElevation + UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, newElevation);\n    if (newLevel != null)\n    {\n        newLevel.Name = levelName;\n    }\n}"}
{"prompt":"Create a new Ribbon panel named 'My Tools' with a button.","completion":""}
{"prompt":"Clone level 5 with a 1m offset and name it 'Mezzanine'.","completion":"string levelName = \"Level 5\";\nLevel levelToCopy = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (levelToCopy != null)\n{\n    double offset = UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, levelToCopy.Elevation + offset);\n    newLevel.Name = \"Mezzanine\";\n}"}
{"prompt":"Modela un plafón a 2.8 metros de altura en Nivel 1.","completion":"CeilingType ceilingType = new FilteredElementCollector(doc).OfClass(typeof(CeilingType)).FirstOrDefault() as CeilingType;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\n\nif (ceilingType != null && level != null)\n{\n    CurveLoop profile = new CurveLoop();\n    profile.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),0,0)));\n    profile.Append(Line.CreateBound(new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),0,0), new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),0)));\n    profile.Append(Line.CreateBound(new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),0), new XYZ(0,UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),0)));\n    profile.Append(Line.CreateBound(new XYZ(0,UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),0), new XYZ(0,0,0)));\n\n    Ceiling ceiling = Ceiling.Create(doc, new List<CurveLoop>{profile}, ceilingType.Id, level.Id);\n    if (ceiling != null)\n    {\n        Parameter heightParam = ceiling.get_Parameter(BuiltInParameter.CEILING_HEIGHTABOVELEVEL_PARAM);\n        if (heightParam != null && !heightParam.IsReadOnly) heightParam.Set(UnitUtils.ConvertToInternalUnits(2.8, UnitTypeId.Meters));\n    }\n}"}
{"prompt":"Copy the 'Generic - 135mm' wall type and name it 'Interior - 15cm Plaster'.","completion":"string originalName = \"Generic - 135mm\";\nstring newName = \"Interior - 15cm Plaster\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif(originalType!=null)\n    originalType.Duplicate(newName);"}
{"prompt":"Build 8 horizontal grids spaced 10 meters apart.","completion":"double separation = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\nfor(int i = 0; i < 8; i++)\n{\n    Line line = Line.CreateBound(new XYZ(0, i * separation, 0), new XYZ(50, i * separation, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Extrae todas las habitaciones que están en el Nivel 3","completion":"string levelName = \"Nivel 3\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(targetLevel.Id);\n    FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WherePasses(levelFilter);\n    uidoc.Selection.SetElementIds(collector.ToElementIds());\n}"}
{"prompt":"Construct a new level 'Level 6' at an elevation of 16 meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(16, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\nif (newLevel != null)\n{\n    try { newLevel.Name = \"Level 6\"; } catch {}\n}"}
{"prompt":"Place an instance of the 'Office Desk' family in the center of the 'Office 105' room.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Office 105\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Office Desk\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);"}
{"prompt":"Create a 3D view oriented from the southeast.","completion":"string viewName = \"3D View Southeast\";\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft != null)\n{\n    View3D view3d = View3D.CreateIsometric(doc, vft.Id);\n    if (view3d != null)\n    {\n        XYZ eye = new XYZ(1, -1, 1);\n        XYZ up = new XYZ(0, 0, 1);\n        XYZ forward = new XYZ(-1, 1, -1);\n        view3d.SetOrientation(new ViewOrientation3D(eye, up, forward));\n        view3d.Name = viewName;\n    }\n}"}
{"prompt":"Ubica una instancia de la familia 'M_Chair-Breuer' en el centro de la habitación 'Despacho 104'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 104\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"M_Chair-Breuer\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);"}
{"prompt":"Modifica el tipo de todas las ventanas de 'Fijo' a 'Abatible'.","completion":"FamilySymbol newType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name.Contains(\"Abatible\"));\nFamilySymbol oldType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name.Contains(\"Fijo\"));\n\nif (newType != null && oldType != null)\n{\n    List<FamilyInstance> windowsToChange = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().Where(fi => fi.Symbol.Id == oldType.Id).ToList();\n    foreach (FamilyInstance window in windowsToChange)\n    {\n        window.Symbol = newType;\n    }\n}"}
{"prompt":"Clona el tipo de muro 'Basic Wall' y renómbralo.","completion":"string typeToDuplicate = \"Basic Wall\";\nstring newTypeName = \"Basic Wall Copy\";\nWallType wt = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(w=>w.Name==typeToDuplicate);\n\nif (wt != null)\n{\n    WallType newWt = wt.Duplicate(newTypeName) as WallType;\n}"}
{"prompt":"Construct a new door type named 'FR-90 Door' and set its fire rating to '90 min'.","completion":"string newTypeName = \"FR-90 Door\";\nFamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nFamilySymbol newDoorType = null;\nif (doorTypeToDuplicate != null)\n{\n    newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\n    if (newDoorType != null)\n    {\n        Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n        if (fireRatingParam != null && !fireRatingParam.IsReadOnly)\n        {\n            fireRatingParam.Set(\"90 min\");\n        }\n    }\n}"}
{"prompt":"Añade un plano de referencia horizontal llamado 'Eje Central A'.","completion":"using (Transaction t = new Transaction(doc, \"Add Reference Plane\"))\n{\n    t.Start();\n    string rpName = \"Eje Central A\";\n    View activeView = doc.ActiveView;\n\n    if (activeView != null)\n    {\n        XYZ bubbleEnd = new XYZ(0, 10, 0);\n        XYZ freeEnd = new XYZ(10, 10, 0);\n        XYZ cutVec = XYZ.BasisZ;\n        ReferencePlane rp = doc.Create.NewReferencePlane(bubbleEnd, freeEnd, cutVec, activeView);\n        if (rp != null)\n        {\n            rp.Name = rpName;\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Define the sill height of all windows to 903mm.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits(903, UnitTypeId.Millimeters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Encuentra todos los muros con el comentario 'Revisar'.","completion":"ElementId commentParamId = new ElementId(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\nParameterValueProvider pvp = new ParameterValueProvider(commentParamId);\nFilterStringRuleEvaluator evaluator = new FilterStringContains();\nFilterRule rule = new FilterStringRule(pvp, evaluator, \"Revisar\");\nElementFilter filter = new ElementParameterFilter(rule);\nList<Element> wallsToReview = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(filter).ToList();"}
{"prompt":"Inserta un nivel llamado 'Nivel Azotea' a 14.9 metros.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(14.9, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Nivel Azotea\";\n}"}
{"prompt":"Export each schedule to an individual CSV file.","completion":"string exportPath = \"C:\/RevitExports\/\";\nList<ViewSchedule> schedules = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().Where(vs => !vs.IsTemplate).ToList();\nViewScheduleExportOptions options = new ViewScheduleExportOptions();\noptions.FieldDelimiter = \",\";\nforeach(ViewSchedule schedule in schedules)\n{\n    schedule.Export(exportPath, schedule.Name + \".csv\", options);\n}"}
{"prompt":"Rotate a selected element 89 degrees around its Z-axis.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select an element to rotate\");\nElement elem = doc.GetElement(pickedRef.ElementId);\nLocationPoint lp = elem.Location as LocationPoint;\nLine axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\nElementTransformUtils.RotateElement(doc, elem.Id, axis, Math.PI \/ 89);"}
{"prompt":"Crea un espacio MEP para cada habitación en el Nivel 1","completion":"string levelName = \"Nivel 1\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    FilteredElementCollector roomCollector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WherePasses(new ElementLevelFilter(targetLevel.Id));\n    foreach (Room room in roomCollector.ToElements().Cast<Room>())\n    {\n        LocationPoint locPoint = room.Location as LocationPoint;\n        if (locPoint != null)\n        {\n            UV point = new UV(locPoint.Point.X, locPoint.Point.Y);\n            doc.Create.NewSpace(targetLevel, point);\n        }\n    }\n}"}
{"prompt":"Copy the 'Generic - 148mm' wall type and name it 'Interior - 10cm Plaster'.","completion":"string originalName = \"Generic - 148mm\";\nstring newName = \"Interior - 10cm Plaster\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif (originalType != null)\n{\n    WallType newType = originalType.Duplicate(newName) as WallType;\n}"}
{"prompt":"Modifica el nombre de la vista activa a 'Vista de Trabajo'.","completion":"string newName = \"Vista de Trabajo\";\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.Name = newName;\n}"}
{"prompt":"Construct a new linear dimension type with blue text and 2mm size.","completion":"using (Transaction t = new Transaction(doc, \"Create Dimension Type\"))\n{\n    t.Start();\n    string newTypeName = \"Blue Dimension 2mm\";\n    DimensionType linearDimType = new FilteredElementCollector(doc).OfClass(typeof(DimensionType)).Cast<DimensionType>().FirstOrDefault(dt => dt.StyleType == DimensionStyleType.Linear);\n\n    if (linearDimType != null)\n    {\n        DimensionType newDimType = linearDimType.Duplicate(newTypeName) as DimensionType;\n        if (newDimType != null)\n        {\n            Parameter colorParam = newDimType.get_Parameter(BuiltInParameter.LINE_COLOR);\n            if (colorParam != null && !colorParam.IsReadOnly) colorParam.Set(255);\n            Parameter textSizeParam = newDimType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n            if (textSizeParam != null && !textSizeParam.IsReadOnly) textSizeParam.Set(2 \/ 304.8);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Place a material tag on a wall face.","completion":"using (Transaction t = new Transaction(doc, \"Place Material Tag\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference faceRef = localUidoc.Selection.PickObject(ObjectType.Face, \"Select a face to tag\");\n    XYZ point = localUidoc.Selection.PickPoint(\"Select the tag location\");\n    View activeView = doc.ActiveView;\n\n    if (faceRef != null && point != null && activeView != null)\n    {\n        IndependentTag.Create(doc, activeView.Id, faceRef, true, TagMode.TM_ADDBY_MATERIAL, TagOrientation.Horizontal, point);\n    }\n    t.Commit();\n}"}
{"prompt":"Quiero ver solamente lo que he seleccionado.","completion":"ICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nView activeView = doc.ActiveView;\n\nif (activeView != null && selectedIds.Any())\n{\n    activeView.IsolateElementsTemporary(selectedIds);\n}"}
{"prompt":"Construct a new door type named 'FR-90 Door' and set its fire rating to '90 min'.","completion":"string newTypeName = \"FR-90 Door\";\nFamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (doorTypeToDuplicate != null)\n{\n    FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\n    if (newDoorType != null)\n    {\n        Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n        if (fireRatingParam != null && !fireRatingParam.IsReadOnly) fireRatingParam.Set(\"90 min\");\n    }\n}"}
{"prompt":"Build a new level named 'Basement Floor' at an elevation of 0.1 meters.","completion":"string levelName = \"Basement Floor\";\ndouble elevationInternal = UnitUtils.ConvertToInternalUnits(0.1, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevationInternal);\nnewLevel.Name = levelName;"}
{"prompt":"Find all walls that are not associated with any level.","completion":"ElementFilter unassociatedFilter = new ElementLevelFilter(ElementId.InvalidElementId);\nList<Element> unassignedWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(unassociatedFilter).ToList();"}
{"prompt":"Duplicate the 'Level 2' plan view and make it a view template.","completion":"using (Transaction t = new Transaction(doc, \"Create View Template\"))\n{\n    t.Start();\n    ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().FirstOrDefault(v => v.Name == \"Level 2\");\n    string templateName = \"Level 2 Template\";\n\n    if (viewToDuplicate != null)\n    {\n        ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n        View newView = doc.GetElement(newViewId) as View;\n        if (newView != null)\n        {\n           \/\/ In older APIs, direct conversion to a template may not be available.\n           \/\/ A common workaround is to set the IsTemplate property if available and writable, \n           \/\/ which is not the case here. This is left as a comment for conceptual understanding.\n           \/\/ newView.IsTemplate = true;\n            newView.Name = templateName;\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Cambia el nombre de todas las tablas que contienen 'Puertas' por 'Listado de Puertas'.","completion":"List<ViewSchedule> schedules = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().Where(vs => vs.Name.Contains(\"Puertas\")).ToList();\nforeach(ViewSchedule schedule in schedules)\n{\n    schedule.Name = schedule.Name.Replace(\"Puertas\", \"Listado de Puertas\");\n}"}
{"prompt":"Generate a new door type named 'FR-90 Door' and set its fire rating to '90 min'.","completion":"using (Transaction t = new Transaction(doc, \"Create Door Type\"))\n{\n    t.Start();\n    string newTypeName = \"FR-90 Door\";\n    FamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n    if (doorTypeToDuplicate != null)\n    {\n        FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\n        if (newDoorType != null)\n        {\n            Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n            if(fireRatingParam != null && !fireRatingParam.IsReadOnly)\n            {\n                fireRatingParam.Set(\"90 min\");\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Find all walls with an empty 'Mark' parameter and set it to 'WM-01'.","completion":"List<Wall> walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>().ToList();\nforeach(var w in walls)\n{\n  Parameter p = w.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n  if(p != null && !p.IsReadOnly && string.IsNullOrEmpty(p.AsString()))\n  {\n      p.Set(\"WM-01\");\n  }\n}"}
{"prompt":"Create an assembly from the selected elements.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds != null && selectedIds.Count > 0)\n{\n    AssemblyInstance assemblyInstance = AssemblyInstance.Create(doc, selectedIds, new ElementId(BuiltInCategory.OST_Assemblies));\n    if (assemblyInstance != null)\n    {\n        assemblyInstance.Name = \"New Assembly\";\n    }\n}"}
{"prompt":"Sitúa una instancia de la familia 'Ventana Fija 117x60' en el centro de la habitación 'Despacho 99'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 117\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Ventana Fija 99x60\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);"}
{"prompt":"Aplica la plantilla de vista 'Plano de Fontanería' a todas las vistas de planta que contengan 'Fontanería' en su nombre.","completion":"View viewTemplate = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().FirstOrDefault(v => v.IsTemplate && v.Name == \"Plano de Fontanería\");\nif (viewTemplate != null)\n{\n    List<ViewPlan> planViews = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().Where(v => !v.IsTemplate && v.Name.Contains(\"Fontanería\")).ToList();\n    foreach (ViewPlan view in planViews)\n    {\n        view.ViewTemplateId = viewTemplate.Id;\n    }\n}"}
{"prompt":"Move a selected element to position (10,4).","completion":"ICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds.Any())\n{\n    foreach (ElementId id in selectedIds)\n    {\n        Element elem = doc.GetElement(id);\n        if (elem != null)\n        {\n            LocationPoint lp = elem.Location as LocationPoint;\n            if (lp != null)\n            {\n                XYZ newPosition = new XYZ(10, 4, lp.Point.Z);\n                lp.Point = newPosition;\n            }\n        }\n    }\n}"}
{"prompt":"Pon un pilar estructural en las coordenadas 10,5.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (level != null && columnSymbol != null)\n{\n    if (!columnSymbol.IsActive) { columnSymbol.Activate(); }\n    XYZ point = new XYZ(10, 5, 0);\n    doc.Create.NewFamilyInstance(point, columnSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n}"}
{"prompt":"Añade un punto de referencia en las coordenadas (1,1,7) dentro del editor de familias.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(1,1,7));"}
{"prompt":"Rename all plan views to start with 'ARCH_'.","completion":"string prefix = \"ARCH_\";\nList<ViewPlan> planViews = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().Where(v => !v.IsTemplate).ToList();\nforeach(ViewPlan view in planViews)\n{\n    if(!view.Name.StartsWith(prefix))\n    {\n        view.Name = prefix + view.Name;\n    }\n}"}
{"prompt":"Obtén los nombres de todos los tipos de suelo disponibles.","completion":"FilteredElementCollector collector = new FilteredElementCollector(doc).OfClass(typeof(FloorType));\nList<string> floorTypeNames = collector.Select(e => e.Name).ToList();"}
{"prompt":"Duplica la vista de planta 'Nivel 1' y conviértela en una plantilla de vista.","completion":"using (Transaction t = new Transaction(doc, \"Create View Template\"))\n{\n    t.Start();\n    ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().FirstOrDefault(v => v.Name == \"Nivel 1\");\n    string templateName = \"Plantilla Nivel 1\";\n\n    if (viewToDuplicate != null)\n    {\n        ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n        View newView = doc.GetElement(newViewId) as View;\n        if (newView != null)\n        {\n           \/\/ Direct conversion to a template may not be available in older APIs.\n           \/\/ A common workaround is to set the IsTemplate property if available and writable, \n           \/\/ which is not the case here. This is left as a comment for conceptual understanding.\n           \/\/ newView.IsTemplate = true;\n            newView.Name = templateName;\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Obtén la geometría sólida de un elemento seleccionado.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un elemento para obtener su geometría\");\n\nList<Solid> solids = new List<Solid>();\nif (pickedRef != null)\n{\n    Element elem = doc.GetElement(pickedRef);\n    if (elem != null)\n    {\n        Options opt = new Options() { ComputeReferences = true, DetailLevel = ViewDetailLevel.Fine };\n        GeometryElement geoElem = elem.get_Geometry(opt);\n        if (geoElem != null)\n        {\n            solids = geoElem.OfType<Solid>().Where(s => s.Volume > 0).ToList();\n        }\n    }\n}"}
{"prompt":"Extrae una lista de todas las familias de anotación.","completion":"List<Family> annotationFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.CategoryType == CategoryType.Annotation).ToList();\n"}
{"prompt":"Crea una vista 3D axonométrica orientada al Noroeste.","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft != null)\n{\n    View3D view3d = View3D.CreateIsometric(doc, vft.Id);\n    if (view3d != null)\n    {\n        XYZ eye = new XYZ(-1, 1, 1);\n        XYZ up = new XYZ(0, 0, 1);\n        XYZ forward = new XYZ(1, -1, -1);\n        view3d.SetOrientation(new ViewOrientation3D(eye, up, forward));\n        view3d.Name = \"Vista 3D Noroeste\";\n    }\n}"}
{"prompt":"Find all annotation families and count how many there are.","completion":"List<Family> annotationFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.CategoryType == CategoryType.Annotation).ToList();\nint count = annotationFamilies.Count;\n"}
{"prompt":"Establece el parámetro 'Comentarios' de todas las puertas del Nivel 1 a 'Clasificación Fuego - 89 min'.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\n\nif (level1 != null)\n{\n    List<FamilyInstance> doorsOnLevel1 = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsNotElementType().Cast<FamilyInstance>().Where(fi => fi.LevelId == level1.Id).ToList();\n    foreach(FamilyInstance door in doorsOnLevel1)\n    {\n        Parameter commentsParam = door.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n        if (commentsParam != null && !commentsParam.IsReadOnly) commentsParam.Set(\"Clasificación Fuego - 89 min\");\n    }\n}"}
{"prompt":"Generate a 'Roof Terrace' level at 15m.","completion":"string levelName = \"Roof Terrace\";\ndouble elev = UnitUtils.ConvertToInternalUnits(15, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elev);\nnewLevel.Name = levelName;\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Pin the selected element so it cannot be moved.","completion":"UIDocument uidoc = new UIDocument(doc);\nElementId selectedId = uidoc.Selection.GetElementIds().FirstOrDefault();\n\nif (selectedId != ElementId.InvalidElementId)\n{\n    Element elementToPin = doc.GetElement(selectedId);\n    if (elementToPin != null)\n    {\n        elementToPin.Pinned = true;\n    }\n}"}
{"prompt":"Actualiza el tipo de todos los muros seleccionados a 'Muro Exterior'.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nWallType targetWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Name == \"Muro Exterior\");\n\nif (selectedIds.Count > 0 && targetWallType != null)\n{\n    foreach(ElementId id in selectedIds)\n    {\n        Wall wall = doc.GetElement(id) as Wall;\n        if(wall != null) wall.ChangeTypeId(targetWallType.Id);\n    }\n}"}
{"prompt":"Establece el parámetro 'Marca' de todos los muros seleccionados a 'M-EXT-5'.","completion":"using (Transaction t = new Transaction(doc, \"Set Wall Mark\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    ICollection<ElementId> selectedIds = localUidoc.Selection.GetElementIds();\n\n    if (selectedIds != null && selectedIds.Count > 5)\n    {\n        foreach(ElementId id in selectedIds)\n        {\n            Element elem = doc.GetElement(id);\n            if(elem is Wall)\n            {\n                Parameter p = elem.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n                if (p != null && !p.IsReadOnly) \n                {\n                    p.Set(\"M-EXT-01\");\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Exporta una lista de todas las advertencias del proyecto a un archivo de texto en el escritorio.","completion":"string desktopPath = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);\nstring filePath = System.IO.Path.Combine(desktopPath, \"RevitWarnings.txt\");\nIList<FailureMessage> warnings = doc.GetWarnings();\nList<string> warningDescriptions = warnings.Select(w => w.GetDescriptionText()).ToList();\nSystem.IO.File.WriteAllLines(filePath, warningDescriptions);"}
{"prompt":"Adjust the type of a selected floor to 'Concrete 17cm'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a floor\");\n\nif (pickedRef != null)\n{\n    Floor floorToChange = doc.GetElement(pickedRef) as Floor;\n    FloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name == \"Concrete 17cm\");\n    \n    if (floorToChange != null && newType != null)\n    {\n        floorToChange.ChangeTypeId(newType.Id);\n    }\n}"}
{"prompt":"Build an MEP space for each room on Level 1","completion":"string levelName = \"Level 1\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    FilteredElementCollector roomCollector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WherePasses(new ElementLevelFilter(targetLevel.Id));\n    foreach (Room room in roomCollector.ToElements().Cast<Room>())\n    {\n        LocationPoint locPoint = room.Location as LocationPoint;\n        if (locPoint != null)\n        {\n            UV point = new UV(locPoint.Point.X, locPoint.Point.Y);\n            doc.Create.NewSpace(targetLevel, point);\n        }\n    }\n}"}
{"prompt":"Construct 8 horizontal grids spaced 10.8 meters apart.","completion":"double separation = UnitUtils.ConvertToInternalUnits(10.8, UnitTypeId.Meters);\nfor(int i = 0; i < 8; i++)\n{\n    \/\/ Create a default 50ft long grid line\n    Line line = Line.CreateBound(new XYZ(0, i * separation, 0), new XYZ(50, i * separation, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Construct a new wall type 'Generic Wall 290mm' with a thickness of 29cm.","completion":"string newTypeName = \"Generic Wall 290mm\";\nWallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif (oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(newTypeName) as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(29, UnitTypeId.Centimeters));\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n}"}
{"prompt":"Replicate level 2 with a 1m offset and name it 'Mezzanine'.","completion":"string levelName = \"Level 2\";\nLevel levelToCopy = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (levelToCopy != null)\n{\n    double offset = UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, levelToCopy.Elevation + offset);\n    newLevel.Name = \"Mezzanine\";\n}"}
{"prompt":"Position an instance of the 'Office Desk' family in the center of the 'Office 103' room.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Office 103\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Office Desk\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);"}
{"prompt":"Inserta refuerzo tipo estribo a la viga seleccionada.","completion":"\/\/ This is a complex operation that requires multiple steps and\/or user interaction and is not supported by the agent."}
{"prompt":"Agrega una etiqueta a la columna más cercana al origen.","completion":"using (Transaction t = new Transaction(doc, \"Tag Column\"))\n{\n    t.Start();\n    View activeView = doc.ActiveView;\n    FamilyInstance column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().Cast<FamilyInstance>().OrderBy(c => {\n        LocationPoint lp = c.Location as LocationPoint;\n        return lp != null ? lp.Point.DistanceTo(XYZ.Zero) : double.MaxValue;\n    }).FirstOrDefault();\n\n    if (activeView != null && column != null)\n    {\n        LocationPoint loc = column.Location as LocationPoint;\n        if (loc != null)\n        {\n            IndependentTag.Create(doc, activeView.Id, new Reference(column), true, TagMode.TM_ADDBY_CATEGORY, TagOrientation.Horizontal, loc.Point);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Apply 28mm thermal insulation to all hot water pipes.","completion":"PipeInsulationType insulationType = new FilteredElementCollector(doc).OfClass(typeof(PipeInsulationType)).FirstOrDefault() as PipeInsulationType;\nPipingSystemType hotWaterSystem = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).Cast<PipingSystemType>().FirstOrDefault(s => s.Name.Contains(\"Hot Water\"));\n\nif (insulationType != null && hotWaterSystem != null)\n{\n    List<Pipe> pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast<Pipe>().Where(p => \n    {\n        Parameter systemParam = p.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM);\n        return systemParam != null && systemParam.HasValue && systemParam.AsElementId() == hotWaterSystem.Id;\n    }).ToList();\n    \n    foreach(Pipe p in pipes)\n    {\n        PipeInsulation.Create(doc, p.Id, insulationType.Id, UnitUtils.ConvertToInternalUnits(28, UnitTypeId.Millimeters));\n    }\n}"}
{"prompt":"Build a new 25cm wall type named 'Structural Wall 25cm'.","completion":"using (Transaction t = new Transaction(doc, \"Create Wall Type\"))\n{\n    t.Start();\n    string newTypeName = \"Structural Wall 25cm\";\n    WallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\n    if (wallTypeToDuplicate != null)\n    {\n        WallType newWallType = wallTypeToDuplicate.Duplicate(newTypeName) as WallType;\n        if (newWallType != null)\n        {\n            CompoundStructure cs = newWallType.GetCompoundStructure();\n            int coreLayerIndex = cs.GetFirstCoreLayerIndex();\n            cs.SetLayerFunction(coreLayerIndex, MaterialFunctionAssignment.Structure);\n            cs.SetLayerWidth(coreLayerIndex, 0.25 \/ 0.3048);\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Build a global length parameter named 'CorridorWidth' with a value of 0.5m.","completion":"string paramName = \"CorridorWidth\";\nGlobalParameter gp = GlobalParameter.Create(doc, paramName, SpecTypeId.Length);\n\nif (gp != null)\n{\n    gp.SetValue(new DoubleParameterValue(UnitUtils.ConvertToInternalUnits(0.5, UnitTypeId.Meters)));\n}"}
{"prompt":"Hide all walls shorter than 2 meters.","completion":"double lengthThreshold = UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\nList<Wall> walls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Cast<Wall>().ToList();\nList<ElementId> shortWallIds = new List<ElementId>();\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    foreach(Wall wall in walls)\n    {\n        Parameter lengthParam = wall.get_Parameter(BuiltInParameter.CURVE_ELEM_LENGTH);\n        if(lengthParam != null && lengthParam.HasValue && lengthParam.AsDouble() < lengthThreshold)\n        {\n            shortWallIds.Add(wall.Id);\n        }\n    }\n    if (shortWallIds.Count > 0)\n    {\n        activeView.HideElements(shortWallIds);\n    }\n}"}
{"prompt":"Crea una cimentación de viga de 8 metros de largo.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol foundationSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFoundation).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null && foundationSymbol != null)\n{\n    Line line = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters), 0, 0));\n    doc.Create.NewFamilyInstance(line, foundationSymbol, level, StructuralType.Footing);\n}"}
{"prompt":"Crea una dimensión radial para un muro curvo.","completion":"using (Transaction t = new Transaction(doc, \"Create Radial Dimension\"))\n{\n    t.Start();\n    Wall curvedWall = new FilteredElementCollector(doc, doc.ActiveView.Id).OfClass(typeof(Wall)).Cast<Wall>().FirstOrDefault(w => w.Location is LocationCurve && (w.Location as LocationCurve).Curve is Arc);\n    View activeView = doc.ActiveView;\n\n    if (curvedWall != null && activeView != null)\n    {\n        LocationCurve locCurve = curvedWall.Location as LocationCurve;\n        if (locCurve != null)\n        {\n            Arc arc = locCurve.Curve as Arc;\n            if (arc != null)\n            {\n                ReferenceArray refArray = new ReferenceArray();\n                refArray.Append(arc.Reference);\n                doc.Create.NewDimension(activeView, Line.CreateBound(arc.Center, arc.GetEndPoint(0)), refArray);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create a wall on Level 1 from (0,0,0) to (10,0,0) with a height of 4 meters.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (level1 != null && wallType != null)\n{\n    XYZ p1 = new XYZ(0, 0, 0);\n    XYZ p2 = new XYZ(10, 0, 0);\n    Line wallCurve = Line.CreateBound(p1, p2);\n    double height = UnitUtils.ConvertToInternalUnits(4, UnitTypeId.Meters);\n    Wall.Create(doc, wallCurve, wallType.Id, level1.Id, height, 0.0, false, false);\n}"}
{"prompt":"Add a point to the selected Path of Travel.","completion":"\/\/ PathOfTravel related methods are likely inaccessible in this environment.\n\/\/ The following code is a placeholder to show the intent.\n\/*\nusing (Transaction t = new Transaction(doc, \"Update Path of Travel\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference pickedRef = localUidoc.Selection.PickObject(ObjectType.Element, \"Select a Path of Travel\");\n\n    if (pickedRef != null)\n    {\n        PathOfTravel pot = doc.GetElement(pickedRef) as PathOfTravel;\n        if (pot != null)\n        {\n            IList<XYZ> points = pot.GetPath();\n            if (points != null && points.Count >= 2)\n            {\n                XYZ midPoint = (points[0] + points[1]) \/ 2;\n                points.Insert(1, midPoint);\n                pot.Update(points);\n            }\n        }\n    }\n    t.Commit();\n}\n*\/"}
{"prompt":"Clone level 6 with a 5m offset and name it 'Mezzanine'.","completion":"string levelName = \"Level 6\";\nLevel levelToCopy = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (levelToCopy != null)\n{\n    double offset = UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, levelToCopy.Elevation + offset);\n    newLevel.Name = \"Mezzanine\";\n}"}
{"prompt":"Sincroniza el modelo local con el central, añadiendo el comentario 'Actualización de diseño'.","completion":"if (doc.IsWorkshared)\n{\n    TransactWithCentralOptions tco = new TransactWithCentralOptions();\n    SynchronizeWithCentralOptions swcOpts = new SynchronizeWithCentralOptions();\n    swcOpts.Comment = \"Actualización de diseño\";\n    swcOpts.SaveLocalAfter = true;\n    doc.SynchronizeWithCentral(tco, swcOpts);\n}"}
{"prompt":"Set the sill height of all windows to 3 meter.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Gira un elemento seleccionado 90 grados sobre su eje Z.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un elemento para rotar\");\nElement elem = doc.GetElement(pickedRef.ElementId);\nLocationPoint lp = elem.Location as LocationPoint;\nLine axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\nElementTransformUtils.RotateElement(doc, elem.Id, axis, Math.PI \/ 2.0);"}
{"prompt":"Put an instance of the 'Office Desk' family in the center of the 'Office 103' room.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Office 103\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Office Desk\") as FamilySymbol;\nif(furnitureSymbol != null && !furnitureSymbol.IsActive) furnitureSymbol.Activate();\nif(room != null)\n{\n    LocationPoint roomCenter = room.Location as LocationPoint;\n    if(roomCenter != null && furnitureSymbol != null && room.Level != null)\n    {\n        doc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Rotate project north 30 degrees clockwise.","completion":"using (Transaction t = new Transaction(doc, \"Rotate Project North\"))\n{\n    t.Start();\n    BasePoint projectBasePoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(bp => !bp.IsShared);\n\n    if (projectBasePoint != null)\n    {\n        double angleInDegrees = 30.0;\n        double angleInRadians = -(angleInDegrees * Math.PI \/ 180.0);\n        using (var bbox = projectBasePoint.get_BoundingBox(null))\n        {\n          if (bbox != null)\n          {\n            XYZ center = bbox.Min;\n            Line axis = Line.CreateBound(center, center + XYZ.BasisZ);\n            ElementTransformUtils.RotateElement(doc, projectBasePoint.Id, axis, angleInRadians);\n          }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Construct a global length parameter named 'CorridorWidth' with a value of 2.0m.","completion":"string paramName = \"CorridorWidth\";\nGlobalParameter gp = GlobalParameter.Create(doc, paramName, SpecTypeId.Length);\n\nif (gp != null)\n{\n    gp.SetValue(new DoubleParameterValue(UnitUtils.ConvertToInternalUnits(2.0, UnitTypeId.Meters)));\n}"}
{"prompt":"Aplica etiquetas a cada puerta visible en la vista activa.","completion":"View activeView = doc.ActiveView;\nif (activeView == null) return;\n\nFilteredElementCollector collector = new FilteredElementCollector(doc, activeView.Id)\n    .OfCategory(BuiltInCategory.OST_Doors)\n    .WhereElementIsNotElementType();\n\nIList<Element> elementsToTag = collector.ToElements();\n\nif (elementsToTag.Any())\n{\n    foreach (Element elem in elementsToTag)\n    {\n        Reference elemRef = new Reference(elem);\n        BoundingBoxXYZ bbox = elem.get_BoundingBox(activeView);\n        if (bbox == null) continue;\n\n        XYZ tagLocation = (bbox.Min + bbox.Max) \/ 2.0;\n        IndependentTag.Create(doc, activeView.Id, elemRef, true, TagMode.TM_ADDBY_CATEGORY, TagOrientation.Horizontal, tagLocation);\n    }\n}"}
{"prompt":"Build a new level 'Level 8' at an elevation of 9 meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(9, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\nif (newLevel != null)\n{\n    try { newLevel.Name = \"Level 8\"; } catch {}\n}"}
{"prompt":"Duplicate level 1 with a 1m offset and name it 'Mezzanine'.","completion":"string levelName = \"Mezzanine\";\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\n\nif (level1 != null)\n{\n    double newElevation = level1.ProjectElevation + UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, newElevation);\n    if (newLevel != null)\n    {\n        newLevel.Name = levelName;\n    }\n}"}
{"prompt":"Establece el parámetro 'Comentarios' de todas las puertas del Nivel 1 a 'Clasificación Fuego - 94 min'.","completion":"using(Transaction t = new Transaction(doc, \"Set Door Comments\"))\n{\n    t.Start();\n    Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel 1\");\n    if(level1 != null)\n    {\n        List<FamilyInstance> doorsOnLevel1 = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsNotElementType().Cast<FamilyInstance>().Where(fi => fi.LevelId.Equals(level1.Id)).ToList();\n        foreach(FamilyInstance door in doorsOnLevel1)\n        {\n            Parameter commentsParam = door.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n            if(commentsParam != null && !commentsParam.IsReadOnly)\n            {\n                commentsParam.Set(\"Clasificación Fuego - 94 min\");\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Find out who the owner of a selected element is.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select an element\");\n\nWorksharingTooltipInfo info = null;\nif (pickedRef != null)\n{\n    info = WorksharingUtils.GetWorksharingTooltipInfo(doc, pickedRef.ElementId);\n}\n"}
{"prompt":"Crea una vista 3D orientada desde el sureste.","completion":"string viewName = \"Vista 3D Sureste\";\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft != null)\n{\n    View3D view3d = View3D.CreateIsometric(doc, vft.Id);\n    if (view3d != null)\n    {\n        XYZ eye = new XYZ(1, -1, 1);\n        XYZ up = new XYZ(0, 0, 1);\n        XYZ forward = new XYZ(-1, 1, -1);\n        view3d.SetOrientation(new ViewOrientation3D(eye, up, forward));\n        view3d.Name = viewName;\n    }\n}"}
{"prompt":"Update the type of a selected floor to 'Concrete 13cm'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a floor\");\n\nif (pickedRef != null)\n{\n    Floor floorToChange = doc.GetElement(pickedRef) as Floor;\n    FloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name == \"Concrete 13cm\");\n    \n    if (floorToChange != null && newType != null)\n    {\n        floorToChange.ChangeTypeId(newType.Id);\n    }\n}"}
{"prompt":"Generate a new room on Level 1 at point (9, 6).","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\n\nif (level1 != null)\n{\n    UV point = new UV(9, 6);\n    Room room = doc.Create.NewRoom(level1, point);\n}"}
{"prompt":"Encuentra todas las puertas en el Nivel 5 usando un filtro combinado.","completion":"string levelName = \"Nivel 5\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    ElementCategoryFilter categoryFilter = new ElementCategoryFilter(BuiltInCategory.OST_Doors);\n    ElementLevelFilter levelFilter = new ElementLevelFilter(targetLevel.Id);\n    LogicalAndFilter combinedFilter = new LogicalAndFilter(levelFilter, categoryFilter);\n    FilteredElementCollector collector = new FilteredElementCollector(doc).WherePasses(combinedFilter);\n    uidoc.Selection.SetElementIds(collector.ToElementIds());\n}"}
{"prompt":"Suma la longitud total en metros de todas las tuberías de 150mm de diámetro.","completion":"double totalLength = 0.0;\nFilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_PipeCurves).WhereElementIsNotElementType();\n\ndouble diameterInternal = UnitUtils.ConvertToInternalUnits(150, UnitTypeId.Millimeters);\n\nforeach (Element pipe in collector)\n{\n    Parameter diameterParam = pipe.get_Parameter(BuiltInParameter.RBS_PIPE_DIAMETER_PARAM);\n    if (diameterParam != null && Math.Abs(diameterParam.AsDouble() - diameterInternal) < 0.001)\n    {\n        Parameter lengthParam = pipe.get_Parameter(BuiltInParameter.CURVE_ELEM_LENGTH);\n        if (lengthParam != null) totalLength += lengthParam.AsDouble();\n    }\n}\ndouble totalLengthM = UnitUtils.ConvertFromInternalUnits(totalLength, UnitTypeId.Meters);"}
{"prompt":"Ajusta el tipo de una losa seleccionada a 'Concreto 20cm'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una losa\");\n\nif (pickedRef != null)\n{\n    Floor floorToChange = doc.GetElement(pickedRef) as Floor;\n    FloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name == \"Concreto 20cm\");\n    \n    if (floorToChange != null && newType != null)\n    {\n        floorToChange.ChangeTypeId(newType.Id);\n    }\n}"}
{"prompt":"Build a new 5mm text type in green color.","completion":"using (Transaction t = new Transaction(doc, \"Create Green Text Type\"))\n{\n    t.Start();\n    string newTypeName = \"5mm Green\";\n    TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\n    if (defaultType != null)\n    {\n        TextNoteType newType = defaultType.Duplicate(newTypeName) as TextNoteType;\n        if (newType != null)\n        {\n            Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n            if (textSizeParam != null && !textSizeParam.IsReadOnly)\n            {\n                textSizeParam.Set(5 \/ 304.8);\n            }\n            Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n            if (lineColorParam != null && !lineColorParam.IsReadOnly)\n            {\n                 lineColorParam.Set(65280);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea una vista 3D con la caja de sección activada.","completion":"string viewName = \"Vista 3D con Caja de Sección\";\nViewFamilyType vft3D = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft3D != null)\n{\n    View3D view3d = View3D.CreateIsometric(doc, vft3D.Id);\n    if (view3d != null)\n    {\n        view3d.Name = viewName;\n        view3d.IsSectionBoxActive = true;\n    }\n}"}
{"prompt":"Cambia el nombre de la familia de una puerta seleccionada a 'Puerta_Nueva'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una puerta\");\n\nif (pickedRef != null)\n{\n    FamilyInstance door = doc.GetElement(pickedRef.ElementId) as FamilyInstance;\n    if (door != null && door.Symbol != null)\n    {\n        Family family = door.Symbol.Family;\n        if (family != null)\n        {\n            family.Name = \"Puerta_Nueva\";\n        }\n    }\n}"}
{"prompt":"Asigna todos los muros y suelos seleccionados al workset 'Estructura'.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nWorkset workset = new FilteredWorksetCollector(doc).OfKind(WorksetKind.UserWorkset).FirstOrDefault(ws => ws.Name == \"Estructura\");\nif (selectedIds.Count > 0 && workset != null)\n{\n    int worksetId = workset.Id.IntegerValue;\n    foreach (ElementId id in selectedIds)\n    {\n        Element elem = doc.GetElement(id);\n        Parameter wsparam = elem.get_Parameter(BuiltInParameter.ELEM_PARTITION_PARAM);\n        if (wsparam != null && !wsparam.IsReadOnly) wsparam.Set(worksetId);\n    }\n}"}
{"prompt":"Copia el tipo de muro 'Genérico - 147mm' y nómbralo 'Interior - 18cm Yeso'.","completion":"string originalName = \"Genérico - 147mm\";\nstring newName = \"Interior - 18cm Yeso\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif(originalType!=null)\n    originalType.Duplicate(newName);"}
{"prompt":"Establece el parámetro 'Comentarios' de todas las puertas del Nivel 1 a 'Clasificación Fuego - 90 min'.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\n\nif (level1 != null)\n{\n    List<FamilyInstance> doorsOnLevel1 = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsNotElementType().Cast<FamilyInstance>().Where(fi => fi.LevelId == level1.Id).ToList();\n    foreach(FamilyInstance door in doorsOnLevel1)\n    {\n        Parameter commentsParam = door.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n        if (commentsParam != null && !commentsParam.IsReadOnly) commentsParam.Set(\"Clasificación Fuego - 90 min\");\n    }\n}"}
{"prompt":"Generate a new level 'Level 3' at an elevation of 12 meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(12, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Level 3\";\n}"}
{"prompt":"Include a reference point at coordinates (1,2,2) inside the family editor.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(1,2,2));"}
{"prompt":"Rename the active view to 'Working View'.","completion":"string newName = \"Working View\";\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.Name = newName;\n}"}
{"prompt":"Obtén todos los muros de un modelo vinculado que se cruzan con una caja de delimitación.","completion":"RevitLinkInstance linkInstance = new FilteredElementCollector(doc).OfClass(typeof(RevitLinkInstance)).FirstOrDefault() as RevitLinkInstance;\n\nif (linkInstance != null)\n{\n    Document linkDoc = linkInstance.GetLinkDocument();\n    if (linkDoc != null)\n    {\n        \/\/ Create a default 50ft x 50ft x 20ft bounding box as it's not specified in the prompt\n        BoundingBoxXYZ bbox = new BoundingBoxXYZ();\n        bbox.Min = new XYZ(0, 0, 0);\n        bbox.Max = new XYZ(50, 50, 20);\n        Outline outline = new Outline(bbox.Min, bbox.Max);\n        BoundingBoxIntersectsFilter filter = new BoundingBoxIntersectsFilter(outline);\n        List<Element> linkedWalls = new FilteredElementCollector(linkDoc).OfClass(typeof(Wall)).WherePasses(filter).ToList();\n    }\n}"}
{"prompt":"Build a stair between Level 1 and Level 2.","completion":"\/\/ This is a complex operation that requires multiple steps and\/or user interaction and is not supported by the agent."}
{"prompt":"Build a structural beam between (1,4,1) and (1,1,3) on Level 3","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 3\") as Level;\nFamilySymbol beamType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (beamType != null && level != null)\n{\n    if(!beamType.IsActive) beamType.Activate();\n    XYZ start = new XYZ(1, 4, 1);\n    XYZ end = new XYZ(1, 1, 3);\n    if (start.IsAlmostEqualTo(end)) return;\n    Line beamCurve = Line.CreateBound(start, end);\n    doc.Create.NewFamilyInstance(beamCurve, beamType, level, Autodesk.Revit.DB.Structure.StructuralType.Beam);\n}"}
{"prompt":"Extrae todas las habitaciones en el Nivel 'Losa 103'.","completion":"Level groundFloor = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Losa 103\") as Level;\nList<Element> roomsOnGround = new List<Element>();\n\nif (groundFloor != null)\n{\n    roomsOnGround = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Where(r => r.LevelId == groundFloor.Id).ToList();\n}"}
{"prompt":"Create a new Level named 'Level 3' at an elevation of 10 meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Level 3\";\n}"}
{"prompt":"Obtain the coordinates of the project base point and the survey point.","completion":"BasePoint surveyPoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(p => p.IsShared);\nBasePoint projectBasePoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(p => !p.IsShared);\n\nXYZ surveyCoords = null;\nif (surveyPoint != null) surveyCoords = surveyPoint.get_BoundingBox(null).Min;\n\nXYZ projectCoords = null;\nif (projectBasePoint != null) projectCoords = projectBasePoint.get_BoundingBox(null).Min;"}
{"prompt":"Crea 8 ejes horizontales separados por 10 metros.","completion":"double separation = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\nfor(int i = 0; i < 8; i++)\n{\n    Line line = Line.CreateBound(new XYZ(0, i * separation, 0), new XYZ(50, i * separation, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Duplicate level 2 with a 8m offset and name it 'Mezzanine'.","completion":"string levelName = \"Level 2\";\nLevel levelToCopy = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (levelToCopy != null)\n{\n    double offset = UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, levelToCopy.Elevation + offset);\n    newLevel.Name = \"Mezzanine\";\n}"}
{"prompt":"Encuentra todas las puertas del Nivel 2 que sean de la familia 'Puerta Sencilla'.","completion":"Level level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel 2\");\nList<Element> doors = new List<Element>();\n\nif (level2 != null)\n{\n    ElementCategoryFilter catFilter = new ElementCategoryFilter(BuiltInCategory.OST_Doors);\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level2.Id);\n    FilterableValueProvider provider = new ParameterValueProvider(new ElementId(BuiltInParameter.ELEM_FAMILY_PARAM));\n    FilterStringRuleEvaluator evaluator = new FilterStringEquals();\n    FilterRule famNameRule = new FilterStringRule(provider, evaluator, \"Puerta Sencilla\");\n    ElementParameterFilter famFilter = new ElementParameterFilter(famNameRule);\n    LogicalAndFilter andFilter = new LogicalAndFilter(new List<ElementFilter> { catFilter, levelFilter, famFilter });\n    doors = new FilteredElementCollector(doc).WherePasses(andFilter).ToList();\n}"}
{"prompt":"Crea una vista de sección llamada 'Vista de Trabajo'.","completion":"ViewFamilyType sectionType = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.Section);\nif (sectionType != null)\n{\n    BoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\n    sectionBox.Min = new XYZ(-10, -1, 0);\n    sectionBox.Max = new XYZ(10, 1, 10);\n    Transform transform = Transform.Identity;\n    sectionBox.Transform = transform;\n    ViewSection sectionView = ViewSection.CreateSection(doc, sectionType.Id, sectionBox);\n    if (sectionView != null)\n    {\n        try { sectionView.Name = \"Vista de Trabajo\"; } catch {}\n    }\n}"}
{"prompt":"Modify the detail level of the current view to 'Coarse'.","completion":"View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.DetailLevel = ViewDetailLevel.Coarse;\n}"}
{"prompt":"Inserta un terminal de aire en el extremo de un conducto.","completion":"Duct duct = new FilteredElementCollector(doc).OfClass(typeof(Duct)).FirstOrDefault() as Duct;\nFamilySymbol terminalSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_DuctTerminal).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (duct != null && terminalSymbol != null)\n{\n    if(!terminalSymbol.IsActive) terminalSymbol.Activate();\n    LocationCurve locCurve = duct.Location as LocationCurve;\n    if (locCurve != null)\n    {\n        Connector endConnector = duct.ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault(c => c.Origin.IsAlmostEqualTo(locCurve.Curve.GetEndPoint(1)));\n        if (endConnector != null)\n        {\n            doc.Create.NewFamilyInstance(endConnector.Origin, terminalSymbol, duct, StructuralType.NonStructural);\n        }\n    }\n}"}
{"prompt":"Encuentra todos los muros que miden más de 3 metros de alto.","completion":"double heightThreshold = UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\nElementId heightParamId = new ElementId(BuiltInParameter.WALL_USER_HEIGHT_PARAM);\nParameterValueProvider pvp = new ParameterValueProvider(heightParamId);\nFilterNumericRuleEvaluator evaluator = new FilterNumericGreater();\nFilterRule rule = new FilterDoubleRule(pvp, evaluator, heightThreshold, 1e-6);\nElementParameterFilter filter = new ElementParameterFilter(rule);\nList<ElementId> tallWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(filter).ToElementIds().ToList();"}
{"prompt":"Create a floor with a circular hole in the center.","completion":"using (Transaction t = new Transaction(doc, \"Create Floor with Hole\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    FloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\n\n    if (level != null && floorType != null)\n    {\n        XYZ p1 = new XYZ(-10 \/ 0.3048, -10 \/ 0.3048, 0);\n        XYZ p2 = new XYZ(10 \/ 0.3048, -10 \/ 0.3048, 0);\n        XYZ p3 = new XYZ(10 \/ 0.3048, 10 \/ 0.3048, 0);\n        XYZ p4 = new XYZ(-10 \/ 0.3048, 10 \/ 0.3048, 0);\n        CurveLoop outerLoop = new CurveLoop();\n        outerLoop.Append(Line.CreateBound(p1, p2));\n        outerLoop.Append(Line.CreateBound(p2, p3));\n        outerLoop.Append(Line.CreateBound(p3, p4));\n        outerLoop.Append(Line.CreateBound(p4, p1));\n\n        XYZ center = XYZ.Zero;\n        double radius = 2 \/ 0.3048;\n        CurveLoop innerLoop = new CurveLoop();\n        innerLoop.Append(Arc.Create(center - XYZ.BasisX * radius, center + XYZ.BasisX * radius, center + XYZ.BasisY * radius));\n        innerLoop.Append(Arc.Create(center + XYZ.BasisX * radius, center - XYZ.BasisX * radius, center - XYZ.BasisY * radius));\n\n        Floor.Create(doc, new List<CurveLoop> { outerLoop, innerLoop }, floorType.Id, level.Id);\n    }\n    t.Commit();\n}"}
{"prompt":"Añade una etiqueta a todos los elementos de mobiliario en la vista actual.","completion":"View activeView = doc.ActiveView;\nif (activeView == null) return;\n\nFilteredElementCollector collector = new FilteredElementCollector(doc, activeView.Id)\n    .OfCategory(BuiltInCategory.OST_Furniture)\n    .WhereElementIsNotElementType();\n\nIList<Element> elementsToTag = collector.ToElements();\n\nif (elementsToTag.Any())\n{\n    foreach (Element elem in elementsToTag)\n    {\n        Reference elemRef = new Reference(elem);\n        BoundingBoxXYZ bbox = elem.get_BoundingBox(activeView);\n        if (bbox == null) continue;\n\n        XYZ tagLocation = (bbox.Min + bbox.Max) \/ 2.0;\n        IndependentTag.Create(doc, activeView.Id, elemRef, true, TagMode.TM_ADDBY_CATEGORY, TagOrientation.Horizontal, tagLocation);\n    }\n}"}
{"prompt":"Crea un ensamblaje a partir de los elementos seleccionados.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds != null && selectedIds.Count > 0)\n{\n    AssemblyInstance assemblyInstance = AssemblyInstance.Create(doc, selectedIds, new ElementId(BuiltInCategory.OST_Assemblies));\n    if (assemblyInstance != null)\n    {\n        assemblyInstance.Name = \"Nuevo Ensamblaje\";\n    }\n}"}
{"prompt":"Vira un elemento seleccionado 86 grados sobre su eje Z.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un elemento para rotar\");\nElement elem = doc.GetElement(pickedRef.ElementId);\nLocationPoint lp = elem.Location as LocationPoint;\nLine axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\nElementTransformUtils.RotateElement(doc, elem.Id, axis, Math.PI \/ 86);"}
{"prompt":"Create a new 5mm text type in green color.","completion":"using (Transaction t = new Transaction(doc, \"Create Green Text Type\"))\n{\n    t.Start();\n    string newTypeName = \"5mm Green\";\n    TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\n    if (defaultType != null)\n    {\n        TextNoteType newType = defaultType.Duplicate(newTypeName) as TextNoteType;\n        if (newType != null)\n        {\n            Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n            if (textSizeParam != null && !textSizeParam.IsReadOnly)\n            {\n                textSizeParam.Set(5 \/ 304.8);\n            }\n            Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n            if (lineColorParam != null && !lineColorParam.IsReadOnly)\n            {\n                 lineColorParam.Set(65280);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Build a new room on Level 4 at point (11, 15).","completion":"string levelName = \"Level 4\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    UV point = new UV(11, 15);\n    Room newRoom = doc.Create.NewRoom(targetLevel, point);\n}"}
{"prompt":"Actualiza el tipo de la ventana seleccionada al tipo 'Fija 125x60'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una ventana\");\nFamilySymbol newType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name == \"Fija 125x60\");\nif (pickedRef != null && newType != null)\n{\n    FamilyInstance window = doc.GetElement(pickedRef.ElementId) as FamilyInstance;\n    if (window != null)\n    {\n        window.Symbol = newType;\n    }\n}"}
{"prompt":"Crea un tipo de muro 'Muro-Doble' de 30cm y luego crea un muro de ese tipo.","completion":"using (Transaction t = new Transaction(doc, \"Create Wall Type and Wall\"))\n{\n    t.Start();\n    string newTypeName = \"Muro-Doble\";\n    WallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n    WallType newWallType = null;\n    if (wallTypeToDuplicate != null)\n    {\n        newWallType = wallTypeToDuplicate.Duplicate(newTypeName) as WallType;\n        if (newWallType != null)\n        {\n            CompoundStructure cs = newWallType.GetCompoundStructure();\n            if (cs != null && cs.LayerCount > 0)\n            {\n                cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), 0.3 \/ 0.3048);\n                newWallType.SetCompoundStructure(cs);\n            }\n        }\n    }\n    if (newWallType != null)\n    {\n        Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n        Line wallCurve = Line.CreateBound(XYZ.Zero, new XYZ(10 \/ 0.3048, 0, 0));\n        double height = 3 \/ 0.3048;\n        if (level != null)\n        {\n            Wall.Create(doc, wallCurve, newWallType.Id, level.Id, height, 0, false, false);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea un nuevo tipo de muro de 25cm llamado 'Estructura'.","completion":"string newTypeName = \"Estructura\";\nWallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(newTypeName) as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(25, UnitTypeId.Centimeters));\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n}"}
{"prompt":"Find the structural column type named \"295 x 453mm\" and place it at X=1, Y=12.8","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(s => s.Name == \"295 x 453mm\");\nif (level != null && columnSymbol != null)\n{\n    if (!columnSymbol.IsActive) { columnSymbol.Activate(); }\n    XYZ point = new XYZ(1, 12.8, 0);\n    doc.Create.NewFamilyInstance(point, columnSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n}"}
{"prompt":"Attach a horizontal reference plane named 'Centerline A'.","completion":"using (Transaction t = new Transaction(doc, \"Add Reference Plane\"))\n{\n    t.Start();\n    string rpName = \"Centerline A\";\n    View activeView = doc.ActiveView;\n\n    if (activeView != null)\n    {\n        XYZ bubbleEnd = new XYZ(0, 10, 0);\n        XYZ freeEnd = new XYZ(10, 10, 0);\n        XYZ cutVec = XYZ.BasisZ;\n        ReferencePlane rp = doc.Create.NewReferencePlane(bubbleEnd, freeEnd, cutVec, activeView);\n        if (rp != null)\n        {\n            rp.Name = rpName;\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Insert an instance of the 'Office Desk' family in the center of the 'Office 101' room.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Office 101\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Office Desk\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);"}
{"prompt":"Copy level 1 with a 7m offset and name it 'Mezzanine'.","completion":"string levelName = \"Mezzanine\";\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\n\nif (level1 != null)\n{\n    double newElevation = level1.ProjectElevation + UnitUtils.ConvertToInternalUnits(7, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, newElevation);\n    if (newLevel != null)\n    {\n        newLevel.Name = levelName;\n    }\n}"}
{"prompt":"Retrieve the coordinates of the project base point and the survey point.","completion":"BasePoint surveyPoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(p => p.IsShared);\nBasePoint projectBasePoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(p => !p.IsShared);\n\nXYZ surveyCoords = null;\nif (surveyPoint != null) surveyCoords = surveyPoint.get_BoundingBox(null).Min;\n\nXYZ projectCoords = null;\nif (projectBasePoint != null) projectCoords = projectBasePoint.get_BoundingBox(null).Min;"}
{"prompt":"Find all walls with an empty 'Mark' parameter and set it to 'WM-01'.","completion":"List<Wall> walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>().ToList();\nforeach(var w in walls)\n{\n  Parameter p = w.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n  if(p != null && !p.IsReadOnly && string.IsNullOrEmpty(p.AsString()))\n  {\n      p.Set(\"WM-01\");\n  }\n}"}
{"prompt":"Crea un techo por contorno en el 'Nivel de Cubierta'.","completion":"using (Transaction t = new Transaction(doc, \"Create Roof\"))\n{\n    t.Start();\n    Level roofLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel de Cubierta\");\n    RoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n\n    if (roofLevel != null && roofType != null)\n    {\n        CurveArray roofProfile = new CurveArray();\n        roofProfile.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(20 \/ 0.3048,0,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(20 \/ 0.3048,0,0), new XYZ(20 \/ 0.3048,30 \/ 0.3048,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(20 \/ 0.3048,30 \/ 0.3048,0), new XYZ(0,30 \/ 0.3048,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(0,30 \/ 0.3048,0), new XYZ(0,0,0)));\n        ModelCurveArray mapping = new ModelCurveArray();\n        doc.Create.NewFootPrintRoof(roofProfile, roofLevel, roofType, out mapping);\n    }\n    t.Commit();\n}"}
{"prompt":"Muestra un cuadro de diálogo con las opciones 'Sí', 'No' y 'Cancelar'.","completion":""}
{"prompt":"Gira el norte del proyecto 30 grados en sentido horario.","completion":"using (Transaction t = new Transaction(doc, \"Rotate Project North\"))\n{\n    t.Start();\n    BasePoint projectBasePoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(bp => !bp.IsShared);\n\n    if (projectBasePoint != null)\n    {\n        double angleInDegrees = 30.0;\n        double angleInRadians = -(angleInDegrees * Math.PI \/ 180.0);\n        using (var bbox = projectBasePoint.get_BoundingBox(null))\n        {\n          if (bbox != null)\n          {\n            XYZ center = bbox.Min;\n            Line axis = Line.CreateBound(center, center + XYZ.BasisZ);\n            ElementTransformUtils.RotateElement(doc, projectBasePoint.Id, axis, angleInRadians);\n          }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Insert a material tag on a wall face.","completion":"using (Transaction t = new Transaction(doc, \"Place Material Tag\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference faceRef = localUidoc.Selection.PickObject(ObjectType.Face, \"Select a face to tag\");\n    XYZ point = localUidoc.Selection.PickPoint(\"Select the tag location\");\n    View activeView = doc.ActiveView;\n\n    if (faceRef != null && point != null && activeView != null)\n    {\n        IndependentTag.Create(doc, activeView.Id, faceRef, true, TagMode.TM_ADDBY_MATERIAL, TagOrientation.Horizontal, point);\n    }\n    t.Commit();\n}"}
{"prompt":"Create a 20x15 meter foundation slab.","completion":"using (Transaction t = new Transaction(doc, \"Create Foundation Slab\"))\n{\n    t.Start();\n    Level foundationLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderBy(l => l.Elevation).FirstOrDefault();\n    FloorType slabType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.get_Parameter(BuiltInParameter.FLOOR_PARAM_IS_STRUCTURAL).AsInteger() == 1);\n\n    if (foundationLevel != null && slabType != null)\n    {\n        XYZ p1 = new XYZ(0,0,0);\n        XYZ p2 = new XYZ(20\/0.3048, 0, 0);\n        XYZ p3 = new XYZ(20\/0.3048, 15\/0.3048, 0);\n        XYZ p4 = new XYZ(0, 15\/0.3048, 0);\n        CurveLoop profile = new CurveLoop();\n        profile.Append(Line.CreateBound(p1,p2));\n        profile.Append(Line.CreateBound(p2,p3));\n        profile.Append(Line.CreateBound(p3,p4));\n        profile.Append(Line.CreateBound(p4,p1));\n        Floor.Create(doc, new List<CurveLoop>{profile}, slabType.Id, foundationLevel.Id);\n    }\n    t.Commit();\n}"}
{"prompt":"Crea un reporte con el área de todas las habitaciones del proyecto.","completion":"List<Room> rooms = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>().ToList();"}
{"prompt":"Create a new 5mm text type in green color.","completion":"using (Transaction t = new Transaction(doc, \"Create Green Text Type\"))\n{\n    t.Start();\n    string newTypeName = \"5mm Green\";\n    TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\n    if (defaultType != null)\n    {\n        TextNoteType newType = defaultType.Duplicate(newTypeName) as TextNoteType;\n        if (newType != null)\n        {\n            Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n            if (textSizeParam != null && !textSizeParam.IsReadOnly)\n            {\n                textSizeParam.Set(5 \/ 304.8);\n            }\n            Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n            if (lineColorParam != null && !lineColorParam.IsReadOnly)\n            {\n                 lineColorParam.Set(65280);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Generate an MEP space for each room on Level 1","completion":"string levelName = \"Level 1\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    FilteredElementCollector roomCollector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WherePasses(new ElementLevelFilter(targetLevel.Id));\n    foreach (Room room in roomCollector.ToElements().Cast<Room>())\n    {\n        LocationPoint locPoint = room.Location as LocationPoint;\n        if (locPoint != null)\n        {\n            UV point = new UV(locPoint.Point.X, locPoint.Point.Y);\n            doc.Create.NewSpace(targetLevel, point);\n        }\n    }\n}"}
{"prompt":"Generate a new room on Level 1 at point (10, 10).","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\n\nif (level1 != null)\n{\n    UV point = new UV(10, 10);\n    Room room = doc.Create.NewRoom(level1, point);\n}"}
{"prompt":"Estimate the total area of all rooms.","completion":"double totalArea = 0.0;\nList<Room> rooms = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>().ToList();\nforeach (Room room in rooms)\n{\n    totalArea += room.Area;\n}"}
{"prompt":"Build a structural beam between (1,1,2) and (5,4,3) on Level 3","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 3\") as Level;\nFamilySymbol beamType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (beamType != null && level != null)\n{\n    if(!beamType.IsActive) beamType.Activate();\n    XYZ start = new XYZ(1, 1, 2);\n    XYZ end = new XYZ(5, 4, 3);\n    if (start.IsAlmostEqualTo(end)) return;\n    Line beamCurve = Line.CreateBound(start, end);\n    doc.Create.NewFamilyInstance(beamCurve, beamType, level, Autodesk.Revit.DB.Structure.StructuralType.Beam);\n}"}
{"prompt":"Delete all detail lines in the active view.","completion":"using (Transaction t = new Transaction(doc, \"Delete Detail Lines\"))\n{\n    t.Start();\n    if (doc.ActiveView != null)\n    {\n        ICollection<ElementId> detailLines = new FilteredElementCollector(doc, doc.ActiveView.Id).OfClass(typeof(DetailCurve)).ToElementIds();\n        if (detailLines.Count > 0)\n        {\n            doc.Delete(detailLines);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea una vista de sección usando una caja de 10x10x3 metros.","completion":"ViewFamilyType sectionVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(vft => vft.ViewFamily == ViewFamily.Section);\n\nif (sectionVFT != null)\n{\n    XYZ min = new XYZ(0, 0, 0);\n    XYZ max = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters));\n    BoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\n    sectionBox.Min = min;\n    sectionBox.Max = max;\n    ViewSection.CreateSection(doc, sectionVFT.Id, sectionBox);\n}"}
{"prompt":"Create a pipe with a 150mm diameter.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nPipeType pipeType = new FilteredElementCollector(doc).OfClass(typeof(PipeType)).FirstOrDefault() as PipeType;\nPipingSystemType systemType = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).FirstOrDefault() as PipingSystemType;\n\nif (level != null && pipeType != null && systemType != null)\n{\n    XYZ p1 = new XYZ(0,0,0);\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters),0,0);\n    Pipe pipe = Pipe.Create(doc, systemType.Id, pipeType.Id, level.Id, p1, p2);\n\n    if (pipe != null)\n    {\n        Parameter diameterParam = pipe.get_Parameter(BuiltInParameter.RBS_PIPE_DIAMETER_PARAM);\n        if (diameterParam != null) {\n            diameterParam.Set(UnitUtils.ConvertToInternalUnits(150, UnitTypeId.Millimeters));\n        }\n    }\n}"}
{"prompt":"Extrae todas las habitaciones que están en el Nivel 3","completion":"string levelName = \"Nivel 3\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(targetLevel.Id);\n    FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WherePasses(levelFilter);\n    uidoc.Selection.SetElementIds(collector.ToElementIds());\n}"}
{"prompt":"Generate 8 horizontal grids spaced 10.8 meters apart.","completion":"double separation = UnitUtils.ConvertToInternalUnits(10.8, UnitTypeId.Meters);\nfor(int i = 0; i < 8; i++)\n{\n    \/\/ Create a default 50ft long grid line\n    Line line = Line.CreateBound(new XYZ(0, i * separation, 0), new XYZ(50, i * separation, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Crea una vista de sección llamada 'Sección Longitudinal'.","completion":"ViewFamilyType sectionType = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.Section);\n\nif (sectionType != null)\n{\n    \/\/ Create a default bounding box as none was specified in the prompt\n    BoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\n    sectionBox.Min = new XYZ(-50, -5, 0);\n    sectionBox.Max = new XYZ(50, 5, 20);\n    ViewSection sectionView = ViewSection.CreateSection(doc, sectionType.Id, sectionBox);\n    \n    if (sectionView != null)\n    {\n        sectionView.Name = \"Sección Longitudinal\";\n    }\n}"}
{"prompt":"Build a section view named 'Longitudinal Section'.","completion":"ViewFamilyType sectionType = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.Section);\n\nif (sectionType != null)\n{\n    \/\/ Create a default bounding box as none was specified in the prompt\n    BoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\n    sectionBox.Min = new XYZ(-50, -5, 0);\n    sectionBox.Max = new XYZ(50, 5, 20);\n    ViewSection sectionView = ViewSection.CreateSection(doc, sectionType.Id, sectionBox);\n    \n    if (sectionView != null)\n    {\n        sectionView.Name = \"Longitudinal Section\";\n    }\n}"}
{"prompt":"Recupera el tipo de sistema de una tubería seleccionada.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una tubería\");\n\nPipingSystemType systemType = null;\nif (pickedRef != null)\n{\n    Pipe pipe = doc.GetElement(pickedRef.ElementId) as Pipe;\n    if (pipe != null)\n    {\n        Parameter systemTypeParam = pipe.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM);\n        if (systemTypeParam != null && systemTypeParam.HasValue)\n        {\n            systemType = doc.GetElement(systemTypeParam.AsElementId()) as PipingSystemType;\n        }\n    }\n}\n"}
{"prompt":"Attach a reference point at coordinates (6,4,2) inside the family editor.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(6,4,2));"}
{"prompt":"Construct a curtain wall 6 meters wide and 4 meters high.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nWallType cwType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Kind == WallKind.Curtain);\n\nif (level != null && cwType != null)\n{\n    Line baseLine = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits(6, UnitTypeId.Meters), 0, 0));\n    Wall.Create(doc, baseLine, cwType.Id, level.Id, UnitUtils.ConvertToInternalUnits(4.0, UnitTypeId.Meters), 0.0, false, false);\n}"}
{"prompt":"Find all walls that are not associated with any level.","completion":"ElementFilter unassociatedFilter = new ElementLevelFilter(ElementId.InvalidElementId);\nList<Element> unassignedWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(unassociatedFilter).ToList();"}
{"prompt":"Rotate a selected element 93 degrees around its Z-axis.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select an element to rotate\");\nElement elem = doc.GetElement(pickedRef.ElementId);\nLocationPoint lp = elem.Location as LocationPoint;\nLine axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\nElementTransformUtils.RotateElement(doc, elem.Id, axis, Math.PI \/ 93);"}
{"prompt":"Copia todos los elementos del Nivel 1 al Nivel 2.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\nLevel level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 2\") as Level;\n\nif (level1 != null && level2 != null)\n{\n    ICollection<ElementId> elementsToCopy = new FilteredElementCollector(doc, level1.Id).WhereElementIsNotElementType().ToElementIds();\n    double elevationDiff = level2.ProjectElevation - level1.ProjectElevation;\n    XYZ translation = new XYZ(0, 0, elevationDiff);\n    if (elementsToCopy.Count > 0)\n    {\n        ElementTransformUtils.CopyElements(doc, elementsToCopy, translation);\n    }\n}"}
{"prompt":"Modifica el tipo de una losa seleccionada a 'Concreto 12cm'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una losa\");\n\nif (pickedRef != null)\n{\n    Floor floorToChange = doc.GetElement(pickedRef) as Floor;\n    FloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name == \"Concreto 12cm\");\n    \n    if (floorToChange != null && newType != null)\n    {\n        floorToChange.ChangeTypeId(newType.Id);\n    }\n}"}
{"prompt":"Crea un nuevo tipo de tubería llamado 'Tubería de Acero' con material 'Acero, Carbono'.","completion":"string newTypeName = \"Tubería de Acero\";\nPipeType pipeTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(PipeType)).FirstOrDefault() as PipeType;\nMaterial steel = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name == \"Acero, Carbono\") as Material;\n\nif (pipeTypeToDuplicate != null && steel != null)\n{\n    PipeType newType = pipeTypeToDuplicate.Duplicate(newTypeName) as PipeType;\n    if (newType != null)\n    {\n        Parameter materialParam = newType.get_Parameter(BuiltInParameter.MATERIAL_ID_PARAM);\n        if (materialParam != null && !materialParam.IsReadOnly) materialParam.Set(steel.Id);\n    }\n}"}
{"prompt":"Copia todos los muros del Nivel 1 al Nivel 2.","completion":"using (Transaction t = new Transaction(doc, \"Copy Walls\"))\n{\n    t.Start();\n    Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel 1\");\n    Level level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel 2\");\n\n    if (level1 != null && level2 != null)\n    {\n        ICollection<ElementId> wallsToCopy = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Where(e => (e as Wall) != null && (e as Wall).LevelId.Equals(level1.Id)).Select(e => e.Id).ToList();\n        double elevationDiff = level2.ProjectElevation - level1.ProjectElevation;\n        XYZ translation = new XYZ(0, 0, elevationDiff);\n        if (wallsToCopy.Count > 0)\n        {\n            ElementTransformUtils.CopyElements(doc, wallsToCopy, translation);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Replicate the 'Generic - 202mm' wall type and name it 'Interior - 15cm Plaster'.","completion":"string originalName = \"Generic - 202mm\";\nstring newName = \"Interior - 15cm Plaster\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif (originalType != null)\n{\n    WallType newType = originalType.Duplicate(newName) as WallType;\n}"}
{"prompt":"Recupera todas las instancias de la categoría Mobiliario.","completion":"List<Element> furnitureInstances = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsNotElementType().ToList();"}
{"prompt":"Inicia y confirma una transacción para 'Modificar Proyecto'.","completion":""}
{"prompt":"Construct a 'Roof Terrace' level at 10m.","completion":"string levelName = \"Roof Terrace\";\ndouble elev = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elev);\nnewLevel.Name = levelName;\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Create a new level 'Level 1' at an elevation of 11 meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(11, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Level 1\";\n}"}
{"prompt":"Create a new wall type 'Generic Wall 298mm' with a thickness of 32cm.","completion":"string newTypeName = \"Generic Wall 298mm\";\nWallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif (oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(newTypeName) as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(32, UnitTypeId.Centimeters));\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n}"}
{"prompt":"Recupera todos los muros del Nivel 1 que son estructurales.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\nif (level1 != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level1.Id);\n    ElementCategoryFilter categoryFilter = new ElementCategoryFilter(BuiltInCategory.OST_Walls);\n    ParameterValueProvider pvp = new ParameterValueProvider(new ElementId(BuiltInParameter.WALL_STRUCTURAL_SIGNIFICANT));\n    FilterIntegerRule rule = new FilterIntegerRule(pvp, new FilterNumericEquals(), 1);\n    ElementParameterFilter structuralFilter = new ElementParameterFilter(rule);\n    LogicalAndFilter andFilter = new LogicalAndFilter(new List<ElementFilter> { levelFilter, categoryFilter, structuralFilter });\n    List<Element> structuralWalls = new FilteredElementCollector(doc).WherePasses(andFilter).ToList();\n}"}
{"prompt":"Inserta una armadura (truss) de 6 metros entre dos puntos.","completion":"using (Transaction t = new Transaction(doc, \"Create Truss\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    FamilySymbol trussSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Family.Name.Contains(\"Truss\"));\n\n    if (level != null && trussSymbol != null)\n    {\n        if (!trussSymbol.IsActive) { trussSymbol.Activate(); }\n        Line trussLine = Line.CreateBound(new XYZ(0, 10, 0), new XYZ(6 \/ 0.3048, 10, 0));\n        doc.Create.NewFamilyInstance(trussLine, trussSymbol, level, StructuralType.NonStructural);\n    }\n    t.Commit();\n}"}
{"prompt":"Construct a 'Roof Terrace' level at 18m.","completion":"string levelName = \"Roof Terrace\";\ndouble elev = UnitUtils.ConvertToInternalUnits(18, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elev);\nnewLevel.Name = levelName;\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Add a reference point at coordinates (1,2,3) inside the family editor.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(1,2,3));"}
{"prompt":"Crea una vista de planta para el 'Nivel 4'.","completion":"string levelName = \"Nivel 4\";\nLevel level3 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.FloorPlan);\n\nif (level3 != null && vft != null)\n{\n    ViewPlan viewPlan = ViewPlan.Create(doc, vft.Id, level3.Id);\n}"}
{"prompt":"Actualiza el tipo de la ventana seleccionada al tipo 'Fija 117x60'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una ventana\");\nFamilySymbol newType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name == \"Fija 117x60\");\nif (pickedRef != null && newType != null)\n{\n    FamilyInstance window = doc.GetElement(pickedRef.ElementId) as FamilyInstance;\n    if (window != null)\n    {\n        window.Symbol = newType;\n    }\n}"}
{"prompt":"Model a railing on an existing staircase.","completion":"RailingType railingType = new FilteredElementCollector(doc).OfClass(typeof(RailingType)).FirstOrDefault() as RailingType;\nStairs stairs = new FilteredElementCollector(doc).OfClass(typeof(Stairs)).FirstOrDefault() as Stairs;\n\nif (railingType != null && stairs != null)\n{\n    Railing.Create(doc, stairs.Id, railingType.Id, RailingPlacementPosition.Treads);\n}"}
{"prompt":"Obtén la longitud total de todos los muros del proyecto.","completion":"double totalLength = 0.0;\nList<Wall> walls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Cast<Wall>().ToList();\nforeach (Wall wall in walls)\n{\n    Parameter lengthParam = wall.get_Parameter(BuiltInParameter.CURVE_ELEM_LENGTH);\n    if (lengthParam != null && lengthParam.HasValue)\n    {\n        totalLength += lengthParam.AsDouble();\n    }\n}"}
{"prompt":"Build a new Level named 'Level 3' at an elevation of 14 meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(14, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\nif (newLevel != null)\n{\n    try { newLevel.Name = \"Level 3\"; } catch {}\n}"}
{"prompt":"Ubica una instancia de la familia 'Mesa de Oficina' en el centro de la habitación 'Despacho 96'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 96\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Mesa de Oficina\") as FamilySymbol;\nif(furnitureSymbol != null && !furnitureSymbol.IsActive) furnitureSymbol.Activate();\nif(room != null)\n{\n    LocationPoint roomCenter = room.Location as LocationPoint;\n    if(roomCenter != null && furnitureSymbol != null && room.Level != null)\n    {\n        doc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Desune la geometría de dos elementos dados.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference ref1 = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona el primer elemento\");\nReference ref2 = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona el segundo elemento\");\n\nif (ref1 != null && ref2 != null)\n{\n    Element e1 = doc.GetElement(ref1.ElementId);\n    Element e2 = doc.GetElement(ref2.ElementId);\n    if (e1 != null && e2 != null)\n    {\n        JoinGeometryUtils.UnjoinGeometry(doc, e1, e2);\n    }\n}"}
{"prompt":"Extrae los IDs de todas las vistas 3D que empiezan con 'Coord' para exportación.","completion":"List<ElementId> viewsToExport = new FilteredElementCollector(doc).OfClass(typeof(View3D)).Cast<View3D>().Where(v => v.Name.StartsWith(\"Coord\") && !v.IsTemplate).Select(v => v.Id).ToList();\n"}
{"prompt":"Build a new pipe type with Copper material.","completion":"string newTypeName = \"Copper Pipe\";\nPipeType pipeTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(PipeType)).FirstOrDefault() as PipeType;\nMaterial copper = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name.Contains(\"Copper\")) as Material;\n\nif (pipeTypeToDuplicate != null && copper != null)\n{\n    PipeType newType = pipeTypeToDuplicate.Duplicate(newTypeName) as PipeType;\n    if (newType != null)\n    {\n        Parameter materialParam = newType.get_Parameter(BuiltInParameter.MATERIAL_ID_PARAM);\n        if (materialParam != null && !materialParam.IsReadOnly) materialParam.Set(copper.Id);\n    }\n}"}
{"prompt":"Crea un techo por extrusión con un perfil en arco.","completion":"using (Transaction t = new Transaction(doc, \"Create Extrusion Roof\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    RoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n\n    if (level != null && roofType != null && doc.ActiveView != null)\n    {\n        CurveArray profile = new CurveArray();\n        profile.Append(Arc.Create(new XYZ(-10,0,0), new XYZ(10,0,0), new XYZ(0,5,0)));\n        Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisY, XYZ.Zero);\n        ReferencePlane refPlane = doc.Create.NewReferencePlane(plane.Origin, plane.Origin + XYZ.BasisX, plane.Normal, doc.ActiveView);\n        if(refPlane != null)\n            doc.Create.NewExtrusionRoof(profile, refPlane, level, roofType, 0, 20);\n    }\n    t.Commit();\n}"}
{"prompt":"Crea un muro cortina de 6 metros de ancho y 4 metros de alto.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nWallType cwType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Kind == WallKind.Curtain);\n\nif (level != null && cwType != null)\n{\n    Line baseLine = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits(6, UnitTypeId.Meters), 0, 0));\n    Wall.Create(doc, baseLine, cwType.Id, level.Id, UnitUtils.ConvertToInternalUnits(4.0, UnitTypeId.Meters), 0.0, false, false);\n}"}
{"prompt":"Get a list of all project warnings.","completion":"IList<FailureMessage> warnings = doc.GetWarnings();\nList<string> warningDescriptions = warnings.Select(w => w.GetDescriptionText()).ToList();\n"}
{"prompt":"Crea un nuevo nivel llamado 'Planta Sótano' a una elevación de -4.5 metros.","completion":"string levelName = \"Planta Sótano\";\ndouble elevationInternal = UnitUtils.ConvertToInternalUnits(-4.5, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevationInternal);\nnewLevel.Name = levelName;"}
{"prompt":"Create a text note with given text, location, and target element.","completion":"using (Transaction t = new Transaction(doc, \"Create Text Note\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference targetRef = localUidoc.Selection.PickObject(ObjectType.Element, \"Select an element to annotate\");\n    XYZ textLocation = localUidoc.Selection.PickPoint(\"Choose the text location\");\n\n    View activeView = doc.ActiveView;\n    ElementId defaultTypeId = doc.GetDefaultElementTypeId(ElementTypeGroup.TextNoteType);\n\n    if (targetRef != null && textLocation != null && activeView != null && defaultTypeId != ElementId.InvalidElementId)\n    {\n        TextNoteOptions opts = new TextNoteOptions(defaultTypeId);\n        TextNote note = TextNote.Create(doc, activeView.Id, textLocation, \"REVIEW CLASH\", opts);\n        if (note != null)\n        {\n            note.AddLeader(TextNoteLeaderTypes.TNLT_STRAIGHT_L).End = targetRef.GlobalPoint;\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Reproduce el tipo de muro 'Genérico - 145mm' y nómbralo 'Interior - 14cm Yeso'.","completion":"string originalName = \"Genérico - 145mm\";\nstring newName = \"Interior - 14cm Yeso\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif (originalType != null)\n{\n    WallType newType = originalType.Duplicate(newName) as WallType;\n}"}
{"prompt":"Temporarily isolate the current selection.","completion":"ICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nView activeView = doc.ActiveView;\n\nif (activeView != null && selectedIds.Any())\n{\n    activeView.IsolateElementsTemporary(selectedIds);\n}"}
{"prompt":"Reproduce la vista de planta 'Primer Piso' y conviértela en una plantilla de vista.","completion":"using (Transaction t = new Transaction(doc, \"Create View Template\"))\n{\n    t.Start();\n    ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().FirstOrDefault(v => v.Name == \"Primer Piso\");\n    string templateName = \"Plantilla Primer Piso\";\n\n    if (viewToDuplicate != null)\n    {\n        ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n        View newView = doc.GetElement(newViewId) as View;\n        if (newView != null)\n        {\n           \/\/ Direct conversion to a template may not be available in older APIs.\n           \/\/ A common workaround is to set the IsTemplate property if available and writable, \n           \/\/ which is not the case here. This is left as a comment for conceptual understanding.\n           \/\/ newView.IsTemplate = true;\n            newView.Name = templateName;\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Find all walls with the comment 'Review'.","completion":"ElementId commentParamId = new ElementId(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\nParameterValueProvider pvp = new ParameterValueProvider(commentParamId);\nFilterStringRuleEvaluator evaluator = new FilterStringContains();\nFilterRule rule = new FilterStringRule(pvp, evaluator, \"Review\");\nElementFilter filter = new ElementParameterFilter(rule);\nList<Element> wallsToReview = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(filter).ToList();"}
{"prompt":"Voltea un elemento seleccionado 93 grados sobre su eje Z.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un elemento para rotar\");\nElement elem = doc.GetElement(pickedRef.ElementId);\nLocationPoint lp = elem.Location as LocationPoint;\nLine axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\nElementTransformUtils.RotateElement(doc, elem.Id, axis, Math.PI \/ 93);"}
{"prompt":"Export all sheets in a set to a single combined PDF.","completion":"ViewSheetSet sheetSet = new FilteredElementCollector(doc).OfClass(typeof(ViewSheetSet)).FirstOrDefault() as ViewSheetSet;\n\nif (sheetSet != null)\n{\n    string folderPath = \"C:\/RevitExports\/\";\n    PDFExportOptions options = new PDFExportOptions();\n    options.Combine = true;\n    options.FileName = sheetSet.Name;\n    List<ElementId> sheetIds = sheetSet.Views.Cast<ViewSheet>().Select(s => s.Id).ToList();\n    doc.Export(folderPath, sheetIds, options);\n}"}
{"prompt":"Inserta una ventana de 1x1.2 metros en la pared más cercana.","completion":"FamilySymbol originalSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nWall hostWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\n\nif (originalSymbol != null && hostWall != null)\n{\n    string newTypeName = \"Window 1.0m x 1.2m\";\n    FamilySymbol newSymbol = originalSymbol.Duplicate(newTypeName) as FamilySymbol;\n    if (newSymbol == null) return;\n\n    if (!newSymbol.IsActive)\n    {\n        newSymbol.Activate();\n    }\n\n    Parameter widthParam = newSymbol.get_Parameter(BuiltInParameter.WINDOW_WIDTH);\n    Parameter heightParam = newSymbol.get_Parameter(BuiltInParameter.WINDOW_HEIGHT);\n\n    if (widthParam != null && heightParam != null && !widthParam.IsReadOnly && !heightParam.IsReadOnly)\n    {\n        widthParam.Set(UnitUtils.ConvertToInternalUnits(1.0, UnitTypeId.Meters));\n        heightParam.Set(UnitUtils.ConvertToInternalUnits(1.2, UnitTypeId.Meters));\n    }\n\n    Level level = doc.GetElement(hostWall.LevelId) as Level;\n    LocationCurve locationCurve = hostWall.Location as LocationCurve;\n    if (level != null && locationCurve != null)\n    {\n        XYZ insertionPoint = locationCurve.Curve.Evaluate(0.5, true);\n        doc.Create.NewFamilyInstance(insertionPoint, newSymbol, hostWall, level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Get all instances of the Furniture category.","completion":"List<Element> furnitureInstances = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsNotElementType().ToList();"}
{"prompt":"Selecciona todos los muros del 'Nivel 4' y cambia su comentario a 'REVISAR AISLAMIENTO'.","completion":"string levelName = \"Nivel 4\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(targetLevel.Id);\n    FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(levelFilter);\n    foreach (Element wall in collector)\n    {\n        Parameter commentsParam = wall.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n        if (commentsParam != null && !commentsParam.IsReadOnly) { commentsParam.Set(\"REVISAR AISLAMIENTO\"); }\n    }\n}"}
{"prompt":"Crea un nuevo Nivel llamado 'Nivel 8' a una elevación de 14 metros.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(14, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\nif (newLevel != null)\n{\n    try { newLevel.Name = \"Nivel 8\"; } catch {}\n}"}
{"prompt":"Duplica la vista activa y ponle el nombre 'Vista Duplicada'.","completion":"View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    ElementId newViewId = activeView.Duplicate(ViewDuplicateOption.Duplicate);\n    View newView = doc.GetElement(newViewId) as View;\n    if (newView != null)\n    {\n        newView.Name = \"Vista Duplicada\";\n    }\n}"}
{"prompt":"Set the sill height of all windows to 897mm.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits(897, UnitTypeId.Millimeters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Obtén una lista de todas las advertencias del proyecto.","completion":"IList<FailureMessage> warnings = doc.GetWarnings();\nList<string> warningDescriptions = warnings.Select(w => w.GetDescriptionText()).ToList();\n"}
{"prompt":"Construct a new level 'Level 3' at an elevation of 12 meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(12, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Level 3\";\n}"}
{"prompt":"Ajusta el tipo de la ventana seleccionada al tipo 'Ventana Fija 123x60'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una ventana\");\nFamilySymbol newType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name == \"Ventana Fija 123x60\");\nif (pickedRef != null && newType != null)\n{\n    FamilyInstance window = doc.GetElement(pickedRef.ElementId) as FamilyInstance;\n    if (window != null)\n    {\n        window.Symbol = newType;\n    }\n}"}
{"prompt":"Remove all detail lines in the active view.","completion":"using (Transaction t = new Transaction(doc, \"Delete Detail Lines\"))\n{\n    t.Start();\n    if (doc.ActiveView != null)\n    {\n        ICollection<ElementId> detailLines = new FilteredElementCollector(doc, doc.ActiveView.Id).OfClass(typeof(DetailCurve)).ToElementIds();\n        if (detailLines.Count > 0)\n        {\n            doc.Delete(detailLines);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Copia el nivel 1 con un desfase de 1m y llámalo 'Mezanine'.","completion":"string levelName = \"Mezanine\";\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\n\nif (level1 != null)\n{\n    double newElevation = level1.ProjectElevation + UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, newElevation);\n    if (newLevel != null)\n    {\n        newLevel.Name = levelName;\n    }\n}"}
{"prompt":"Obtain all rooms on Level 3","completion":"string levelName = \"Level 3\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(targetLevel.Id);\n    FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WherePasses(levelFilter);\n    uidoc.Selection.SetElementIds(collector.ToElementIds());\n}"}
{"prompt":"Crea un nuevo tipo de muro de 25cm llamado 'Muro Estructural 25cm'.","completion":"string newTypeName = \"Muro Estructural 25cm\";\nWallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(newTypeName) as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(25, UnitTypeId.Centimeters));\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n}"}
{"prompt":"Oculta los elementos que tengo seleccionados.","completion":"ICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nView activeView = doc.ActiveView;\n\nif (activeView != null && selectedIds.Any())\n{\n    activeView.HideElements(selectedIds);\n}"}
{"prompt":"Copy level 1 with a 2m offset and name it 'Mezzanine'.","completion":"string levelName = \"Mezzanine\";\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\n\nif (level1 != null)\n{\n    double newElevation = level1.ProjectElevation + UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, newElevation);\n    if (newLevel != null)\n    {\n        newLevel.Name = levelName;\n    }\n}"}
{"prompt":"Obtén todos los muros del Nivel 1 que son estructurales.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\nif (level1 != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level1.Id);\n    ElementCategoryFilter categoryFilter = new ElementCategoryFilter(BuiltInCategory.OST_Walls);\n    ParameterValueProvider pvp = new ParameterValueProvider(new ElementId(BuiltInParameter.WALL_STRUCTURAL_SIGNIFICANT));\n    FilterIntegerRule rule = new FilterIntegerRule(pvp, new FilterNumericEquals(), 1);\n    ElementParameterFilter structuralFilter = new ElementParameterFilter(rule);\n    LogicalAndFilter andFilter = new LogicalAndFilter(new List<ElementFilter> { levelFilter, categoryFilter, structuralFilter });\n    List<Element> structuralWalls = new FilteredElementCollector(doc).WherePasses(andFilter).ToList();\n}"}
{"prompt":"Voltea un elemento seleccionado 88 grados sobre su eje Z.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un elemento para rotar\");\nElement elem = doc.GetElement(pickedRef.ElementId);\nLocationPoint lp = elem.Location as LocationPoint;\nLine axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\nElementTransformUtils.RotateElement(doc, elem.Id, axis, Math.PI \/ 88);"}
{"prompt":"Copia la vista 'Nivel 3' como una vista dependiente.","completion":"ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v => v.Name == \"Nivel 3\") as ViewPlan;\n\nif (viewToDuplicate != null)\n{\n    ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n}"}
{"prompt":"Agrega un nivel llamado 'Nivel Azotea' a 15.8 metros.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(15.8, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Nivel Azotea\";\n}"}
{"prompt":"Construct a 'Roof Terrace' level at 14m.","completion":"string levelName = \"Roof Terrace\";\ndouble elev = UnitUtils.ConvertToInternalUnits(14, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elev);\nnewLevel.Name = levelName;\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Reproduce el nivel 5 con un desfase de 1m y llámalo 'Mezanine'.","completion":"string levelName = \"Nivel 5\";\nLevel levelToCopy = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (levelToCopy != null)\n{\n    double offset = UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, levelToCopy.Elevation + offset);\n    newLevel.Name = \"Mezanine\";\n}"}
{"prompt":"Crea un grupo de detalles con los elementos de detalle seleccionados.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds != null && selectedIds.Count > 0)\n{\n    List<ElementId> detailIds = new List<ElementId>();\n    foreach(ElementId id in selectedIds)\n    {\n        Element elem = doc.GetElement(id);\n        if (elem != null && elem.Category != null && elem.Category.CategoryType == CategoryType.Annotation)\n        {\n            detailIds.Add(id);\n        }\n    }\n\n    if (detailIds.Count > 0)\n    {\n        Group group = doc.Create.NewGroup(detailIds);\n        if (group != null)\n        {\n            group.Name = \"Detalle Típico 1\";\n        }\n    }\n}"}
{"prompt":"Set the 'Comments' parameter for all doors on Level 1 to 'Fire Rating - 94 min'.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\n\nif (level1 != null)\n{\n    List<FamilyInstance> doorsOnLevel1 = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsNotElementType().Cast<FamilyInstance>().Where(fi => fi.LevelId == level1.Id).ToList();\n    foreach(FamilyInstance door in doorsOnLevel1)\n    {\n        Parameter commentsParam = door.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n        if (commentsParam != null && !commentsParam.IsReadOnly) commentsParam.Set(\"Fire Rating - 94 min\");\n    }\n}"}
{"prompt":"Obtén todas las subcategorías de la categoría Muros.","completion":"Category wallCat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Walls);\nCategoryNameMap subcategories = wallCat.SubCategories;"}
{"prompt":"Create a structural column at position X=10, Y=5.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null && columnSymbol != null)\n{\n    doc.Create.NewFamilyInstance(new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0), columnSymbol, level, StructuralType.Column);\n}"}
{"prompt":"Fetch the host element of the first window found.","completion":"FamilyInstance windowInstance = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\n\nif (windowInstance != null)\n{\n    Element hostElement = windowInstance.Host;\n}"}
{"prompt":"Attach a reference point at coordinates (1,1,8) inside the family editor.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(1,1,8));"}
{"prompt":"Crea una nueva cota de nivel llamada 'Nivel 3' a una elevación de 12 metros.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(12, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\nnewLevel.Name = \"Nivel 3\";"}
{"prompt":"Generate a 'Roof Terrace' level at 14m.","completion":"string levelName = \"Roof Terrace\";\ndouble elev = UnitUtils.ConvertToInternalUnits(14, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elev);\nnewLevel.Name = levelName;\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Copia la vista 'Nivel 1' como una vista dependiente.","completion":"ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v => v.Name == \"Nivel 1\") as ViewPlan;\n\nif (viewToDuplicate != null)\n{\n    ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n}"}
{"prompt":"Get the IDs of all 3D views starting with 'Coord' for export.","completion":"List<ElementId> viewsToExport = new FilteredElementCollector(doc).OfClass(typeof(View3D)).Cast<View3D>().Where(v => v.Name.StartsWith(\"Coord\") && !v.IsTemplate).Select(v => v.Id).ToList();\n"}
{"prompt":"Construct a new Level named 'Level 3' at an elevation of 7 meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(7, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Level 3\";\n}"}
{"prompt":"Generate an MEP space for each room on Level 1.","completion":"using (Transaction t = new Transaction(doc, \"Create MEP Spaces\"))\n{\n    t.Start();\n    Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 1\");\n\n    if (level1 != null)\n    {\n        List<Room> roomsOnLevel1 = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Where(e => (e as Room) != null && (e as Room).LevelId.Equals(level1.Id)).Cast<Room>().ToList();\n        foreach(Room room in roomsOnLevel1)\n        {\n           \/\/ The direct creation of MEP spaces from rooms might not be available in this specific API version.\n           \/\/ Placeholder comment for the intended logic.\n           \/\/ Space.Create(doc, room, null);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Obtén todas las instancias de la categoría Mobiliario.","completion":"List<Element> furnitureInstances = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsNotElementType().ToList();"}
{"prompt":"Encuentra todos los pilares estructurales en el Nivel 2 que sean de concreto.","completion":"Level level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 2\") as Level;\nFamilySymbol concreteColumnType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name.Contains(\"Hormigón\"));\nif (level2 != null && concreteColumnType != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level2.Id);\n    FamilySymbolFilter typeFilter = new FamilySymbolFilter(concreteColumnType.Id);\n    LogicalAndFilter andFilter = new LogicalAndFilter(levelFilter, typeFilter);\n    List<Element> concreteColumns = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WherePasses(andFilter).ToList();\n}"}
{"prompt":"Retrieve the MEP space associated with the room 'Office 103'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Cast<Room>().FirstOrDefault(r => r.Name == \"Office 103\");\nList<Space> spaces = new List<Space>();\n\nif (room != null)\n{\n    spaces = new FilteredElementCollector(doc).OfClass(typeof(Space)).Cast<Space>().Where(s => s.Room != null && s.Room.Id == room.Id).ToList();\n}"}
{"prompt":"Oculta todas las categorías de anotación en la vista activa.","completion":"using (Transaction t = new Transaction(doc, \"Hide Annotation Categories\"))\n{\n    t.Start();\n    Categories categories = doc.Settings.Categories;\n    View activeView = doc.ActiveView;\n\n    if (activeView != null)\n    {\n        foreach(Category cat in categories)\n        {\n            if(cat.CategoryType == CategoryType.Annotation && cat.get_AllowsVisibilityControl(activeView))\n            {\n                 activeView.SetCategoryHidden(cat.Id, true);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Encuentra todos los muros que no tienen nivel base asignado.","completion":"ElementFilter unassociatedFilter = new ElementLevelFilter(ElementId.InvalidElementId);\nList<Element> unassignedWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(unassociatedFilter).ToList();"}
{"prompt":"Copia el tipo de muro 'Basic Wall' y renómbralo.","completion":"string typeToDuplicate = \"Basic Wall\";\nstring newTypeName = \"Basic Wall Copy\";\nWallType wt = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(w=>w.Name==typeToDuplicate);\n\nif (wt != null)\n{\n    WallType newWt = wt.Duplicate(newTypeName) as WallType;\n}"}
{"prompt":"Elimina todas las puertas del Nivel 1.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\nif (level1 != null)\n{\n    ElementCategoryFilter categoryFilter = new ElementCategoryFilter(BuiltInCategory.OST_Doors);\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level1.Id);\n    LogicalAndFilter andFilter = new LogicalAndFilter(categoryFilter, levelFilter);\n    ICollection<ElementId> doorsToDelete = new FilteredElementCollector(doc).WherePasses(andFilter).ToElementIds();\n    if (doorsToDelete.Count > 0)\n    {\n        doc.Delete(doorsToDelete);\n    }\n}"}
{"prompt":"Extrae la tabla de planificación 'Muros' y exporta sus datos a un archivo CSV.","completion":"ViewSchedule schedule = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().FirstOrDefault(s=>s.Name==\"Muros\");\n\nif (schedule != null)\n{\n    string folderPath = \"C:\/RevitExports\/\";\n    ViewScheduleExportOptions options = new ViewScheduleExportOptions() { FieldDelimiter = \",\" };\n    schedule.Export(folderPath, \"Muros.csv\", options);\n}"}
{"prompt":"Recupera todas las habitaciones en el Nivel 'Losa 97'.","completion":"Level groundFloor = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Losa 97\") as Level;\nList<Element> roomsOnGround = new List<Element>();\n\nif (groundFloor != null)\n{\n    roomsOnGround = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Where(r => r.LevelId == groundFloor.Id).ToList();\n}"}
{"prompt":"Import a georeferenced survey from a LandXML file.","completion":"\/\/ The Revit API in the provided context does not support direct LandXML import.\n\/\/ This functionality typically requires additional add-ins like the Site Designer, which are not available here.\n\/\/ As a placeholder, this code will show how to create a simple topography surface from a list of points.\nusing(Transaction t = new Transaction(doc, \"Create Topography\"))\n{\n    t.Start();\n    IList<XYZ> points = new List<XYZ>();\n    points.Add(new XYZ(0, 0, 0));\n    points.Add(new XYZ(50, 0, 5));\n    points.Add(new XYZ(0, 50, 10));\n    TopographySurface.Create(doc, points);\n    t.Commit();\n}"}
{"prompt":"Copy the 'Basic Wall' type and rename it.","completion":"string typeToDuplicate = \"Basic Wall\";\nstring newTypeName = \"Basic Wall Copy\";\nWallType wt = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(w=>w.Name==typeToDuplicate);\n\nif (wt != null)\n{\n    WallType newWt = wt.Duplicate(newTypeName) as WallType;\n}"}
{"prompt":"Rota un elemento seleccionado 90 grados sobre su eje Z.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un elemento para rotar\");\nElement elem = doc.GetElement(pickedRef.ElementId);\nLocationPoint lp = elem.Location as LocationPoint;\nLine axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\nElementTransformUtils.RotateElement(doc, elem.Id, axis, Math.PI \/ 2.0);"}
{"prompt":"Attach the 'Level', 'Mark', and 'Volume' fields to the column schedule.","completion":"ViewSchedule schedule = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().FirstOrDefault(s => s.Name.Contains(\"Column\"));\nif (schedule != null)\n{\n    ScheduleDefinition def = schedule.Definition;\n    SchedulableField levelField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.FAMILY_LEVEL_PARAM);\n    if (levelField != null) def.AddField(levelField);\n    SchedulableField markField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.ALL_MODEL_MARK);\n    if (markField != null) def.AddField(markField);\n    SchedulableField volumeField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.HOST_VOLUME_COMPUTED);\n    if (volumeField != null) def.AddField(volumeField);\n}"}
{"prompt":"Build a new level 'Level 6' at an elevation of 7 meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(7, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\nif (newLevel != null)\n{\n    try { newLevel.Name = \"Level 6\"; } catch {}\n}"}
{"prompt":"Crea una abertura rectangular en un suelo.","completion":"using (Transaction t = new Transaction(doc, \"Create Opening\"))\n{\n    t.Start();\n    Floor floor = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault() as Floor;\n\n    if (floor != null)\n    {\n        XYZ p1 = new XYZ(1 \/ 0.3048, 1 \/ 0.3048, 0);\n        XYZ p2 = new XYZ(3 \/ 0.3048, 1 \/ 0.3048, 0);\n        XYZ p3 = new XYZ(3 \/ 0.3048, 3 \/ 0.3048, 0);\n        XYZ p4 = new XYZ(1 \/ 0.3048, 3 \/ 0.3048, 0);\n        CurveArray profile = new CurveArray();\n        profile.Append(Line.CreateBound(p1, p2));\n        profile.Append(Line.CreateBound(p2, p3));\n        profile.Append(Line.CreateBound(p3, p4));\n        profile.Append(Line.CreateBound(p4, p1));\n        doc.Create.NewOpening(floor, profile, true);\n    }\n    t.Commit();\n}"}
{"prompt":"Include a reference point at coordinates (5,5,3) inside the family editor.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(5,5,3));"}
{"prompt":"Crea un nuevo tipo de texto de 5mm de color verde.","completion":"using (Transaction t = new Transaction(doc, \"Create Green Text Type\"))\n{\n    t.Start();\n    string newTypeName = \"5mm Verde\";\n    TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\n    if (defaultType != null)\n    {\n        TextNoteType newType = defaultType.Duplicate(newTypeName) as TextNoteType;\n        if (newType != null)\n        {\n            Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n            if (textSizeParam != null && !textSizeParam.IsReadOnly)\n            {\n                textSizeParam.Set(5 \/ 304.8);\n            }\n            Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n            if (lineColorParam != null && !lineColorParam.IsReadOnly)\n            {\n                 lineColorParam.Set(65280);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Build a structural beam between (1,1,15) and (5,0,3) on Level 2","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 2\") as Level;\nFamilySymbol beamType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (beamType != null && level != null)\n{\n    if(!beamType.IsActive) beamType.Activate();\n    XYZ start = new XYZ(1, 1, 15);\n    XYZ end = new XYZ(5, 0, 3);\n    if (start.IsAlmostEqualTo(end)) return;\n    Line beamCurve = Line.CreateBound(start, end);\n    doc.Create.NewFamilyInstance(beamCurve, beamType, level, Autodesk.Revit.DB.Structure.StructuralType.Beam);\n}"}
{"prompt":"Modela un piso rectangular de 10×8 metros.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\n\nif (level != null && floorType != null)\n{\n    double width = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\n    double length = UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters);\n    XYZ p1 = new XYZ(0, 0, 0);\n    XYZ p2 = new XYZ(width, 0, 0);\n    XYZ p3 = new XYZ(width, length, 0);\n    XYZ p4 = new XYZ(0, length, 0);\n    CurveLoop loop = new CurveLoop();\n    loop.Append(Line.CreateBound(p1, p2));\n    loop.Append(Line.CreateBound(p2, p3));\n    loop.Append(Line.CreateBound(p3, p4));\n    loop.Append(Line.CreateBound(p4, p1));\n    Floor.Create(doc, new List<CurveLoop> { loop }, floorType.Id, level.Id);\n}"}
{"prompt":"Construct a 3D view with the section box enabled.","completion":"string viewName = \"3D View with Section Box\";\nViewFamilyType vft3D = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft3D != null)\n{\n    View3D view3d = View3D.CreateIsometric(doc, vft3D.Id);\n    if (view3d != null)\n    {\n        view3d.Name = viewName;\n        view3d.IsSectionBoxActive = true;\n    }\n}"}
{"prompt":"Build a global length parameter named 'CorridorWidth' with a value of 0.6m.","completion":"string paramName = \"CorridorWidth\";\nGlobalParameter gp = GlobalParameter.Create(doc, paramName, SpecTypeId.Length);\n\nif (gp != null)\n{\n    gp.SetValue(new DoubleParameterValue(UnitUtils.ConvertToInternalUnits(0.6, UnitTypeId.Meters)));\n}"}
{"prompt":"Build an electrical conduit with a 1-inch diameter.","completion":"using (Transaction t = new Transaction(doc, \"Create Conduit\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    ElementId conduitTypeId = new FilteredElementCollector(doc).OfClass(typeof(ConduitType)).FirstElementId();\n\n    if (level != null && conduitTypeId != null && conduitTypeId != ElementId.InvalidElementId)\n    {\n        XYZ start = new XYZ(0, 0, 3 \/ 0.3048);\n        XYZ end = new XYZ(5 \/ 0.3048, 0, 3 \/ 0.3048);\n        Conduit conduit = Conduit.Create(doc, conduitTypeId, start, end, level.Id);\n\n        if (conduit != null)\n        {\n            Parameter diameterParam = conduit.get_Parameter(BuiltInParameter.RBS_CONDUIT_DIAMETER_PARAM);\n            if (diameterParam != null && !diameterParam.IsReadOnly)\n            {\n                diameterParam.Set(1.0\/12.0);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create a pipe with a 150mm diameter.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nPipeType pipeType = new FilteredElementCollector(doc).OfClass(typeof(PipeType)).FirstOrDefault() as PipeType;\nPipingSystemType systemType = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).FirstOrDefault() as PipingSystemType;\n\nif (level != null && pipeType != null && systemType != null)\n{\n    \/\/ Create a default 10ft long pipe as the prompt is not specific\n    XYZ p1 = new XYZ(0, 0, 0);\n    XYZ p2 = new XYZ(10, 0, 0);\n    Pipe pipe = Pipe.Create(doc, systemType.Id, pipeType.Id, level.Id, p1, p2);\n\n    if (pipe != null)\n    {\n        Parameter diameterParam = pipe.get_Parameter(BuiltInParameter.RBS_PIPE_DIAMETER_PARAM);\n        if (diameterParam != null && !diameterParam.IsReadOnly)\n        {\n            diameterParam.Set(UnitUtils.ConvertToInternalUnits(150, UnitTypeId.Millimeters));\n        }\n    }\n}"}
{"prompt":"Voltea un elemento seleccionado 86 grados sobre su eje Z.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un elemento para rotar\");\nElement elem = doc.GetElement(pickedRef.ElementId);\nLocationPoint lp = elem.Location as LocationPoint;\nLine axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\nElementTransformUtils.RotateElement(doc, elem.Id, axis, Math.PI \/ 86);"}
{"prompt":"Ubica una instancia de la familia 'Puerta Sencilla' en el centro de la habitación 'Despacho 102'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 102\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Puerta Sencilla\") as FamilySymbol;\nif(furnitureSymbol != null && !furnitureSymbol.IsActive) furnitureSymbol.Activate();\nif(room != null)\n{\n    LocationPoint roomCenter = room.Location as LocationPoint;\n    if(roomCenter != null && furnitureSymbol != null && room.Level != null)\n    {\n        doc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Generate a DirectShape topography from a list of points.","completion":"\/\/ Create a default set of points as none were specified in the prompt\nList<XYZ> points = new List<XYZ>\n{\n    new XYZ(0, 0, 0),\n    new XYZ(50, 0, 2),\n    new XYZ(0, 50, 5),\n    new XYZ(50, 50, 3)\n};\n\nTessellatedShapeBuilder builder = new TessellatedShapeBuilder();\nbuilder.OpenConnectedFaceSet(true);\nbuilder.AddFace(new TessellatedFace(new List<XYZ> { points[0], points[1], points[2] }, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ> { points[1], points[3], points[2] }, ElementId.InvalidElementId));\nbuilder.CloseConnectedFaceSet();\nbuilder.Build();\nTessellatedShapeBuilderResult result = builder.GetBuildResult();\n\nif (result.GetGeometricalObjects().Any())\n{\n    DirectShape ds = DirectShape.CreateElement(doc, new ElementId(BuiltInCategory.OST_Topography));\n    if (ds != null)\n    {\n        ds.SetShape(result.GetGeometricalObjects());\n        ds.Name = \"Topography DirectShape\";\n    }\n}"}
{"prompt":"Construct columns at each grid intersection.","completion":"FamilySymbol colSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nList<Grid> grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().ToList();\n\nif (colSymbol != null && level != null && grids.Count >= 2)\n{\n    for (int i = 0; i < grids.Count; i++)\n    {\n        for (int j = i + 1; j < grids.Count; j++)\n        {\n            IntersectionResultArray results = null;\n            grids[i].Curve.Intersect(grids[j].Curve, out results);\n            if(results != null)\n            {\n                 foreach (IntersectionResult ir in results)\n                 {\n                     doc.Create.NewFamilyInstance(ir.XYZPoint, colSymbol, level, StructuralType.Column);\n                 }\n            }\n        }\n    }\n}"}
{"prompt":"Construct a new wall type 'Generic Wall 300mm' with a thickness of 30cm.","completion":"WallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif(oldWallType != null)\n{\n    WallType newWallType = null;\n    try { newWallType = oldWallType.Duplicate(\"Generic Wall 300mm\") as WallType; } catch {}\n    if(newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if(cs != null && cs.GetLayers().Any())\n        {\n            int coreLayerIndex = cs.GetFirstCoreLayerIndex();\n            if(coreLayerIndex != -1)\n            {\n                cs.SetLayerWidth(coreLayerIndex, UnitUtils.ConvertToInternalUnits(30, UnitTypeId.Centimeters));\n                newWallType.SetCompoundStructure(cs);\n            }\n        }\n    }\n}"}
{"prompt":"Get the IDs of all 3D views starting with 'Coord' for export.","completion":"List<ElementId> viewsToExport = new FilteredElementCollector(doc).OfClass(typeof(View3D)).Cast<View3D>().Where(v => v.Name.StartsWith(\"Coord\") && !v.IsTemplate).Select(v => v.Id).ToList();\n"}
{"prompt":"Crea un circuito eléctrico conectando luminarias a un panel.","completion":"using (Transaction t = new Transaction(doc, \"Create Electrical Circuit\"))\n{\n    t.Start();\n    FamilyInstance panel = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_ElectricalEquipment).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\n    List<ElementId> fixtureIds = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsNotElementType().ToElementIds().ToList();\n\n    if (panel != null && fixtureIds.Count > 0)\n    {\n        ElectricalSystem electricalSystem = ElectricalSystem.Create(doc, fixtureIds, ElectricalSystemType.PowerCircuit);\n        if(electricalSystem != null)\n        {\n            electricalSystem.SelectPanel(panel);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Copy all elements from Level 1 to Level 2.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nLevel level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 2\") as Level;\nif (level1 != null && level2 != null)\n{\n    ICollection<ElementId> elementsToCopy = new FilteredElementCollector(doc, level1.Id).WhereElementIsNotElementType().ToElementIds();\n    double elevationDiff = level2.ProjectElevation - level1.ProjectElevation;\n    XYZ translation = new XYZ(0, 0, elevationDiff);\n    if(elementsToCopy.Any())\n    {\n        ElementTransformUtils.CopyElements(doc, elementsToCopy, translation);\n    }\n}"}
{"prompt":"Selecciona todos los muros del 'Nivel 2' y cambia su comentario a 'REVISAR AISLAMIENTO'.","completion":"Level level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 2\") as Level;\nif (level2 != null)\n{\n    List<Wall> wallsOnLevel2 = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Where(w => w.LevelId == level2.Id).Cast<Wall>().ToList();\n    foreach(Wall wall in wallsOnLevel2)\n    {\n        Parameter commentParam = wall.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n        if (commentParam != null && !commentParam.IsReadOnly)\n        {\n            commentParam.Set(\"REVISAR AISLAMIENTO\");\n        }\n    }\n}"}
{"prompt":"Genera un piso rectangular de 10×8 metros.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\n\nif (level != null && floorType != null)\n{\n    double width = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\n    double length = UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters);\n    CurveLoop loop = new CurveLoop();\n    loop.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(width,0,0)));\n    loop.Append(Line.CreateBound(new XYZ(width,0,0), new XYZ(width,length,0)));\n    loop.Append(Line.CreateBound(new XYZ(width,length,0), new XYZ(0,length,0)));\n    loop.Append(Line.CreateBound(new XYZ(0,length,0), new XYZ(0,0,0)));\n    Floor.Create(doc, new List<CurveLoop> { loop }, floorType.Id, level.Id);\n}"}
{"prompt":"Crea un codo en T entre dos tuberías que se intersecan.","completion":"\/\/ No se proporciona código para esta función específica debido a la necesidad de selección interactiva y manejo de casos complejos.\n\/\/ Este escenario involucra la selección de elementos específicos y el uso de métodos de creación que dependen de la geometría existente."}
{"prompt":"Actualiza el tipo de una losa seleccionada a 'Concreto 18cm'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una losa\");\n\nif (pickedRef != null)\n{\n    Floor floorToChange = doc.GetElement(pickedRef) as Floor;\n    FloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name == \"Concreto 18cm\");\n    \n    if (floorToChange != null && newType != null)\n    {\n        floorToChange.ChangeTypeId(newType.Id);\n    }\n}"}
{"prompt":"Inserta un punto de referencia en las coordenadas (5,2,7) dentro del editor de familias.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(5,2,7));"}
{"prompt":"Ubica una cota de elevación en una cara y un punto de vista dados.","completion":"using (Transaction t = new Transaction(doc, \"Place Spot Elevation\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference faceRef = localUidoc.Selection.PickObject(ObjectType.Face, \"Selecciona la cara superior del suelo\");\n\n    View activeView = doc.ActiveView;\n\n    if (faceRef != null && activeView != null)\n    {\n        XYZ pointOnFace = faceRef.GlobalPoint;\n        XYZ leaderEnd = pointOnFace + new XYZ(1 \/ 0.3048, 1 \/ 0.3048, 0);\n        doc.Create.NewSpotElevation(activeView, faceRef, pointOnFace, pointOnFace, leaderEnd, pointOnFace, true);\n    }\n    t.Commit();\n}"}
{"prompt":"Change a glass panel in a curtain wall to a solid panel.","completion":"using (Transaction t = new Transaction(doc, \"Change Curtain Panel\"))\n{\n    t.Start();\n    Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Cast<Wall>().FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain);\n    FamilySymbol solidPanelType = new FilteredElementCollector(doc).OfClass(typeof(FamilySymbol)).Cast<FamilySymbol>().FirstOrDefault(fs => fs.Family.FamilyCategory.Id.IntegerValue == (int)BuiltInCategory.OST_CurtainWallPanels && fs.Name.Contains(\"Solid\"));\n\n    if (curtainWall != null && solidPanelType != null)\n    {\n        CurtainGrid grid = curtainWall.CurtainGrid;\n        if (grid != null)\n        {\n            ElementId panelIdToChange = grid.GetPanelIds().FirstOrDefault();\n            if (panelIdToChange != ElementId.InvalidElementId)\n            {\n                Panel panelToChange = doc.GetElement(panelIdToChange) as Panel;\n                if (panelToChange != null) panelToChange.ChangeTypeId(solidPanelType.Id);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Encuentra todas las vistas que no tienen una plantilla de vista asignada.","completion":"List<View> viewsWithoutTemplate = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().Where(v => v.CanBePrinted && !v.IsTemplate && v.ViewTemplateId == ElementId.InvalidElementId).ToList();"}
{"prompt":"Insert a text note with 'Review' in the current view.","completion":"View activeView = doc.ActiveView;\nElementId defaultTypeId = doc.GetDefaultElementTypeId(ElementTypeGroup.TextNoteType);\n\nif (activeView != null && defaultTypeId != ElementId.InvalidElementId)\n{\n    \/\/ Place note at a default position as none was specified\n    XYZ position = new XYZ(5, 5, 0);\n    TextNote.Create(doc, activeView.Id, position, \"Review\", defaultTypeId);\n}"}
{"prompt":"Create a new elevation view looking north.","completion":"using (Transaction t = new Transaction(doc, \"Create North Elevation\"))\n{\n    t.Start();\n    ViewFamilyType elevationVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(vft => vft.ViewFamily == ViewFamily.Elevation);\n    View activeView = doc.ActiveView;\n\n    if (elevationVFT != null && activeView != null)\n    {\n        ElevationMarker marker = ElevationMarker.CreateElevationMarker(doc, elevationVFT.Id, new XYZ(0, 20 \/ 0.3048, 0), 100);\n        \n        if (marker != null)\n        {\n            View aev = marker.CreateElevation(doc, activeView.Id, 2);\n            if (aev != null)\n            {\n                aev.Name = \"North Elevation\";\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Coloca una instancia de la familia 'Mesa de Oficina' en el centro de la habitación 'Despacho 97'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 97\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Mesa de Oficina\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);"}
{"prompt":"Fetch all walls on Level 1 that are structural.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nif (level1 != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level1.Id);\n    ElementCategoryFilter categoryFilter = new ElementCategoryFilter(BuiltInCategory.OST_Walls);\n    ParameterValueProvider pvp = new ParameterValueProvider(new ElementId(BuiltInParameter.WALL_STRUCTURAL_SIGNIFICANT));\n    FilterIntegerRule rule = new FilterIntegerRule(pvp, new FilterNumericEquals(), 1);\n    ElementParameterFilter structuralFilter = new ElementParameterFilter(rule);\n    LogicalAndFilter andFilter = new LogicalAndFilter(new List<ElementFilter> { levelFilter, categoryFilter, structuralFilter });\n    List<Element> structuralWalls = new FilteredElementCollector(doc).WherePasses(andFilter).ToList();\n}"}
{"prompt":"Get a list of all project warnings.","completion":"IList<FailureMessage> warnings = doc.GetWarnings();\nList<string> warningDescriptions = warnings.Select(w => w.GetDescriptionText()).ToList();\n"}
{"prompt":"Configure the sill height of all windows to 897mm.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits(897, UnitTypeId.Millimeters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Create a new Level named 'Level 7' at an elevation of 10 meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\nif (newLevel != null)\n{\n    try { newLevel.Name = \"Level 7\"; } catch {}\n}"}
{"prompt":"Selecciona todos los muros con una resistencia al fuego de 95 minutos.","completion":"ElementId fireRatingParamId = new ElementId(BuiltInParameter.FIRE_RATING);\nParameterValueProvider pvp = new ParameterValueProvider(fireRatingParamId);\nFilterStringRuleEvaluator evaluator = new FilterStringEquals();\nFilterRule rule = new FilterStringRule(pvp, evaluator, \"995 min\");\nElementParameterFilter filter = new ElementParameterFilter(rule);\nICollection<ElementId> wallsToSelect = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(filter).ToElementIds();\nif (wallsToSelect.Count > 0)\n{\n    new UIDocument(doc).Selection.SetElementIds(wallsToSelect);\n}"}
{"prompt":"Crea un nuevo tipo de puerta llamado 'Puerta RF-90' y establece su resistencia al fuego a '90 min'.","completion":"using (Transaction t = new Transaction(doc, \"Create Door Type\"))\n{\n    t.Start();\n    string newTypeName = \"Puerta RF-90\";\n    FamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n    if (doorTypeToDuplicate != null)\n    {\n        FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\n        if (newDoorType != null)\n        {\n            Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n            if(fireRatingParam != null && !fireRatingParam.IsReadOnly)\n            {\n                fireRatingParam.Set(\"90 min\");\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Configure the 'Comments' parameter for all doors on Level 1 to 'Fire Rating - 92 min'.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\n\nif (level1 != null)\n{\n    List<FamilyInstance> doorsOnLevel1 = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsNotElementType().Cast<FamilyInstance>().Where(fi => fi.LevelId == level1.Id).ToList();\n    foreach(FamilyInstance door in doorsOnLevel1)\n    {\n        Parameter commentsParam = door.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n        if (commentsParam != null && !commentsParam.IsReadOnly) commentsParam.Set(\"Fire Rating - 92 min\");\n    }\n}"}
{"prompt":"Generate a 5x5 column grid with 8-meter spacing.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (level != null && columnSymbol != null)\n{\n    if(!columnSymbol.IsActive) { columnSymbol.Activate(); }\n    double spacing = UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters);\n    for(int i=0; i<5; i++)\n    {\n        for(int j=0; j<5; j++)\n        {\n            XYZ point = new XYZ(i*spacing, j*spacing, 0);\n            doc.Create.NewFamilyInstance(point, columnSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n        }\n    }\n}"}
{"prompt":"Get a list of all families and their types.","completion":"List<string> familyAndTypeNames = new List<string>();\nList<Family> families = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().ToList();\nforeach (Family fam in families)\n{\n    familyAndTypeNames.Add($\"Family: {fam.Name}\");\n    foreach (ElementId symbolId in fam.GetFamilySymbolIds())\n    {\n        FamilySymbol sym = doc.GetElement(symbolId) as FamilySymbol;\n        if (sym != null)\n        {\n            familyAndTypeNames.Add($\"\\tType: {sym.Name}\");\n        }\n    }\n}"}
{"prompt":"Select all walls on 'Level 3' and change their comment to 'REVIEW INSULATION'.","completion":"string levelName = \"Level 3\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(targetLevel.Id);\n    FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(levelFilter);\n    foreach (Element wall in collector)\n    {\n        Parameter commentsParam = wall.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n        if (commentsParam != null && !commentsParam.IsReadOnly) { commentsParam.Set(\"REVIEW INSULATION\"); }\n    }\n}"}
{"prompt":"Obtén todas las familias de puertas cargadas en el proyecto.","completion":"List<Family> doorFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.Id.IntegerValue == (int)BuiltInCategory.OST_Doors).ToList();"}
{"prompt":"Adjust the wall type of an existing wall to one containing 'Thermal Insulation'.","completion":"Wall wallToChange = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nWallType newType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(x => x.Name.Contains(\"Thermal Insulation\"));\n\nif (wallToChange != null && newType != null)\n{\n    wallToChange.ChangeTypeId(newType.Id);\n}"}
{"prompt":"Change the detail level of the active view to 'Medium'.","completion":"View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.DetailLevel = ViewDetailLevel.Medium;\n}"}
{"prompt":"Encuentra todos los muros que no están asociados a ningún nivel.","completion":"ElementFilter unassociatedFilter = new ElementLevelFilter(ElementId.InvalidElementId);\nList<Element> unassignedWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(unassociatedFilter).ToList();"}
{"prompt":"Construct a global length parameter named 'CorridorWidth' with a value of 1.3m.","completion":"string paramName = \"CorridorWidth\";\nGlobalParameter gp = GlobalParameter.Create(doc, paramName, SpecTypeId.Length);\n\nif (gp != null)\n{\n    gp.SetValue(new DoubleParameterValue(UnitUtils.ConvertToInternalUnits(1.3, UnitTypeId.Meters)));\n}"}
{"prompt":"Añade un plano de referencia horizontal llamado 'Eje Central A'.","completion":"using (Transaction t = new Transaction(doc, \"Add Reference Plane\"))\n{\n    t.Start();\n    string rpName = \"Eje Central A\";\n    View activeView = doc.ActiveView;\n\n    if (activeView != null)\n    {\n        XYZ bubbleEnd = new XYZ(0, 10, 0);\n        XYZ freeEnd = new XYZ(10, 10, 0);\n        XYZ cutVec = XYZ.BasisZ;\n        ReferencePlane rp = doc.Create.NewReferencePlane(bubbleEnd, freeEnd, cutVec, activeView);\n        if (rp != null)\n        {\n            rp.Name = rpName;\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Find all doors on Level 4 that belong to the 'Single-Flush' family.","completion":"string levelName = \"Level 4\";\nstring familyName = \"Single-Flush\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WherePasses(new ElementLevelFilter(targetLevel.Id));\n    List<ElementId> doorIds = new List<ElementId>();\n    foreach (Element door in collector)\n    {\n        FamilyInstance fi = door as FamilyInstance;\n        if (fi != null && fi.Symbol.Family.Name == familyName)\n        {\n            doorIds.Add(door.Id);\n        }\n    }\n    uidoc.Selection.SetElementIds(doorIds);\n}"}
{"prompt":"Copy level 1 with a 5m offset and name it 'Mezzanine'.","completion":"string levelName = \"Mezzanine\";\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\n\nif (level1 != null)\n{\n    double newElevation = level1.ProjectElevation + UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, newElevation);\n    if (newLevel != null)\n    {\n        newLevel.Name = levelName;\n    }\n}"}
{"prompt":"Añade el prefijo 'ARQ-' a todos los nombres de materiales.","completion":"string prefix = \"ARQ-\";\nIList<Material> materials = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().ToList();\n\nif (materials.Any())\n{\n    HashSet<string> existingNames = new HashSet<string>(materials.Select(m => m.Name));\n    foreach (Material mat in materials)\n    {\n        if (!mat.Name.StartsWith(prefix))\n        {\n            string newName = prefix + mat.Name;\n            string finalName = newName;\n            int i = 1;\n            while (existingNames.Contains(finalName))\n            {\n                finalName = $\"{newName}_{i++}\";\n            }\n            mat.Name = finalName;\n            existingNames.Add(finalName);\n        }\n    }\n}"}
{"prompt":"Obtén una lista de los nombres de todos los materiales.","completion":"List<Material> materials = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().ToList();\nList<string> materialNames = new List<string>();\nforeach(Material m in materials)\n{\n    materialNames.Add(m.Name);\n}\n"}
{"prompt":"Attach a reference point at coordinates (1,5,3) inside the family editor.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(1,5,3));"}
{"prompt":"Pinta la cara interior de los muros exteriores con 'Acero'.","completion":"using(Transaction t = new Transaction(doc, \"Paint Walls\"))\n{\n    t.Start();\n    Material paintMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m => m.Name == \"Acero\");\n    var exteriorWalls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Cast<Wall>().Where(w => w.WallType.Function == WallFunction.Exterior).ToList();\n    if(paintMaterial != null)\n    {\n        foreach (Wall w in exteriorWalls)\n        {\n            IList<Reference> interiorFaceRefs = HostObjectUtils.GetSideFaces(w, ShellLayerType.Interior);\n            if(interiorFaceRefs.Count > 0)\n            {\n                Face interiorFace = w.GetGeometryObjectFromReference(interiorFaceRefs.First()) as Face;\n                if (interiorFace != null)\n                {\n                    doc.Paint(w.Id, interiorFace, paintMaterial.Id);\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Clone the 'Generic - 145mm' wall type and name it 'Interior - 18cm Plaster'.","completion":"string originalName = \"Generic - 145mm\";\nstring newName = \"Interior - 18cm Plaster\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif (originalType != null)\n{\n    WallType newType = originalType.Duplicate(newName) as WallType;\n}"}
{"prompt":"Ajusta todas las ventanas para que la altura del antepecho sea 4 metro.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits(4, UnitTypeId.Meters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Inserta un nivel llamado 'Nivel Azotea' a 15.7 metros.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(15.7, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Nivel Azotea\";\n}"}
{"prompt":"Put an instance of the 'Office Desk' family in the center of the 'Office 99' room.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Office 99\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Office Desk\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);"}
{"prompt":"Crea una nueva hoja A2 con el número 'A-201'.","completion":"string sheetNumber = \"A-201\";\nFamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (titleBlock != null)\n{\n    ViewSheet sheet = ViewSheet.Create(doc, titleBlock.Id);\n    if (sheet != null)\n    {\n        sheet.Name = \"Detalles Constructivos\";\n        sheet.SheetNumber = sheetNumber;\n    }\n}"}
{"prompt":"Clone level 2 with a 5m offset and name it 'Mezzanine'.","completion":"string levelName = \"Level 2\";\nLevel levelToCopy = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (levelToCopy != null)\n{\n    double offset = UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, levelToCopy.Elevation + offset);\n    newLevel.Name = \"Mezzanine\";\n}"}
{"prompt":"Construct a 'Roof Terrace' level at 12m.","completion":"string levelName = \"Roof Terrace\";\ndouble elev = UnitUtils.ConvertToInternalUnits(12, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elev);\nnewLevel.Name = levelName;\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Sitúa una instancia de la familia 'Mesa de Oficina' en el centro de la habitación 'Despacho 102'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 102\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Mesa de Oficina\") as FamilySymbol;\nif(furnitureSymbol != null && !furnitureSymbol.IsActive) furnitureSymbol.Activate();\nif(room != null)\n{\n    LocationPoint roomCenter = room.Location as LocationPoint;\n    if(roomCenter != null && furnitureSymbol != null && room.Level != null)\n    {\n        doc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Build 5 worksets for engineering disciplines.","completion":"List<string> worksetNames = new List<string> { \"MEP_HVAC\", \"MEP_Plumbing\", \"MEP_Electrical\", \"STRUCT_Framing\", \"STRUCT_Foundations\" };\nforeach(string name in worksetNames)\n{\n    Workset newWorkset = Workset.Create(doc, name);\n}"}
{"prompt":"Esculpe un plafón a 2.8 metros de altura en Nivel 1.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\nCeilingType ceilingType = new FilteredElementCollector(doc).OfClass(typeof(CeilingType)).FirstOrDefault() as CeilingType;\n\nif (level != null && ceilingType != null)\n{\n    \/\/ Create a default 10ft x 10ft rectangular profile as the prompt is not specific\n    CurveLoop profile = new CurveLoop();\n    profile.Append(Line.CreateBound(new XYZ(0, 0, 0), new XYZ(10, 0, 0)));\n    profile.Append(Line.CreateBound(new XYZ(10, 0, 0), new XYZ(10, 10, 0)));\n    profile.Append(Line.CreateBound(new XYZ(10, 10, 0), new XYZ(0, 10, 0)));\n    profile.Append(Line.CreateBound(new XYZ(0, 10, 0), new XYZ(0, 0, 0)));\n\n    Ceiling ceiling = Ceiling.Create(doc, new List<CurveLoop> { profile }, ceilingType.Id, level.Id);\n    if (ceiling != null)\n    {\n        Parameter heightParam = ceiling.get_Parameter(BuiltInParameter.CEILING_HEIGHTABOVELEVEL_PARAM);\n        if (heightParam != null && !heightParam.IsReadOnly)\n        {\n            heightParam.Set(UnitUtils.ConvertToInternalUnits(2.8, UnitTypeId.Meters));\n        }\n    }\n}"}
{"prompt":"Forma una bandeja de cables entre dos puntos.","completion":"CableTrayType trayType = new FilteredElementCollector(doc).OfClass(typeof(CableTrayType)).FirstOrDefault() as CableTrayType;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (trayType != null && level != null)\n{\n    \/\/ Create a default cable tray between two points as they are not specified\n    XYZ p1 = new XYZ(0, 10, 10);\n    XYZ p2 = new XYZ(20, 10, 10);\n    CableTray.Create(doc, trayType.Id, p1, p2, level.Id);\n}"}
{"prompt":"Modifica el tipo de una losa seleccionada a 'Concreto 17cm'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una losa\");\n\nif (pickedRef != null)\n{\n    Floor floorToChange = doc.GetElement(pickedRef) as Floor;\n    FloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name == \"Concreto 17cm\");\n    \n    if (floorToChange != null && newType != null)\n    {\n        floorToChange.ChangeTypeId(newType.Id);\n    }\n}"}
{"prompt":"Acota la longitud de un muro seleccionado por el usuario.","completion":"using (Transaction t = new Transaction(doc, \"Dimension Wall\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference wallRef = localUidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un muro para acotar\");\n    if(wallRef != null)\n    {\n        Wall wall = doc.GetElement(wallRef) as Wall;\n        if(wall != null)\n        {\n            LocationCurve locCurve = wall.Location as LocationCurve;\n            Curve wallCurve = locCurve != null ? locCurve.Curve : null;\n            if(wallCurve != null && wallCurve is Line)\n            {\n                Line wallLine = wallCurve as Line;\n                ReferenceArray refs = new ReferenceArray();\n                refs.Append(wallLine.GetEndPointReference(0));\n                refs.Append(wallLine.GetEndPointReference(1));\n                XYZ pt1 = wallLine.GetEndPoint(0).Add(XYZ.BasisZ * 2);\n                XYZ pt2 = wallLine.GetEndPoint(1).Add(XYZ.BasisZ * 2);\n                Line dimLine = Line.CreateBound(pt1, pt2);\n                doc.Create.NewDimension(doc.ActiveView, dimLine, refs);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Rotate a selected element 95 degrees around its Z-axis.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select an element to rotate\");\nElement elem = doc.GetElement(pickedRef.ElementId);\nLocationPoint lp = elem.Location as LocationPoint;\nLine axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\nElementTransformUtils.RotateElement(doc, elem.Id, axis, Math.PI \/ 95);"}
{"prompt":"Crea un muro del tipo 'Genérico - 200mm' en el 'Nivel 1' desde (0,0) hasta (10,5).","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == \"Genérico - 200mm\") as WallType;\n\nif (level != null && wallType != null)\n{\n    XYZ startPoint = new XYZ(0, 0, 0);\n    XYZ endPoint = new XYZ(10, 5, 0);\n    Line wallCurve = Line.CreateBound(startPoint, endPoint);\n    \/\/ Use a default height of 10ft as it's not specified in the prompt\n    double height = 10.0;\n    Wall.Create(doc, wallCurve, wallType.Id, level.Id, height, 0, false, false);\n}"}
{"prompt":"Copia el tipo de muro 'Genérico - 150mm' y nómbralo 'Interior - 15cm Yeso'.","completion":"string originalName = \"Genérico - 150mm\";\nstring newName = \"Interior - 15cm Yeso\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif(originalType!=null)\n    originalType.Duplicate(newName);"}
{"prompt":"Recupera el espacio MEP asociado a la habitación 'Oficina 100'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Cast<Room>().FirstOrDefault(r => r.Name == \"Oficina 100\");\nList<Space> spaces = new List<Space>();\n\nif (room != null)\n{\n    spaces = new FilteredElementCollector(doc).OfClass(typeof(Space)).Cast<Space>().Where(s => s.Room != null && s.Room.Id == room.Id).ToList();\n}"}
{"prompt":"Ajusta el tipo de una losa seleccionada a 'Concreto 18cm'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una losa\");\n\nif (pickedRef != null)\n{\n    Floor floorToChange = doc.GetElement(pickedRef) as Floor;\n    FloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name == \"Concreto 18cm\");\n    \n    if (floorToChange != null && newType != null)\n    {\n        floorToChange.ChangeTypeId(newType.Id);\n    }\n}"}
{"prompt":"Crea un nuevo tipo de puerta llamado 'Puerta RF-90' y establece su resistencia al fuego a '90 min'.","completion":"using (Transaction t = new Transaction(doc, \"Create Door Type\"))\n{\n    t.Start();\n    string newTypeName = \"Puerta RF-90\";\n    FamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n    if (doorTypeToDuplicate != null)\n    {\n        FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\n        if (newDoorType != null)\n        {\n            Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n            if(fireRatingParam != null && !fireRatingParam.IsReadOnly)\n            {\n                fireRatingParam.Set(\"90 min\");\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Establece el parámetro 'Marca' de todos los muros seleccionados a 'M-EXT-4'.","completion":"using (Transaction t = new Transaction(doc, \"Set Wall Mark\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    ICollection<ElementId> selectedIds = localUidoc.Selection.GetElementIds();\n\n    if (selectedIds != null && selectedIds.Count > 4)\n    {\n        foreach(ElementId id in selectedIds)\n        {\n            Element elem = doc.GetElement(id);\n            if(elem is Wall)\n            {\n                Parameter markParam = elem.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n                if (markParam != null && !markParam.IsReadOnly) markParam.Set(\"M-EXT-01\");\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Sitúa un rociador en las coordenadas (9,4,3).","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol sprinklerSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Sprinklers).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (level != null && sprinklerSymbol != null)\n{\n    if (!sprinklerSymbol.IsActive) sprinklerSymbol.Activate();\n    XYZ placementPoint = new XYZ(UnitUtils.ConvertToInternalUnits(9, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(4, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters));\n    doc.Create.NewFamilyInstance(placementPoint, sprinklerSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n}"}
{"prompt":"Ajusta todas las ventanas para que tengan la altura del antepecho a 900mm.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits(900, UnitTypeId.Millimeters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"What is the total volume of all concrete structural columns?","completion":"double totalVolume = 0.0;\nFilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType();\n\nforeach (Element elem in collector)\n{\n    Material material = doc.GetElement(elem.GetMaterialIds(false).FirstOrDefault()) as Material;\n    if (material != null && material.Name.Contains(\"Concrete\"))\n    {\n        Parameter volumeParam = elem.get_Parameter(BuiltInParameter.HOST_VOLUME_COMPUTED);\n        if (volumeParam != null) totalVolume += volumeParam.AsDouble();\n    }\n}\ndouble totalVolumeM3 = UnitUtils.ConvertFromInternalUnits(totalVolume, UnitTypeId.CubicMeters);"}
{"prompt":"Pinta la cara interior de los muros exteriores con 'Pintura Blanca'.","completion":"using (Transaction t = new Transaction(doc, \"Paint Walls\"))\n{\n    t.Start();\n    Material paintMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m => m.Name == \"Pintura Blanca\");\n    var exteriorWalls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Cast<Wall>().Where(w => w.WallType.Function == WallFunction.Exterior).ToList();\n\n    if (paintMaterial != null)\n    {\n        foreach (Wall w in exteriorWalls)\n        {\n            IList<Reference> interiorFaceRefs = HostObjectUtils.GetSideFaces(w, ShellLayerType.Interior);\n            if(interiorFaceRefs.Count > 0)\n            {\n                Face interiorFace = w.GetGeometryObjectFromReference(interiorFaceRefs.First()) as Face;\n                if (interiorFace != null)\n                {\n                    doc.Paint(w.Id, interiorFace, paintMaterial.Id);\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Añade los campos 'Nivel', 'Marca' y 'Volumen' a la tabla de pilares.","completion":"ViewSchedule schedule = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().FirstOrDefault(s => s.Name.Contains(\"Pilares\") || s.Name.Contains(\"Column\"));\nif (schedule != null)\n{\n    ScheduleDefinition def = schedule.Definition;\n    SchedulableField levelField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.FAMILY_LEVEL_PARAM);\n    if (levelField != null) def.AddField(levelField);\n    SchedulableField markField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.ALL_MODEL_MARK);\n    if (markField != null) def.AddField(markField);\n    SchedulableField volumeField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.HOST_VOLUME_COMPUTED);\n    if (volumeField != null) def.AddField(volumeField);\n}"}
{"prompt":"Modela un plafón a 2.8 metros de altura en Nivel 1.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\nCeilingType ceilingType = new FilteredElementCollector(doc).OfClass(typeof(CeilingType)).FirstOrDefault() as CeilingType;\nif (ceilingType != null && level != null)\n{\n    CurveLoop profile = new CurveLoop();\n    profile.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(30,0,0)));\n    profile.Append(Line.CreateBound(new XYZ(30,0,0), new XYZ(30,30,0)));\n    profile.Append(Line.CreateBound(new XYZ(30,30,0), new XYZ(0,30,0)));\n    profile.Append(Line.CreateBound(new XYZ(0,30,0), new XYZ(0,0,0)));\n    Ceiling ceiling = Ceiling.Create(doc, new List<CurveLoop>{profile}, ceilingType.Id, level.Id);\n    if (ceiling != null)\n    {\n        Parameter heightParam = ceiling.get_Parameter(BuiltInParameter.CEILING_HEIGHTABOVELEVEL_PARAM);\n        if (heightParam != null && !heightParam.IsReadOnly) heightParam.Set(UnitUtils.ConvertToInternalUnits(2.8, UnitTypeId.Meters));\n    }\n}"}
{"prompt":"Crea un nuevo tipo de muro 'Muro Genérico 297mm' con un grosor de 25cm.","completion":"string newTypeName = \"Muro Genérico 297mm\";\nWallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif (oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(newTypeName) as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(25, UnitTypeId.Centimeters));\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n}"}
{"prompt":"Crea un techo por contorno en el 'Nivel de Cubierta'.","completion":"using (Transaction t = new Transaction(doc, \"Create Roof\"))\n{\n    t.Start();\n    Level roofLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel de Cubierta\");\n    RoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n    if(roofLevel != null && roofType != null)\n    {\n        CurveArray roofProfile = new CurveArray();\n        roofProfile.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(20,0,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(20,0,0), new XYZ(20,30,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(20,30,0), new XYZ(0,30,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(0,30,0), new XYZ(0,0,0)));\n        ModelCurveArray mapping = new ModelCurveArray();\n        doc.Create.NewFootPrintRoof(roofProfile, roofLevel, roofType, out mapping);\n    }\n    t.Commit();\n}"}
{"prompt":"Build a 'Roof Terrace' level at 19m.","completion":"string levelName = \"Roof Terrace\";\ndouble elev = UnitUtils.ConvertToInternalUnits(19, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elev);\nnewLevel.Name = levelName;\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Get all walls on Level 1 that are structural.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nif (level1 != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level1.Id);\n    ElementCategoryFilter categoryFilter = new ElementCategoryFilter(BuiltInCategory.OST_Walls);\n    ParameterValueProvider pvp = new ParameterValueProvider(new ElementId(BuiltInParameter.WALL_STRUCTURAL_SIGNIFICANT));\n    FilterIntegerRule rule = new FilterIntegerRule(pvp, new FilterNumericEquals(), 1);\n    ElementParameterFilter structuralFilter = new ElementParameterFilter(rule);\n    LogicalAndFilter andFilter = new LogicalAndFilter(new List<ElementFilter> { levelFilter, categoryFilter, structuralFilter });\n    List<Element> structuralWalls = new FilteredElementCollector(doc).WherePasses(andFilter).ToList();\n}"}
{"prompt":"Modela un plafón para el 'Dormitorio Principal' a 2.7 metros de altura.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Dormitorio Principal\") as Room;\n\nif (room != null)\n{\n    Level level = room.Level;\n    CeilingType ceilingType = new FilteredElementCollector(doc).OfClass(typeof(CeilingType)).FirstOrDefault() as CeilingType;\n\n    if (level != null && ceilingType != null)\n    {\n        SpatialElementBoundaryOptions options = new SpatialElementBoundaryOptions();\n        IList<IList<BoundarySegment>> boundarySegments = room.GetBoundarySegments(options);\n        IList<BoundarySegment> outerBoundary = boundarySegments.FirstOrDefault();\n\n        if (outerBoundary != null && outerBoundary.Any())\n        {\n            CurveLoop curveLoop = new CurveLoop();\n            foreach (BoundarySegment segment in outerBoundary)\n            {\n                curveLoop.Append(segment.GetCurve());\n            }\n            Ceiling ceiling = Ceiling.Create(doc, new List<CurveLoop> { curveLoop }, ceilingType.Id, level.Id);\n            if (ceiling != null)\n            {\n                Parameter heightParam = ceiling.get_Parameter(BuiltInParameter.CEILING_HEIGHTABOVELEVEL_PARAM);\n                if (heightParam != null && !heightParam.IsReadOnly) heightParam.Set(UnitUtils.ConvertToInternalUnits(2.7, UnitTypeId.Meters));\n            }\n        }\n    }\n}"}
{"prompt":"Change the type of a floor to one that contains 'Concrete'.","completion":"Floor floorToChange = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault() as Floor;\nif(floorToChange != null)\n{\n    FloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name.Contains(\"Concrete\"));\n    if(newType!=null)\n        floorToChange.ChangeTypeId(newType.Id);\n}"}
{"prompt":"Hide the selected elements in the active view.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> idsToHide = uidoc.Selection.GetElementIds();\nView activeView = doc.ActiveView;\n\nif (activeView != null && idsToHide.Count > 0)\n{\n    activeView.HideElements(idsToHide);\n}"}
{"prompt":"Get all subcategories from the Doors category.","completion":"Category doorCat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Doors);\nCategoryNameMap subcategories = doorCat.SubCategories;"}
{"prompt":"Create a new schedule for Structural Columns.","completion":"string scheduleName = \"Structural Column Schedule\";\nElementId categoryId = new ElementId(BuiltInCategory.OST_StructuralColumns);\nViewSchedule schedule = ViewSchedule.CreateSchedule(doc, categoryId);\nschedule.Name = scheduleName;"}
{"prompt":"Set the sill height of all windows to 899mm.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits(899, UnitTypeId.Millimeters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Create a new 5mm text type in green color.","completion":"using (Transaction t = new Transaction(doc, \"Create Green Text Type\"))\n{\n    t.Start();\n    string newTypeName = \"5mm Green\";\n    TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\n    if (defaultType != null)\n    {\n        TextNoteType newType = defaultType.Duplicate(newTypeName) as TextNoteType;\n        if (newType != null)\n        {\n            Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n            if (textSizeParam != null && !textSizeParam.IsReadOnly)\n            {\n                textSizeParam.Set(5 \/ 304.8);\n            }\n            Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n            if (lineColorParam != null && !lineColorParam.IsReadOnly)\n            {\n                 lineColorParam.Set(65280);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea un equipo eléctrico en X=1,Y=1.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol panelSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_ElectricalEquipment).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif(level != null && panelSymbol != null)\n{\n    if (!panelSymbol.IsActive)\n    {\n        panelSymbol.Activate();\n    }\n    XYZ point = new XYZ(1, 1, 0);\n    doc.Create.NewFamilyInstance(point, panelSymbol, level, StructuralType.NonStructural);\n}"}
{"prompt":"Get all instances of the Furniture category.","completion":"List<Element> furnitureInstances = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsNotElementType().ToList();"}
{"prompt":"Incorpora un punto de referencia en las coordenadas (1,2,6) dentro del editor de familias.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(1,2,6));"}
{"prompt":"Actualiza el tipo de una losa seleccionada a 'Concreto 14cm'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una losa\");\n\nif (pickedRef != null)\n{\n    Floor floorToChange = doc.GetElement(pickedRef) as Floor;\n    FloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name == \"Concreto 14cm\");\n    \n    if (floorToChange != null && newType != null)\n    {\n        floorToChange.ChangeTypeId(newType.Id);\n    }\n}"}
{"prompt":"Fija (pin) todos los vínculos de Revit en el proyecto.","completion":"List<RevitLinkInstance> links = new FilteredElementCollector(doc).OfClass(typeof(RevitLinkInstance)).Cast<RevitLinkInstance>().ToList();\nforeach (RevitLinkInstance link in links)\n{\n    if (!link.Pinned)\n    {\n        link.Pinned = true;\n    }\n}"}
{"prompt":"Mueve el muro seleccionado 5 metros hacia arriba.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un muro para mover\");\nif (pickedRef != null)\n{\n    XYZ translation = new XYZ(0, 0, UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters));\n    ElementTransformUtils.MoveElement(doc, pickedRef.ElementId, translation);\n}"}
{"prompt":"Construct a new level 'Level 5' at an elevation of 16 meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(16, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\nif (newLevel != null)\n{\n    try { newLevel.Name = \"Level 5\"; } catch {}\n}"}
{"prompt":"Retrieve the MEP space associated with the room 'Office 102'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Cast<Room>().FirstOrDefault(r => r.Name == \"Office 102\");\nList<Space> spaces = new List<Space>();\n\nif (room != null)\n{\n    spaces = new FilteredElementCollector(doc).OfClass(typeof(Space)).Cast<Space>().Where(s => s.Room != null && s.Room.Id == room.Id).ToList();\n}"}
{"prompt":"Duplica la vista de planta 'Nivel 2' y conviértela en una plantilla de vista.","completion":"using (Transaction t = new Transaction(doc, \"Create View Template\"))\n{\n    t.Start();\n    ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().FirstOrDefault(v => v.Name == \"Nivel 2\");\n    string templateName = \"Plantilla Nivel 2\";\n\n    if (viewToDuplicate != null)\n    {\n        ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n        View newView = doc.GetElement(newViewId) as View;\n        if (newView != null)\n        {\n           \/\/ Direct conversion to a template may not be available in older APIs.\n           \/\/ A common workaround is to set the IsTemplate property if available and writable, \n           \/\/ which is not the case here. This is left as a comment for conceptual understanding.\n           \/\/ newView.IsTemplate = true;\n            newView.Name = templateName;\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Duplica el nivel 5 con un desfase de 6m y llámalo 'Mezanine'.","completion":"string levelName = \"Nivel 5\";\nLevel levelToCopy = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (levelToCopy != null)\n{\n    double offset = UnitUtils.ConvertToInternalUnits(6, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, levelToCopy.Elevation + offset);\n    newLevel.Name = \"Mezanine\";\n}"}
{"prompt":"Ubica una instancia de la familia 'Mesa de Oficina' en el centro de la habitación 'Despacho 102'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 102\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Mesa de Oficina\") as FamilySymbol;\nif(furnitureSymbol != null && !furnitureSymbol.IsActive) furnitureSymbol.Activate();\nif(room != null)\n{\n    LocationPoint roomCenter = room.Location as LocationPoint;\n    if(roomCenter != null && furnitureSymbol != null && room.Level != null)\n    {\n        doc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Copia el nivel 4 con un desfase de 8m y llámalo 'Mezanine'.","completion":"string levelName = \"Nivel 4\";\nLevel levelToCopy = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (levelToCopy != null)\n{\n    double offset = UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, levelToCopy.Elevation + offset);\n    newLevel.Name = \"Mezanine\";\n}"}
{"prompt":"Append a tag to the column closest to the origin.","completion":"using (Transaction t = new Transaction(doc, \"Tag Column\"))\n{\n    t.Start();\n    View activeView = doc.ActiveView;\n    FamilyInstance column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().Cast<FamilyInstance>().OrderBy(c => {\n        LocationPoint lp = c.Location as LocationPoint;\n        return lp != null ? lp.Point.DistanceTo(XYZ.Zero) : double.MaxValue;\n    }).FirstOrDefault();\n\n    if (activeView != null && column != null)\n    {\n        LocationPoint loc = column.Location as LocationPoint;\n        if (loc != null)\n        {\n            IndependentTag.Create(doc, activeView.Id, new Reference(column), true, TagMode.TM_ADDBY_CATEGORY, TagOrientation.Horizontal, loc.Point);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Encuentra todos los muros con más de 4 metros de altura.","completion":"double heightThreshold = UnitUtils.ConvertToInternalUnits(4, UnitTypeId.Meters);\nParameterValueProvider pvp = new ParameterValueProvider(new ElementId(BuiltInParameter.WALL_USER_HEIGHT_PARAM));\nFilterRule rule = new FilterDoubleRule(pvp, new FilterNumericGreater(), heightThreshold, 1e-6);\nList<Element> tallWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(new ElementParameterFilter(rule)).ToList();"}
{"prompt":"Set the sill height of all windows to 900mm.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits(900, UnitTypeId.Millimeters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Include a reference point at coordinates (1,1,4) inside the family editor.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(1,1,4));"}
{"prompt":"Generate a report with the area of all rooms in the project.","completion":"List<Room> rooms = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>().ToList();"}
{"prompt":"Create a 3D view with the section box enabled.","completion":"string viewName = \"3D View with Section Box\";\nViewFamilyType vft3D = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft3D != null)\n{\n    View3D view3d = View3D.CreateIsometric(doc, vft3D.Id);\n    if (view3d != null)\n    {\n        view3d.Name = viewName;\n        view3d.IsSectionBoxActive = true;\n    }\n}"}
{"prompt":"Draw a filled region with a diagonal pattern.","completion":"using (Transaction t = new Transaction(doc, \"Draw Filled Region\"))\n{\n    t.Start();\n    View activeView = doc.ActiveView;\n    FillPatternElement fillPattern = new FilteredElementCollector(doc).OfClass(typeof(FillPatternElement)).Cast<FillPatternElement>().FirstOrDefault(p => !p.GetFillPattern().IsSolidFill);\n\n    if (activeView != null && fillPattern != null)\n    {\n        FilledRegionType filledRegionType = new FilteredElementCollector(doc, activeView.Id).OfClass(typeof(FilledRegionType)).FirstOrDefault() as FilledRegionType;\n        if (filledRegionType != null)\n        {\n            FilledRegionType newType = filledRegionType.Duplicate(\"Temp Diagonal Region\") as FilledRegionType;\n            if (newType != null)\n            {\n                newType.ForegroundPatternId = fillPattern.Id;\n                XYZ p1 = new XYZ(0,0,0);\n                XYZ p2 = new XYZ(5 \/ 0.3048,0,0);\n                XYZ p3 = new XYZ(5 \/ 0.3048,5 \/ 0.3048,0);\n                XYZ p4 = new XYZ(0,5 \/ 0.3048,0);\n                CurveLoop profile = new CurveLoop();\n                profile.Append(Line.CreateBound(p1,p2));\n                profile.Append(Line.CreateBound(p2,p3));\n                profile.Append(Line.CreateBound(p3,p4));\n                profile.Append(Line.CreateBound(p4,p1));\n                FilledRegion.Create(doc, newType.Id, activeView.Id, new List<CurveLoop>{profile});\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Muestra un cuadro de diálogo con opciones 'Sí' y 'No'.","completion":""}
{"prompt":"Define the 'Comments' parameter for all doors on Level 1 to 'Fire Rating - 95 min'.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\n\nif (level1 != null)\n{\n    List<FamilyInstance> doorsOnLevel1 = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsNotElementType().Cast<FamilyInstance>().Where(fi => fi.LevelId == level1.Id).ToList();\n    foreach(FamilyInstance door in doorsOnLevel1)\n    {\n        Parameter commentsParam = door.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n        if (commentsParam != null && !commentsParam.IsReadOnly) commentsParam.Set(\"Fire Rating - 95 min\");\n    }\n}"}
{"prompt":"Aísla temporalmente la categoría de Puertas en la vista activa.","completion":"ElementId doorCategoryId = new ElementId(BuiltInCategory.OST_Doors);\nICollection<ElementId> categoryIds = new List<ElementId> { doorCategoryId };\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.IsolateCategoriesTemporary(categoryIds);\n}"}
{"prompt":"Rellena el parámetro de material de todos los muros con 'Concreto'.","completion":"Material concreteMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name.Contains(\"Concreto\")) as Material;\nif(concreteMaterial != null)\n{\n    var walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>().ToList();\n    foreach(Wall w in walls)\n    {\n        Parameter materialParam = w.get_Parameter(BuiltInParameter.STRUCTURAL_MATERIAL_PARAM);\n        if(materialParam != null && !materialParam.IsReadOnly) materialParam.Set(concreteMaterial.Id);\n    }\n}"}
{"prompt":"Define the 'Mark' parameter to 'D-01' for the selected door.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a door\");\nif (pickedRef != null)\n{\n    Element door = doc.GetElement(pickedRef.ElementId);\n    if (door != null)\n    {\n        Parameter markParam = door.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n        if (markParam != null && !markParam.IsReadOnly)\n        {\n            markParam.Set(\"D-01\");\n        }\n    }\n}"}
{"prompt":"Ubica un rociador en las coordenadas (5,5,3).","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol sprinklerSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Sprinklers).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (level != null && sprinklerSymbol != null)\n{\n    if (!sprinklerSymbol.IsActive) sprinklerSymbol.Activate();\n    XYZ placementPoint = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters));\n    doc.Create.NewFamilyInstance(placementPoint, sprinklerSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n}"}
{"prompt":"Obtén el tipo de sistema de una tubería seleccionada.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una tubería\");\n\nPipingSystemType systemType = null;\nif (pickedRef != null)\n{\n    Pipe pipe = doc.GetElement(pickedRef.ElementId) as Pipe;\n    if (pipe != null)\n    {\n        Parameter systemTypeParam = pipe.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM);\n        if (systemTypeParam != null && systemTypeParam.HasValue)\n        {\n            systemType = doc.GetElement(systemTypeParam.AsElementId()) as PipingSystemType;\n        }\n    }\n}\n"}
{"prompt":"Establece el parámetro 'Comentarios' de todas las puertas del Nivel 3 a 'Clasificación Fuego - 87 min'.","completion":"string levelName = \"Nivel 3\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(targetLevel.Id);\n    FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WherePasses(levelFilter);\n    foreach (Element door in collector)\n    {\n        Parameter commentsParam = door.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n        if (commentsParam != null && !commentsParam.IsReadOnly) { commentsParam.Set(\"Clasificación Fuego - 87 min\"); }\n    }\n}"}
{"prompt":"Adjust the type of a selected floor to 'Concrete 15cm'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a floor\");\n\nif (pickedRef != null)\n{\n    Floor floorToChange = doc.GetElement(pickedRef) as Floor;\n    FloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name == \"Concrete 15cm\");\n    \n    if (floorToChange != null && newType != null)\n    {\n        floorToChange.ChangeTypeId(newType.Id);\n    }\n}"}
{"prompt":"Add a reference point at coordinates (4,1,2) inside the family editor.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(4,1,2));"}
{"prompt":"Build a new level 'Level 5' at an elevation of 15 meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(15, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Level 5\";\n}"}
{"prompt":"Copia la vista de planta 'Nivel 2' y conviértela en una plantilla de vista.","completion":"using (Transaction t = new Transaction(doc, \"Create View Template\"))\n{\n    t.Start();\n    ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().FirstOrDefault(v => v.Name == \"Nivel 2\");\n    string templateName = \"Plantilla Nivel 2\";\n\n    if (viewToDuplicate != null)\n    {\n        ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n        View newView = doc.GetElement(newViewId) as View;\n        if (newView != null)\n        {\n           \/\/ Direct conversion to a template may not be available in older APIs.\n           \/\/ A common workaround is to set the IsTemplate property if available and writable, \n           \/\/ which is not the case here. This is left as a comment for conceptual understanding.\n           \/\/ newView.IsTemplate = true;\n            newView.Name = templateName;\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Obtén todas las subcategorías de la categoría Puertas.","completion":"Category doorCat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Doors);\nCategoryNameMap subcategories = doorCat.SubCategories;"}
{"prompt":"Create a new Level named 'Level 4' at an elevation of 12 meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(12, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Level 4\";\n}"}
{"prompt":"Build a stair between Level 2 and Level 1","completion":"\/\/ This is a complex operation that requires multiple steps and\/or user interaction and is not supported by the agent."}
{"prompt":"Crea un nivel 'Roof Terrace' a 15m.","completion":"string levelName = \"Roof Terrace\";\ndouble elev = UnitUtils.ConvertToInternalUnits(15, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elev);\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Construct a default 3D view.","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft != null)\n{\n    View3D view3d = View3D.CreateIsometric(doc, vft.Id);\n}"}
{"prompt":"Borra los muros que tengo seleccionados.","completion":"ICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nif (selectedIds.Any())\n{\n    doc.Delete(selectedIds);\n}"}
{"prompt":"Copia el tipo de muro 'Genérico - 123mm' y nómbralo 'Interior - 15cm Yeso'.","completion":"string originalName = \"Genérico - 123mm\";\nstring newName = \"Interior - 15cm Yeso\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif (originalType != null)\n{\n    WallType newType = originalType.Duplicate(newName) as WallType;\n}"}
{"prompt":"Create a new elevation view looking south.","completion":"string viewName = \"South Elevation (New)\";\nViewFamilyType elevationVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(vft => vft.ViewFamily == ViewFamily.Elevation);\nElevationMarker marker = ElevationMarker.CreateElevationMarker(doc, elevationVFT.Id, new XYZ(0, -20, 0), 100);\nView aev = marker.CreateElevation(doc, doc.ActiveView.Id, 0);\naev.Name = viewName;"}
{"prompt":"Copia el nivel 6 con un desfase de 1m y llámalo 'Mezanine'.","completion":"string levelName = \"Nivel 6\";\nLevel levelToCopy = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (levelToCopy != null)\n{\n    double offset = UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, levelToCopy.Elevation + offset);\n    newLevel.Name = \"Mezanine\";\n}"}
{"prompt":"Clone the 'Generic - 150mm' wall type and name it 'Interior - 15cm Plaster'.","completion":"string originalName = \"Generic - 150mm\";\nstring newName = \"Interior - 15cm Plaster\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif(originalType!=null)\n    originalType.Duplicate(newName);"}
{"prompt":"Apply 21mm thermal insulation to all hot water pipes.","completion":"PipeInsulationType insulationType = new FilteredElementCollector(doc).OfClass(typeof(PipeInsulationType)).FirstOrDefault() as PipeInsulationType;\nPipingSystemType hotWaterSystem = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).Cast<PipingSystemType>().FirstOrDefault(s => s.Name.Contains(\"Hot Water\"));\n\nif (insulationType != null && hotWaterSystem != null)\n{\n    List<Pipe> pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast<Pipe>().Where(p => \n    {\n        Parameter systemParam = p.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM);\n        return systemParam != null && systemParam.HasValue && systemParam.AsElementId() == hotWaterSystem.Id;\n    }).ToList();\n    \n    foreach(Pipe p in pipes)\n    {\n        PipeInsulation.Create(doc, p.Id, insulationType.Id, UnitUtils.ConvertToInternalUnits(21, UnitTypeId.Millimeters));\n    }\n}"}
{"prompt":"Replicate the 'Level 3' view as a dependent view.","completion":"ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v => v.Name == \"Level 3\") as ViewPlan;\n\nif (viewToDuplicate != null)\n{\n    ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n}"}
{"prompt":"Copia el nivel 1 con un desfase de 5m y llámalo 'Mezanine'.","completion":"string levelName = \"Mezanine\";\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\n\nif (level1 != null)\n{\n    double newElevation = level1.ProjectElevation + UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, newElevation);\n    if (newLevel != null)\n    {\n        newLevel.Name = levelName;\n    }\n}"}
{"prompt":"Coloca pilares en todos los cruces de ejes.","completion":"FamilySymbol colSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nList<Grid> grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().ToList();\n\nif (colSymbol != null && level != null && grids.Count >= 2)\n{\n    for (int i = 0; i < grids.Count; i++)\n    {\n        for (int j = i + 1; j < grids.Count; j++)\n        {\n            IntersectionResultArray results = null;\n            grids[i].Curve.Intersect(grids[j].Curve, out results);\n            if(results != null)\n            {\n                 foreach (IntersectionResult ir in results)\n                 {\n                     doc.Create.NewFamilyInstance(ir.XYZPoint, colSymbol, level, StructuralType.Column);\n                 }\n            }\n        }\n    }\n}"}
{"prompt":"Create a new Level named 'Level 4' at an elevation of 12 meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(12, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Level 4\";\n}"}
{"prompt":"Add a point to the selected Path of Travel.","completion":"\/\/ PathOfTravel related methods like GetPath and Update are likely inaccessible in this environment.\n\/\/ The following code is a placeholder to show the intent.\n\/*\nusing (Transaction t = new Transaction(doc, \"Update Path of Travel\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference pickedRef = localUidoc.Selection.PickObject(ObjectType.Element, \"Select a Path of Travel\");\n\n    if (pickedRef != null)\n    {\n        PathOfTravel pot = doc.GetElement(pickedRef) as PathOfTravel;\n        if (pot != null)\n        {\n            IList<XYZ> points = pot.GetPath();\n            if (points != null && points.Count >= 2)\n            {\n                XYZ midPoint = (points[0] + points[1]) \/ 2;\n                points.Insert(1, midPoint);\n                pot.Update(points);\n            }\n        }\n    }\n    t.Commit();\n}\n*\/"}
{"prompt":"Display a dialog box with 'Yes', 'No', and 'Cancel' options.","completion":""}
{"prompt":"Find the structural column type named \"303 x 446mm\" and place it at X=1, Y=12.1","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(s => s.Name == \"303 x 446mm\");\nif (level != null && columnSymbol != null)\n{\n    if (!columnSymbol.IsActive) { columnSymbol.Activate(); }\n    XYZ point = new XYZ(1, 12.1, 0);\n    doc.Create.NewFamilyInstance(point, columnSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n}"}
{"prompt":"Crea 10 worksets de arquitectura.","completion":"List<string> worksetNames = new List<string> { \"TAD_ARQ_MAM\", \"TAD_ARQ_ACA\", \"TAD_ARQ_PLA\", \"TAD_ARQ_PSO\", \"TAD_ARQ_HRE\", \"TAD_ARQ_ALU\", \"TAD_ARQ_CAR\", \"TAD_ARQ_MOB\", \"TAD_ARQ_PLO\", \"TAD_ARQ_EXT\" };\nforeach(string name in worksetNames)\n{\n    Workset.Create(doc, name);\n}"}
{"prompt":"Sitúa un rociador en las coordenadas (10,7,2).","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol sprinklerSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Sprinklers).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (level != null && sprinklerSymbol != null)\n{\n    if (!sprinklerSymbol.IsActive) sprinklerSymbol.Activate();\n    XYZ placementPoint = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(7, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters));\n    doc.Create.NewFamilyInstance(placementPoint, sprinklerSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n}"}
{"prompt":"Define the sill height of all windows to 2 meter.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Clean up the material names by stripping the 'RENDER_' prefix.","completion":"string prefixToRemove = \"RENDER_\";\nIList<Material> materials = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().ToList();\n\nif (materials.Any())\n{\n    HashSet<string> existingNames = new HashSet<string>(materials.Select(m => m.Name));\n    foreach (Material mat in materials)\n    {\n        if (mat.Name.StartsWith(prefixToRemove))\n        {\n            existingNames.Remove(mat.Name);\n            string newName = mat.Name.Substring(prefixToRemove.Length);\n            string finalName = newName;\n            int i = 1;\n            while (existingNames.Contains(finalName))\n            {\n                finalName = $\"{newName}_{i++}\";\n            }\n            mat.Name = finalName;\n            existingNames.Add(finalName);\n        }\n    }\n}"}
{"prompt":"Replicate the 'Level 6' view as a dependent view.","completion":"ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v => v.Name == \"Level 6\") as ViewPlan;\n\nif (viewToDuplicate != null)\n{\n    ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n}"}
{"prompt":"Crea un parámetro global de longitud llamado 'AnchoCorredor' con valor de 1.7m.","completion":"string paramName = \"AnchoCorredor\";\nGlobalParameter gp = GlobalParameter.Create(doc, paramName, SpecTypeId.Length);\n\nif (gp != null)\n{\n    gp.SetValue(new DoubleParameterValue(UnitUtils.ConvertToInternalUnits(1.7, UnitTypeId.Meters)));\n}"}
{"prompt":"Insert a window 1m wide and 1.2m high into a wall.","completion":"FamilySymbol originalSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nWall hostWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\n\nif (originalSymbol != null && hostWall != null)\n{\n    string newTypeName = \"Window 1.0m x 1.2m\";\n    FamilySymbol newSymbol = originalSymbol.Duplicate(newTypeName) as FamilySymbol;\n    if (newSymbol == null) return;\n\n    if (!newSymbol.IsActive)\n    {\n        newSymbol.Activate();\n    }\n\n    Parameter widthParam = newSymbol.get_Parameter(BuiltInParameter.WINDOW_WIDTH);\n    Parameter heightParam = newSymbol.get_Parameter(BuiltInParameter.WINDOW_HEIGHT);\n\n    if (widthParam != null && heightParam != null && !widthParam.IsReadOnly && !heightParam.IsReadOnly)\n    {\n        widthParam.Set(UnitUtils.ConvertToInternalUnits(1.0, UnitTypeId.Meters));\n        heightParam.Set(UnitUtils.ConvertToInternalUnits(1.2, UnitTypeId.Meters));\n    }\n\n    Level level = doc.GetElement(hostWall.LevelId) as Level;\n    LocationCurve locationCurve = hostWall.Location as LocationCurve;\n    if (level != null && locationCurve != null)\n    {\n        XYZ insertionPoint = locationCurve.Curve.Evaluate(0.5, true);\n        doc.Create.NewFamilyInstance(insertionPoint, newSymbol, hostWall, level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Create a wall 5 meters long and 3 meters high.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (level != null && wallType != null)\n{\n    Line line = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0, 0));\n    Wall.Create(doc, line, wallType.Id, level.Id, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0.0, false, false);\n}"}
{"prompt":"Copia la vista de planta 'Nivel 2' y conviértela en una plantilla de vista.","completion":"using (Transaction t = new Transaction(doc, \"Create View Template\"))\n{\n    t.Start();\n    ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().FirstOrDefault(v => v.Name == \"Nivel 2\");\n    string templateName = \"Plantilla Nivel 2\";\n\n    if (viewToDuplicate != null)\n    {\n        ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n        View newView = doc.GetElement(newViewId) as View;\n        if (newView != null)\n        {\n           \/\/ In older APIs, direct conversion to a template may not be available.\n           \/\/ A common workaround is to set the IsTemplate property if available and writable, \n           \/\/ which is not the case here. This is left as a comment for conceptual understanding.\n           \/\/ newView.IsTemplate = true;\n            newView.Name = templateName;\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Build an MEP space for each room on Level 1","completion":"string levelName = \"Level 1\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    FilteredElementCollector roomCollector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WherePasses(new ElementLevelFilter(targetLevel.Id));\n    foreach (Room room in roomCollector.ToElements().Cast<Room>())\n    {\n        LocationPoint locPoint = room.Location as LocationPoint;\n        if (locPoint != null)\n        {\n            UV point = new UV(locPoint.Point.X, locPoint.Point.Y);\n            doc.Create.NewSpace(targetLevel, point);\n        }\n    }\n}"}
{"prompt":"Create 4 vertical grids spaced 10 meters apart.","completion":"double separation = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\nfor(int i=0; i<4; i++)\n{\n    Line line = Line.CreateBound(new XYZ(i * separation, 0, 0), new XYZ(i * separation, 40, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Ajusta todas las ventanas para que la altura del antepecho sea 1 metro.","completion":"using (Transaction t = new Transaction(doc, \"Set Sill Height\"))\n{\n    t.Start();\n    double sillHeight = 1 \/ 0.3048;\n    List<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\n    foreach(FamilyInstance window in windows)\n    {\n        Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n        if (sillHeightParam != null && !sillHeightParam.IsReadOnly)\n        {\n            sillHeightParam.Set(sillHeight);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Adjust the type of a selected floor to 'Concrete 12cm'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a floor\");\n\nif (pickedRef != null)\n{\n    Floor floorToChange = doc.GetElement(pickedRef) as Floor;\n    FloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name == \"Concrete 12cm\");\n    \n    if (floorToChange != null && newType != null)\n    {\n        floorToChange.ChangeTypeId(newType.Id);\n    }\n}"}
{"prompt":"Generate a 20x15 meter foundation slab.","completion":"using (Transaction t = new Transaction(doc, \"Create Foundation Slab\"))\n{\n    t.Start();\n    Level foundationLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderBy(l => l.Elevation).FirstOrDefault();\n    FloorType slabType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.get_Parameter(BuiltInParameter.FLOOR_PARAM_IS_STRUCTURAL).AsInteger() == 1);\n\n    if (foundationLevel != null && slabType != null)\n    {\n        XYZ p1 = new XYZ(0,0,0);\n        XYZ p2 = new XYZ(20\/0.3048, 0, 0);\n        XYZ p3 = new XYZ(20\/0.3048, 15\/0.3048, 0);\n        XYZ p4 = new XYZ(0, 15\/0.3048, 0);\n        CurveLoop profile = new CurveLoop();\n        profile.Append(Line.CreateBound(p1,p2));\n        profile.Append(Line.CreateBound(p2,p3));\n        profile.Append(Line.CreateBound(p3,p4));\n        profile.Append(Line.CreateBound(p4,p1));\n        Floor.Create(doc, new List<CurveLoop>{profile}, slabType.Id, foundationLevel.Id);\n    }\n    t.Commit();\n}"}
{"prompt":"Insert all selected elements on the 'Facade' workset.","completion":"using (Transaction t = new Transaction(doc, \"Assign to Workset\"))\n{\n    t.Start();\n    if(doc.IsWorkshared)\n    {\n        UIDocument localUidoc = uidoc;\n        ICollection<ElementId> selectedIds = localUidoc.Selection.GetElementIds();\n        \n        Workset workset = new FilteredWorksetCollector(doc).OfKind(WorksetKind.UserWorkset).FirstOrDefault(ws => ws.Name == \"Facade\");\n        if(workset == null) workset = Workset.Create(doc, \"Facade\");\n\n        if (selectedIds != null && selectedIds.Count > 0 && workset != null)\n        {\n            foreach(ElementId id in selectedIds)\n            {\n                Element elem = doc.GetElement(id);\n                Parameter wsparam = elem.get_Parameter(BuiltInParameter.ELEM_PARTITION_PARAM);\n                if(wsparam != null && !wsparam.IsReadOnly) wsparam.Set(workset.Id.IntegerValue);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Get all walls on Level 1 that are structural.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nif (level1 != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level1.Id);\n    ElementCategoryFilter categoryFilter = new ElementCategoryFilter(BuiltInCategory.OST_Walls);\n    ParameterValueProvider pvp = new ParameterValueProvider(new ElementId(BuiltInParameter.WALL_STRUCTURAL_SIGNIFICANT));\n    FilterIntegerRule rule = new FilterIntegerRule(pvp, new FilterNumericEquals(), 1);\n    ElementParameterFilter structuralFilter = new ElementParameterFilter(rule);\n    LogicalAndFilter andFilter = new LogicalAndFilter(new List<ElementFilter> { levelFilter, categoryFilter, structuralFilter });\n    List<Element> structuralWalls = new FilteredElementCollector(doc).WherePasses(andFilter).ToList();\n}"}
{"prompt":"Construct a 3D view oriented from the southeast.","completion":"string viewName = \"3D View Southeast\";\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft != null)\n{\n    View3D view3d = View3D.CreateIsometric(doc, vft.Id);\n    if (view3d != null)\n    {\n        XYZ eye = new XYZ(1, -1, 1);\n        XYZ up = new XYZ(0, 0, 1);\n        XYZ forward = new XYZ(-1, 1, -1);\n        view3d.SetOrientation(new ViewOrientation3D(eye, up, forward));\n        view3d.Name = viewName;\n    }\n}"}
{"prompt":"Actualiza el tipo de la ventana seleccionada al tipo 'Fija 118x60'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una ventana\");\nFamilySymbol newType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name == \"Fija 118x60\");\nif (pickedRef != null && newType != null)\n{\n    FamilyInstance window = doc.GetElement(pickedRef.ElementId) as FamilyInstance;\n    if (window != null)\n    {\n        window.Symbol = newType;\n    }\n}"}
{"prompt":"Dibuja un conducto de ventilación rectangular de 300x200 milímetros.","completion":"using (Transaction t = new Transaction(doc, \"Create Duct\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    DuctType ductType = new FilteredElementCollector(doc).OfClass(typeof(DuctType)).Cast<DuctType>().FirstOrDefault(d => d.Shape == ConnectorProfileType.Rectangular);\n    MEPSystemType systemType = new FilteredElementCollector(doc).OfClass(typeof(MEPSystemType)).Cast<MEPSystemType>().FirstOrDefault(s => s.SystemClassification == MEPSystemClassification.SupplyAir);\n\n    if (level != null && ductType != null && systemType != null)\n    {\n        XYZ p1 = new XYZ(0, 0, 3 \/ 0.3048);\n        XYZ p2 = new XYZ(10 \/ 0.3048, 0, 3 \/ 0.3048);\n        Duct duct = Duct.Create(doc, systemType.Id, ductType.Id, level.Id, p1, p2);\n\n        if (duct != null)\n        {\n            Parameter widthParam = duct.get_Parameter(BuiltInParameter.RBS_CURVE_WIDTH_PARAM);\n            Parameter heightParam = duct.get_Parameter(BuiltInParameter.RBS_CURVE_HEIGHT_PARAM);\n            if (widthParam != null && !widthParam.IsReadOnly) widthParam.Set(300 \/ 304.8);\n            if (heightParam != null && !heightParam.IsReadOnly) heightParam.Set(200 \/ 304.8);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Asigna todos los muros y suelos seleccionados al workset 'Estructura'.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nWorkset workset = new FilteredWorksetCollector(doc).OfKind(WorksetKind.UserWorkset).FirstOrDefault(ws => ws.Name == \"Estructura\");\nif (selectedIds.Count > 0 && workset != null)\n{\n    int worksetId = workset.Id.IntegerValue;\n    foreach (ElementId id in selectedIds)\n    {\n        Element elem = doc.GetElement(id);\n        Parameter wsparam = elem.get_Parameter(BuiltInParameter.ELEM_PARTITION_PARAM);\n        if (wsparam != null && !wsparam.IsReadOnly) wsparam.Set(worksetId);\n    }\n}"}
{"prompt":"Create 5 worksets for engineering disciplines.","completion":"List<string> worksetNames = new List<string> { \"MEP_HVAC\", \"MEP_Plumbing\", \"MEP_Electrical\", \"STRUCT_Framing\", \"STRUCT_Foundations\" };\nforeach(string name in worksetNames)\n{\n    Workset newWorkset = Workset.Create(doc, name);\n}"}
{"prompt":"Sitúa un rociador en las coordenadas (4,4,1).","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol sprinklerSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Sprinklers).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (level != null && sprinklerSymbol != null)\n{\n    if (!sprinklerSymbol.IsActive) sprinklerSymbol.Activate();\n    XYZ placementPoint = new XYZ(UnitUtils.ConvertToInternalUnits(4, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(4, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters));\n    doc.Create.NewFamilyInstance(placementPoint, sprinklerSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n}"}
{"prompt":"Inserta una instancia de la familia 'Puerta Sencilla' en el centro de la habitación 'Despacho 98'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 98\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Puerta Sencilla\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);"}
{"prompt":"Import a georeferenced survey from a LandXML file.","completion":"\/\/ The Revit API in the provided context does not support direct LandXML import.\n\/\/ This functionality typically requires additional add-ins like the Site Designer, which are not available here.\n\/\/ As a placeholder, this code will show how to create a simple topography surface from a list of points.\nusing(Transaction t = new Transaction(doc, \"Create Topography\"))\n{\n    t.Start();\n    IList<XYZ> points = new List<XYZ>();\n    points.Add(new XYZ(0, 0, 0));\n    points.Add(new XYZ(50, 0, 5));\n    points.Add(new XYZ(0, 50, 10));\n    TopographySurface.Create(doc, points);\n    t.Commit();\n}"}
{"prompt":"Recupera el espacio MEP asociado a la habitación 'Oficina 106'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Cast<Room>().FirstOrDefault(r => r.Name == \"Oficina 106\");\nList<Space> spaces = new List<Space>();\n\nif (room != null)\n{\n    spaces = new FilteredElementCollector(doc).OfClass(typeof(Space)).Cast<Space>().Where(s => s.Room != null && s.Room.Id == room.Id).ToList();\n}"}
{"prompt":"Put an instance of the 'Office Desk' family in the center of the 'Office 104' room.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Office 104\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Office Desk\") as FamilySymbol;\nif(furnitureSymbol != null && !furnitureSymbol.IsActive) furnitureSymbol.Activate();\nif(room != null)\n{\n    LocationPoint roomCenter = room.Location as LocationPoint;\n    if(roomCenter != null && furnitureSymbol != null && room.Level != null)\n    {\n        doc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Build a global length parameter named 'CorridorWidth' with a value of 1.2m.","completion":"string paramName = \"CorridorWidth\";\nGlobalParameter gp = GlobalParameter.Create(doc, paramName, SpecTypeId.Length);\n\nif (gp != null)\n{\n    gp.SetValue(new DoubleParameterValue(UnitUtils.ConvertToInternalUnits(1.2, UnitTypeId.Meters)));\n}"}
{"prompt":"Generate a floor plan view for 'Level 8'.","completion":"string levelName = \"Level 8\";\nLevel level3 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.FloorPlan);\n\nif (level3 != null && vft != null)\n{\n    ViewPlan viewPlan = ViewPlan.Create(doc, vft.Id, level3.Id);\n}"}
{"prompt":"Set the sill height of all windows to 900mm.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits(900, UnitTypeId.Millimeters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Annotate all rooms with their area.","completion":"using (Transaction t = new Transaction(doc, \"Tag All Rooms\"))\n{\n    t.Start();\n    View activeView = doc.ActiveView;\n\n    if (activeView != null)\n    {\n        List<Room> rooms = new FilteredElementCollector(doc, activeView.Id).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>().ToList();\n        foreach(Room room in rooms)\n        {\n            LocationPoint loc = room.Location as LocationPoint;\n            if(loc != null)\n            {\n                doc.Create.NewRoomTag(new LinkElementId(room.Id), new UV(loc.Point.X, loc.Point.Y), activeView.Id);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Muestra un cuadro de diálogo con las opciones 'Sí', 'No' y 'Cancelar'.","completion":""}
{"prompt":"Encuentra todos los muros que miden más de 3 metros de alto.","completion":"double heightThreshold = UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\nElementId heightParamId = new ElementId(BuiltInParameter.WALL_USER_HEIGHT_PARAM);\nParameterValueProvider pvp = new ParameterValueProvider(heightParamId);\nFilterNumericRuleEvaluator evaluator = new FilterNumericGreater();\nFilterRule rule = new FilterDoubleRule(pvp, evaluator, heightThreshold, 1e-6);\nElementParameterFilter filter = new ElementParameterFilter(rule);\nList<ElementId> tallWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(filter).ToElementIds().ToList();"}
{"prompt":"Crea un nuevo tipo de cota lineal con texto azul y tamaño 2mm.","completion":"using (Transaction t = new Transaction(doc, \"Create Dimension Type\"))\n{\n    t.Start();\n    string newTypeName = \"Cota Azul 2mm\";\n    DimensionType linearDimType = new FilteredElementCollector(doc).OfClass(typeof(DimensionType)).Cast<DimensionType>().FirstOrDefault(dt => dt.StyleType == DimensionStyleType.Linear);\n\n    if (linearDimType != null)\n    {\n        DimensionType newDimType = linearDimType.Duplicate(newTypeName) as DimensionType;\n        if (newDimType != null)\n        {\n            Parameter colorParam = newDimType.get_Parameter(BuiltInParameter.LINE_COLOR);\n            if (colorParam != null && !colorParam.IsReadOnly) colorParam.Set(255);\n            Parameter textSizeParam = newDimType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n            if (textSizeParam != null && !textSizeParam.IsReadOnly) textSizeParam.Set(2 \/ 304.8);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea un eje de 5 ejes horizontales y 5 verticales, espaciados 6 metros.","completion":"double spacing = UnitUtils.ConvertToInternalUnits(6, UnitTypeId.Meters);\nint count = 5;\nfor (int i = 0; i < count; i++)\n{\n    Line line = Line.CreateBound(new XYZ(0, i * spacing, 0), new XYZ((count - 1) * spacing, i * spacing, 0));\n    Grid.Create(doc, line);\n}\nfor (int i = 0; i < count; i++)\n{\n    Line line = Line.CreateBound(new XYZ(i * spacing, 0, 0), new XYZ(i * spacing, (count - 1) * spacing, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Crea un filtro de vista para ocultar muros demolidos.","completion":"using (Transaction t = new Transaction(doc, \"Create Demolition Filter\"))\n{\n    t.Start();\n    Phase demolishedPhase = new FilteredElementCollector(doc).OfClass(typeof(Phase)).Cast<Phase>().FirstOrDefault(p => p.Name.Contains(\"Demolished\") || p.Name.Contains(\"Demolición\"));\n    View activeView = doc.ActiveView;\n\n    if (demolishedPhase != null && activeView != null)\n    {\n        ElementId paramId = new ElementId(BuiltInParameter.PHASE_DEMOLISHED);\n        FilterRule rule = ParameterFilterRuleFactory.CreateEqualsRule(paramId, demolishedPhase.Id);\n        ElementFilter filter = new ElementParameterFilter(rule);\n        ICollection<ElementId> categories = new List<ElementId>{ new ElementId(BuiltInCategory.OST_Walls) };\n        ParameterFilterElement pfe = ParameterFilterElement.Create(doc, \"Filtro Demolición\", categories, filter);\n        \n        if (pfe != null)\n        {\n            activeView.AddFilter(pfe.Id);\n            activeView.SetFilterVisibility(pfe.Id, false);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Build a new Level named 'Level 1' at an elevation of 8 meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\nif (newLevel != null)\n{\n    try { newLevel.Name = \"Level 1\"; } catch {}\n}"}
{"prompt":"Añade un punto de referencia en las coordenadas (1,5,3) dentro del editor de familias.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(1,5,3));"}
{"prompt":"Configure the sill height of all windows to 895mm.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits(895, UnitTypeId.Millimeters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Reproduce el tipo de muro 'Genérico - 121mm' y nómbralo 'Interior - 15cm Yeso'.","completion":"string originalName = \"Genérico - 121mm\";\nstring newName = \"Interior - 15cm Yeso\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif(originalType!=null)\n    originalType.Duplicate(newName);"}
{"prompt":"Build a new level 'Level 1' at an elevation of 11 meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(11, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\nif (newLevel != null)\n{\n    try { newLevel.Name = \"Level 1\"; } catch {}\n}"}
{"prompt":"Oculta la categoría de mobiliario en la vista activa.","completion":"View activeView = doc.ActiveView;\nCategory furnitureCategory = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Furniture);\nif (activeView != null && furnitureCategory != null && furnitureCategory.get_AllowsVisibilityControl(activeView))\n{\n    activeView.SetCategoryHidden(furnitureCategory.Id, true);\n}"}
{"prompt":"Aísla temporalmente los elementos seleccionados en la vista activa.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> idsToIsolate = uidoc.Selection.GetElementIds();\nView activeView = doc.ActiveView;\n\nif (activeView != null && idsToIsolate.Count > 0)\n{\n    activeView.IsolateElementsTemporary(idsToIsolate);\n}"}
{"prompt":"Duplica el nivel 1 con un desfase de 3m y llámalo 'Mezanine'.","completion":"string levelName = \"Mezanine\";\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\n\nif (level1 != null)\n{\n    double newElevation = level1.ProjectElevation + UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, newElevation);\n    if (newLevel != null)\n    {\n        newLevel.Name = levelName;\n    }\n}"}
{"prompt":"Crea un muro cortina de 6 metros de ancho y 4 metros de alto.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nWallType cwType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Kind == WallKind.Curtain);\n\nif (level != null && cwType != null)\n{\n    Line baseLine = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits(6, UnitTypeId.Meters), 0, 0));\n    Wall.Create(doc, baseLine, cwType.Id, level.Id, UnitUtils.ConvertToInternalUnits(4.0, UnitTypeId.Meters), 0.0, false, false);\n}"}
{"prompt":"Generate a new material named 'Dark Oak' with a wood surface pattern.","completion":"string materialName = \"Dark Oak\";\nElementId materialId = Material.Create(doc, materialName);\n\nif (materialId != ElementId.InvalidElementId)\n{\n    Material material = doc.GetElement(materialId) as Material;\n    FillPatternElement fillPattern = new FilteredElementCollector(doc).OfClass(typeof(FillPatternElement)).FirstOrDefault(p => p.Name.Contains(\"Wood\") || p.Name.Contains(\"Madera\")) as FillPatternElement;\n    \n    if (material != null && fillPattern != null)\n    {\n        material.SurfaceForegroundPatternId = fillPattern.Id;\n        material.Color = new Color(139, 69, 19);\n    }\n}"}
{"prompt":"Clone the 'Generic - 114mm' wall type and name it 'Interior - 15cm Plaster'.","completion":"string originalName = \"Generic - 114mm\";\nstring newName = \"Interior - 15cm Plaster\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif(originalType!=null)\n    originalType.Duplicate(newName);"}
{"prompt":"Crea un nuevo nivel llamado 'Mezzanine' a 7.4 metros de elevación.","completion":"string levelName = \"Mezzanine\";\ndouble elevation = UnitUtils.ConvertToInternalUnits(7.4, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Crea los siguientes planos: 'A-101' con nombre 'Planta Baja', y 'A-102' con nombre 'Planta Alta'.","completion":"FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (titleBlock != null)\n{\n    ViewSheet sheet1 = ViewSheet.Create(doc, titleBlock.Id);\n    sheet1.SheetNumber = \"A-101\";\n    sheet1.Name = \"Planta Baja\";\n    ViewSheet sheet2 = ViewSheet.Create(doc, titleBlock.Id);\n    sheet2.SheetNumber = \"A-102\";\n    sheet2.Name = \"Planta Alta\";\n}"}
{"prompt":"Modifica el tipo de una losa seleccionada a 'Concreto 15cm'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una losa\");\n\nif (pickedRef != null)\n{\n    Floor floorToChange = doc.GetElement(pickedRef) as Floor;\n    FloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name == \"Concreto 15cm\");\n    \n    if (floorToChange != null && newType != null)\n    {\n        floorToChange.ChangeTypeId(newType.Id);\n    }\n}"}
{"prompt":"Clona el nivel 4 con un desfase de 7m y llámalo 'Mezanine'.","completion":"string levelName = \"Nivel 4\";\nLevel levelToCopy = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (levelToCopy != null)\n{\n    double offset = UnitUtils.ConvertToInternalUnits(7, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, levelToCopy.Elevation + offset);\n    newLevel.Name = \"Mezanine\";\n}"}
{"prompt":"Mark all rooms with their area.","completion":"using (Transaction t = new Transaction(doc, \"Tag All Rooms\"))\n{\n    t.Start();\n    View activeView = doc.ActiveView;\n\n    if (activeView != null)\n    {\n        List<Room> rooms = new FilteredElementCollector(doc, activeView.Id).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>().ToList();\n        foreach(Room room in rooms)\n        {\n            LocationPoint locPoint = room.Location as LocationPoint;\n            if(locPoint != null)\n            {\n                doc.Create.NewRoomTag(new LinkElementId(room.Id), new UV(locPoint.Point.X, locPoint.Point.Y), activeView.Id);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Rota un elemento seleccionado 85 grados sobre su eje Z.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un elemento para rotar\");\nElement elem = doc.GetElement(pickedRef.ElementId);\nLocationPoint lp = elem.Location as LocationPoint;\nLine axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\nElementTransformUtils.RotateElement(doc, elem.Id, axis, Math.PI \/ 85);"}
{"prompt":"Set the sill height of all windows to 900mm.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits(900, UnitTypeId.Millimeters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Get the coordinates of the project base point and the survey point.","completion":"BasePoint surveyPoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(p => p.IsShared);\nBasePoint projectBasePoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(p => !p.IsShared);\n\nXYZ surveyCoords = null;\nif (surveyPoint != null) surveyCoords = surveyPoint.get_BoundingBox(null).Min;\n\nXYZ projectCoords = null;\nif (projectBasePoint != null) projectCoords = projectBasePoint.get_BoundingBox(null).Min;"}
{"prompt":"Configure the 'Comments' parameter for all doors on Level 2 to 'Fire Rating - 92 min'.","completion":"string levelName = \"Level 2\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(targetLevel.Id);\n    FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WherePasses(levelFilter);\n    foreach (Element door in collector)\n    {\n        Parameter commentsParam = door.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n        if (commentsParam != null && !commentsParam.IsReadOnly) { commentsParam.Set(\"Fire Rating - 92 min\"); }\n    }\n}"}
{"prompt":"Quiero una lista de los tipos de equipos mecánicos en el modelo.","completion":"FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_MechanicalEquipment).WhereElementIsElementType();\nList<string> equipmentTypeNames = collector.Select(e => e.Name).ToList();"}
{"prompt":"Place a structural column at (10,5), making sure the family type is active.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null && columnSymbol != null)\n{\n    if (!columnSymbol.IsActive)\n    {\n        columnSymbol.Activate();\n    }\n    doc.Create.NewFamilyInstance(new XYZ(10, 5, 0), columnSymbol, level, StructuralType.Column);\n}"}
{"prompt":"Duplicate level 1 with a 7m offset and name it 'Mezzanine'.","completion":"string levelName = \"Mezzanine\";\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\n\nif (level1 != null)\n{\n    double newElevation = level1.ProjectElevation + UnitUtils.ConvertToInternalUnits(7, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, newElevation);\n    if (newLevel != null)\n    {\n        newLevel.Name = levelName;\n    }\n}"}
{"prompt":"Modifica el tipo de la ventana seleccionada al tipo 'Fija 117x60'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una ventana\");\nFamilySymbol newType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name == \"Fija 117x60\");\nif (pickedRef != null && newType != null)\n{\n    FamilyInstance window = doc.GetElement(pickedRef.ElementId) as FamilyInstance;\n    if (window != null)\n    {\n        window.Symbol = newType;\n    }\n}"}
{"prompt":"Establece el parámetro 'Comentarios' de todas las puertas del Nivel 1 a 'Clasificación Fuego - 92 min'.","completion":"using(Transaction t = new Transaction(doc, \"Set Door Comments\"))\n{\n    t.Start();\n    Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel 1\");\n    if(level1 != null)\n    {\n        List<FamilyInstance> doorsOnLevel1 = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsNotElementType().Cast<FamilyInstance>().Where(fi => fi.LevelId.Equals(level1.Id)).ToList();\n        foreach(FamilyInstance door in doorsOnLevel1)\n        {\n            Parameter commentsParam = door.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n            if(commentsParam != null && !commentsParam.IsReadOnly)\n            {\n                commentsParam.Set(\"Clasificación Fuego - 92 min\");\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Attach a reference point at coordinates (1,1,6) inside the family editor.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(1,1,6));"}
{"prompt":"Obtén el número total de advertencias en el proyecto.","completion":"int totalWarnings = doc.GetWarnings().Count;\n"}
{"prompt":"Dado un muro, obtén los materiales y sus volúmenes.","completion":"UIDocument localUidoc = uidoc;\nReference pickedRef = localUidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un muro\");\n\nDictionary<string, double> materialVolumes = new Dictionary<string, double>();\nif (pickedRef != null)\n{\n    Wall wall = doc.GetElement(pickedRef) as Wall;\n    if (wall != null)\n    {\n        Parameter areaParam = wall.get_Parameter(BuiltInParameter.HOST_AREA_COMPUTED);\n        if (areaParam != null && areaParam.HasValue)\n        {\n            double wallArea = areaParam.AsDouble();\n            WallType wallType = wall.WallType;\n            if (wallType != null)\n            {\n                CompoundStructure cs = wallType.GetCompoundStructure();\n                if (cs != null)\n                {\n                    foreach(CompoundStructureLayer layer in cs.GetLayers())\n                    {\n                        Material material = doc.GetElement(layer.MaterialId) as Material;\n                        if(material != null)\n                        {\n                            double volume = layer.Width * wallArea; \n                            materialVolumes[material.Name] = volume;\n                        }\n                    }\n                }\n            }\n        }\n    }\n}"}
{"prompt":"Crea una cimentación de viga de 8 metros de largo.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol foundationSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFoundation).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null && foundationSymbol != null)\n{\n    Line line = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters), 0, 0));\n    doc.Create.NewFamilyInstance(line, foundationSymbol, level, StructuralType.Footing);\n}"}
{"prompt":"Create a new 5mm text type in green color.","completion":"using (Transaction t = new Transaction(doc, \"Create Green Text Type\"))\n{\n    t.Start();\n    string newTypeName = \"5mm Green\";\n    TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\n    if (defaultType != null)\n    {\n        TextNoteType newType = defaultType.Duplicate(newTypeName) as TextNoteType;\n        if (newType != null)\n        {\n            Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n            if (textSizeParam != null && !textSizeParam.IsReadOnly)\n            {\n                textSizeParam.Set(5 \/ 304.8);\n            }\n            Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n            if (lineColorParam != null && !lineColorParam.IsReadOnly)\n            {\n                 lineColorParam.Set(65280);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Sitúa una instancia de la familia 'Mesa de Oficina' en el centro de la habitación 'Despacho 98'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 98\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Mesa de Oficina\") as FamilySymbol;\nif(furnitureSymbol != null && !furnitureSymbol.IsActive) furnitureSymbol.Activate();\nif(room != null)\n{\n    LocationPoint roomCenter = room.Location as LocationPoint;\n    if(roomCenter != null && furnitureSymbol != null && room.Level != null)\n    {\n        doc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Define the sill height of all windows to 4 meter.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits(4, UnitTypeId.Meters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Clone the 'Level 6' view as a dependent view.","completion":"ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v => v.Name == \"Level 6\") as ViewPlan;\n\nif (viewToDuplicate != null)\n{\n    ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n}"}
{"prompt":"Encuentra todos los pilares estructurales en el Nivel 2 que sean de hormigón.","completion":"Level level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 2\") as Level;\nFamilySymbol concreteColumnType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name.Contains(\"Hormigón\"));\nif (level2 != null && concreteColumnType != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level2.Id);\n    FamilySymbolFilter typeFilter = new FamilySymbolFilter(concreteColumnType.Id);\n    LogicalAndFilter andFilter = new LogicalAndFilter(levelFilter, typeFilter);\n    List<Element> concreteColumns = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WherePasses(andFilter).ToList();\n}"}
{"prompt":"Include a 90-degree elbow between two pipes.","completion":"using (Transaction t = new Transaction(doc, \"Add Elbow\"))\n{\n    t.Start();\n    List<Pipe> pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast<Pipe>().Where(p => p.ConnectorManager != null && p.ConnectorManager.UnusedConnectors.Size > 0).Take(2).ToList();\n\n    if (pipes.Count >= 2)\n    {\n        Connector c1 = pipes[0].ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n        Connector c2 = pipes[1].ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n        \n        if (c1 != null && c2 != null)\n        {\n            doc.Create.NewElbowFitting(c1, c2);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Put a material tag on a wall face.","completion":"using (Transaction t = new Transaction(doc, \"Place Material Tag\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference faceRef = localUidoc.Selection.PickObject(ObjectType.Face, \"Select a face to tag\");\n    XYZ point = localUidoc.Selection.PickPoint(\"Select the tag location\");\n    View activeView = doc.ActiveView;\n\n    if (faceRef != null && point != null && activeView != null)\n    {\n        IndependentTag.Create(doc, activeView.Id, faceRef, true, TagMode.TM_ADDBY_MATERIAL, TagOrientation.Horizontal, point);\n    }\n    t.Commit();\n}"}
{"prompt":"Create a floor plan view for 'Level 1'.","completion":"string levelName = \"Level 1\";\nLevel level3 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.FloorPlan);\n\nif (level3 != null && vft != null)\n{\n    ViewPlan viewPlan = ViewPlan.Create(doc, vft.Id, level3.Id);\n}"}
{"prompt":"Crea un nuevo tipo de cota lineal con texto azul y tamaño 2mm.","completion":"using (Transaction t = new Transaction(doc, \"Create Dimension Type\"))\n{\n    t.Start();\n    string newTypeName = \"Cota Azul 2mm\";\n    DimensionType linearDimType = new FilteredElementCollector(doc).OfClass(typeof(DimensionType)).Cast<DimensionType>().FirstOrDefault(dt => dt.StyleType == DimensionStyleType.Linear);\n\n    if (linearDimType != null)\n    {\n        DimensionType newDimType = linearDimType.Duplicate(newTypeName) as DimensionType;\n        if (newDimType != null)\n        {\n            Parameter colorParam = newDimType.get_Parameter(BuiltInParameter.LINE_COLOR);\n            if (colorParam != null && !colorParam.IsReadOnly) colorParam.Set(255);\n            Parameter textSizeParam = newDimType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n            if (textSizeParam != null && !textSizeParam.IsReadOnly) textSizeParam.Set(2 \/ 304.8);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Construct a DirectShape topography from a list of points.","completion":"\/\/ Create a default set of points as none were specified in the prompt\nList<XYZ> points = new List<XYZ>\n{\n    new XYZ(0, 0, 0),\n    new XYZ(50, 0, 2),\n    new XYZ(0, 50, 5),\n    new XYZ(50, 50, 3)\n};\n\nTessellatedShapeBuilder builder = new TessellatedShapeBuilder();\nbuilder.OpenConnectedFaceSet(true);\nbuilder.AddFace(new TessellatedFace(new List<XYZ> { points[0], points[1], points[2] }, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ> { points[1], points[3], points[2] }, ElementId.InvalidElementId));\nbuilder.CloseConnectedFaceSet();\nbuilder.Build();\nTessellatedShapeBuilderResult result = builder.GetBuildResult();\n\nif (result.GetGeometricalObjects().Any())\n{\n    DirectShape ds = DirectShape.CreateElement(doc, new ElementId(BuiltInCategory.OST_Topography));\n    if (ds != null)\n    {\n        ds.SetShape(result.GetGeometricalObjects());\n        ds.Name = \"Topography DirectShape\";\n    }\n}"}
{"prompt":"Display a dialog box with 'Yes' and 'No' options.","completion":""}
{"prompt":"Dado un muro, encuentra todas las tuberías que lo atraviesan.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference wallRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un muro\");\n\nList<ElementId> intersectingPipes = new List<ElementId>();\nif (wallRef != null)\n{\n    Element wall = doc.GetElement(wallRef);\n    if (wall != null)\n    {\n        ElementIntersectsElementFilter filter = new ElementIntersectsElementFilter(wall);\n        intersectingPipes = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_PipeCurves).WherePasses(filter).ToElementIds().ToList();\n    }\n}\n"}
{"prompt":"Ubica una ventana de 1x1.2 metros en la pared más cercana.","completion":"Wall hostWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nFamilySymbol originalSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (originalSymbol != null && hostWall != null)\n{\n    string newTypeName = \"Window 1.0m x 1.2m\";\n    FamilySymbol newSymbol = null;\n    try { newSymbol = originalSymbol.Duplicate(newTypeName) as FamilySymbol; } catch {}\n    if (newSymbol == null) { newSymbol = new FilteredElementCollector(doc).OfClass(typeof(FamilySymbol)).Cast<FamilySymbol>().FirstOrDefault(s => s.Name == newTypeName); }\n    if(newSymbol != null)\n    {\n        if (!newSymbol.IsActive) { newSymbol.Activate(); }\n        Parameter widthParam = newSymbol.LookupParameter(\"Width\");\n        if (widthParam != null) widthParam.Set(UnitUtils.ConvertToInternalUnits(1.0, UnitTypeId.Meters));\n        Parameter heightParam = newSymbol.LookupParameter(\"Height\");\n        if (heightParam != null) heightParam.Set(UnitUtils.ConvertToInternalUnits(1.2, UnitTypeId.Meters));\n        Level level = doc.GetElement(hostWall.LevelId) as Level;\n        LocationCurve locationCurve = hostWall.Location as LocationCurve;\n        if (level != null && locationCurve != null)\n        {\n            XYZ insertionPoint = locationCurve.Curve.Evaluate(0.5, true);\n            doc.Create.NewFamilyInstance(insertionPoint, newSymbol, hostWall, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n        }\n    }\n}"}
{"prompt":"Add a 90-degree elbow between two pipes.","completion":"using (Transaction t = new Transaction(doc, \"Add Elbow\"))\n{\n    t.Start();\n    List<Pipe> pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast<Pipe>().Where(p => p.ConnectorManager != null && p.ConnectorManager.UnusedConnectors.Size > 0).Take(2).ToList();\n\n    if (pipes.Count >= 2)\n    {\n        Connector c1 = pipes[0].ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n        Connector c2 = pipes[1].ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n        \n        if (c1 != null && c2 != null)\n        {\n            doc.Create.NewElbowFitting(c1, c2);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Selecciona todos los muros con una resistencia al fuego de 86 minutos.","completion":"ElementId fireRatingParamId = new ElementId(BuiltInParameter.FIRE_RATING);\nParameterValueProvider pvp = new ParameterValueProvider(fireRatingParamId);\nFilterStringRuleEvaluator evaluator = new FilterStringEquals();\nFilterRule rule = new FilterStringRule(pvp, evaluator, \"986 min\");\nElementParameterFilter filter = new ElementParameterFilter(rule);\nICollection<ElementId> wallsToSelect = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(filter).ToElementIds();\nif (wallsToSelect.Count > 0)\n{\n    new UIDocument(doc).Selection.SetElementIds(wallsToSelect);\n}"}
{"prompt":"Replicate the 'Level 1' view as a dependent view.","completion":"ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v => v.Name == \"Level 1\") as ViewPlan;\n\nif (viewToDuplicate != null)\n{\n    ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n}"}
{"prompt":"Ubica una instancia de la familia 'M_Chair-Breuer' en el centro de la habitación 'Despacho 105'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 105\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"M_Chair-Breuer\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);"}
{"prompt":"Create a floor with a circular hole in the center.","completion":"using (Transaction t = new Transaction(doc, \"Create Floor with Hole\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    FloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\n\n    if (level != null && floorType != null)\n    {\n        XYZ p1 = new XYZ(-10 \/ 0.3048, -10 \/ 0.3048, 0);\n        XYZ p2 = new XYZ(10 \/ 0.3048, -10 \/ 0.3048, 0);\n        XYZ p3 = new XYZ(10 \/ 0.3048, 10 \/ 0.3048, 0);\n        XYZ p4 = new XYZ(-10 \/ 0.3048, 10 \/ 0.3048, 0);\n        CurveLoop outerLoop = new CurveLoop();\n        outerLoop.Append(Line.CreateBound(p1, p2));\n        outerLoop.Append(Line.CreateBound(p2, p3));\n        outerLoop.Append(Line.CreateBound(p3, p4));\n        outerLoop.Append(Line.CreateBound(p4, p1));\n\n        XYZ center = XYZ.Zero;\n        double radius = 2 \/ 0.3048;\n        CurveLoop innerLoop = new CurveLoop();\n        innerLoop.Append(Arc.Create(center - XYZ.BasisX * radius, center + XYZ.BasisX * radius, center + XYZ.BasisY * radius));\n        innerLoop.Append(Arc.Create(center + XYZ.BasisX * radius, center - XYZ.BasisX * radius, center - XYZ.BasisY * radius));\n\n        Floor.Create(doc, new List<CurveLoop> { outerLoop, innerLoop }, floorType.Id, level.Id);\n    }\n    t.Commit();\n}"}
{"prompt":"Crea los siguientes planos: 'A-101' con nombre 'Planta Baja', y 'A-102' con nombre 'Planta Alta'.","completion":"FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (titleBlock != null)\n{\n    ViewSheet sheet1 = ViewSheet.Create(doc, titleBlock.Id);\n    sheet1.SheetNumber = \"A-101\";\n    sheet1.Name = \"Planta Baja\";\n    ViewSheet sheet2 = ViewSheet.Create(doc, titleBlock.Id);\n    sheet2.SheetNumber = \"A-102\";\n    sheet2.Name = \"Planta Alta\";\n}"}
{"prompt":"Ubica una instancia de la familia 'Mesa de Oficina' en el centro de la habitación 'Despacho 104'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 104\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Mesa de Oficina\") as FamilySymbol;\nif(furnitureSymbol != null && !furnitureSymbol.IsActive) furnitureSymbol.Activate();\nif(room != null)\n{\n    LocationPoint roomCenter = room.Location as LocationPoint;\n    if(roomCenter != null && furnitureSymbol != null && room.Level != null)\n    {\n        doc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Dame una lista de todos los tipos de muro en el proyecto.","completion":"FilteredElementCollector collector = new FilteredElementCollector(doc).OfClass(typeof(WallType));\nList<string> wallTypeNames = collector.Select(e => e.Name).ToList();"}
{"prompt":"Change the type of a floor to one that contains 'Concrete'.","completion":"Floor floorToChange = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault() as Floor;\nFloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name.Contains(\"Concrete\"));\n\nif (floorToChange != null && newType != null)\n{\n    floorToChange.ChangeTypeId(newType.Id);\n}"}
{"prompt":"Create 10 architectural worksets.","completion":"List<string> worksetNames = new List<string> { \"TAD_ARQ_WALLS\", \"TAD_ARQ_FINISHES\", \"TAD_ARQ_CEILINGS\", \"TAD_ARQ_FLOORS\", \"TAD_ARQ_RAILINGS\", \"TAD_ARQ_WINDOWS\", \"TAD_ARQ_CARPENTRY\", \"TAD_ARQ_FURNITURE\", \"TAD_ARQ_PLUMBING\", \"TAD_ARQ_EXTERIOR\" };\nforeach(string name in worksetNames)\n{\n    Workset.Create(doc, name);\n}"}
{"prompt":"Sitúa la vista 'Primer Piso' en el centro de la hoja activa.","completion":"ViewPlan viewToPlace = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v => v.Name == \"Primer Piso\") as ViewPlan;\nViewSheet activeSheet = doc.ActiveView as ViewSheet;\n\nif (viewToPlace != null && activeSheet != null)\n{\n    BoundingBoxUV sheetBox = activeSheet.Outline;\n    XYZ centerPoint = new XYZ((sheetBox.Min.U + sheetBox.Max.U) \/ 2, (sheetBox.Min.V + sheetBox.Max.V) \/ 2, 0);\n    Viewport.Create(doc, activeSheet.Id, viewToPlace.Id, centerPoint);\n}"}
{"prompt":"Crea una copia de la vista activa y nómbrala 'Copia de Trabajo'.","completion":"View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    ElementId newViewId = activeView.Duplicate(ViewDuplicateOption.Duplicate);\n    View newView = doc.GetElement(newViewId) as View;\n    if (newView != null)\n    {\n        newView.Name = \"Copia de Trabajo\";\n    }\n}"}
{"prompt":"Place an instance of the 'Office Desk' family in the center of the 'Office 101' room.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Office 101\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Office Desk\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);"}
{"prompt":"Define the 'Mark' parameter of all selected walls to 'W-EXT-1'.","completion":"using (Transaction t = new Transaction(doc, \"Set Wall Mark\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    ICollection<ElementId> selectedIds = localUidoc.Selection.GetElementIds();\n\n    if (selectedIds != null && selectedIds.Count > 1)\n    {\n        foreach(ElementId id in selectedIds)\n        {\n            Element elem = doc.GetElement(id);\n            if(elem is Wall)\n            {\n                Parameter markParam = elem.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n                if (markParam != null && !markParam.IsReadOnly) markParam.Set(\"W-EXT-01\");\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Ajusta el tipo de la ventana seleccionada al tipo 'Fija 122x60'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una ventana\");\nFamilySymbol newType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name == \"Fija 122x60\");\nif (pickedRef != null && newType != null)\n{\n    FamilyInstance window = doc.GetElement(pickedRef.ElementId) as FamilyInstance;\n    if (window != null)\n    {\n        window.Symbol = newType;\n    }\n}"}
{"prompt":"Importa una topografía desde un archivo CSV.","completion":"using (Transaction t = new Transaction(doc, \"Create Topography\"))\n{\n    t.Start();\n    \/\/ CSV file reading is not directly supported by a single API call.\n    \/\/ You would typically read the file line by line, parse the XYZ coordinates,\n    \/\/ and then use the TopographySurface.Create method with a list of points.\n    \/\/ As a placeholder, here's how to create a simple topography from a list of points:\n    IList<XYZ> points = new List<XYZ>();\n    points.Add(new XYZ(0, 0, 0));\n    points.Add(new XYZ(10, 0, 0));\n    points.Add(new XYZ(0, 10, 0));\n    points.Add(new XYZ(10, 10, 5));\n    TopographySurface.Create(doc, points);\n    t.Commit();\n}"}
{"prompt":"Asigna el material 'Acero' a la primera capa de un tipo de muro.","completion":"using (Transaction t = new Transaction(doc, \"Assign Material\"))\n{\n    t.Start();\n    WallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.GetCompoundStructure() != null);\n    Material steel = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m => m.Name.Contains(\"Steel\") || m.Name.Contains(\"Acero\"));\n\n    if (wallType != null && steel != null)\n    {\n        CompoundStructure cs = wallType.GetCompoundStructure();\n        if (cs != null && cs.LayerCount > 0)\n        {\n            cs.SetMaterialId(0, steel.Id);\n            wallType.SetCompoundStructure(cs);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Aplica aislamiento térmico de 27mm a todas las tuberías de agua caliente.","completion":"PipeInsulationType insulationType = new FilteredElementCollector(doc).OfClass(typeof(PipeInsulationType)).FirstOrDefault() as PipeInsulationType;\nPipingSystemType hotWaterSystem = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).Cast<PipingSystemType>().FirstOrDefault(s => s.Name.Contains(\"Hot Water\") || s.Name.Contains(\"Agua Caliente\"));\n\nif (insulationType != null && hotWaterSystem != null)\n{\n    List<Pipe> pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast<Pipe>().Where(p => \n    {\n        Parameter systemParam = p.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM);\n        return systemParam != null && systemParam.HasValue && systemParam.AsElementId() == hotWaterSystem.Id;\n    }).ToList();\n    \n    foreach(Pipe p in pipes)\n    {\n        PipeInsulation.Create(doc, p.Id, insulationType.Id, UnitUtils.ConvertToInternalUnits(27, UnitTypeId.Millimeters));\n    }\n}"}
{"prompt":"Place lighting posts every 10m along a 100m path.","completion":"FamilySymbol lightSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsElementType().FirstOrDefault(s => s.Name.Contains(\"Post\") || s.Name.Contains(\"Pole\")) as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (lightSymbol != null && level != null)\n{\n    if(!lightSymbol.IsActive) lightSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\n    for(int i = 0; i <= 10; i++)\n    {\n        XYZ point = new XYZ(i * spacing, 0, 0);\n        doc.Create.NewFamilyInstance(point, lightSymbol, level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Agrega refuerzo a una columna.","completion":"RebarBarType barType = new FilteredElementCollector(doc).OfClass(typeof(RebarBarType)).FirstOrDefault() as RebarBarType;\nRebarShape shape = new FilteredElementCollector(doc).OfClass(typeof(RebarShape)).FirstOrDefault() as RebarShape;\nFamilyInstance column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\n\nif (barType != null && shape != null && column != null)\n{\n    \/\/ Para simplificar, asume que la columna tiene una LocationPoint y una Transform válida.\n    \/\/ Para mayor robustez, se podría validar column.Location y column.GetTransform().\n    Rebar.CreateFromRebarShape(doc, shape, barType, column, column.GetTransform().Origin, XYZ.BasisX, XYZ.BasisY);\n}"}
{"prompt":"Inserta un plano de referencia horizontal llamado 'Eje Central A'.","completion":"using (Transaction t = new Transaction(doc, \"Add Reference Plane\"))\n{\n    t.Start();\n    string rpName = \"Eje Central A\";\n    View activeView = doc.ActiveView;\n\n    if (activeView != null)\n    {\n        XYZ bubbleEnd = new XYZ(0, 10, 0);\n        XYZ freeEnd = new XYZ(10, 10, 0);\n        XYZ cutVec = XYZ.BasisZ;\n        ReferencePlane rp = doc.Create.NewReferencePlane(bubbleEnd, freeEnd, cutVec, activeView);\n        if (rp != null)\n        {\n            rp.Name = rpName;\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Obtén las coordenadas del punto base y del punto de reconocimiento.","completion":"BasePoint surveyPoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(p => p.IsShared);\nBasePoint projectBasePoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(p => !p.IsShared);\n\nXYZ surveyCoords = null;\nif (surveyPoint != null) surveyCoords = surveyPoint.get_BoundingBox(null).Min;\n\nXYZ projectCoords = null;\nif (projectBasePoint != null) projectCoords = projectBasePoint.get_BoundingBox(null).Min;"}
{"prompt":"Replicate the 'Generic - 161mm' wall type and name it 'Interior - 15cm Plaster'.","completion":"string originalName = \"Generic - 161mm\";\nstring newName = \"Interior - 15cm Plaster\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif(originalType!=null)\n    originalType.Duplicate(newName);"}
{"prompt":"Construct a new Level named 'Level 3' at an elevation of 13 meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(13, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Level 3\";\n}"}
{"prompt":"Incorpora un nivel llamado 'Nivel Azotea' a 15.6 metros.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(15.6, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Nivel Azotea\";\n}"}
{"prompt":"Build a stair between Level 1 and Level 1","completion":"\/\/ This is a complex operation that requires multiple steps and\/or user interaction and is not supported by the agent."}
{"prompt":"Reproduce la vista 'Nivel 6' como una vista dependiente.","completion":"ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v => v.Name == \"Nivel 6\") as ViewPlan;\n\nif (viewToDuplicate != null)\n{\n    ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n}"}
{"prompt":"Create a new Level named 'Level 7' at an elevation of 13 meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(13, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Level 7\";\n}"}
{"prompt":"Temporarily isolate the Doors category in the active view.","completion":"ElementId doorCategoryId = new ElementId(BuiltInCategory.OST_Doors);\nICollection<ElementId> categoryIds = new List<ElementId> { doorCategoryId };\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.IsolateCategoriesTemporary(categoryIds);\n}"}
{"prompt":"Join the geometry of an intersecting column and floor.","completion":"Element column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().FirstOrDefault();\nElement floor = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault();\n\nif (column != null && floor != null)\n{\n    JoinGeometryUtils.JoinGeometry(doc, column, floor);\n}"}
{"prompt":"Crea un nuevo nivel 'Nivel 1' a una elevación de 13 metros.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(13, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Nivel 1\";\n}"}
{"prompt":"Place a piece of furniture at coordinates (2,3).","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null && furnitureSymbol != null)\n{\n    doc.Create.NewFamilyInstance(new XYZ(UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0), furnitureSymbol, level, StructuralType.NonStructural);\n}"}
{"prompt":"Set the 'Mark' parameter of all selected walls to 'W-EXT-3'.","completion":"using (Transaction t = new Transaction(doc, \"Set Wall Mark\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    ICollection<ElementId> selectedIds = localUidoc.Selection.GetElementIds();\n\n    if (selectedIds != null && selectedIds.Count > 3)\n    {\n        foreach(ElementId id in selectedIds)\n        {\n            Element elem = doc.GetElement(id);\n            if(elem is Wall)\n            {\n                Parameter markParam = elem.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n                if (markParam != null && !markParam.IsReadOnly) markParam.Set(\"W-EXT-01\");\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Select all walls on 'Level 4' and change their comment to 'REVIEW INSULATION'.","completion":"string levelName = \"Level 4\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(targetLevel.Id);\n    FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(levelFilter);\n    foreach (Element wall in collector)\n    {\n        Parameter commentsParam = wall.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n        if (commentsParam != null && !commentsParam.IsReadOnly) { commentsParam.Set(\"REVIEW INSULATION\"); }\n    }\n}"}
{"prompt":"Crea un ensamblaje a partir de los elementos seleccionados.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds != null && selectedIds.Count > 0)\n{\n    AssemblyInstance assemblyInstance = AssemblyInstance.Create(doc, selectedIds, new ElementId(BuiltInCategory.OST_Assemblies));\n    if (assemblyInstance != null)\n    {\n        assemblyInstance.Name = \"Nuevo Ensamblaje\";\n    }\n}"}
{"prompt":"Inserta una armadura (truss) de 6 metros entre dos puntos.","completion":"using (Transaction t = new Transaction(doc, \"Create Truss\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    FamilySymbol trussSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Family.Name.Contains(\"Truss\"));\n\n    if (level != null && trussSymbol != null)\n    {\n        if (!trussSymbol.IsActive) { trussSymbol.Activate(); }\n        Line trussLine = Line.CreateBound(new XYZ(0, 10, 0), new XYZ(6 \/ 0.3048, 10, 0));\n        doc.Create.NewFamilyInstance(trussLine, trussSymbol, level, StructuralType.NonStructural);\n    }\n    t.Commit();\n}"}
{"prompt":"Crea un techo por extrusión con un perfil en arco.","completion":"using (Transaction t = new Transaction(doc, \"Create Extrusion Roof\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    RoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n\n    if (level != null && roofType != null && doc.ActiveView != null)\n    {\n        CurveArray profile = new CurveArray();\n        profile.Append(Arc.Create(new XYZ(-10,0,0), new XYZ(10,0,0), new XYZ(0,5,0)));\n        Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisY, XYZ.Zero);\n        ReferencePlane refPlane = doc.Create.NewReferencePlane(plane.Origin, plane.Origin + XYZ.BasisX, plane.Normal, doc.ActiveView);\n        if(refPlane != null)\n            doc.Create.NewExtrusionRoof(profile, refPlane, level, roofType, 0, 20);\n    }\n    t.Commit();\n}"}
{"prompt":"Fetch the MEP space associated with the room 'Office 99'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Cast<Room>().FirstOrDefault(r => r.Name == \"Office 99\");\nList<Space> spaces = new List<Space>();\n\nif (room != null)\n{\n    spaces = new FilteredElementCollector(doc).OfClass(typeof(Space)).Cast<Space>().Where(s => s.Room != null && s.Room.Id == room.Id).ToList();\n}"}
{"prompt":"Build a new wall type 'Generic Wall 274mm' with a thickness of 30cm.","completion":"string newTypeName = \"Generic Wall 274mm\";\nWallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif (oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(newTypeName) as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(30, UnitTypeId.Centimeters));\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n}"}
{"prompt":"Coloca una instancia de la familia 'Mesa de Oficina' en el centro de la habitación 'Despacho 100'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 100\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Mesa de Oficina\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);"}
{"prompt":"Aísla temporalmente todo el mobiliario en la vista activa.","completion":"ICollection<ElementId> furnitureIds = new FilteredElementCollector(doc, doc.ActiveView.Id).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsNotElementType().ToElementIds();\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.IsolateElementsTemporary(furnitureIds);\n}"}
{"prompt":"Generate an MEP space for each room on Level 1","completion":"string levelName = \"Level 1\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    FilteredElementCollector roomCollector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WherePasses(new ElementLevelFilter(targetLevel.Id));\n    foreach (Room room in roomCollector.ToElements().Cast<Room>())\n    {\n        LocationPoint locPoint = room.Location as LocationPoint;\n        if (locPoint != null)\n        {\n            UV point = new UV(locPoint.Point.X, locPoint.Point.Y);\n            doc.Create.NewSpace(targetLevel, point);\n        }\n    }\n}"}
{"prompt":"Ubica una instancia de la familia 'M_Chair-Breuer' en el centro de la habitación 'Despacho 103'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 103\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"M_Chair-Breuer\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);"}
{"prompt":"Get all rooms on Level 3","completion":"string levelName = \"Level 3\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(targetLevel.Id);\n    FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WherePasses(levelFilter);\n    uidoc.Selection.SetElementIds(collector.ToElementIds());\n}"}
{"prompt":"Create a section view named 'Longitudinal Section'.","completion":"ViewFamilyType sectionType = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.Section);\nif (sectionType != null)\n{\n    BoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\n    sectionBox.Min = new XYZ(-30, -3, 0);\n    sectionBox.Max = new XYZ(30, 3, 30);\n    Transform transform = Transform.Identity;\n    sectionBox.Transform = transform;\n    ViewSection sectionView = ViewSection.CreateSection(doc, sectionType.Id, sectionBox);\n    if (sectionView != null)\n    {\n        try { sectionView.Name = \"Longitudinal Section\"; } catch {}\n    }\n}"}
{"prompt":"Load the 'Table.rfa' family and place it at (1,6,3) on Level 1","completion":"string familyPath = \"C:\/Common\/Paths\/Table.rfa\";\nFamily tableFamily = null;\nbool familyLoaded = doc.LoadFamily(familyPath, out tableFamily);\n\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\n\nif (familyLoaded && tableFamily != null && level1 != null)\n{\n    FamilySymbol tableSymbol = doc.GetElement(tableFamily.GetFamilySymbolIds().FirstOrDefault()) as FamilySymbol;\n    if (tableSymbol != null)\n    {\n        if (!tableSymbol.IsActive) tableSymbol.Activate();\n        XYZ point = new XYZ(UnitUtils.ConvertToInternalUnits(6, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 1);\n        doc.Create.NewFamilyInstance(point, tableSymbol, level1, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Construct a new level named 'Mezzanine' at 7.5 meters elevation.","completion":"string levelName = \"Mezzanine\";\ndouble elevation = UnitUtils.ConvertToInternalUnits(7.5, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Cambia el tipo de una losa por uno que contenga 'Concreto'.","completion":"Floor floorToChange = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault() as Floor;\nFloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name.Contains(\"Concreto\") || ft.Name.Contains(\"Concrete\"));\n\nif (floorToChange != null && newType != null)\n{\n    floorToChange.ChangeTypeId(newType.Id);\n}"}
{"prompt":"Replicate level 4 with a 3m offset and name it 'Mezzanine'.","completion":"string levelName = \"Level 4\";\nLevel levelToCopy = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (levelToCopy != null)\n{\n    double offset = UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, levelToCopy.Elevation + offset);\n    newLevel.Name = \"Mezzanine\";\n}"}
{"prompt":"Put a structural column at (10,5), making sure the family type is active.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null && columnSymbol != null)\n{\n    if (!columnSymbol.IsActive)\n    {\n        columnSymbol.Activate();\n    }\n    doc.Create.NewFamilyInstance(new XYZ(10, 5, 0), columnSymbol, level, StructuralType.Column);\n}"}
{"prompt":"Generate an extrusion roof with a 10% slope.","completion":"using (Transaction t = new Transaction(doc, \"Create Extrusion Roof\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    RoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n\n    if (level != null && roofType != null)\n    {\n        CurveArray profile = new CurveArray();\n        profile.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(10 \/ 0.3048, 0, 1 \/ 0.3048)));\n        \n        Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisY, XYZ.Zero);\n        ReferencePlane refPlane = doc.Create.NewReferencePlane(plane.Origin, plane.Origin + XYZ.BasisX, plane.Normal, doc.ActiveView);\n        \n        if (refPlane != null)\n        {\n            doc.Create.NewExtrusionRoof(profile, refPlane, level, roofType, 0, 10 \/ 0.3048);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Pone una armadura (truss) de 6 metros entre dos puntos.","completion":"using (Transaction t = new Transaction(doc, \"Create Truss\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    FamilySymbol trussSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Family.Name.Contains(\"Truss\"));\n\n    if (level != null && trussSymbol != null)\n    {\n        if (!trussSymbol.IsActive) { trussSymbol.Activate(); }\n        Line trussLine = Line.CreateBound(new XYZ(0, 10, 0), new XYZ(6 \/ 0.3048, 10, 0));\n        doc.Create.NewFamilyInstance(trussLine, trussSymbol, level, StructuralType.NonStructural);\n    }\n    t.Commit();\n}"}
{"prompt":"Duplica el tipo de muro 'Basic Wall' y renómbralo.","completion":"string typeToDuplicate = \"Basic Wall\";\nstring newTypeName = \"Basic Wall Copy\";\nWallType wt = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(w=>w.Name==typeToDuplicate);\n\nif (wt != null)\n{\n    WallType newWt = wt.Duplicate(newTypeName) as WallType;\n}"}
{"prompt":"Alinea la cara de un muro con la cara de otro.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference ref1 = uidoc.Selection.PickObject(ObjectType.Face, \"Selecciona la cara de destino (estática)\");\nReference ref2 = uidoc.Selection.PickObject(ObjectType.Face, \"Selecciona la cara a mover\");\nView activeView = doc.ActiveView;\n\nif (ref1 != null && ref2 != null && activeView != null)\n{\n    doc.Create.NewAlignment(activeView, ref1, ref2);\n}"}
{"prompt":"Establece el parámetro 'Comentarios' de todas las puertas del Nivel 6 a 'Clasificación Fuego - 86 min'.","completion":"string levelName = \"Nivel 6\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(targetLevel.Id);\n    FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WherePasses(levelFilter);\n    foreach (Element door in collector)\n    {\n        Parameter commentsParam = door.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n        if (commentsParam != null && !commentsParam.IsReadOnly) { commentsParam.Set(\"Clasificación Fuego - 86 min\"); }\n    }\n}"}
{"prompt":"Actualiza el tipo de la ventana seleccionada al tipo 'Ventana Fija 125x60'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una ventana\");\nFamilySymbol newType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name == \"Ventana Fija 125x60\");\nif (pickedRef != null && newType != null)\n{\n    FamilyInstance window = doc.GetElement(pickedRef.ElementId) as FamilyInstance;\n    if (window != null)\n    {\n        window.Symbol = newType;\n    }\n}"}
{"prompt":"Asigna todos los muros y suelos seleccionados al workset 'Estructura'.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nWorkset workset = new FilteredWorksetCollector(doc).OfKind(WorksetKind.UserWorkset).FirstOrDefault(ws => ws.Name == \"Estructura\");\nif (selectedIds.Count > 0 && workset != null)\n{\n    int worksetId = workset.Id.IntegerValue;\n    foreach (ElementId id in selectedIds)\n    {\n        Element elem = doc.GetElement(id);\n        Parameter wsparam = elem.get_Parameter(BuiltInParameter.ELEM_PARTITION_PARAM);\n        if (wsparam != null && !wsparam.IsReadOnly) wsparam.Set(worksetId);\n    }\n}"}
{"prompt":"Assign the 'Mark' parameter to 'D-01' for the selected door.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a door\");\nif (pickedRef != null)\n{\n    Element door = doc.GetElement(pickedRef.ElementId);\n    if (door != null)\n    {\n        Parameter markParam = door.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n        if (markParam != null && !markParam.IsReadOnly)\n        {\n            markParam.Set(\"D-01\");\n        }\n    }\n}"}
{"prompt":"Create a SketchPlane on Level 2.","completion":"using (Transaction t = new Transaction(doc, \"Create Sketch Plane\"))\n{\n    t.Start();\n    Level level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 2\");\n\n    if (level2 != null)\n    {\n        Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisZ, new XYZ(0, 0, level2.Elevation));\n        SketchPlane skp = SketchPlane.Create(doc, plane);\n    }\n    t.Commit();\n}"}
{"prompt":"Change the visual style of the active view to 'Hidden Line'.","completion":"View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.DisplayStyle = DisplayStyle.HLR;\n}"}
{"prompt":"Duplicate the 'Level 1' view as a dependent view.","completion":"ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v => v.Name == \"Level 1\") as ViewPlan;\n\nif (viewToDuplicate != null)\n{\n    ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n}"}
{"prompt":"Duplicate the 'Level 2' plan view and make it a view template.","completion":"using (Transaction t = new Transaction(doc, \"Create View Template\"))\n{\n    t.Start();\n    ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().FirstOrDefault(v => v.Name == \"Level 2\");\n    string templateName = \"Level 2 Template\";\n\n    if (viewToDuplicate != null)\n    {\n        ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n        View newView = doc.GetElement(newViewId) as View;\n        if (newView != null)\n        {\n           \/\/ Direct conversion to a template may not be available in older APIs.\n           \/\/ A common workaround is to set the IsTemplate property if available and writable, \n           \/\/ which is not the case here. This is left as a comment for conceptual understanding.\n           \/\/ newView.IsTemplate = true;\n            newView.Name = templateName;\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Ubica las vistas 'Planta Nivel 1' y 'Primer Piso' en el plano 'A-101'.","completion":"ViewSheet sheet = new FilteredElementCollector(doc).OfClass(typeof(ViewSheet)).Cast<ViewSheet>().FirstOrDefault(s => s.SheetNumber == \"A-101\");\nView view1 = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().FirstOrDefault(v => v.Name == \"Planta Nivel 1\");\nView view2 = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().FirstOrDefault(v => v.Name == \"Primer Piso\");\nif (sheet != null && view1 != null && view2 != null)\n{\n    XYZ insertPoint1 = new XYZ(1.0, 1.0, 0);\n    Viewport.Create(doc, sheet.Id, view1.Id, insertPoint1);\n    XYZ insertPoint2 = new XYZ(1.0, 2.0, 0);\n    Viewport.Create(doc, sheet.Id, view2.Id, insertPoint2);\n}"}
{"prompt":"Change the wall type of an existing wall to one containing 'Thermal Insulation'.","completion":"Wall wallToChange = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nWallType newType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(x => x.Name.Contains(\"Thermal Insulation\"));\n\nif (wallToChange != null && newType != null)\n{\n    wallToChange.ChangeTypeId(newType.Id);\n}"}
{"prompt":"Crea un nuevo tipo de tubería llamado 'Tubería de Acero' con material 'Acero, Carbono'.","completion":"string newTypeName = \"Tubería de Acero\";\nPipeType pipeTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(PipeType)).FirstOrDefault() as PipeType;\nMaterial steel = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name == \"Acero, Carbono\") as Material;\n\nif (pipeTypeToDuplicate != null && steel != null)\n{\n    PipeType newType = pipeTypeToDuplicate.Duplicate(newTypeName) as PipeType;\n    if (newType != null)\n    {\n        Parameter materialParam = newType.get_Parameter(BuiltInParameter.MATERIAL_ID_PARAM);\n        if (materialParam != null && !materialParam.IsReadOnly) materialParam.Set(steel.Id);\n    }\n}"}
{"prompt":"Copia el tipo de muro 'Genérico - 144mm' y nómbralo 'Interior - 15cm Yeso'.","completion":"string originalName = \"Genérico - 144mm\";\nstring newName = \"Interior - 15cm Yeso\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif(originalType!=null)\n    originalType.Duplicate(newName);"}
{"prompt":"Replicate the 'Generic - 147mm' wall type and name it 'Interior - 12cm Plaster'.","completion":"string originalName = \"Generic - 147mm\";\nstring newName = \"Interior - 12cm Plaster\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif (originalType != null)\n{\n    WallType newType = originalType.Duplicate(newName) as WallType;\n}"}
{"prompt":"Actualiza el nombre de todas las familias cargadas que contengan 'Métrica' a 'Imperial'.","completion":"List<Family> familiesToRename = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.Name.Contains(\"Métrica\")).ToList();\nforeach(Family fam in familiesToRename)\n{\n    fam.Name = fam.Name.Replace(\"Métrica\", \"Imperial\");\n}"}
{"prompt":"Load the family from the path \"C:\\Libraries\\Main Door.rfa\".","completion":"string familyPath = @\"C:\\Libraries\\Main Door.rfa\";\nFamily loadedFamily = null;\ndoc.LoadFamily(familyPath, out loadedFamily);"}
{"prompt":"Create a global length parameter named 'Corridor' with a value of 0.7m.","completion":"string paramName = \"Corridor\";\nGlobalParameter gp = GlobalParameter.Create(doc, paramName, SpecTypeId.Length);\n\nif (gp != null)\n{\n    gp.SetValue(new DoubleParameterValue(UnitUtils.ConvertToInternalUnits(0.7, UnitTypeId.Meters)));\n}"}
{"prompt":"Establece el parámetro 'Marca' de todos los muros seleccionados a 'M-EXT-3'.","completion":"using (Transaction t = new Transaction(doc, \"Set Wall Mark\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    ICollection<ElementId> selectedIds = localUidoc.Selection.GetElementIds();\n\n    if (selectedIds != null && selectedIds.Count > 3)\n    {\n        foreach(ElementId id in selectedIds)\n        {\n            Element elem = doc.GetElement(id);\n            if(elem is Wall)\n            {\n                Parameter p = elem.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n                if (p != null && !p.IsReadOnly) \n                {\n                    p.Set(\"M-EXT-01\");\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Configure the 'Mark' parameter of all selected walls to 'W-EXT-4'.","completion":"using (Transaction t = new Transaction(doc, \"Set Wall Mark\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    ICollection<ElementId> selectedIds = localUidoc.Selection.GetElementIds();\n\n    if (selectedIds != null && selectedIds.Count > 4)\n    {\n        foreach(ElementId id in selectedIds)\n        {\n            Element elem = doc.GetElement(id);\n            if(elem is Wall)\n            {\n                Parameter markParam = elem.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n                if (markParam != null && !markParam.IsReadOnly) markParam.Set(\"W-EXT-01\");\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Duplicate the 'Generic - 147mm' wall type and name it 'Interior - 18cm Plaster'.","completion":"string originalName = \"Generic - 147mm\";\nstring newName = \"Interior - 18cm Plaster\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif (originalType != null)\n{\n    WallType newType = originalType.Duplicate(newName) as WallType;\n}"}
{"prompt":"Unjoin the geometry of two given elements.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference ref1 = uidoc.Selection.PickObject(ObjectType.Element, \"Select the first element\");\nReference ref2 = uidoc.Selection.PickObject(ObjectType.Element, \"Select the second element\");\n\nif (ref1 != null && ref2 != null)\n{\n    Element e1 = doc.GetElement(ref1.ElementId);\n    Element e2 = doc.GetElement(ref2.ElementId);\n    if (e1 != null && e2 != null)\n    {\n        JoinGeometryUtils.UnjoinGeometry(doc, e1, e2);\n    }\n}"}
{"prompt":"Añade un codo de 90 grados entre dos tuberías.","completion":"using (Transaction t = new Transaction(doc, \"Add Elbow\"))\n{\n    t.Start();\n    List<Pipe> pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast<Pipe>().Where(p => p.ConnectorManager != null && p.ConnectorManager.UnusedConnectors.Size > 0).Take(2).ToList();\n\n    if (pipes.Count >= 2)\n    {\n        Connector c1 = pipes[0].ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n        Connector c2 = pipes[1].ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n        \n        if (c1 != null && c2 != null)\n        {\n            doc.Create.NewElbowFitting(c1, c2);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Insert a spot elevation on a given face and view point.","completion":"using (Transaction t = new Transaction(doc, \"Place Spot Elevation\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference faceRef = localUidoc.Selection.PickObject(ObjectType.Face, \"Select the top face of the floor\");\n\n    View activeView = doc.ActiveView;\n\n    if (faceRef != null && activeView != null)\n    {\n        XYZ pointOnFace = faceRef.GlobalPoint;\n        XYZ leaderEnd = pointOnFace + new XYZ(1 \/ 0.3048, 1 \/ 0.3048, 0);\n        doc.Create.NewSpotElevation(activeView, faceRef, pointOnFace, pointOnFace, leaderEnd, pointOnFace, true);\n    }\n    t.Commit();\n}"}
{"prompt":"Build a new Level named 'Level 2' at an elevation of 15 meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(15, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\nif (newLevel != null)\n{\n    try { newLevel.Name = \"Level 2\"; } catch {}\n}"}
{"prompt":"Duplica el nivel 1 con un desfase de 4m y llámalo 'Mezanine'.","completion":"string levelName = \"Mezanine\";\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\n\nif (level1 != null)\n{\n    double newElevation = level1.ProjectElevation + UnitUtils.ConvertToInternalUnits(4, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, newElevation);\n    if (newLevel != null)\n    {\n        newLevel.Name = levelName;\n    }\n}"}
{"prompt":"Build a new wall type 'Generic Wall 310mm' with a thickness of 31cm.","completion":"string newTypeName = \"Generic Wall 310mm\";\nWallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif (oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(newTypeName) as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(31, UnitTypeId.Centimeters));\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n}"}
{"prompt":"Duplicate level 2 with a 1m offset and name it 'Mezzanine'.","completion":"string levelName = \"Level 2\";\nLevel levelToCopy = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (levelToCopy != null)\n{\n    double offset = UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, levelToCopy.Elevation + offset);\n    newLevel.Name = \"Mezzanine\";\n}"}
{"prompt":"Recupera todas las habitaciones que están en el Nivel 3","completion":"string levelName = \"Nivel 3\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(targetLevel.Id);\n    FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WherePasses(levelFilter);\n    uidoc.Selection.SetElementIds(collector.ToElementIds());\n}"}
{"prompt":"Create a 3D view oriented from the southeast.","completion":"string viewName = \"3D View Southeast\";\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft != null)\n{\n    View3D view3d = View3D.CreateIsometric(doc, vft.Id);\n    if (view3d != null)\n    {\n        XYZ eye = new XYZ(1, -1, 1);\n        XYZ up = new XYZ(0, 0, 1);\n        XYZ forward = new XYZ(-1, 1, -1);\n        view3d.SetOrientation(new ViewOrientation3D(eye, up, forward));\n        view3d.Name = viewName;\n    }\n}"}
{"prompt":"Crea un workset llamado 'Estructura'.","completion":"string wsName = \"Estructura\";\nWorkset newWorkset = Workset.Create(doc, wsName);\n"}
{"prompt":"Copy the 'Generic - 122mm' wall type and name it 'Interior - 15cm Plaster'.","completion":"string originalName = \"Generic - 122mm\";\nstring newName = \"Interior - 15cm Plaster\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif (originalType != null)\n{\n    WallType newType = originalType.Duplicate(newName) as WallType;\n}"}
{"prompt":"Obtain the MEP space associated with the room 'Office 106'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Cast<Room>().FirstOrDefault(r => r.Name == \"Office 106\");\nList<Space> spaces = new List<Space>();\n\nif (room != null)\n{\n    spaces = new FilteredElementCollector(doc).OfClass(typeof(Space)).Cast<Space>().Where(s => s.Room != null && s.Room.Id == room.Id).ToList();\n}"}
{"prompt":"Incorpora el prefijo 'PLANTA-' a todas las vistas de plano.","completion":"string prefix = \"PLANTA-\";\nList<ViewPlan> planViews = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().Where(v => !v.IsTemplate).ToList();\nforeach(ViewPlan view in planViews)\n{\n    if(!view.Name.StartsWith(prefix))\n    {\n        view.Name = prefix + view.Name;\n    }\n}"}
{"prompt":"Copy level 1 with a 4m offset and name it 'Mezzanine'.","completion":"string levelName = \"Mezzanine\";\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\n\nif (level1 != null)\n{\n    double newElevation = level1.ProjectElevation + UnitUtils.ConvertToInternalUnits(4, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, newElevation);\n    if (newLevel != null)\n    {\n        newLevel.Name = levelName;\n    }\n}"}
{"prompt":"Fija el elemento seleccionado para que no se mueva.","completion":"UIDocument uidoc = new UIDocument(doc);\nElementId selectedId = uidoc.Selection.GetElementIds().FirstOrDefault();\n\nif (selectedId != ElementId.InvalidElementId)\n{\n    Element elementToPin = doc.GetElement(selectedId);\n    if (elementToPin != null)\n    {\n        elementToPin.Pinned = true;\n    }\n}"}
{"prompt":"Activate all family symbols loaded in the project.","completion":"List<FamilySymbol> symbols = new FilteredElementCollector(doc).OfClass(typeof(FamilySymbol)).Cast<FamilySymbol>().ToList();\nforeach (var sym in symbols)\n{\n    if (!sym.IsActive) \n    {\n        sym.Activate();\n    }\n}"}
{"prompt":"Modifica el tipo de una losa por uno que contenga 'Concreto'.","completion":"Floor floorToChange = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault() as Floor;\nif(floorToChange != null)\n{\n    FloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name.Contains(\"Concreto\") || ft.Name.Contains(\"Concrete\"));\n    if(newType!=null)\n        floorToChange.ChangeTypeId(newType.Id);\n}"}
{"prompt":"Change the type of a selected floor to 'Concrete 17cm'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a floor\");\n\nif (pickedRef != null)\n{\n    Floor floorToChange = doc.GetElement(pickedRef) as Floor;\n    FloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name == \"Concrete 17cm\");\n    \n    if (floorToChange != null && newType != null)\n    {\n        floorToChange.ChangeTypeId(newType.Id);\n    }\n}"}
{"prompt":"Encuentra todas las familias de anotación y cuenta cuántas hay.","completion":"List<Family> annotationFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.CategoryType == CategoryType.Annotation).ToList();\nint count = annotationFamilies.Count;\n"}
{"prompt":"Find all walls that have no base level assigned.","completion":"ElementFilter unassociatedFilter = new ElementLevelFilter(ElementId.InvalidElementId);\nList<Element> unassignedWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(unassociatedFilter).ToList();"}
{"prompt":"Generate a new revision and apply it to the active sheet.","completion":"Revision rev = Revision.Create(doc);\nViewSheet sheet = doc.ActiveView as ViewSheet;\n\nif (rev != null && sheet != null)\n{\n    rev.Description = \"Issued for Construction\";\n    rev.RevisionDate = DateTime.Now.ToString(\"yyyy-MM-dd\");\n    rev.IssuedBy = \"BIM Department\";\n    \n    ICollection<ElementId> revisions = sheet.GetAdditionalRevisionIds();\n    revisions.Add(rev.Id);\n    sheet.SetAdditionalRevisionIds(revisions);\n}"}
{"prompt":"Acota la longitud de un muro seleccionado por el usuario.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference wallRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un muro para acotar\");\n\nif (wallRef != null)\n{\n    Wall wall = doc.GetElement(wallRef) as Wall;\n    View activeView = doc.ActiveView;\n\n    if (wall != null && activeView != null)\n    {\n        LocationCurve locCurve = wall.Location as LocationCurve;\n        if (locCurve != null)\n        {\n            Line wallLine = locCurve.Curve as Line;\n            if (wallLine != null)\n            {\n                ReferenceArray refs = new ReferenceArray();\n                refs.Append(wallLine.GetEndPointReference(0));\n                refs.Append(wallLine.GetEndPointReference(1));\n                XYZ pt1 = wallLine.GetEndPoint(0).Add(XYZ.BasisZ * 2);\n                XYZ pt2 = wallLine.GetEndPoint(1).Add(XYZ.BasisZ * 2);\n                Line dimLine = Line.CreateBound(pt1, pt2);\n                doc.Create.NewDimension(activeView, dimLine, refs);\n            }\n        }\n    }\n}"}
{"prompt":"Retrieve the MEP space associated with the room 'Office 98'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Cast<Room>().FirstOrDefault(r => r.Name == \"Office 98\");\nList<Space> spaces = new List<Space>();\n\nif (room != null)\n{\n    spaces = new FilteredElementCollector(doc).OfClass(typeof(Space)).Cast<Space>().Where(s => s.Room != null && s.Room.Id == room.Id).ToList();\n}"}
{"prompt":"Check if a pipe is connected at both ends.","completion":"Pipe pipe = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).FirstOrDefault() as Pipe;\nbool isFullyConnected = false;\n\nif (pipe != null)\n{\n    isFullyConnected = pipe.ConnectorManager.UnusedConnectors.IsEmpty;\n}\n"}
{"prompt":"Copia el tipo de muro 'Genérico - 184mm' y nómbralo 'Interior - 15cm Yeso'.","completion":"string originalName = \"Genérico - 184mm\";\nstring newName = \"Interior - 15cm Yeso\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif(originalType!=null)\n    originalType.Duplicate(newName);"}
{"prompt":"Crea un nivel 'Roof Terrace' a 15m.","completion":"string levelName = \"Roof Terrace\";\ndouble elev = UnitUtils.ConvertToInternalUnits(15, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elev);\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Create a new pipe type named 'Steel Pipe' with 'Steel, Carbon' material.","completion":"string newTypeName = \"Steel Pipe\";\nPipeType pipeTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(PipeType)).FirstOrDefault() as PipeType;\nMaterial steel = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name == \"Steel, Carbon\") as Material;\n\nif (pipeTypeToDuplicate != null && steel != null)\n{\n    PipeType newType = pipeTypeToDuplicate.Duplicate(newTypeName) as PipeType;\n    if (newType != null)\n    {\n        Parameter materialParam = newType.get_Parameter(BuiltInParameter.MATERIAL_ID_PARAM);\n        if (materialParam != null && !materialParam.IsReadOnly) materialParam.Set(steel.Id);\n    }\n}"}
{"prompt":"Generate a new level named 'Mezzanine' at 8.2 meters elevation.","completion":"string levelName = \"Mezzanine\";\ndouble elevation = UnitUtils.ConvertToInternalUnits(8.2, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Create an extrusion roof with an arc profile.","completion":"using (Transaction t = new Transaction(doc, \"Create Extrusion Roof\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    RoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n\n    if (level != null && roofType != null && doc.ActiveView != null)\n    {\n        CurveArray profile = new CurveArray();\n        profile.Append(Arc.Create(new XYZ(-10,0,0), new XYZ(10,0,0), new XYZ(0,5,0)));\n        Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisY, XYZ.Zero);\n        ReferencePlane refPlane = doc.Create.NewReferencePlane(plane.Origin, plane.Origin + XYZ.BasisX, plane.Normal, doc.ActiveView);\n        if(refPlane != null)\n            doc.Create.NewExtrusionRoof(profile, refPlane, level, roofType, 0, 20);\n    }\n    t.Commit();\n}"}
{"prompt":"Create a new Level named 'Level 4' at an elevation of 12 meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(12, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Level 4\";\n}"}
{"prompt":"Modify the type of a selected floor to 'Concrete 10cm'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a floor\");\n\nif (pickedRef != null)\n{\n    Floor floorToChange = doc.GetElement(pickedRef) as Floor;\n    FloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name == \"Concrete 10cm\");\n    \n    if (floorToChange != null && newType != null)\n    {\n        floorToChange.ChangeTypeId(newType.Id);\n    }\n}"}
{"prompt":"Build a global length parameter named 'CorridorWidth' with a value of 2.0m.","completion":"string paramName = \"CorridorWidth\";\nGlobalParameter gp = GlobalParameter.Create(doc, paramName, SpecTypeId.Length);\n\nif (gp != null)\n{\n    gp.SetValue(new DoubleParameterValue(UnitUtils.ConvertToInternalUnits(2.0, UnitTypeId.Meters)));\n}"}
{"prompt":"Añade los campos 'Nivel', 'Marca' y 'Volumen' a la tabla de pilares.","completion":"ViewSchedule schedule = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().FirstOrDefault(s => s.Name.Contains(\"Pilares\") || s.Name.Contains(\"Column\"));\nif (schedule != null)\n{\n    ScheduleDefinition def = schedule.Definition;\n    SchedulableField levelField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.FAMILY_LEVEL_PARAM);\n    if (levelField != null) def.AddField(levelField);\n    SchedulableField markField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.ALL_MODEL_MARK);\n    if (markField != null) def.AddField(markField);\n    SchedulableField volumeField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.HOST_VOLUME_COMPUTED);\n    if (volumeField != null) def.AddField(volumeField);\n}"}
{"prompt":"Create a DirectShape topography from a list of points.","completion":"IList<XYZ> points = new List<XYZ>\n{\n    new XYZ(0,0,0),\n    new XYZ(10, 0, 1),\n    new XYZ(0, 10, 2),\n    new XYZ(10, 10, 0)\n};\nElementId toposolidTypeId = new FilteredElementCollector(doc).OfClass(typeof(ToposolidType)).FirstElementId();\nif(toposolidTypeId != null && toposolidTypeId != ElementId.InvalidElementId)\n{\n    Toposolid.Create(doc, points, toposolidTypeId, ElementId.InvalidElementId);\n}"}
{"prompt":"Create a curtain wall 6 meters wide and 4 meters high.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nWallType cwType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Kind == WallKind.Curtain);\n\nif (level != null && cwType != null)\n{\n    Line baseLine = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits(6, UnitTypeId.Meters), 0, 0));\n    Wall.Create(doc, baseLine, cwType.Id, level.Id, UnitUtils.ConvertToInternalUnits(4.0, UnitTypeId.Meters), 0.0, false, false);\n}"}
{"prompt":"Elimina todas las líneas de detalle en la vista activa.","completion":"View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    ICollection<ElementId> detailLines = new FilteredElementCollector(doc, activeView.Id).OfClass(typeof(DetailLine)).ToElementIds();\n    if (detailLines.Count > 0)\n    {\n        doc.Delete(detailLines);\n    }\n}"}
{"prompt":"Rota un elemento seleccionado 87 grados sobre su eje Z.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un elemento para rotar\");\nElement elem = doc.GetElement(pickedRef.ElementId);\nLocationPoint lp = elem.Location as LocationPoint;\nLine axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\nElementTransformUtils.RotateElement(doc, elem.Id, axis, Math.PI \/ 87);"}
{"prompt":"Import a georeferenced survey from a LandXML file.","completion":"\/\/ The Revit API in the provided context does not support direct LandXML import.\n\/\/ This functionality typically requires additional add-ins like the Site Designer, which are not available here.\n\/\/ As a placeholder, this code will show how to create a simple topography surface from a list of points.\nusing(Transaction t = new Transaction(doc, \"Create Topography\"))\n{\n    t.Start();\n    IList<XYZ> points = new List<XYZ>();\n    points.Add(new XYZ(0, 0, 0));\n    points.Add(new XYZ(50, 0, 5));\n    points.Add(new XYZ(0, 50, 10));\n    TopographySurface.Create(doc, points);\n    t.Commit();\n}"}
{"prompt":"Ubica un rociador en las coordenadas (9,1,6).","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol sprinklerSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Sprinklers).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (level != null && sprinklerSymbol != null)\n{\n    if (!sprinklerSymbol.IsActive) sprinklerSymbol.Activate();\n    XYZ placementPoint = new XYZ(UnitUtils.ConvertToInternalUnits(9, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(6, UnitTypeId.Meters));\n    doc.Create.NewFamilyInstance(placementPoint, sprinklerSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n}"}
{"prompt":"Build a section view between points (0,0,0) and (10,10,0).","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.Section);\n\nif (vft != null)\n{\n    XYZ p1 = new XYZ(0,0,0);\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),0);\n    XYZ midPoint = (p1 + p2) \/ 2;\n    XYZ direction = (p2 - p1).Normalize();\n    XYZ up = XYZ.BasisZ;\n    XYZ viewdir = up.CrossProduct(direction);\n    \n    BoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\n    Transform t = Transform.Identity;\n    t.Origin = midPoint;\nt.BasisX = direction;\nt.BasisY = up;\nt.BasisZ = viewdir;\nsectionBox.Transform = t;\nsectionBox.Min = new XYZ(UnitUtils.ConvertToInternalUnits(-p1.DistanceTo(p2)\/2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(-10, UnitTypeId.Meters), 0);\nsectionBox.Max = new XYZ(UnitUtils.ConvertToInternalUnits(p1.DistanceTo(p2)\/2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(20, UnitTypeId.Meters));\n    \n    ViewSection.CreateSection(doc, vft.Id, sectionBox);\n}"}
{"prompt":"Copy level 5 with a 1m offset and name it 'Mezzanine'.","completion":"string levelName = \"Level 5\";\nLevel levelToCopy = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (levelToCopy != null)\n{\n    double offset = UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, levelToCopy.Elevation + offset);\n    newLevel.Name = \"Mezzanine\";\n}"}
{"prompt":"Exporta el documento a un archivo IFC con la versión IFC4x3.","completion":"string folderPath = \"C:\/RevitExports\/\";\nstring fileName = doc.Title + \"_IFC4x3.ifc\";\nIFCExportOptions options = new IFCExportOptions();\noptions.FileVersion = IFCVersion.IFC4x3;\ndoc.Export(folderPath, fileName, options);"}
{"prompt":"Modifica el tipo de una losa seleccionada a 'Concreto 11cm'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una losa\");\n\nif (pickedRef != null)\n{\n    Floor floorToChange = doc.GetElement(pickedRef) as Floor;\n    FloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name == \"Concreto 11cm\");\n    \n    if (floorToChange != null && newType != null)\n    {\n        floorToChange.ChangeTypeId(newType.Id);\n    }\n}"}
{"prompt":"Inserta una nota de texto con 'Revisar' en la vista actual.","completion":"View activeView = doc.ActiveView;\nElementId defaultTypeId = doc.GetDefaultElementTypeId(ElementTypeGroup.TextNoteType);\n\nif (activeView != null && defaultTypeId != ElementId.InvalidElementId)\n{\n    \/\/ Place note at a default position as none was specified\n    XYZ position = new XYZ(5, 5, 0);\n    TextNote.Create(doc, activeView.Id, position, \"Revisar\", defaultTypeId);\n}"}
{"prompt":"Actualiza el tipo de una losa seleccionada a 'Concreto 19cm'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una losa\");\n\nif (pickedRef != null)\n{\n    Floor floorToChange = doc.GetElement(pickedRef) as Floor;\n    FloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name == \"Concreto 19cm\");\n    \n    if (floorToChange != null && newType != null)\n    {\n        floorToChange.ChangeTypeId(newType.Id);\n    }\n}"}
{"prompt":"Inside the family editor, create a new horizontal reference plane.","completion":"View activeView = doc.ActiveView;\nif (activeView != null && doc.IsFamilyDocument)\n{\n    XYZ bubbleEnd = new XYZ(-5, 0, 0);\n    XYZ freeEnd = new XYZ(5, 0, 0);\n    XYZ cutVec = XYZ.BasisZ;\n    ReferencePlane rp = doc.FamilyCreate.NewReferencePlane(bubbleEnd, freeEnd, cutVec, activeView);\n    if (rp != null)\n    {\n        try { rp.Name = \"Horizontal Plane\"; } catch {}\n    }\n}"}
{"prompt":"Build a new wall type 'Generic Wall 300mm' with a thickness of 30cm.","completion":"using (Transaction t = new Transaction(doc, \"Create Wall Type\"))\n{\n    t.Start();\n    string newTypeName = \"Generic Wall 300mm\";\n    WallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\n    if (oldWallType != null)\n    {\n        WallType newWallType = oldWallType.Duplicate(newTypeName) as WallType;\n        if (newWallType != null)\n        {\n            CompoundStructure cs = newWallType.GetCompoundStructure();\n            if (cs != null && cs.LayerCount > 0)\n            {\n                int coreLayerIndex = cs.GetFirstCoreLayerIndex();\n                if (coreLayerIndex >= 0 && coreLayerIndex < cs.LayerCount)\n                {\n                    cs.SetLayerWidth(coreLayerIndex, 300 \/ 304.8);\n                    newWallType.SetCompoundStructure(cs);\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create a wall on Level 1 from (0,0,0) to (5,0,0) with a height of 5 meters.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (level1 != null && wallType != null)\n{\n    Line wallCurve = Line.CreateBound(new XYZ(0, 0, 0), new XYZ(5, 0, 0));\n    double height = UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters);\n    Wall.Create(doc, wallCurve, wallType.Id, level1.Id, height, 0.0, false, false);\n}"}
{"prompt":"Build a SketchPlane on Level 2.","completion":"using (Transaction t = new Transaction(doc, \"Create Sketch Plane\"))\n{\n    t.Start();\n    Level level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 2\");\n\n    if (level2 != null)\n    {\n        Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisZ, new XYZ(0, 0, level2.Elevation));\n        SketchPlane skp = SketchPlane.Create(doc, plane);\n    }\n    t.Commit();\n}"}
{"prompt":"Actualiza el nombre de la vista activa a 'Vista de Trabajo'.","completion":"string newName = \"Vista de Trabajo\";\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.Name = newName;\n}"}
{"prompt":"Find all annotation families and count how many there are.","completion":"List<Family> annotationFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.CategoryType == CategoryType.Annotation).ToList();"}
{"prompt":"Build a radial dimension for a curved wall.","completion":"using (Transaction t = new Transaction(doc, \"Create Radial Dimension\"))\n{\n    t.Start();\n    Wall curvedWall = new FilteredElementCollector(doc, doc.ActiveView.Id).OfClass(typeof(Wall)).Cast<Wall>().FirstOrDefault(w => w.Location is LocationCurve && (w.Location as LocationCurve).Curve is Arc);\n    View activeView = doc.ActiveView;\n\n    if (curvedWall != null && activeView != null)\n    {\n        LocationCurve locCurve = curvedWall.Location as LocationCurve;\n        if (locCurve != null)\n        {\n            Arc arc = locCurve.Curve as Arc;\n            if (arc != null)\n            {\n                ReferenceArray refArray = new ReferenceArray();\n                refArray.Append(arc.Reference);\n                doc.Create.NewDimension(activeView, Line.CreateBound(arc.Center, arc.GetEndPoint(0)), refArray);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Extrae todas las habitaciones en el Nivel 'Losa 102'.","completion":"Level groundFloor = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Losa 102\") as Level;\nList<Element> roomsOnGround = new List<Element>();\n\nif (groundFloor != null)\n{\n    roomsOnGround = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Where(r => r.LevelId == groundFloor.Id).ToList();\n}"}
{"prompt":"Temporarily isolate the selected elements in the active view.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> idsToIsolate = uidoc.Selection.GetElementIds();\nView activeView = doc.ActiveView;\n\nif (activeView != null && idsToIsolate.Count > 0)\n{\n    activeView.IsolateElementsTemporary(idsToIsolate);\n}"}
{"prompt":"Build a structural beam between (4,1,1) and (6,1,7) on Level 1","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nFamilySymbol beamType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (beamType != null && level != null)\n{\n    if(!beamType.IsActive) beamType.Activate();\n    XYZ start = new XYZ(4, 1, 1);\n    XYZ end = new XYZ(6, 1, 7);\n    if (start.IsAlmostEqualTo(end)) return;\n    Line beamCurve = Line.CreateBound(start, end);\n    doc.Create.NewFamilyInstance(beamCurve, beamType, level, Autodesk.Revit.DB.Structure.StructuralType.Beam);\n}"}
{"prompt":"Create a new level named 'Basement Floor' at an elevation of 0.1 meters.","completion":"string levelName = \"Basement Floor\";\ndouble elevationInternal = UnitUtils.ConvertToInternalUnits(0.1, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevationInternal);\nnewLevel.Name = levelName;"}
{"prompt":"Copia la vista 'Nivel 4' como una vista dependiente.","completion":"ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v => v.Name == \"Nivel 4\") as ViewPlan;\n\nif (viewToDuplicate != null)\n{\n    ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n}"}
{"prompt":"Duplicate the 'Level 2' plan view and make it a view template.","completion":"using (Transaction t = new Transaction(doc, \"Create View Template\"))\n{\n    t.Start();\n    ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().FirstOrDefault(v => v.Name == \"Level 2\");\n    string templateName = \"Level 2 Template\";\n\n    if (viewToDuplicate != null)\n    {\n        ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n        View newView = doc.GetElement(newViewId) as View;\n        if (newView != null)\n        {\n           \/\/ In older APIs, direct conversion to a template may not be available.\n           \/\/ A common workaround is to set the IsTemplate property if available and writable, \n           \/\/ which is not the case here. This is left as a comment for conceptual understanding.\n           \/\/ newView.IsTemplate = true;\n            newView.Name = templateName;\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Export all sheets in a set to a single combined PDF.","completion":"ViewSheetSet sheetSet = new FilteredElementCollector(doc).OfClass(typeof(ViewSheetSet)).FirstOrDefault() as ViewSheetSet;\n\nif (sheetSet != null)\n{\n    string folderPath = \"C:\/RevitExports\/\";\n    PDFExportOptions options = new PDFExportOptions();\n    options.Combine = true;\n    options.FileName = sheetSet.Name;\n    List<ElementId> sheetIds = sheetSet.Views.Cast<ViewSheet>().Select(s => s.Id).ToList();\n    doc.Export(folderPath, sheetIds, options);\n}"}
{"prompt":"Export the current 3D view to NWC for Navisworks.","completion":"View3D view3d = doc.ActiveView as View3D;\n\nif (view3d != null)\n{\n    string folderPath = \"C:\/RevitExports\/\";\n    string fileName = view3d.Name + \".nwc\";\n    NavisworksExportOptions options = new NavisworksExportOptions();\n    options.ExportScope = NavisworksExportScope.View;\n    options.ViewId = view3d.Id;\n    doc.Export(folderPath, fileName, options);\n}"}
{"prompt":"Form a cable tray between two points.","completion":"CableTrayType trayType = new FilteredElementCollector(doc).OfClass(typeof(CableTrayType)).FirstOrDefault() as CableTrayType;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(trayType != null && level != null)\n{\n    XYZ start = new XYZ(0, 0, 10);\n    XYZ end = new XYZ(15, 0, 10);\n    CableTray.Create(doc, trayType.Id, start, end, level.Id);\n}"}
{"prompt":"Attach a reference point at coordinates (1,2,7) inside the family editor.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(1,2,7));"}
{"prompt":"Export the geometry of a selected element to an SAT file.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select an element to export\");\n\nif (pickedRef != null)\n{\n    Element elem = doc.GetElement(pickedRef.ElementId);\n    if (elem != null)\n    {\n        string folderPath = \"C:\/RevitExports\/\";\n        string fileName = elem.Name + \".sat\";\n        SATExportOptions options = new SATExportOptions();\n        doc.Export(folderPath, fileName, new List<ElementId>{elem.Id}, options);\n    }\n}"}
{"prompt":"Generate an 8-meter long foundation beam.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol foundationSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFoundation).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null && foundationSymbol != null)\n{\n    if (!foundationSymbol.IsActive)\n    {\n        foundationSymbol.Activate();\n    }\n    double length = UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters);\n    XYZ startPoint = XYZ.Zero;\n    XYZ endPoint = new XYZ(length, 0, 0);\n    Line line = Line.CreateBound(startPoint, endPoint);\n    doc.Create.NewFamilyInstance(line, foundationSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Footing);\n}"}
{"prompt":"Reproduce el tipo de muro 'Genérico - 184mm' y nómbralo 'Interior - 15cm Yeso'.","completion":"string originalName = \"Genérico - 184mm\";\nstring newName = \"Interior - 15cm Yeso\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif(originalType!=null)\n    originalType.Duplicate(newName);"}
{"prompt":"Create a new wall type 'Generic Wall 300mm' with a thickness of 30cm.","completion":"using (Transaction t = new Transaction(doc, \"Create Wall Type\"))\n{\n    t.Start();\n    string newTypeName = \"Generic Wall 300mm\";\n    WallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\n    if (oldWallType != null)\n    {\n        WallType newWallType = oldWallType.Duplicate(newTypeName) as WallType;\n        if (newWallType != null)\n        {\n            CompoundStructure cs = newWallType.GetCompoundStructure();\n            if (cs != null && cs.LayerCount > 0)\n            {\n                int coreLayerIndex = cs.GetFirstCoreLayerIndex();\n                if (coreLayerIndex >= 0 && coreLayerIndex < cs.LayerCount)\n                {\n                    cs.SetLayerWidth(coreLayerIndex, 300 \/ 304.8);\n                    newWallType.SetCompoundStructure(cs);\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Ajusta el tipo de la ventana seleccionada al tipo 'Ventana Fija 117x60'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una ventana\");\nFamilySymbol newType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name == \"Ventana Fija 117x60\");\nif (pickedRef != null && newType != null)\n{\n    FamilyInstance window = doc.GetElement(pickedRef.ElementId) as FamilyInstance;\n    if (window != null)\n    {\n        window.Symbol = newType;\n    }\n}"}
{"prompt":"Paint the interior face of exterior walls with 'White Paint'.","completion":"using (Transaction t = new Transaction(doc, \"Paint Walls\"))\n{\n    t.Start();\n    Material paintMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m => m.Name == \"White Paint\");\n    var exteriorWalls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Cast<Wall>().Where(w => w.WallType.Function == WallFunction.Exterior).ToList();\n\n    if (paintMaterial != null)\n    {\n        foreach (Wall w in exteriorWalls)\n        {\n            IList<Reference> interiorFaceRefs = HostObjectUtils.GetSideFaces(w, ShellLayerType.Interior);\n            if(interiorFaceRefs.Count > 0)\n            {\n                Face interiorFace = w.GetGeometryObjectFromReference(interiorFaceRefs.First()) as Face;\n                if (interiorFace != null)\n                {\n                    doc.Paint(w.Id, interiorFace, paintMaterial.Id);\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Modify the type of a selected floor to 'Concrete 14cm'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a floor\");\n\nif (pickedRef != null)\n{\n    Floor floorToChange = doc.GetElement(pickedRef) as Floor;\n    FloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name == \"Concrete 14cm\");\n    \n    if (floorToChange != null && newType != null)\n    {\n        floorToChange.ChangeTypeId(newType.Id);\n    }\n}"}
{"prompt":"Create a new 5mm text type in green color.","completion":"using (Transaction t = new Transaction(doc, \"Create Green Text Type\"))\n{\n    t.Start();\n    string newTypeName = \"5mm Green\";\n    TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\n    if (defaultType != null)\n    {\n        TextNoteType newType = defaultType.Duplicate(newTypeName) as TextNoteType;\n        if (newType != null)\n        {\n            Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n            if (textSizeParam != null && !textSizeParam.IsReadOnly)\n            {\n                textSizeParam.Set(5 \/ 304.8);\n            }\n            Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n            if (lineColorParam != null && !lineColorParam.IsReadOnly)\n            {\n                 lineColorParam.Set(65280);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Selecciona todos los muros del 'Nivel 3' y cambia su comentario a 'REVISAR AISLAMIENTO'.","completion":"Level level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 3\") as Level;\nif (level2 != null)\n{\n    List<Wall> wallsOnLevel2 = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Where(w => w.LevelId == level2.Id).Cast<Wall>().ToList();\n    foreach(Wall wall in wallsOnLevel2)\n    {\n        Parameter commentParam = wall.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n        if (commentParam != null && !commentParam.IsReadOnly)\n        {\n            commentParam.Set(\"REVISAR AISLAMIENTO\");\n        }\n    }\n}"}
{"prompt":"Generate a new Level named 'Level 1' at an elevation of 14 meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(14, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Level 1\";\n}"}
{"prompt":"Create a 3D view with the section box enabled.","completion":"string viewName = \"3D View with Section Box\";\nViewFamilyType vft3D = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft3D != null)\n{\n    View3D view3d = View3D.CreateIsometric(doc, vft3D.Id);\n    if (view3d != null)\n    {\n        view3d.Name = viewName;\n        view3d.IsSectionBoxActive = true;\n    }\n}"}
{"prompt":"Crea un nuevo tipo de texto de 5mm de color verde.","completion":"using (Transaction t = new Transaction(doc, \"Create Green Text Type\"))\n{\n    t.Start();\n    string newTypeName = \"5mm Verde\";\n    TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\n    if (defaultType != null)\n    {\n        TextNoteType newType = defaultType.Duplicate(newTypeName) as TextNoteType;\n        if (newType != null)\n        {\n            Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n            if (textSizeParam != null && !textSizeParam.IsReadOnly)\n            {\n                textSizeParam.Set(5 \/ 304.8);\n            }\n            Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n            if (lineColorParam != null && !lineColorParam.IsReadOnly)\n            {\n                 lineColorParam.Set(65280);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Inserta una instancia de la familia 'Puerta Sencilla' en el centro de la habitación 'Despacho 99'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 99\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Puerta Sencilla\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);"}
{"prompt":"Create a new linear dimension type with blue text and 2mm size.","completion":"using (Transaction t = new Transaction(doc, \"Create Dimension Type\"))\n{\n    t.Start();\n    string newTypeName = \"Blue Dimension 2mm\";\n    DimensionType linearDimType = new FilteredElementCollector(doc).OfClass(typeof(DimensionType)).Cast<DimensionType>().FirstOrDefault(dt => dt.StyleType == DimensionStyleType.Linear);\n\n    if (linearDimType != null)\n    {\n        DimensionType newDimType = linearDimType.Duplicate(newTypeName) as DimensionType;\n        if (newDimType != null)\n        {\n            Parameter colorParam = newDimType.get_Parameter(BuiltInParameter.LINE_COLOR);\n            if (colorParam != null && !colorParam.IsReadOnly) colorParam.Set(255);\n            Parameter textSizeParam = newDimType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n            if (textSizeParam != null && !textSizeParam.IsReadOnly) textSizeParam.Set(2 \/ 304.8);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Forma un plafón a 2.8 metros de altura en Nivel 1.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\nCeilingType ceilingType = new FilteredElementCollector(doc).OfClass(typeof(CeilingType)).FirstOrDefault() as CeilingType;\nif (ceilingType != null && level != null)\n{\n    CurveLoop profile = new CurveLoop();\n    profile.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(10,0,0)));\n    profile.Append(Line.CreateBound(new XYZ(10,0,0), new XYZ(10,10,0)));\n    profile.Append(Line.CreateBound(new XYZ(10,10,0), new XYZ(0,10,0)));\n    profile.Append(Line.CreateBound(new XYZ(0,10,0), new XYZ(0,0,0)));\n    Ceiling ceiling = Ceiling.Create(doc, new List<CurveLoop>{profile}, ceilingType.Id, level.Id);\n    if (ceiling != null)\n    {\n        Parameter heightParam = ceiling.get_Parameter(BuiltInParameter.CEILING_HEIGHTABOVELEVEL_PARAM);\n        if (heightParam != null && !heightParam.IsReadOnly) heightParam.Set(UnitUtils.ConvertToInternalUnits(2.8, UnitTypeId.Meters));\n    }\n}"}
{"prompt":"Assign all walls to the 'Structure' workset.","completion":"using (Transaction t = new Transaction(doc, \"Assign to Workset\"))\n{\n    t.Start();\n    if (doc.IsWorkshared)\n    {\n        Workset ws = new FilteredWorksetCollector(doc).OfKind(WorksetKind.UserWorkset).FirstOrDefault(w => w.Name == \"Structure\");\n        if (ws != null)\n        {\n            FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType();\n            foreach (Element e in collector)\n            {\n                Parameter p = e.get_Parameter(BuiltInParameter.ELEM_PARTITION_PARAM);\n                if (p != null && !p.IsReadOnly)\n                {\n                    p.Set(ws.Id.IntegerValue);\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create a structural column at position X=10, Y=5.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (level != null && columnSymbol != null)\n{\n    if (!columnSymbol.IsActive) { columnSymbol.Activate(); }\n    XYZ point = new XYZ(10, 5, 0);\n    doc.Create.NewFamilyInstance(point, columnSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n}"}
{"prompt":"Add a reference point at coordinates (2,1,3) inside the family editor.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(2,1,3));"}
{"prompt":"Crea un nuevo tipo de muro de 22cm llamado 'Muro Estructural 21cm'.","completion":"string newTypeName = \"Muro Estructural 21cm\";\nWallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif (oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(newTypeName) as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(22, UnitTypeId.Centimeters));\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n}"}
{"prompt":"Cambia el nombre de todas las vistas de planta para que empiecen con 'ARQ_'.","completion":"string prefix = \"ARQ_\";\nList<ViewPlan> planViews = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().Where(v => !v.IsTemplate).ToList();\nforeach(ViewPlan view in planViews)\n{\n    if(!view.Name.StartsWith(prefix))\n    {\n        view.Name = prefix + view.Name;\n    }\n}"}
{"prompt":"Moldea un plafón a 2.8 metros de altura en Nivel 1.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\nCeilingType ceilingType = new FilteredElementCollector(doc).OfClass(typeof(CeilingType)).FirstOrDefault() as CeilingType;\nif (ceilingType != null && level != null)\n{\n    CurveLoop profile = new CurveLoop();\n    profile.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(30,0,0)));\n    profile.Append(Line.CreateBound(new XYZ(30,0,0), new XYZ(30,30,0)));\n    profile.Append(Line.CreateBound(new XYZ(30,30,0), new XYZ(0,30,0)));\n    profile.Append(Line.CreateBound(new XYZ(0,30,0), new XYZ(0,0,0)));\n    Ceiling ceiling = Ceiling.Create(doc, new List<CurveLoop>{profile}, ceilingType.Id, level.Id);\n    if (ceiling != null)\n    {\n        Parameter heightParam = ceiling.get_Parameter(BuiltInParameter.CEILING_HEIGHTABOVELEVEL_PARAM);\n        if (heightParam != null && !heightParam.IsReadOnly) heightParam.Set(UnitUtils.ConvertToInternalUnits(2.8, UnitTypeId.Meters));\n    }\n}"}
{"prompt":"Put an instance of the 'Office Desk' family in the center of the 'Office 106' room.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Office 106\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Office Desk\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);"}
{"prompt":"Add a reference point at coordinates (1,7,6) inside the family editor.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(1,7,6));"}
{"prompt":"Given a wall, find all pipes passing through it.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference wallRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a wall\");\n\nList<ElementId> intersectingPipes = new List<ElementId>();\nif (wallRef != null)\n{\n    Element wall = doc.GetElement(wallRef);\n    if (wall != null)\n    {\n        ElementIntersectsElementFilter filter = new ElementIntersectsElementFilter(wall);\n        intersectingPipes = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_PipeCurves).WherePasses(filter).ToElementIds().ToList();\n    }\n}\n"}
{"prompt":"Get a list of all annotation families.","completion":"List<Family> annotationFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.CategoryType == CategoryType.Annotation).ToList();\n"}
{"prompt":"Generate a new elevation view looking south.","completion":"using (Transaction t = new Transaction(doc, \"Create South Elevation\"))\n{\n    t.Start();\n    ViewFamilyType elevationVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(vft => vft.ViewFamily == ViewFamily.Elevation);\n    View activeView = doc.ActiveView;\n\n    if (elevationVFT != null && activeView != null)\n    {\n        ElevationMarker marker = ElevationMarker.CreateElevationMarker(doc, elevationVFT.Id, new XYZ(0, -20 \/ 0.3048, 0), 100);\n        \n        if (marker != null)\n        {\n            View aev = marker.CreateElevation(doc, activeView.Id, 0);\n            if (aev != null)\n            {\n                aev.Name = \"South Elevation\";\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create a rectangular opening in a floor.","completion":"using (Transaction t = new Transaction(doc, \"Create Opening\"))\n{\n    t.Start();\n    Floor floor = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault() as Floor;\n\n    if (floor != null)\n    {\n        XYZ p1 = new XYZ(1 \/ 0.3048, 1 \/ 0.3048, 0);\n        XYZ p2 = new XYZ(3 \/ 0.3048, 1 \/ 0.3048, 0);\n        XYZ p3 = new XYZ(3 \/ 0.3048, 3 \/ 0.3048, 0);\n        XYZ p4 = new XYZ(1 \/ 0.3048, 3 \/ 0.3048, 0);\n        CurveArray profile = new CurveArray();\n        profile.Append(Line.CreateBound(p1, p2));\n        profile.Append(Line.CreateBound(p2, p3));\n        profile.Append(Line.CreateBound(p3, p4));\n        profile.Append(Line.CreateBound(p4, p1));\n        doc.Create.NewOpening(floor, profile, true);\n    }\n    t.Commit();\n}"}
{"prompt":"Export all sheets in a set to a single combined PDF.","completion":"ViewSheetSet sheetSet = new FilteredElementCollector(doc).OfClass(typeof(ViewSheetSet)).FirstOrDefault() as ViewSheetSet;\n\nif (sheetSet != null)\n{\n    string folderPath = \"C:\/RevitExports\/\";\n    PDFExportOptions options = new PDFExportOptions();\n    options.Combine = true;\n    options.FileName = sheetSet.Name;\n    List<ElementId> sheetIds = sheetSet.Views.Cast<ViewSheet>().Select(s => s.Id).ToList();\n    doc.Export(folderPath, sheetIds, options);\n}"}
{"prompt":"Establece el parámetro 'Marca' de todos los muros seleccionados a 'M-EXT-2'.","completion":"using (Transaction t = new Transaction(doc, \"Set Wall Mark\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    ICollection<ElementId> selectedIds = localUidoc.Selection.GetElementIds();\n\n    if (selectedIds != null && selectedIds.Count > 2)\n    {\n        foreach(ElementId id in selectedIds)\n        {\n            Element elem = doc.GetElement(id);\n            if(elem is Wall)\n            {\n                Parameter p = elem.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n                if (p != null && !p.IsReadOnly) \n                {\n                    p.Set(\"M-EXT-01\");\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create a new level 'Level 3' at an elevation of 12 meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(12, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Level 3\";\n}"}
{"prompt":"Create a new A2 sheet with the number 'A-201'.","completion":"string sheetNumber = \"A-201\";\nFamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (titleBlock != null)\n{\n    ViewSheet sheet = ViewSheet.Create(doc, titleBlock.Id);\n    if (sheet != null)\n    {\n        sheet.Name = \"Construction Details\";\n        sheet.SheetNumber = sheetNumber;\n    }\n}"}
{"prompt":"Generate a new level 'Level 7' at an elevation of 9 meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(9, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Level 7\";\n}"}
{"prompt":"Crea un nuevo tipo de muro de 20cm llamado 'Interiores'.","completion":"string newTypeName = \"Interiores\";\nWallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif (oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(newTypeName) as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(20, UnitTypeId.Centimeters));\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n}"}
{"prompt":"Check if a pipe is connected at both ends.","completion":"Pipe pipe = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).FirstOrDefault() as Pipe;\nbool isFullyConnected = false;\n\nif (pipe != null)\n{\n    isFullyConnected = pipe.ConnectorManager.UnusedConnectors.IsEmpty;\n}\n"}
{"prompt":"Ajusta todas las ventanas para que tengan la altura del antepecho a 899mm.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits(899, UnitTypeId.Millimeters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Crea una nueva cota de nivel llamada 'Nivel 1' a una elevación de 10 metros.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\nif (newLevel != null)\n{\n    newLevel.Name = \"Nivel 1\";\n}"}
{"prompt":"Change the family name of a selected door to 'New_Door'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a door\");\n\nif (pickedRef != null)\n{\n    FamilyInstance door = doc.GetElement(pickedRef.ElementId) as FamilyInstance;\n    if (door != null && door.Symbol != null)\n    {\n        Family family = door.Symbol.Family;\n        if (family != null)\n        {\n            family.Name = \"New_Door\";\n        }\n    }\n}"}
{"prompt":"Put all selected elements on the 'Facade' workset.","completion":"using (Transaction t = new Transaction(doc, \"Assign to Workset\"))\n{\n    t.Start();\n    if(doc.IsWorkshared)\n    {\n        UIDocument localUidoc = uidoc;\n        ICollection<ElementId> selectedIds = localUidoc.Selection.GetElementIds();\n        \n        Workset workset = new FilteredWorksetCollector(doc).OfKind(WorksetKind.UserWorkset).FirstOrDefault(ws => ws.Name == \"Facade\");\n        if(workset == null) workset = Workset.Create(doc, \"Facade\");\n\n        if (selectedIds != null && selectedIds.Count > 0 && workset != null)\n        {\n            foreach(ElementId id in selectedIds)\n            {\n                Element elem = doc.GetElement(id);\n                Parameter wsparam = elem.get_Parameter(BuiltInParameter.ELEM_PARTITION_PARAM);\n                if(wsparam != null && !wsparam.IsReadOnly) wsparam.Set(workset.Id.IntegerValue);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea un muro cortina de 6 metros de ancho y 4 metros de alto.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nWallType cwType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Kind == WallKind.Curtain);\n\nif (level != null && cwType != null)\n{\n    Line baseLine = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits(6, UnitTypeId.Meters), 0, 0));\n    Wall.Create(doc, baseLine, cwType.Id, level.Id, UnitUtils.ConvertToInternalUnits(4.0, UnitTypeId.Meters), 0.0, false, false);\n}"}
{"prompt":"Create a new door type named 'FR-90 Door' and set its fire rating to '90 min'.","completion":"string newTypeName = \"FR-90 Door\";\nFamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nFamilySymbol newDoorType = null;\nif (doorTypeToDuplicate != null)\n{\n    newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\n    if (newDoorType != null)\n    {\n        Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n        if (fireRatingParam != null && !fireRatingParam.IsReadOnly)\n        {\n            fireRatingParam.Set(\"90 min\");\n        }\n    }\n}"}
{"prompt":"Generate a new Level named 'Level 6' at an elevation of 10 meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Level 6\";\n}"}
{"prompt":"Export the model to IFC4 format for coordination.","completion":"string folderPath = \"C:\/RevitExports\/\";\nstring fileName = doc.Title + \"-Coordination.ifc\";\nIFCExportOptions options = new IFCExportOptions();\noptions.FileVersion = IFCVersion.IFC4;\ndoc.Export(folderPath, fileName, options);"}
{"prompt":"Get all rooms on Level 3.","completion":"Level level3 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 3\") as Level;\nList<Element> roomsOnLevel3 = new List<Element>();\n\nif (level3 != null)\n{\n    roomsOnLevel3 = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Where(r => r.LevelId == level3.Id).ToList();\n}"}
{"prompt":"Crea un nuevo tipo de muro de 24cm llamado 'Interiores'.","completion":"WallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif(wallTypeToDuplicate != null)\n{\n    WallType newWallType = null;\n    try { newWallType = wallTypeToDuplicate.Duplicate(\"Interiores\") as WallType; } catch {}\n    if(newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if(cs != null && cs.GetLayers().Any())\n        {\n            int coreLayerIndex = cs.GetFirstCoreLayerIndex();\n            if(coreLayerIndex != -1) \n            {\n                cs.SetLayerWidth(coreLayerIndex, UnitUtils.ConvertToInternalUnits(24, UnitTypeId.Centimeters));\n                newWallType.SetCompoundStructure(cs);\n            }\n        }\n    }\n}"}
{"prompt":"Configure the 'Comments' parameter for all doors on Level 4 to 'Fire Rating - 86 min'.","completion":"string levelName = \"Level 4\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(targetLevel.Id);\n    FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WherePasses(levelFilter);\n    foreach (Element door in collector)\n    {\n        Parameter commentsParam = door.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n        if (commentsParam != null && !commentsParam.IsReadOnly) { commentsParam.Set(\"Fire Rating - 86 min\"); }\n    }\n}"}
{"prompt":"Find all walls with the comment 'Review'.","completion":"ElementId commentParamId = new ElementId(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\nParameterValueProvider pvp = new ParameterValueProvider(commentParamId);\nFilterStringRuleEvaluator evaluator = new FilterStringContains();\nFilterRule rule = new FilterStringRule(pvp, evaluator, \"Review\");\nElementFilter filter = new ElementParameterFilter(rule);\nList<Element> wallsToReview = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(filter).ToList();"}
{"prompt":"Copia el nivel 5 con un desfase de 6m y llámalo 'Mezanine'.","completion":"string levelName = \"Nivel 5\";\nLevel levelToCopy = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (levelToCopy != null)\n{\n    double offset = UnitUtils.ConvertToInternalUnits(6, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, levelToCopy.Elevation + offset);\n    newLevel.Name = \"Mezanine\";\n}"}
{"prompt":"Get a list of all families and their types.","completion":"List<string> familyAndTypeNames = new List<string>();\nList<Family> families = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().ToList();\nforeach (Family fam in families)\n{\n    familyAndTypeNames.Add($\"Family: {fam.Name}\");\n    foreach (ElementId symbolId in fam.GetFamilySymbolIds())\n    {\n        FamilySymbol sym = doc.GetElement(symbolId) as FamilySymbol;\n        if (sym != null)\n        {\n            familyAndTypeNames.Add($\"\\tType: {sym.Name}\");\n        }\n    }\n}"}
{"prompt":"Move a wall 5 meters to the right.","completion":"Wall wall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\n\nif (wall != null)\n{\n    XYZ translation = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters),0,0);\n    ElementTransformUtils.MoveElement(doc, wall.Id, translation);\n}"}
{"prompt":"Asigna el material 'Acero' a la primera capa de un tipo de muro.","completion":"using (Transaction t = new Transaction(doc, \"Assign Material\"))\n{\n    t.Start();\n    WallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.GetCompoundStructure() != null);\n    Material steel = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m => m.Name.Contains(\"Steel\") || m.Name.Contains(\"Acero\"));\n\n    if (wallType != null && steel != null)\n    {\n        CompoundStructure cs = wallType.GetCompoundStructure();\n        if (cs != null && cs.LayerCount > 0)\n        {\n            cs.SetMaterialId(0, steel.Id);\n            wallType.SetCompoundStructure(cs);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Conecta dos bandejas de cables con un codo.","completion":"List<CableTray> trays = new FilteredElementCollector(doc).OfClass(typeof(CableTray)).Cast<CableTray>().ToList();\n\nif (trays.Count >= 2)\n{\n    Connector c1 = trays[0].ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n    Connector c2 = trays[1].ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n    \n    if (c1 != null && c2 != null)\n    {\n        doc.Create.NewUnionFitting(c1, c2);\n    }\n}"}
{"prompt":"Modifica el tipo de una losa por uno que contenga 'Concreto'.","completion":"Floor floorToChange = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault() as Floor;\nFloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name.Contains(\"Concreto\") || ft.Name.Contains(\"Concrete\"));\n\nif (floorToChange != null && newType != null)\n{\n    floorToChange.ChangeTypeId(newType.Id);\n}"}
{"prompt":"Agrega un punto de referencia en las coordenadas (1,1,4) dentro del editor de familias.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(1,1,4));"}
{"prompt":"Construct a floor plan view for 'Level 6'.","completion":"string levelName = \"Level 6\";\nLevel level3 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.FloorPlan);\n\nif (level3 != null && vft != null)\n{\n    ViewPlan viewPlan = ViewPlan.Create(doc, vft.Id, level3.Id);\n}"}
{"prompt":"Crea una nueva vista 3D orientada desde el punto (10,10,10) mirando hacia el origen.","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v=>v.ViewFamily==ViewFamily.ThreeDimensional);\n\nif (vft != null)\n{\n    View3D view = View3D.CreateIsometric(doc, vft.Id);\n    if (view != null)\n    {\n        XYZ eyePos = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters));\n        XYZ upDir = XYZ.BasisZ;\n        XYZ forwardDir = XYZ.Zero - eyePos;\n        ViewOrientation3D vo = new ViewOrientation3D(eyePos, upDir, forwardDir);\n        view.SetOrientation(vo);\n        view.Name = \"Vista desde (10,10,10)\";\n    }\n}"}
{"prompt":"Genera un equipo eléctrico en X=1,Y=1.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol panelSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_ElectricalEquipment).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (level != null && panelSymbol != null)\n{\n    if (!panelSymbol.IsActive)\n    {\n        panelSymbol.Activate();\n    }\n    XYZ point = new XYZ(1, 1, 0);\n    doc.Create.NewFamilyInstance(point, panelSymbol, level, StructuralType.NonStructural);\n}"}
{"prompt":"Ajusta el tipo de una losa seleccionada a 'Concreto 17cm'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una losa\");\n\nif (pickedRef != null)\n{\n    Floor floorToChange = doc.GetElement(pickedRef) as Floor;\n    FloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name == \"Concreto 17cm\");\n    \n    if (floorToChange != null && newType != null)\n    {\n        floorToChange.ChangeTypeId(newType.Id);\n    }\n}"}
{"prompt":"Put an instance of the 'Office Desk' family in the center of the 'Office 102' room.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Office 102\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Office Desk\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);"}
{"prompt":"Inserta una instancia de la familia 'Mesa de Oficina' en el centro de la habitación 'Despacho 106'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 106\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Mesa de Oficina\") as FamilySymbol;\nif(furnitureSymbol != null && !furnitureSymbol.IsActive) furnitureSymbol.Activate();\nif(room != null)\n{\n    LocationPoint roomCenter = room.Location as LocationPoint;\n    if(roomCenter != null && furnitureSymbol != null && room.Level != null)\n    {\n        doc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Generate a new wall type 'Generic Wall 298mm' with a thickness of 34cm.","completion":"string newTypeName = \"Generic Wall 298mm\";\nWallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif (oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(newTypeName) as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(34, UnitTypeId.Centimeters));\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n}"}
{"prompt":"Construct a structural beam between (1,1,7) and (2,1,3) on Level 1","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nFamilySymbol beamType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (beamType != null && level != null)\n{\n    if(!beamType.IsActive) beamType.Activate();\n    XYZ start = new XYZ(1, 1, 7);\n    XYZ end = new XYZ(2, 1, 3);\n    if (start.IsAlmostEqualTo(end)) return;\n    Line beamCurve = Line.CreateBound(start, end);\n    doc.Create.NewFamilyInstance(beamCurve, beamType, level, Autodesk.Revit.DB.Structure.StructuralType.Beam);\n}"}
{"prompt":"Duplica el nivel 1 con un desfase de 3m y llámalo 'Mezanine'.","completion":"string levelName = \"Mezanine\";\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\n\nif (level1 != null)\n{\n    double newElevation = level1.ProjectElevation + UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, newElevation);\n    if (newLevel != null)\n    {\n        newLevel.Name = levelName;\n    }\n}"}
{"prompt":"Set the visibility of the 'Furniture' category to false in the active view.","completion":"Category furnitureCat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Furniture);\nif (furnitureCat != null && doc.ActiveView != null)\n{\n    doc.ActiveView.SetCategoryHidden(furnitureCat.Id, true);\n}"}
{"prompt":"Obtén una lista de todas las familias y sus tipos.","completion":"List<string> familyAndTypeNames = new List<string>();\nList<Family> families = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().ToList();\nforeach (Family fam in families)\n{\n    familyAndTypeNames.Add($\"Familia: {fam.Name}\");\n    foreach (ElementId symbolId in fam.GetFamilySymbolIds())\n    {\n        FamilySymbol sym = doc.GetElement(symbolId) as FamilySymbol;\n        if (sym != null)\n        {\n            familyAndTypeNames.Add($\"\\tTipo: {sym.Name}\");\n        }\n    }\n}"}
{"prompt":"Clone the 'Level 2' plan view and make it a view template.","completion":"using (Transaction t = new Transaction(doc, \"Create View Template\"))\n{\n    t.Start();\n    ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().FirstOrDefault(v => v.Name == \"Level 2\");\n    string templateName = \"Level 2 Template\";\n\n    if (viewToDuplicate != null)\n    {\n        ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n        View newView = doc.GetElement(newViewId) as View;\n        if (newView != null)\n        {\n           \/\/ In older APIs, direct conversion to a template may not be available.\n           \/\/ A common workaround is to set the IsTemplate property if available and writable, \n           \/\/ which is not the case here. This is left as a comment for conceptual understanding.\n           \/\/ newView.IsTemplate = true;\n            newView.Name = templateName;\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Display a dialog box with 'Yes' and 'No' options.","completion":""}
{"prompt":"Crea un nivel intermedio llamado 'Mezzanine' a mitad de camino entre el Nivel 1 y el Nivel 2.","completion":"string newLevelName = \"Mezzanine\";\nLevel lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Nivel 1\");\nLevel lvl2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Nivel 2\");\nif (lvl1 != null && lvl2 != null)\n{\ndouble midElevation = (lvl1.ProjectElevation + lvl2.ProjectElevation) \/ 2.0;\nLevel newLevel = Level.Create(doc, midElevation);\n    if(newLevel != null)\n    {\nnewLevel.Name = newLevelName;\n    }\n}"}
{"prompt":"Place a window 1m wide and 1.2m high into a wall.","completion":"FamilySymbol originalSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nWall hostWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\n\nif (originalSymbol != null && hostWall != null)\n{\n    string newTypeName = \"Window 1.0m x 1.2m\";\n    FamilySymbol newSymbol = originalSymbol.Duplicate(newTypeName) as FamilySymbol;\n    if (newSymbol == null) return;\n\n    if (!newSymbol.IsActive)\n    {\n        newSymbol.Activate();\n    }\n\n    Parameter widthParam = newSymbol.get_Parameter(BuiltInParameter.WINDOW_WIDTH);\n    Parameter heightParam = newSymbol.get_Parameter(BuiltInParameter.WINDOW_HEIGHT);\n\n    if (widthParam != null && heightParam != null && !widthParam.IsReadOnly && !heightParam.IsReadOnly)\n    {\n        widthParam.Set(UnitUtils.ConvertToInternalUnits(1.0, UnitTypeId.Meters));\n        heightParam.Set(UnitUtils.ConvertToInternalUnits(1.2, UnitTypeId.Meters));\n    }\n\n    Level level = doc.GetElement(hostWall.LevelId) as Level;\n    LocationCurve locationCurve = hostWall.Location as LocationCurve;\n    if (level != null && locationCurve != null)\n    {\n        XYZ insertionPoint = locationCurve.Curve.Evaluate(0.5, true);\n        doc.Create.NewFamilyInstance(insertionPoint, newSymbol, hostWall, level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Inserta una armadura (truss) de 6 metros entre dos puntos.","completion":"using (Transaction t = new Transaction(doc, \"Create Truss\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    FamilySymbol trussSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Family.Name.Contains(\"Truss\"));\n\n    if (level != null && trussSymbol != null)\n    {\n        if (!trussSymbol.IsActive) { trussSymbol.Activate(); }\n        Line trussLine = Line.CreateBound(new XYZ(0, 10, 0), new XYZ(6 \/ 0.3048, 10, 0));\n        doc.Create.NewFamilyInstance(trussLine, trussSymbol, level, StructuralType.NonStructural);\n    }\n    t.Commit();\n}"}
{"prompt":"Get a list of all annotation families.","completion":"List<Family> annotationFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.CategoryType == CategoryType.Annotation).ToList();\n"}
{"prompt":"Cambia un panel de vidrio de un muro cortina por un panel sólido.","completion":"using (Transaction t = new Transaction(doc, \"Change Curtain Panel\"))\n{\n    t.Start();\n    Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Cast<Wall>().FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain);\n    FamilySymbol solidPanelType = new FilteredElementCollector(doc).OfClass(typeof(FamilySymbol)).Cast<FamilySymbol>().FirstOrDefault(fs => fs.Family.FamilyCategory.Id.IntegerValue == (int)BuiltInCategory.OST_CurtainWallPanels && (fs.Name.Contains(\"Solid\") || fs.Name.Contains(\"Sólido\")));\n\n    if (curtainWall != null && solidPanelType != null)\n    {\n        CurtainGrid grid = curtainWall.CurtainGrid;\n        if (grid != null)\n        {\n            ElementId panelIdToChange = grid.GetPanelIds().FirstOrDefault();\n            if (panelIdToChange != ElementId.InvalidElementId)\n            {\n                Panel panelToChange = doc.GetElement(panelIdToChange) as Panel;\n                if (panelToChange != null) panelToChange.ChangeTypeId(solidPanelType.Id);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Clone the 'Level 2' view as a dependent view.","completion":"ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v => v.Name == \"Level 2\") as ViewPlan;\n\nif (viewToDuplicate != null)\n{\n    ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n}"}
{"prompt":"Create an 8-meter long foundation beam.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.GetType() == typeof(Level)) as Level;\nFamilySymbol foundationSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFoundation).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (level != null && foundationSymbol != null)\n{\n    if (!foundationSymbol.IsActive) { foundationSymbol.Activate(); }\n    double length = UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters);\n    XYZ startPoint = XYZ.Zero;\n    XYZ endPoint = new XYZ(length, 0, 0);\n    Line line = Line.CreateBound(startPoint, endPoint);\n    doc.Create.NewFamilyInstance(line, foundationSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Footing);\n}"}
{"prompt":"Change the family name of a selected door to 'New_Door'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a door\");\n\nif (pickedRef != null)\n{\n    FamilyInstance door = doc.GetElement(pickedRef.ElementId) as FamilyInstance;\n    if (door != null && door.Symbol != null)\n    {\n        Family family = door.Symbol.Family;\n        if (family != null)\n        {\n            family.Name = \"New_Door\";\n        }\n    }\n}"}
{"prompt":"Reproduce el nivel 2 con un desfase de 1m y llámalo 'Mezanine'.","completion":"string levelName = \"Nivel 2\";\nLevel levelToCopy = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (levelToCopy != null)\n{\n    double offset = UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, levelToCopy.Elevation + offset);\n    newLevel.Name = \"Mezanine\";\n}"}
{"prompt":"Crea un nuevo tipo de puerta llamado 'Puerta RF-90' y establece su resistencia al fuego a '90 min'.","completion":"string newTypeName = \"Puerta RF-90\";\nFamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (doorTypeToDuplicate != null)\n{\n    FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\n    if (newDoorType != null)\n    {\n        Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n        if (fireRatingParam != null && !fireRatingParam.IsReadOnly) fireRatingParam.Set(\"90 min\");\n    }\n}"}
{"prompt":"Obtén una lista de los nombres de todos los materiales.","completion":"List<Material> materials = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().ToList();\nList<string> materialNames = new List<string>();\nforeach(Material m in materials)\n{\n    materialNames.Add(m.Name);\n}\n"}
{"prompt":"Configure the sill height of all windows to 896mm.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits(896, UnitTypeId.Millimeters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Build a Reflected Ceiling Plan view for Level 1.","completion":"string levelName = \"Level 1\";\nstring viewName = \"Level 1 Ceiling Plan\";\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.CeilingPlan);\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\n\nif (vft != null && level1 != null)\n{\n    ViewPlan rcp = ViewPlan.Create(doc, vft.Id, level1.Id);\n    if (rcp != null)\n    {\n        rcp.Name = viewName;\n    }\n}"}
{"prompt":"Create a new elevation view looking south.","completion":"string viewName = \"South Elevation (New)\";\nViewFamilyType elevationVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(vft => vft.ViewFamily == ViewFamily.Elevation);\nElevationMarker marker = ElevationMarker.CreateElevationMarker(doc, elevationVFT.Id, new XYZ(0, -20, 0), 100);\nView aev = marker.CreateElevation(doc, doc.ActiveView.Id, 0);\naev.Name = viewName;"}
{"prompt":"Create 8 horizontal grids spaced 10.8 meters apart.","completion":"double separation = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\nfor(int i = 0; i < 8; i++)\n{\n    Line line = Line.CreateBound(new XYZ(0, i * separation, 0), new XYZ(50, i * separation, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Crea columnas en cada intersección de ejes.","completion":"FamilySymbol colSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nList<Grid> grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().ToList();\n\nif (colSymbol != null && level != null && grids.Count >= 2)\n{\n    for (int i = 0; i < grids.Count; i++)\n    {\n        for (int j = i + 1; j < grids.Count; j++)\n        {\n            IntersectionResultArray results = null;\n            grids[i].Curve.Intersect(grids[j].Curve, out results);\n            if(results != null)\n            {\n                 foreach (IntersectionResult ir in results)\n                 {\n                     doc.Create.NewFamilyInstance(ir.XYZPoint, colSymbol, level, StructuralType.Column);\n                 }\n            }\n        }\n    }\n}"}
{"prompt":"Construct a text note with given text, location, and target element.","completion":"using (Transaction t = new Transaction(doc, \"Create Text Note\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference targetRef = localUidoc.Selection.PickObject(ObjectType.Element, \"Select an element to annotate\");\n    XYZ textLocation = localUidoc.Selection.PickPoint(\"Choose the text location\");\n\n    View activeView = doc.ActiveView;\n    ElementId defaultTypeId = doc.GetDefaultElementTypeId(ElementTypeGroup.TextNoteType);\n\n    if (targetRef != null && textLocation != null && activeView != null && defaultTypeId != ElementId.InvalidElementId)\n    {\n        TextNoteOptions opts = new TextNoteOptions(defaultTypeId);\n        TextNote note = TextNote.Create(doc, activeView.Id, textLocation, \"REVIEW CLASH\", opts);\n        if (note != null)\n        {\n            note.AddLeader(TextNoteLeaderTypes.TNLT_STRAIGHT_L).End = targetRef.GlobalPoint;\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Spin a selected element 94 degrees around its Z-axis.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select an element to rotate\");\nElement elem = doc.GetElement(pickedRef.ElementId);\nLocationPoint lp = elem.Location as LocationPoint;\nLine axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\nElementTransformUtils.RotateElement(doc, elem.Id, axis, Math.PI \/ 94);"}
{"prompt":"Import a CAD file named 'BasePlan.dwg' into the current view.","completion":"string filePath = \"C:\/CAD\/BasePlan.dwg\";\nDWGImportOptions options = new DWGImportOptions();\noptions.Placement = ImportPlacement.Origin;\nElementId importId;\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    doc.Import(filePath, options, activeView, out importId);\n}"}
{"prompt":"Actualiza el nombre de la familia de una puerta seleccionada a 'Puerta_Nueva'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una puerta\");\n\nif (pickedRef != null)\n{\n    FamilyInstance door = doc.GetElement(pickedRef.ElementId) as FamilyInstance;\n    if (door != null && door.Symbol != null)\n    {\n        Family family = door.Symbol.Family;\n        if (family != null)\n        {\n            family.Name = \"Puerta_Nueva\";\n        }\n    }\n}"}
{"prompt":"Build a structural beam between (1,4,2) and (6,4,3) on Level 2","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 2\") as Level;\nFamilySymbol beamType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (beamType != null && level != null)\n{\n    if(!beamType.IsActive) beamType.Activate();\n    XYZ start = new XYZ(1, 4, 2);\n    XYZ end = new XYZ(6, 4, 3);\n    if (start.IsAlmostEqualTo(end)) return;\n    Line beamCurve = Line.CreateBound(start, end);\n    doc.Create.NewFamilyInstance(beamCurve, beamType, level, Autodesk.Revit.DB.Structure.StructuralType.Beam);\n}"}
{"prompt":"Find all walls that have no base level assigned.","completion":"ElementFilter unassociatedFilter = new ElementLevelFilter(ElementId.InvalidElementId);\nList<Element> unassignedWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(unassociatedFilter).ToList();"}
{"prompt":"Desune la geometría de dos elementos dados.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference ref1 = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona el primer elemento\");\nReference ref2 = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona el segundo elemento\");\n\nif (ref1 != null && ref2 != null)\n{\n    Element e1 = doc.GetElement(ref1.ElementId);\n    Element e2 = doc.GetElement(ref2.ElementId);\n    if (e1 != null && e2 != null)\n    {\n        JoinGeometryUtils.UnjoinGeometry(doc, e1, e2);\n    }\n}"}
{"prompt":"Encuentra todas las puertas del Nivel 7 que sean de la familia 'M_Chair-Breuer'.","completion":"string levelName = \"Nivel 7\";\nstring familyName = \"M_Chair-Breuer\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WherePasses(new ElementLevelFilter(targetLevel.Id));\n    List<ElementId> doorIds = new List<ElementId>();\n    foreach (Element door in collector)\n    {\n        FamilyInstance fi = door as FamilyInstance;\n        if (fi != null && fi.Symbol.Family.Name == familyName)\n        {\n            doorIds.Add(door.Id);\n        }\n    }\n    uidoc.Selection.SetElementIds(doorIds);\n}"}
{"prompt":"Create 8 horizontal grids spaced 10.8 meters apart.","completion":"double separation = UnitUtils.ConvertToInternalUnits(10.8, UnitTypeId.Meters);\nfor(int i = 0; i < 8; i++)\n{\n    Line line = Line.CreateBound(new XYZ(0, i * separation, 0), new XYZ(50, i * separation, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Replicate level 1 with a 8m offset and name it 'Mezzanine'.","completion":"string levelName = \"Mezzanine\";\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\n\nif (level1 != null)\n{\n    double newElevation = level1.ProjectElevation + UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, newElevation);\n    if (newLevel != null)\n    {\n        newLevel.Name = levelName;\n    }\n}"}
{"prompt":"Create a stair between Level 2 and Level 1.9","completion":"\/\/ This is a complex operation that requires multiple steps and\/or user interaction and is not supported by the agent."}
{"prompt":"Create a 3D view with the section box enabled.","completion":"string viewName = \"3D View with Section Box\";\nViewFamilyType vft3D = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft3D != null)\n{\n    View3D view3d = View3D.CreateIsometric(doc, vft3D.Id);\n    if (view3d != null)\n    {\n        view3d.Name = viewName;\n        view3d.IsSectionBoxActive = true;\n    }\n}"}
{"prompt":"Construct a new wall type 'Generic Wall 297mm' with a thickness of 32cm.","completion":"string newTypeName = \"Generic Wall 297mm\";\nWallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif (oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(newTypeName) as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(32, UnitTypeId.Centimeters));\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n}"}
{"prompt":"Adjust the type of a selected floor to 'Concrete 14cm'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a floor\");\n\nif (pickedRef != null)\n{\n    Floor floorToChange = doc.GetElement(pickedRef) as Floor;\n    FloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name == \"Concrete 14cm\");\n    \n    if (floorToChange != null && newType != null)\n    {\n        floorToChange.ChangeTypeId(newType.Id);\n    }\n}"}
{"prompt":"Crea un nuevo nivel llamado 'Planta Sótano' a una elevación de -4.5 metros.","completion":"string levelName = \"Planta Sótano\";\ndouble elevationInternal = UnitUtils.ConvertToInternalUnits(-4.5, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevationInternal);\nnewLevel.Name = levelName;"}
{"prompt":"Crea una cimentación de viga de 8 metros de largo.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol foundationSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFoundation).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null && foundationSymbol != null)\n{\n    Line line = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters), 0, 0));\n    doc.Create.NewFamilyInstance(line, foundationSymbol, level, StructuralType.Footing);\n}"}
{"prompt":"Crea una vista 3D por defecto.","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft != null)\n{\n    View3D view3d = View3D.CreateIsometric(doc, vft.Id);\n}"}
{"prompt":"Delete all unused wall types in the project.","completion":"ICollection<ElementId> allWallTypes = new FilteredElementCollector(doc).OfClass(typeof(WallType)).ToElementIds();\nICollection<ElementId> usedWallTypes = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Select(w => w.GetTypeId()).Distinct().ToList();\nList<ElementId> unusedWallTypes = allWallTypes.Except(usedWallTypes).ToList();\nif (unusedWallTypes.Any())\n{\n    doc.Delete(unusedWallTypes);\n}"}
{"prompt":"Inserta un rociador en las coordenadas (7,10,7).","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol sprinklerSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Sprinklers).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (level != null && sprinklerSymbol != null)\n{\n    if (!sprinklerSymbol.IsActive) sprinklerSymbol.Activate();\n    XYZ placementPoint = new XYZ(UnitUtils.ConvertToInternalUnits(7, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(7, UnitTypeId.Meters));\n    doc.Create.NewFamilyInstance(placementPoint, sprinklerSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n}"}
{"prompt":"Coloca una instancia de la familia 'Mesa de Oficina' en el centro de la habitación 'Despacho 96'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 96\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Mesa de Oficina\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);"}
{"prompt":"Crea un nuevo tipo de tubería con material de Cobre.","completion":"string newTypeName = \"Tubería de Cobre\";\nPipeType pipeTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(PipeType)).FirstOrDefault() as PipeType;\nMaterial copper = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name.Contains(\"Copper\") || m.Name.Contains(\"Cobre\")) as Material;\n\nif (pipeTypeToDuplicate != null && copper != null)\n{\n    PipeType newType = pipeTypeToDuplicate.Duplicate(newTypeName) as PipeType;\n    if (newType != null)\n    {\n        Parameter materialParam = newType.get_Parameter(BuiltInParameter.MATERIAL_ID_PARAM);\n        if (materialParam != null && !materialParam.IsReadOnly) materialParam.Set(copper.Id);\n    }\n}"}
{"prompt":"Crea una losa de cimentación estructural de 40cm de espesor.","completion":"Level foundationLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderBy(l => l.Elevation).FirstOrDefault();\nFloorType slabTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.get_Parameter(BuiltInParameter.FLOOR_PARAM_IS_STRUCTURAL).AsInteger() == 1);\nif(slabTypeToDuplicate != null && foundationLevel != null)\n{\n    string newTypeName = \"Losa Cimentación 40cm\";\n    FloorType newSlabType = slabTypeToDuplicate.Duplicate(newTypeName) as FloorType;\n    if(newSlabType != null)\n    {\n        CompoundStructure cs = newSlabType.GetCompoundStructure();\n        if (cs != null)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(40, UnitTypeId.Centimeters));\n            newSlabType.SetCompoundStructure(cs);\n            XYZ p1 = new XYZ(0,0,0); XYZ p2 = new XYZ(10,0,0); XYZ p3 = new XYZ(10,10,0); XYZ p4 = new XYZ(0,10,0);\n            CurveLoop profile = new CurveLoop();\n            profile.Append(Line.CreateBound(p1,p2)); profile.Append(Line.CreateBound(p2,p3)); profile.Append(Line.CreateBound(p3,p4)); profile.Append(Line.CreateBound(p4,p1));\n            Floor.Create(doc, new List<CurveLoop>{profile}, newSlabType.Id, foundationLevel.Id);\n        }\n    }\n}"}
{"prompt":"Build a new level 'Level 4' at an elevation of 8 meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Level 4\";\n}"}
{"prompt":"Añade una línea de rejilla horizontal a un muro cortina a 1.5 metros de altura.","completion":"using (Transaction t = new Transaction(doc, \"Add Curtain Grid Line\"))\n{\n    t.Start();\n    Wall cw = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Cast<Wall>().FirstOrDefault(w => w.CurtainGrid != null);\n\n    if (cw != null)\n    {\n        CurtainGrid cg = cw.CurtainGrid;\n        if (cg != null)\n        {\n            LocationCurve locCurve = cw.Location as LocationCurve;\n            if(locCurve != null)\n            {\n                 XYZ startPoint = locCurve.Curve.GetEndPoint(0);\n                 XYZ endPoint = locCurve.Curve.GetEndPoint(1);\n                 XYZ midPoint = (startPoint + endPoint) \/ 2;\n                 XYZ gridLinePoint = new XYZ(midPoint.X, midPoint.Y, 1.5 \/ 0.3048);\n                 cg.AddGridLine(false, gridLinePoint, false);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Voltea el elemento dado 45 grados alrededor de su centro.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un elemento para rotar\");\n\nif (pickedRef != null)\n{\n    Element elem = doc.GetElement(pickedRef.ElementId);\n    if (elem != null)\n    {\n        LocationPoint lp = elem.Location as LocationPoint;\n        if (lp != null)\n        {\n            Line axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\n            double angle = 45 * Math.PI \/ 180.0;\n            ElementTransformUtils.RotateElement(doc, elem.Id, axis, angle);\n        }\n    }\n}"}
{"prompt":"Copy all elements from Level 1 to Level 2.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nLevel level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 2\") as Level;\nif (level1 != null && level2 != null)\n{\n    ICollection<ElementId> elementsToCopy = new FilteredElementCollector(doc, level1.Id).WhereElementIsNotElementType().ToElementIds();\n    double elevationDiff = level2.ProjectElevation - level1.ProjectElevation;\n    XYZ translation = new XYZ(0, 0, elevationDiff);\n    if(elementsToCopy.Any())\n    {\n        ElementTransformUtils.CopyElements(doc, elementsToCopy, translation);\n    }\n}"}
{"prompt":"Retrieve all rooms on Level 3.","completion":"Level level3 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 3\") as Level;\nList<Element> roomsOnLevel3 = new List<Element>();\n\nif (level3 != null)\n{\n    roomsOnLevel3 = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Where(r => r.LevelId == level3.Id).ToList();\n}"}
{"prompt":"Crea 5 worksets para las disciplinas de ingeniería.","completion":"List<string> worksetNames = new List<string> { \"MEP_HVAC\", \"MEP_Plumbing\", \"MEP_Electrical\", \"STRUCT_Framing\", \"STRUCT_Foundations\" };\nforeach(string name in worksetNames)\n{\n    Workset newWorkset = Workset.Create(doc, name);\n}"}
{"prompt":"Crea un nuevo tipo de texto de 5mm de color verde.","completion":"using (Transaction t = new Transaction(doc, \"Create Green Text Type\"))\n{\n    t.Start();\n    string newTypeName = \"5mm Verde\";\n    TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\n    if (defaultType != null)\n    {\n        TextNoteType newType = defaultType.Duplicate(newTypeName) as TextNoteType;\n        if (newType != null)\n        {\n            Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n            if (textSizeParam != null && !textSizeParam.IsReadOnly)\n            {\n                textSizeParam.Set(5 \/ 304.8);\n            }\n            Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n            if (lineColorParam != null && !lineColorParam.IsReadOnly)\n            {\n                 lineColorParam.Set(65280);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea una vista de plano de plafón reflejado para el Nivel 1.","completion":"string levelName = \"Nivel 1\";\nstring viewName = \"Plano de Plafón Nivel 1\";\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.CeilingPlan);\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\n\nif (vft != null && level1 != null)\n{\n    ViewPlan rcp = ViewPlan.Create(doc, vft.Id, level1.Id);\n    if (rcp != null)\n    {\n        rcp.Name = viewName;\n    }\n}"}
{"prompt":"Display a dialog box with 'Yes', 'No', and 'Cancel' options.","completion":""}
{"prompt":"Inserta una nota de texto con 'Revisar' en la vista actual.","completion":"View activeView = doc.ActiveView;\nElementId defaultTypeId = doc.GetDefaultElementTypeId(ElementTypeGroup.TextNoteType);\nif (activeView != null && defaultTypeId != ElementId.InvalidElementId)\n{\n    XYZ position = new XYZ(5, 5, 0);\n    TextNote.Create(doc, activeView.Id, position, \"Revisar\", defaultTypeId);\n}"}
{"prompt":"Duplica el nivel 2 con un desfase de 4m y llámalo 'Mezanine'.","completion":"string levelName = \"Nivel 2\";\nLevel levelToCopy = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (levelToCopy != null)\n{\n    double offset = UnitUtils.ConvertToInternalUnits(4, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, levelToCopy.Elevation + offset);\n    newLevel.Name = \"Mezanine\";\n}"}
{"prompt":"Get the MEP space associated with the room 'Office 106'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Cast<Room>().FirstOrDefault(r => r.Name == \"Office 106\");\nList<Space> spaces = new List<Space>();\n\nif (room != null)\n{\n    spaces = new FilteredElementCollector(doc).OfClass(typeof(Space)).Cast<Space>().Where(s => s.Room != null && s.Room.Id == room.Id).ToList();\n}"}
{"prompt":"Clone level 4 with a 5m offset and name it 'Mezzanine'.","completion":"string levelName = \"Level 4\";\nLevel levelToCopy = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (levelToCopy != null)\n{\n    double offset = UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, levelToCopy.Elevation + offset);\n    newLevel.Name = \"Mezzanine\";\n}"}
{"prompt":"Get the total length of all walls in the project.","completion":"double totalLength = 0.0;\nList<Wall> walls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Cast<Wall>().ToList();\nforeach (Wall wall in walls)\n{\n    Parameter lengthParam = wall.get_Parameter(BuiltInParameter.CURVE_ELEM_LENGTH);\n    if (lengthParam != null && lengthParam.HasValue)\n    {\n        totalLength += lengthParam.AsDouble();\n    }\n}"}
{"prompt":"Add the 'Level', 'Mark', and 'Volume' fields to the column schedule.","completion":"ViewSchedule schedule = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().FirstOrDefault(s => s.Name.Contains(\"Column\"));\nif (schedule != null)\n{\n    ScheduleDefinition def = schedule.Definition;\n    SchedulableField levelField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.FAMILY_LEVEL_PARAM);\n    if (levelField != null) def.AddField(levelField);\n    SchedulableField markField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.ALL_MODEL_MARK);\n    if (markField != null) def.AddField(markField);\n    SchedulableField volumeField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.HOST_VOLUME_COMPUTED);\n    if (volumeField != null) def.AddField(volumeField);\n}"}
{"prompt":"Configure the 'Comments' parameter for all doors on Level 2 to 'Fire Rating - 94 min'.","completion":"string levelName = \"Level 2\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(targetLevel.Id);\n    FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WherePasses(levelFilter);\n    foreach (Element door in collector)\n    {\n        Parameter commentsParam = door.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n        if (commentsParam != null && !commentsParam.IsReadOnly) { commentsParam.Set(\"Fire Rating - 94 min\"); }\n    }\n}"}
{"prompt":"Build a new wall type 'Generic Wall 295mm' with a thickness of 27cm.","completion":"string newTypeName = \"Generic Wall 295mm\";\nWallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif (oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(newTypeName) as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(27, UnitTypeId.Centimeters));\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n}"}
{"prompt":"Create a new elevation view looking north.","completion":"using (Transaction t = new Transaction(doc, \"Create North Elevation\"))\n{\n    t.Start();\n    ViewFamilyType elevationVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(vft => vft.ViewFamily == ViewFamily.Elevation);\n    View activeView = doc.ActiveView;\n\n    if (elevationVFT != null && activeView != null)\n    {\n        ElevationMarker marker = ElevationMarker.CreateElevationMarker(doc, elevationVFT.Id, new XYZ(0, 20 \/ 0.3048, 0), 100);\n        \n        if (marker != null)\n        {\n            View aev = marker.CreateElevation(doc, activeView.Id, 2);\n            if (aev != null)\n            {\n                aev.Name = \"North Elevation\";\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea un conducto eléctrico de 1 pulgada de diámetro.","completion":"using (Transaction t = new Transaction(doc, \"Create Conduit\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    ElementId conduitTypeId = new FilteredElementCollector(doc).OfClass(typeof(ConduitType)).FirstElementId();\n\n    if (level != null && conduitTypeId != null && conduitTypeId != ElementId.InvalidElementId)\n    {\n        XYZ start = new XYZ(0, 0, 3 \/ 0.3048);\n        XYZ end = new XYZ(5 \/ 0.3048, 0, 3 \/ 0.3048);\n        Conduit conduit = Conduit.Create(doc, conduitTypeId, start, end, level.Id);\n\n        if (conduit != null)\n        {\n            Parameter diameterParam = conduit.get_Parameter(BuiltInParameter.RBS_CONDUIT_DIAMETER_PARAM);\n            if (diameterParam != null && !diameterParam.IsReadOnly)\n            {\n                diameterParam.Set(1.0 \/ 12.0);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Cambia el nombre de todas las familias cargadas que contengan 'Métrica' a 'Imperial'.","completion":"List<Family> familiesToRename = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.Name.Contains(\"Métrica\")).ToList();\nforeach(Family fam in familiesToRename)\n{\n    fam.Name = fam.Name.Replace(\"Métrica\", \"Imperial\");\n}"}
{"prompt":"Create 10 architectural worksets.","completion":"List<string> worksetNames = new List<string> { \"TAD_ARQ_WALLS\", \"TAD_ARQ_FINISHES\", \"TAD_ARQ_CEILINGS\", \"TAD_ARQ_FLOORS\", \"TAD_ARQ_RAILINGS\", \"TAD_ARQ_WINDOWS\", \"TAD_ARQ_CARPENTRY\", \"TAD_ARQ_FURNITURE\", \"TAD_ARQ_PLUMBING\", \"TAD_ARQ_EXTERIOR\" };\nforeach(string name in worksetNames)\n{\n    Workset newWorkset = Workset.Create(doc, name);\n}"}
{"prompt":"Ajusta el tipo de una losa seleccionada a 'Concreto 12cm'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una losa\");\n\nif (pickedRef != null)\n{\n    Floor floorToChange = doc.GetElement(pickedRef) as Floor;\n    FloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name == \"Concreto 12cm\");\n    \n    if (floorToChange != null && newType != null)\n    {\n        floorToChange.ChangeTypeId(newType.Id);\n    }\n}"}
{"prompt":"Crea una nueva vista de alzado mirando al norte.","completion":"using (Transaction t = new Transaction(doc, \"Create North Elevation\"))\n{\n    t.Start();\n    ViewFamilyType elevationVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(vft => vft.ViewFamily == ViewFamily.Elevation);\n    View activeView = doc.ActiveView;\n\n    if (elevationVFT != null && activeView != null)\n    {\n        ElevationMarker marker = ElevationMarker.CreateElevationMarker(doc, elevationVFT.Id, new XYZ(0, 20 \/ 0.3048, 0), 100);\n        \n        if (marker != null)\n        {\n            View aev = marker.CreateElevation(doc, activeView.Id, 2);\n            if (aev != null)\n            {\n                aev.Name = \"Alzado Norte\";\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Place an instance of the 'Office Desk' family in the center of the 'Office 105' room.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Office 105\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Office Desk\") as FamilySymbol;\nif(furnitureSymbol != null && !furnitureSymbol.IsActive) furnitureSymbol.Activate();\nif(room != null)\n{\n    LocationPoint roomCenter = room.Location as LocationPoint;\n    if(roomCenter != null && furnitureSymbol != null && room.Level != null)\n    {\n        doc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Modify the type of a selected floor to 'Concrete 17cm'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a floor\");\n\nif (pickedRef != null)\n{\n    Floor floorToChange = doc.GetElement(pickedRef) as Floor;\n    FloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name == \"Concrete 17cm\");\n    \n    if (floorToChange != null && newType != null)\n    {\n        floorToChange.ChangeTypeId(newType.Id);\n    }\n}"}
{"prompt":"Crea una vista de planta para el 'Nivel 6'.","completion":"string levelName = \"Nivel 6\";\nLevel level3 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.FloorPlan);\n\nif (level3 != null && vft != null)\n{\n    ViewPlan viewPlan = ViewPlan.Create(doc, vft.Id, level3.Id);\n}"}
{"prompt":"Add a tag to the column closest to the origin.","completion":"using (Transaction t = new Transaction(doc, \"Tag Column\"))\n{\n    t.Start();\n    View activeView = doc.ActiveView;\n    FamilyInstance column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().Cast<FamilyInstance>().OrderBy(c => {\n        LocationPoint lp = c.Location as LocationPoint;\n        return lp != null ? lp.Point.DistanceTo(XYZ.Zero) : double.MaxValue;\n    }).FirstOrDefault();\n\n    if (activeView != null && column != null)\n    {\n        LocationPoint loc = column.Location as LocationPoint;\n        if (loc != null)\n        {\n            IndependentTag.Create(doc, activeView.Id, new Reference(column), true, TagMode.TM_ADDBY_CATEGORY, TagOrientation.Horizontal, loc.Point);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Include reinforcement to a column.","completion":"RebarBarType barType = new FilteredElementCollector(doc).OfClass(typeof(RebarBarType)).FirstOrDefault() as RebarBarType;\nRebarShape shape = new FilteredElementCollector(doc).OfClass(typeof(RebarShape)).FirstOrDefault() as RebarShape;\nFamilyInstance column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\n\nif (barType != null && shape != null && column != null)\n{\n    Rebar.CreateFromRebarShape(doc, shape, barType, column, column.GetTransform().Origin, XYZ.BasisX, XYZ.BasisY);\n}"}
{"prompt":"Find all doors on Level 3 using a combined filter.","completion":"string levelName = \"Level 3\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    ElementCategoryFilter categoryFilter = new ElementCategoryFilter(BuiltInCategory.OST_Doors);\n    ElementLevelFilter levelFilter = new ElementLevelFilter(targetLevel.Id);\n    LogicalAndFilter combinedFilter = new LogicalAndFilter(levelFilter, categoryFilter);\n    FilteredElementCollector collector = new FilteredElementCollector(doc).WherePasses(combinedFilter);\n    uidoc.Selection.SetElementIds(collector.ToElementIds());\n}"}
{"prompt":"Create an assembly from the selected elements.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds != null && selectedIds.Count > 0)\n{\n    AssemblyInstance assemblyInstance = AssemblyInstance.Create(doc, selectedIds, new ElementId(BuiltInCategory.OST_Assemblies));\n    if (assemblyInstance != null)\n    {\n        assemblyInstance.Name = \"New Assembly\";\n    }\n}"}
{"prompt":"Inserta el prefijo 'PLANTA-' a todas las vistas de plano.","completion":"string prefix = \"PLANTA-\";\nList<ViewPlan> planViews = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().Where(v => !v.IsTemplate).ToList();\nforeach(ViewPlan view in planViews)\n{\n    if(!view.Name.StartsWith(prefix))\n    {\n        view.Name = prefix + view.Name;\n    }\n}"}
{"prompt":"Construct a new level named 'Mezzanine' at 8.2 meters elevation.","completion":"string levelName = \"Mezzanine\";\ndouble elevation = UnitUtils.ConvertToInternalUnits(8.2, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Fetch all rooms on Level 5","completion":"string levelName = \"Level 5\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(targetLevel.Id);\n    FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WherePasses(levelFilter);\n    uidoc.Selection.SetElementIds(collector.ToElementIds());\n}"}
{"prompt":"Create a radial dimension for a curved wall.","completion":"using (Transaction t = new Transaction(doc, \"Create Radial Dimension\"))\n{\n    t.Start();\n    Wall curvedWall = new FilteredElementCollector(doc, doc.ActiveView.Id).OfClass(typeof(Wall)).Cast<Wall>().FirstOrDefault(w => w.Location is LocationCurve && (w.Location as LocationCurve).Curve is Arc);\n    View activeView = doc.ActiveView;\n\n    if (curvedWall != null && activeView != null)\n    {\n        LocationCurve locCurve = curvedWall.Location as LocationCurve;\n        if (locCurve != null)\n        {\n            Arc arc = locCurve.Curve as Arc;\n            if (arc != null)\n            {\n                ReferenceArray refArray = new ReferenceArray();\n                refArray.Append(arc.Reference);\n                doc.Create.NewDimension(activeView, Line.CreateBound(arc.Center, arc.GetEndPoint(0)), refArray);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create a filled region with a 'Concrete' pattern.","completion":"using (Transaction t = new Transaction(doc, \"Create Filled Region\"))\n{\n    t.Start();\n    FilledRegionType regionType = new FilteredElementCollector(doc).OfClass(typeof(FilledRegionType)).Cast<FilledRegionType>().FirstOrDefault(frt => frt.Name.Contains(\"Concrete\"));\n    View activeView = doc.ActiveView;\n\n    if (regionType != null && activeView != null)\n    {\n        XYZ p1 = new XYZ(0,0,0);\n        XYZ p2 = new XYZ(5 \/ 0.3048, 0,0);\n        XYZ p3 = new XYZ(5 \/ 0.3048, 5 \/ 0.3048,0);\n        XYZ p4 = new XYZ(0, 5 \/ 0.3048,0);\n        CurveLoop profile = new CurveLoop();\n        profile.Append(Line.CreateBound(p1,p2));\n        profile.Append(Line.CreateBound(p2,p3));\n        profile.Append(Line.CreateBound(p3,p4));\n        profile.Append(Line.CreateBound(p4,p1));\n        FilledRegion.Create(doc, regionType.Id, activeView.Id, new List<CurveLoop>{profile});\n    }\n    t.Commit();\n}"}
{"prompt":"Crea un nuevo tipo de muro de 25cm llamado 'Muro Estructural 25cm'.","completion":"string newTypeName = \"Muro Estructural 25cm\";\nWallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif (oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(newTypeName) as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(25, UnitTypeId.Centimeters));\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n}"}
{"prompt":"Create a floor plan view for 'Level 5'.","completion":"string levelName = \"Level 5\";\nLevel level3 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.FloorPlan);\n\nif (level3 != null && vft != null)\n{\n    ViewPlan viewPlan = ViewPlan.Create(doc, vft.Id, level3.Id);\n}"}
{"prompt":"Create a new A1 sheet using the first available title block.","completion":"FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (titleBlock != null)\n{\n    ViewSheet sheet = ViewSheet.Create(doc, titleBlock.Id);\n    if (sheet != null)\n    {\n        sheet.Name = \"A1 - New Sheet\";\n        sheet.SheetNumber = \"A1\";\n    }\n}"}
{"prompt":"Build a new Level named 'Level 2' at an elevation of 11 meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(11, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\nif (newLevel != null)\n{\n    try { newLevel.Name = \"Level 2\"; } catch {}\n}"}
{"prompt":"Aísla temporalmente todo el mobiliario en la vista activa.","completion":"ICollection<ElementId> furnitureIds = new FilteredElementCollector(doc, doc.ActiveView.Id).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsNotElementType().ToElementIds();\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.IsolateElementsTemporary(furnitureIds);\n}"}
{"prompt":"Generate a global length parameter named 'CorridorWidth' with a value of 0.9m.","completion":"string paramName = \"CorridorWidth\";\nGlobalParameter gp = GlobalParameter.Create(doc, paramName, SpecTypeId.Length);\n\nif (gp != null)\n{\n    gp.SetValue(new DoubleParameterValue(UnitUtils.ConvertToInternalUnits(0.9, UnitTypeId.Meters)));\n}"}
{"prompt":"Copia todos los muros del Nivel 1 al Nivel 2.","completion":"using (Transaction t = new Transaction(doc, \"Copy Walls\"))\n{\n    t.Start();\n    Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel 1\");\n    Level level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel 2\");\n\n    if (level1 != null && level2 != null)\n    {\n        ICollection<ElementId> wallsToCopy = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Where(e => (e as Wall) != null && (e as Wall).LevelId.Equals(level1.Id)).Select(e => e.Id).ToList();\n        double elevationDiff = level2.ProjectElevation - level1.ProjectElevation;\n        XYZ translation = new XYZ(0, 0, elevationDiff);\n        if (wallsToCopy.Count > 0)\n        {\n            ElementTransformUtils.CopyElements(doc, wallsToCopy, translation);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea un nuevo tipo de texto de 5mm de color verde.","completion":"using (Transaction t = new Transaction(doc, \"Create Green Text Type\"))\n{\n    t.Start();\n    string newTypeName = \"5mm Verde\";\n    TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\n    if (defaultType != null)\n    {\n        TextNoteType newType = defaultType.Duplicate(newTypeName) as TextNoteType;\n        if (newType != null)\n        {\n            Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n            if (textSizeParam != null && !textSizeParam.IsReadOnly)\n            {\n                textSizeParam.Set(5 \/ 304.8);\n            }\n            Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n            if (lineColorParam != null && !lineColorParam.IsReadOnly)\n            {\n                 lineColorParam.Set(65280);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Put an instance of the 'Office Desk' family in the center of the 'Office 101' room.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Office 101\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Office Desk\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);"}
{"prompt":"Fetch a list of all annotation families.","completion":"List<Family> annotationFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.CategoryType == CategoryType.Annotation).ToList();\n"}
{"prompt":"Fetch all rooms on the 'Ground Floor' Level.","completion":"Level groundFloor = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Ground Floor\") as Level;\nList<Element> roomsOnGround = new List<Element>();\n\nif (groundFloor != null)\n{\n    roomsOnGround = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Where(r => r.LevelId == groundFloor.Id).ToList();\n}"}
{"prompt":"Append a 90-degree elbow between two pipes.","completion":"using (Transaction t = new Transaction(doc, \"Add Elbow\"))\n{\n    t.Start();\n    List<Pipe> pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast<Pipe>().Where(p => p.ConnectorManager != null && p.ConnectorManager.UnusedConnectors.Size > 0).Take(2).ToList();\n\n    if (pipes.Count >= 2)\n    {\n        Connector c1 = pipes[0].ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n        Connector c2 = pipes[1].ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n        \n        if (c1 != null && c2 != null)\n        {\n            doc.Create.NewElbowFitting(c1, c2);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea una rejilla de 5 ejes horizontales y 5 verticales, espaciados 6 metros.","completion":"double spacing = UnitUtils.ConvertToInternalUnits(6, UnitTypeId.Meters);\nint count = 5;\nfor (int i = 0; i < count; i++)\n{\n    Line line = Line.CreateBound(new XYZ(0, i * spacing, 0), new XYZ((count - 1) * spacing, i * spacing, 0));\n    Grid.Create(doc, line);\n}\nfor (int i = 0; i < count; i++)\n{\n    Line line = Line.CreateBound(new XYZ(i * spacing, 0, 0), new XYZ(i * spacing, (count - 1) * spacing, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Append a reference point at coordinates (1,2,3) inside the family editor.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(1,2,3));"}
{"prompt":"Add a reference point at coordinates (6,5,1) inside the family editor.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(6,5,1));"}
{"prompt":"Establece el parámetro 'Marca' de todos los muros seleccionados a 'M-EXT-1'.","completion":"using (Transaction t = new Transaction(doc, \"Set Wall Mark\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    ICollection<ElementId> selectedIds = localUidoc.Selection.GetElementIds();\n\n    if (selectedIds != null && selectedIds.Count > 1)\n    {\n        foreach(ElementId id in selectedIds)\n        {\n            Element elem = doc.GetElement(id);\n            if(elem is Wall)\n            {\n                Parameter markParam = elem.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n                if (markParam != null && !markParam.IsReadOnly) markParam.Set(\"M-EXT-01\");\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea un nuevo tipo de muro 'Muro Genérico 290mm' con un grosor de 29cm.","completion":"string newTypeName = \"Muro Genérico 290mm\";\nWallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif (oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(newTypeName) as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(29, UnitTypeId.Centimeters));\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n}"}
{"prompt":"Build a new room on Level 3 at point (7, 6).","completion":"string levelName = \"Level 3\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    UV point = new UV(7, 6);\n    Room newRoom = doc.Create.NewRoom(targetLevel, point);\n}"}
{"prompt":"Create a new level named 'Mezzanine' at 7.9 meters elevation.","completion":"string levelName = \"Mezzanine\";\ndouble elevation = UnitUtils.ConvertToInternalUnits(7.9, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Establece el parámetro 'Marca' de todos los muros seleccionados a 'M-EXT-4'.","completion":"using (Transaction t = new Transaction(doc, \"Set Wall Mark\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    ICollection<ElementId> selectedIds = localUidoc.Selection.GetElementIds();\n\n    if (selectedIds != null && selectedIds.Count > 4)\n    {\n        foreach(ElementId id in selectedIds)\n        {\n            Element elem = doc.GetElement(id);\n            if(elem is Wall)\n            {\n                Parameter p = elem.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n                if (p != null && !p.IsReadOnly) \n                {\n                    p.Set(\"M-EXT-01\");\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Construct a global length parameter named 'CorridorWidth' with a value of 0.4m.","completion":"string paramName = \"CorridorWidth\";\nGlobalParameter gp = GlobalParameter.Create(doc, paramName, SpecTypeId.Length);\n\nif (gp != null)\n{\n    gp.SetValue(new DoubleParameterValue(UnitUtils.ConvertToInternalUnits(0.4, UnitTypeId.Meters)));\n}"}
{"prompt":"Pivot a selected element 92 degrees around its Z-axis.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select an element to rotate\");\nElement elem = doc.GetElement(pickedRef.ElementId);\nLocationPoint lp = elem.Location as LocationPoint;\nLine axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\nElementTransformUtils.RotateElement(doc, elem.Id, axis, Math.PI \/ 92);"}
{"prompt":"Crea una viga estructural entre (0,0,3) y (5,0,3) en el Nivel 2.","completion":"FamilySymbol beamType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (beamType != null && level != null)\n{\n    if(!beamType.IsActive) beamType.Activate();\n    XYZ start = new XYZ(0, 0, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters));\n    XYZ end = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters));\n    Line beamCurve = Line.CreateBound(start, end);\n    doc.Create.NewFamilyInstance(beamCurve, beamType, level, StructuralType.Beam);\n}"}
{"prompt":"Forma un plafón a 2.8 metros de altura en el Nivel 1.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\nCeilingType ceilingType = new FilteredElementCollector(doc).OfClass(typeof(CeilingType)).FirstOrDefault() as CeilingType;\nif (ceilingType != null && level != null)\n{\n    CurveLoop profile = new CurveLoop();\n    profile.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(10,0,0)));\n    profile.Append(Line.CreateBound(new XYZ(10,0,0), new XYZ(10,10,0)));\n    profile.Append(Line.CreateBound(new XYZ(10,10,0), new XYZ(0,10,0)));\n    profile.Append(Line.CreateBound(new XYZ(0,10,0), new XYZ(0,0,0)));\n    Ceiling ceiling = Ceiling.Create(doc, new List<CurveLoop>{profile}, ceilingType.Id, level.Id);\n    if (ceiling != null)\n    {\n        Parameter heightParam = ceiling.get_Parameter(BuiltInParameter.CEILING_HEIGHTABOVELEVEL_PARAM);\n        if (heightParam != null && !heightParam.IsReadOnly) heightParam.Set(UnitUtils.ConvertToInternalUnits(2.8, UnitTypeId.Meters));\n    }\n}"}
{"prompt":"Obtén el elemento anfitrión de la primera ventana que encuentres.","completion":"FamilyInstance windowInstance = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\nif (windowInstance != null)\n{\n    Element hostElement = windowInstance.Host;\n}"}
{"prompt":"Coloca una instancia de la familia 'Mesa de Oficina' en el centro de la habitación 'Despacho 101'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 101\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Mesa de Oficina\") as FamilySymbol;\nif(furnitureSymbol != null && !furnitureSymbol.IsActive) furnitureSymbol.Activate();\nif(room != null)\n{\n    LocationPoint roomCenter = room.Location as LocationPoint;\n    if(roomCenter != null && furnitureSymbol != null && room.Level != null)\n    {\n        doc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Crea una nueva tabla de planificación para Pilares Estructurales.","completion":"string scheduleName = \"Tabla de Pilares Estructurales\";\nElementId categoryId = new ElementId(BuiltInCategory.OST_StructuralColumns);\nViewSchedule schedule = ViewSchedule.CreateSchedule(doc, categoryId);\nschedule.Name = scheduleName;"}
{"prompt":"Check if the active view is a plan view.","completion":"View activeView = doc.ActiveView;\nbool isPlanView = false;\n\nif (activeView != null)\n{\n    isPlanView = activeView.ViewType == ViewType.FloorPlan \n                 || activeView.ViewType == ViewType.CeilingPlan \n                 || activeView.ViewType == ViewType.AreaPlan \n                 || activeView.ViewType == ViewType.EngineeringPlan;\n}\n"}
{"prompt":"Coloca la vista 'Nivel 1' en el centro de la hoja activa.","completion":"ViewPlan viewToPlace = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v => v.Name == \"Nivel 1\") as ViewPlan;\nViewSheet activeSheet = doc.ActiveView as ViewSheet;\n\nif (viewToPlace != null && activeSheet != null)\n{\n    BoundingBoxUV sheetBox = activeSheet.Outline;\n    XYZ centerPoint = new XYZ((sheetBox.Min.U + sheetBox.Max.U) \/ 2, (sheetBox.Min.V + sheetBox.Max.V) \/ 2, 0);\n    Viewport.Create(doc, activeSheet.Id, viewToPlace.Id, centerPoint);\n}"}
{"prompt":"Create a new Level named 'Level 8' at an elevation of 16 meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(16, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Level 8\";\n}"}
{"prompt":"Obtén las coordenadas del punto base y del punto de reconocimiento.","completion":"BasePoint surveyPoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(p => p.IsShared);\nBasePoint projectBasePoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(p => !p.IsShared);\n\nXYZ surveyCoords = null;\nif (surveyPoint != null) surveyCoords = surveyPoint.get_BoundingBox(null).Min;\n\nXYZ projectCoords = null;\nif (projectBasePoint != null) projectCoords = projectBasePoint.get_BoundingBox(null).Min;"}
{"prompt":"Build a new wall type 'Generic Wall 355mm' with a thickness of 30cm.","completion":"WallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif(oldWallType != null)\n{\n    WallType newWallType = null;\n    try { newWallType = oldWallType.Duplicate(\"Generic Wall 355mm\") as WallType; } catch {}\n    if(newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if(cs != null && cs.GetLayers().Any())\n        {\n            int coreLayerIndex = cs.GetFirstCoreLayerIndex();\n            if(coreLayerIndex != -1)\n            {\n                cs.SetLayerWidth(coreLayerIndex, UnitUtils.ConvertToInternalUnits(30, UnitTypeId.Centimeters));\n                newWallType.SetCompoundStructure(cs);\n            }\n        }\n    }\n}"}
{"prompt":"Place a spot elevation on a given face and view point.","completion":"using (Transaction t = new Transaction(doc, \"Place Spot Elevation\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference faceRef = localUidoc.Selection.PickObject(ObjectType.Face, \"Select the top face of the floor\");\n\n    View activeView = doc.ActiveView;\n\n    if (faceRef != null && activeView != null)\n    {\n        XYZ pointOnFace = faceRef.GlobalPoint;\n        XYZ leaderEnd = pointOnFace + new XYZ(1 \/ 0.3048, 1 \/ 0.3048, 0);\n        doc.Create.NewSpotElevation(activeView, faceRef, pointOnFace, pointOnFace, leaderEnd, pointOnFace, true);\n    }\n    t.Commit();\n}"}
{"prompt":"Clone the 'Level 2' plan view and make it a view template.","completion":"using (Transaction t = new Transaction(doc, \"Create View Template\"))\n{\n    t.Start();\n    ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().FirstOrDefault(v => v.Name == \"Level 2\");\n    string templateName = \"Level 2 Template\";\n\n    if (viewToDuplicate != null)\n    {\n        ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n        View newView = doc.GetElement(newViewId) as View;\n        if (newView != null)\n        {\n           \/\/ Direct conversion to a template may not be available in older APIs.\n           \/\/ A common workaround is to set the IsTemplate property if available and writable, \n           \/\/ which is not the case here. This is left as a comment for conceptual understanding.\n           \/\/ newView.IsTemplate = true;\n            newView.Name = templateName;\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Move a selected element to position (8,9).","completion":"ICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds.Any())\n{\n    foreach (ElementId id in selectedIds)\n    {\n        Element elem = doc.GetElement(id);\n        if (elem != null)\n        {\n            LocationPoint lp = elem.Location as LocationPoint;\n            if (lp != null)\n            {\n                XYZ newPosition = new XYZ(8, 9, lp.Point.Z);\n                lp.Point = newPosition;\n            }\n        }\n    }\n}"}
{"prompt":"Incorpora un nivel llamado 'Nivel Azotea' a 16.1 metros.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(16.1, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Nivel Azotea\";\n}"}
{"prompt":"Create a detail group with the selected detail items.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds != null && selectedIds.Count > 0)\n{\n    List<ElementId> detailIds = new List<ElementId>();\n    foreach(ElementId id in selectedIds)\n    {\n        Element elem = doc.GetElement(id);\n        if (elem != null && elem.Category != null && elem.Category.CategoryType == CategoryType.Annotation)\n        {\n            detailIds.Add(id);\n        }\n    }\n\n    if (detailIds.Count > 0)\n    {\n        Group group = doc.Create.NewGroup(detailIds);\n        if (group != null)\n        {\n            group.Name = \"Typical Detail 1\";\n        }\n    }\n}"}
{"prompt":"Retrieve all rooms on Level 2","completion":"string levelName = \"Level 2\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(targetLevel.Id);\n    FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WherePasses(levelFilter);\n    uidoc.Selection.SetElementIds(collector.ToElementIds());\n}"}
{"prompt":"Copy level 2 with a 1m offset and name it 'Mezzanine'.","completion":"string levelName = \"Level 2\";\nLevel levelToCopy = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (levelToCopy != null)\n{\n    double offset = UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, levelToCopy.Elevation + offset);\n    newLevel.Name = \"Mezzanine\";\n}"}
{"prompt":"Move a wall 5 meters to the right.","completion":"Wall wall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\n\nif (wall != null)\n{\n    XYZ translation = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters),0,0);\n    ElementTransformUtils.MoveElement(doc, wall.Id, translation);\n}"}
{"prompt":"Crea una región rellena con un patrón de 'Concreto'.","completion":"using (Transaction t = new Transaction(doc, \"Create Filled Region\"))\n{\n    t.Start();\n    FilledRegionType regionType = new FilteredElementCollector(doc).OfClass(typeof(FilledRegionType)).Cast<FilledRegionType>().FirstOrDefault(frt => frt.Name.Contains(\"Concrete\") || frt.Name.Contains(\"Concreto\"));\n    View activeView = doc.ActiveView;\n\n    if (regionType != null && activeView != null)\n    {\n        XYZ p1 = new XYZ(0,0,0);\n        XYZ p2 = new XYZ(5 \/ 0.3048, 0,0);\n        XYZ p3 = new XYZ(5 \/ 0.3048, 5 \/ 0.3048,0);\n        XYZ p4 = new XYZ(0, 5 \/ 0.3048,0);\n        CurveLoop profile = new CurveLoop();\n        profile.Append(Line.CreateBound(p1,p2));\n        profile.Append(Line.CreateBound(p2,p3));\n        profile.Append(Line.CreateBound(p3,p4));\n        profile.Append(Line.CreateBound(p4,p1));\n        FilledRegion.Create(doc, regionType.Id, activeView.Id, new List<CurveLoop>{profile});\n    }\n    t.Commit();\n}"}
{"prompt":"Copy the 'Level 2' plan view and make it a view template.","completion":"using (Transaction t = new Transaction(doc, \"Create View Template\"))\n{\n    t.Start();\n    ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().FirstOrDefault(v => v.Name == \"Level 2\");\n    string templateName = \"Level 2 Template\";\n\n    if (viewToDuplicate != null)\n    {\n        ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n        View newView = doc.GetElement(newViewId) as View;\n        if (newView != null)\n        {\n           \/\/ In older APIs, direct conversion to a template may not be available.\n           \/\/ A common workaround is to set the IsTemplate property if available and writable, \n           \/\/ which is not the case here. This is left as a comment for conceptual understanding.\n           \/\/ newView.IsTemplate = true;\n            newView.Name = templateName;\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Select all walls on 'Level 2' and change their comment to 'REVIEW INSULATION'.","completion":"Level level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 2\") as Level;\nif (level2 != null)\n{\n    List<Wall> wallsOnLevel2 = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Where(w => w.LevelId == level2.Id).Cast<Wall>().ToList();\n    foreach(Wall wall in wallsOnLevel2)\n    {\n        Parameter commentParam = wall.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n        if (commentParam != null && !commentParam.IsReadOnly)\n        {\n            commentParam.Set(\"REVIEW INSULATION\");\n        }\n    }\n}"}
{"prompt":"Construct a new wall type 'Generic Wall 299mm' with a thickness of 28cm.","completion":"string newTypeName = \"Generic Wall 299mm\";\nWallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif (oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(newTypeName) as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(28, UnitTypeId.Centimeters));\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n}"}
{"prompt":"Copy the 'Generic - 150mm' wall type and name it 'Interior - 15cm Plaster'.","completion":"string originalName = \"Generic - 150mm\";\nstring newName = \"Interior - 15cm Plaster\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif(originalType!=null)\n    originalType.Duplicate(newName);"}
{"prompt":"Exporta la geometría de un elemento seleccionado a un archivo SAT.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un elemento para exportar\");\n\nif (pickedRef != null)\n{\n    Element elem = doc.GetElement(pickedRef.ElementId);\n    if (elem != null)\n    {\n        string folderPath = \"C:\/RevitExports\/\";\n        string fileName = elem.Name + \".sat\";\n        SATExportOptions options = new SATExportOptions();\n        doc.Export(folderPath, fileName, new List<ElementId>{elem.Id}, options);\n    }\n}"}
{"prompt":"Sitúa un rociador en las coordenadas (10,1,2).","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol sprinklerSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Sprinklers).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (level != null && sprinklerSymbol != null)\n{\n    if (!sprinklerSymbol.IsActive) sprinklerSymbol.Activate();\n    XYZ placementPoint = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters));\n    doc.Create.NewFamilyInstance(placementPoint, sprinklerSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n}"}
{"prompt":"Create a wall on Level 1 from (0,0,0) to (5,0,0) with a height of 5 meters.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (level1 != null && wallType != null)\n{\n    Line wallCurve = Line.CreateBound(new XYZ(0, 0, 0), new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0, 0));\n    double height = UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters);\n    Wall.Create(doc, wallCurve, wallType.Id, level1.Id, height, 0.0, false, false);\n}"}
{"prompt":"Start and commit a transaction for 'Modify Project'.","completion":""}
{"prompt":"Ajusta todas las ventanas para que tengan la altura del antepecho a 898mm.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits(898, UnitTypeId.Millimeters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Voltea un elemento seleccionado 95 grados sobre su eje Z.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un elemento para rotar\");\nElement elem = doc.GetElement(pickedRef.ElementId);\nLocationPoint lp = elem.Location as LocationPoint;\nLine axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\nElementTransformUtils.RotateElement(doc, elem.Id, axis, Math.PI \/ 95);"}
{"prompt":"Duplicate the 'Basic Wall' type and rename it.","completion":"string typeToDuplicate = \"Basic Wall\";\nstring newTypeName = \"Basic Wall Copy\";\nWallType wt = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(w=>w.Name==typeToDuplicate);\n\nif (wt != null)\n{\n    WallType newWt = wt.Duplicate(newTypeName) as WallType;\n}"}
{"prompt":"Sitúa una instancia de la familia 'Mesa de Oficina' en el centro de la habitación 'Despacho 96'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 96\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Mesa de Oficina\") as FamilySymbol;\nif(furnitureSymbol != null && !furnitureSymbol.IsActive) furnitureSymbol.Activate();\nif(room != null)\n{\n    LocationPoint roomCenter = room.Location as LocationPoint;\n    if(roomCenter != null && furnitureSymbol != null && room.Level != null)\n    {\n        doc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Generate a radial dimension for a curved wall.","completion":"using (Transaction t = new Transaction(doc, \"Create Radial Dimension\"))\n{\n    t.Start();\n    Wall curvedWall = new FilteredElementCollector(doc, doc.ActiveView.Id).OfClass(typeof(Wall)).Cast<Wall>().FirstOrDefault(w => w.Location is LocationCurve && (w.Location as LocationCurve).Curve is Arc);\n    View activeView = doc.ActiveView;\n\n    if (curvedWall != null && activeView != null)\n    {\n        LocationCurve locCurve = curvedWall.Location as LocationCurve;\n        if (locCurve != null)\n        {\n            Arc arc = locCurve.Curve as Arc;\n            if (arc != null)\n            {\n                ReferenceArray refArray = new ReferenceArray();\n                refArray.Append(arc.Reference);\n                doc.Create.NewDimension(activeView, Line.CreateBound(arc.Center, arc.GetEndPoint(0)), refArray);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Construct a floor plan view for 'Level 7'.","completion":"string levelName = \"Level 7\";\nLevel level3 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.FloorPlan);\n\nif (level3 != null && vft != null)\n{\n    ViewPlan viewPlan = ViewPlan.Create(doc, vft.Id, level3.Id);\n}"}
{"prompt":"Crea un nivel 'Roof Terrace' a 10m.","completion":"string levelName = \"Roof Terrace\";\ndouble elev = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elev);\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Rename all plan views to start with 'ARCH_'.","completion":"string prefix = \"ARCH_\";\nList<ViewPlan> planViews = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().Where(v => !v.IsTemplate).ToList();\nforeach(ViewPlan view in planViews)\n{\n    if(!view.Name.StartsWith(prefix))\n    {\n        view.Name = prefix + view.Name;\n    }\n}"}
{"prompt":"Insert an instance of the 'Office Desk' family in the center of the 'Office 97' room.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Office 97\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Office Desk\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);"}
{"prompt":"Pivot a selected element 95 degrees around its Z-axis.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select an element to rotate\");\nElement elem = doc.GetElement(pickedRef.ElementId);\nLocationPoint lp = elem.Location as LocationPoint;\nLine axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\nElementTransformUtils.RotateElement(doc, elem.Id, axis, Math.PI \/ 95);"}
{"prompt":"Incorpora un punto de referencia en las coordenadas (5,1,1) dentro del editor de familias.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(5,1,1));"}
{"prompt":"Copy the 'Level 4' view as a dependent view.","completion":"ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v => v.Name == \"Level 4\") as ViewPlan;\n\nif (viewToDuplicate != null)\n{\n    ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n}"}
{"prompt":"Modifica el nivel de detalle de la vista actual a 'Bajo'.","completion":"View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.DetailLevel = ViewDetailLevel.Coarse;\n}"}
{"prompt":"Create a 3D view oriented from the southeast.","completion":"string viewName = \"3D View Southeast\";\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft != null)\n{\n    View3D view3d = View3D.CreateIsometric(doc, vft.Id);\n    if (view3d != null)\n    {\n        XYZ eye = new XYZ(1, -1, 1);\n        XYZ up = new XYZ(0, 0, 1);\n        XYZ forward = new XYZ(-1, 1, -1);\n        view3d.SetOrientation(new ViewOrientation3D(eye, up, forward));\n        view3d.Name = viewName;\n    }\n}"}
{"prompt":"Cambia el tipo de una losa seleccionada a 'Concreto 15cm'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una losa\");\n\nif (pickedRef != null)\n{\n    Floor floorToChange = doc.GetElement(pickedRef) as Floor;\n    FloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name == \"Concreto 15cm\");\n    \n    if (floorToChange != null && newType != null)\n    {\n        floorToChange.ChangeTypeId(newType.Id);\n    }\n}"}
{"prompt":"Crea un muro en Nivel 1 de (0,0,0) a (5,0,0) con 5m de alto.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (level1 != null && wallType != null)\n{\n    Line wallCurve = Line.CreateBound(new XYZ(0, 0, 0), new XYZ(5, 0, 0));\n    double height = UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters);\n    Wall.Create(doc, wallCurve, wallType.Id, level1.Id, height, 0.0, false, false);\n}"}
{"prompt":"Crea una vista 3D con la caja de sección activada.","completion":"string viewName = \"Vista 3D con Caja de Sección\";\nViewFamilyType vft3D = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft3D != null)\n{\n    View3D view3d = View3D.CreateIsometric(doc, vft3D.Id);\n    if (view3d != null)\n    {\n        view3d.Name = viewName;\n        view3d.IsSectionBoxActive = true;\n    }\n}"}
{"prompt":"Pivot a selected element 89 degrees around its Z-axis.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select an element to rotate\");\nElement elem = doc.GetElement(pickedRef.ElementId);\nLocationPoint lp = elem.Location as LocationPoint;\nLine axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\nElementTransformUtils.RotateElement(doc, elem.Id, axis, Math.PI \/ 89);"}
{"prompt":"Crea un muro en el Nivel 1 que vaya de (0,0,0) a (10,0,0) con una altura de 4 metros.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif(level1 != null && wallType != null)\n{\n    XYZ p1 = new XYZ(0, 0, 0);\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), 0, 0);\n    Line wallCurve = Line.CreateBound(p1, p2);\n    double height = UnitUtils.ConvertToInternalUnits(4, UnitTypeId.Meters);\n    Wall.Create(doc, wallCurve, wallType.Id, level1.Id, height, 0.0, false, false);\n}"}
{"prompt":"Adjust the visual style of the active view to 'Hidden Line'.","completion":"View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.DisplayStyle = DisplayStyle.HLR;\n}"}
{"prompt":"Insert an instance of the 'Office Desk' family in the center of the 'Office 96' room.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Office 96\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Office Desk\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);"}
{"prompt":"Apply 24mm thermal insulation to all hot water pipes.","completion":"PipeInsulationType insulationType = new FilteredElementCollector(doc).OfClass(typeof(PipeInsulationType)).FirstOrDefault() as PipeInsulationType;\nPipingSystemType hotWaterSystem = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).Cast<PipingSystemType>().FirstOrDefault(s => s.Name.Contains(\"Hot Water\"));\n\nif (insulationType != null && hotWaterSystem != null)\n{\n    List<Pipe> pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast<Pipe>().Where(p => \n    {\n        Parameter systemParam = p.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM);\n        return systemParam != null && systemParam.HasValue && systemParam.AsElementId() == hotWaterSystem.Id;\n    }).ToList();\n    \n    foreach(Pipe p in pipes)\n    {\n        PipeInsulation.Create(doc, p.Id, insulationType.Id, UnitUtils.ConvertToInternalUnits(24, UnitTypeId.Millimeters));\n    }\n}"}
{"prompt":"Inserta un punto al Path of Travel seleccionado.","completion":"\/\/ PathOfTravel related methods like GetPath and Update are likely inaccessible in this environment.\n\/\/ The following code is a placeholder to show the intent.\n\/*\nusing (Transaction t = new Transaction(doc, \"Update Path of Travel\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference pickedRef = localUidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un Path of Travel\");\n\n    if (pickedRef != null)\n    {\n        PathOfTravel pot = doc.GetElement(pickedRef) as PathOfTravel;\n        if (pot != null)\n        {\n            IList<XYZ> points = pot.GetPath();\n            if (points != null && points.Count >= 2)\n            {\n                XYZ midPoint = (points[0] + points[1]) \/ 2;\n                points.Insert(1, midPoint); \n                pot.Update(points);\n            }\n        }\n    }\n    t.Commit();\n}\n*\/"}
{"prompt":"Determina el área total de todas las habitaciones.","completion":"double totalArea = 0.0;\nList<Room> rooms = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>().ToList();\nforeach (Room room in rooms)\n{\n    totalArea += room.Area;\n}"}
{"prompt":"Copy level 6 with a 5m offset and name it 'Mezzanine'.","completion":"string levelName = \"Level 6\";\nLevel levelToCopy = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (levelToCopy != null)\n{\n    double offset = UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, levelToCopy.Elevation + offset);\n    newLevel.Name = \"Mezzanine\";\n}"}
{"prompt":"Construct a stair between Level 3 and Level 1","completion":"\/\/ This is a complex operation that requires multiple steps and\/or user interaction and is not supported by the agent."}
{"prompt":"Ajusta el tipo de todas las ventanas de 'Fijo' a 'Abatible'.","completion":"FamilySymbol newType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name.Contains(\"Abatible\"));\nFamilySymbol oldType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name.Contains(\"Fijo\"));\n\nif (newType != null && oldType != null)\n{\n    List<FamilyInstance> windowsToChange = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().Where(fi => fi.Symbol.Id == oldType.Id).ToList();\n    foreach (FamilyInstance window in windowsToChange)\n    {\n        window.Symbol = newType;\n    }\n}"}
{"prompt":"Obtén una lista de los nombres de todos los tipos de familia de la categoría 'Mobiliario'.","completion":"List<Element> furnitureTypes = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().ToList();\nList<string> typeNames = new List<string>();\nforeach(Element type in furnitureTypes)\n{\n    typeNames.Add(type.Name);\n}\n"}
{"prompt":"Genera un piso rectangular de 10×8 metros.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\n\nif (level != null && floorType != null)\n{\n    double width = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\n    double length = UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters);\n    XYZ p1 = new XYZ(0, 0, 0);\n    XYZ p2 = new XYZ(width, 0, 0);\n    XYZ p3 = new XYZ(width, length, 0);\n    XYZ p4 = new XYZ(0, length, 0);\n    CurveLoop loop = new CurveLoop();\n    loop.Append(Line.CreateBound(p1, p2));\n    loop.Append(Line.CreateBound(p2, p3));\n    loop.Append(Line.CreateBound(p3, p4));\n    loop.Append(Line.CreateBound(p4, p1));\n    Floor.Create(doc, new List<CurveLoop> { loop }, floorType.Id, level.Id);\n}"}
{"prompt":"Duplicate the 'Generic - 147mm' wall type and name it 'Interior - 17cm Plaster'.","completion":"string originalName = \"Generic - 147mm\";\nstring newName = \"Interior - 17cm Plaster\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif(originalType!=null)\n    originalType.Duplicate(newName);"}
{"prompt":"Cambia el nombre de la vista activa a 'Vista de Trabajo'.","completion":"string newName = \"Vista de Trabajo\";\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.Name = newName;\n}"}
{"prompt":"Cambia el tipo de la ventana seleccionada al tipo 'Fija 120x60'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una ventana\");\nFamilySymbol newType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name == \"Fija 120x60\");\nif (pickedRef != null && newType != null)\n{\n    FamilyInstance window = doc.GetElement(pickedRef.ElementId) as FamilyInstance;\n    if (window != null)\n    {\n        window.Symbol = newType;\n    }\n}"}
{"prompt":"Crea un nuevo Nivel llamado 'Nivel 4' a una elevación de 12 metros.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(12, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Nivel 4\";\n}"}
{"prompt":"Cambia el nombre de todas las familias cargadas que contengan 'Métrica' a 'Imperial'.","completion":"List<Family> familiesToRename = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.Name.Contains(\"Métrica\")).ToList();\nforeach(Family fam in familiesToRename)\n{\n    fam.Name = fam.Name.Replace(\"Métrica\", \"Imperial\");\n}"}
{"prompt":"Extrae el espacio MEP asociado a la habitación 'Oficina 101'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Cast<Room>().FirstOrDefault(r => r.Name == \"Oficina 101\");\nList<Space> spaces = new List<Space>();\n\nif (room != null)\n{\n    spaces = new FilteredElementCollector(doc).OfClass(typeof(Space)).Cast<Space>().Where(s => s.Room != null && s.Room.Id == room.Id).ToList();\n}"}
{"prompt":"Ubica una instancia de la familia 'Mesa de Oficina' en el centro de la habitación 'Despacho 103'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 103\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Mesa de Oficina\") as FamilySymbol;\nif(furnitureSymbol != null && !furnitureSymbol.IsActive) furnitureSymbol.Activate();\nif(room != null)\n{\n    LocationPoint roomCenter = room.Location as LocationPoint;\n    if(roomCenter != null && furnitureSymbol != null && room.Level != null)\n    {\n        doc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Sitúa un rociador en las coordenadas (10,2,1).","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol sprinklerSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Sprinklers).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (level != null && sprinklerSymbol != null)\n{\n    if (!sprinklerSymbol.IsActive) sprinklerSymbol.Activate();\n    XYZ placementPoint = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters));\n    doc.Create.NewFamilyInstance(placementPoint, sprinklerSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n}"}
{"prompt":"Actualiza el tipo de una losa por uno que contenga 'Pintura Blanca'.","completion":"Floor floorToChange = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault() as Floor;\nFloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name.Contains(\"Pintura Blanca\") || ft.Name.Contains(\"Concrete\"));\n\nif (floorToChange != null && newType != null)\n{\n    floorToChange.ChangeTypeId(newType.Id);\n}"}
{"prompt":"Crea un nuevo Nivel llamado 'Nivel 7' a una elevación de 17 metros.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(17, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Nivel 7\";\n}"}
{"prompt":"Generate a new Level named 'Level 1' at an elevation of 16 meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(16, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\nif (newLevel != null)\n{\n    try { newLevel.Name = \"Level 1\"; } catch {}\n}"}
{"prompt":"Load the 'Table.rfa' family and place it at (6,4,2) on Level 2","completion":"string levelName = \"Level 2\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nstring familyName = \"Table\";\nFamilySymbol symbol = new FilteredElementCollector(doc).OfClass(typeof(FamilySymbol)).Cast<FamilySymbol>().FirstOrDefault(fs => fs.Family.Name == familyName);\nif (symbol != null && targetLevel != null)\n{\n    if (!symbol.IsActive) { symbol.Activate(); doc.Regenerate(); }\n    XYZ location = new XYZ(6, 4, 2);\n    doc.Create.NewFamilyInstance(location, symbol, targetLevel, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n}"}
{"prompt":"Create a new wall type 'Generic Wall 300mm' with a thickness of 30cm.","completion":"using (Transaction t = new Transaction(doc, \"Create Wall Type\"))\n{\n    t.Start();\n    string newTypeName = \"Generic Wall 300mm\";\n    WallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\n    if (oldWallType != null)\n    {\n        WallType newWallType = oldWallType.Duplicate(newTypeName) as WallType;\n        if (newWallType != null)\n        {\n            CompoundStructure cs = newWallType.GetCompoundStructure();\n            if (cs != null && cs.LayerCount > 0)\n            {\n                int coreLayerIndex = cs.GetFirstCoreLayerIndex();\n                if (coreLayerIndex >= 0 && coreLayerIndex < cs.LayerCount)\n                {\n                    cs.SetLayerWidth(coreLayerIndex, 300 \/ 304.8);\n                    newWallType.SetCompoundStructure(cs);\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Construye un equipo eléctrico en X=1,Y=1.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol panelSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_ElectricalEquipment).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (level != null && panelSymbol != null)\n{\n    if (!panelSymbol.IsActive)\n    {\n        panelSymbol.Activate();\n    }\n    XYZ point = new XYZ(1, 1, 0);\n    doc.Create.NewFamilyInstance(point, panelSymbol, level, StructuralType.NonStructural);\n}"}
{"prompt":"Create a new linear dimension type with blue text and 2mm size.","completion":"using (Transaction t = new Transaction(doc, \"Create Dimension Type\"))\n{\n    t.Start();\n    string newTypeName = \"Blue Dimension 2mm\";\n    DimensionType linearDimType = new FilteredElementCollector(doc).OfClass(typeof(DimensionType)).Cast<DimensionType>().FirstOrDefault(dt => dt.StyleType == DimensionStyleType.Linear);\n\n    if (linearDimType != null)\n    {\n        DimensionType newDimType = linearDimType.Duplicate(newTypeName) as DimensionType;\n        if (newDimType != null)\n        {\n            Parameter colorParam = newDimType.get_Parameter(BuiltInParameter.LINE_COLOR);\n            if (colorParam != null && !colorParam.IsReadOnly) colorParam.Set(255);\n            Parameter textSizeParam = newDimType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n            if (textSizeParam != null && !textSizeParam.IsReadOnly) textSizeParam.Set(2 \/ 304.8);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Set the visibility of the 'Furniture' category to false in the active view.","completion":"Category furnitureCat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Furniture);\nif (furnitureCat != null && doc.ActiveView != null)\n{\n    doc.ActiveView.SetCategoryHidden(furnitureCat.Id, true);\n}"}
{"prompt":"Fija (pin) todos los vínculos de Revit en el proyecto.","completion":"List<RevitLinkInstance> links = new FilteredElementCollector(doc).OfClass(typeof(RevitLinkInstance)).Cast<RevitLinkInstance>().ToList();\nforeach (RevitLinkInstance link in links)\n{\n    if (!link.Pinned)\n    {\n        link.Pinned = true;\n    }\n}"}
{"prompt":"Recupera el espacio MEP asociado a la habitación 'Oficina 96'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Cast<Room>().FirstOrDefault(r => r.Name == \"Oficina 96\");\nList<Space> spaces = new List<Space>();\n\nif (room != null)\n{\n    spaces = new FilteredElementCollector(doc).OfClass(typeof(Space)).Cast<Space>().Where(s => s.Room != null && s.Room.Id == room.Id).ToList();\n}"}
{"prompt":"Cambia el nombre de todas las familias cargadas que contengan 'Métrica' a 'Imperial'.","completion":"List<Family> familiesToRename = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.Name.Contains(\"Métrica\")).ToList();\nforeach(Family fam in familiesToRename)\n{\n    fam.Name = fam.Name.Replace(\"Métrica\", \"Imperial\");\n}"}
{"prompt":"Build a 'Roof Terrace' level at 11m.","completion":"string levelName = \"Roof Terrace\";\ndouble elev = UnitUtils.ConvertToInternalUnits(11, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elev);\nnewLevel.Name = levelName;\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Replicate the 'Level 2' view as a dependent view.","completion":"ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v => v.Name == \"Level 2\") as ViewPlan;\n\nif (viewToDuplicate != null)\n{\n    ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n}"}
{"prompt":"Encuentra todas las puertas en el Nivel 3 usando un filtro combinado.","completion":"string levelName = \"Nivel 3\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    ElementCategoryFilter categoryFilter = new ElementCategoryFilter(BuiltInCategory.OST_Doors);\n    ElementLevelFilter levelFilter = new ElementLevelFilter(targetLevel.Id);\n    LogicalAndFilter combinedFilter = new LogicalAndFilter(levelFilter, categoryFilter);\n    FilteredElementCollector collector = new FilteredElementCollector(doc).WherePasses(combinedFilter);\n    uidoc.Selection.SetElementIds(collector.ToElementIds());\n}"}
{"prompt":"Rotate a selected element 90 degrees around its Z-axis.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select an element to rotate\");\nElement elem = doc.GetElement(pickedRef.ElementId);\nLocationPoint lp = elem.Location as LocationPoint;\nLine axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\nElementTransformUtils.RotateElement(doc, elem.Id, axis, Math.PI \/ 2.0);"}
{"prompt":"Duplicate level 5 with a 8m offset and name it 'Mezzanine'.","completion":"string levelName = \"Level 5\";\nLevel levelToCopy = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (levelToCopy != null)\n{\n    double offset = UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, levelToCopy.Elevation + offset);\n    newLevel.Name = \"Mezzanine\";\n}"}
{"prompt":"Coloca un pilar estructural en (10,5), asegurándote de que el tipo de familia esté activo.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (level != null && columnSymbol != null)\n{\n    if (!columnSymbol.IsActive)\n    {\n        columnSymbol.Activate();\n    }\n    XYZ point = new XYZ(10, 5, 0);\n    doc.Create.NewFamilyInstance(point, columnSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n}"}
{"prompt":"Crea 10 worksets de arquitectura.","completion":"List<string> worksetNames = new List<string> { \"TAD_ARQ_MAM\", \"TAD_ARQ_ACA\", \"TAD_ARQ_PLA\", \"TAD_ARQ_PSO\", \"TAD_ARQ_HRE\", \"TAD_ARQ_ALU\", \"TAD_ARQ_CAR\", \"TAD_ARQ_MOB\", \"TAD_ARQ_PLO\", \"TAD_ARQ_EXT\" };\nforeach(string name in worksetNames)\n{\n    Workset.Create(doc, name);\n}"}
{"prompt":"Generate a new level named 'Mezzanine' at 7.0 meters elevation.","completion":"string levelName = \"Mezzanine\";\ndouble elevation = UnitUtils.ConvertToInternalUnits(7.0, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Recupera todas las habitaciones que están en el Nivel 2","completion":"string levelName = \"Nivel 2\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(targetLevel.Id);\n    FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WherePasses(levelFilter);\n    uidoc.Selection.SetElementIds(collector.ToElementIds());\n}"}
{"prompt":"Generate a rectangular floor of 10x8 meters.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\nif (level != null && floorType != null)\n{\n    double width = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\n    double length = UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters);\n    XYZ p1 = XYZ.Zero;\n    XYZ p2 = new XYZ(width, 0, 0);\n    XYZ p3 = new XYZ(width, length, 0);\n    XYZ p4 = new XYZ(0, length, 0);\n    CurveLoop profile = new CurveLoop();\n    profile.Append(Line.CreateBound(p1, p2));\n    profile.Append(Line.CreateBound(p2, p3));\n    profile.Append(Line.CreateBound(p3, p4));\n    profile.Append(Line.CreateBound(p4, p1));\n    Floor.Create(doc, new List<CurveLoop> { profile }, floorType.Id, level.Id);\n}"}
{"prompt":"Attach a reference point at coordinates (5,4,4) inside the family editor.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(5,4,4));"}
{"prompt":"Construct an MEP space for each room on Level 1","completion":"string levelName = \"Level 1\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    FilteredElementCollector roomCollector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WherePasses(new ElementLevelFilter(targetLevel.Id));\n    foreach (Room room in roomCollector.ToElements().Cast<Room>())\n    {\n        LocationPoint locPoint = room.Location as LocationPoint;\n        if (locPoint != null)\n        {\n            UV point = new UV(locPoint.Point.X, locPoint.Point.Y);\n            doc.Create.NewSpace(targetLevel, point);\n        }\n    }\n}"}
{"prompt":"Insert an instance of the 'Office Desk' family in the center of the 'Office 99' room.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Office 99\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Office Desk\") as FamilySymbol;\nif(furnitureSymbol != null && !furnitureSymbol.IsActive) furnitureSymbol.Activate();\nif(room != null)\n{\n    LocationPoint roomCenter = room.Location as LocationPoint;\n    if(roomCenter != null && furnitureSymbol != null && room.Level != null)\n    {\n        doc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Oculta todos los muros que sean más cortos de 2 metros.","completion":"double lengthThreshold = UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\nList<Wall> walls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Cast<Wall>().ToList();\nList<ElementId> shortWallIds = new List<ElementId>();\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    foreach(Wall wall in walls)\n    {\n        Parameter lengthParam = wall.get_Parameter(BuiltInParameter.CURVE_ELEM_LENGTH);\n        if(lengthParam != null && lengthParam.HasValue && lengthParam.AsDouble() < lengthThreshold)\n        {\n            shortWallIds.Add(wall.Id);\n        }\n    }\n    if (shortWallIds.Count > 0)\n    {\n        activeView.HideElements(shortWallIds);\n    }\n}"}
{"prompt":"Renombra todas las vistas de sección para que empiecen con 'SEC-'.","completion":"string prefix = \"SEC-\";\nList<ViewSection> sectionViews = new FilteredElementCollector(doc).OfClass(typeof(ViewSection)).Cast<ViewSection>().Where(v => !v.IsTemplate).ToList();\nforeach (ViewSection view in sectionViews)\n{\n    if (!view.Name.StartsWith(prefix))\n    {\n        view.Name = prefix + view.Name;\n    }\n}"}
{"prompt":"Define the 'Comments' parameter for all doors on Level 1 to 'Fire Rating - 90 min'.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\n\nif (level1 != null)\n{\n    List<FamilyInstance> doorsOnLevel1 = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsNotElementType().Cast<FamilyInstance>().Where(fi => fi.LevelId == level1.Id).ToList();\n    foreach(FamilyInstance door in doorsOnLevel1)\n    {\n        Parameter commentsParam = door.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n        if (commentsParam != null && !commentsParam.IsReadOnly) commentsParam.Set(\"Fire Rating - 90 min\");\n    }\n}"}
{"prompt":"Put an instance of the 'Office Desk' family in the center of the 'Office 100' room.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Office 100\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Office Desk\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);"}
{"prompt":"Duplicate level 5 with a 1m offset and name it 'Mezzanine'.","completion":"string levelName = \"Level 5\";\nLevel levelToCopy = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (levelToCopy != null)\n{\n    double offset = UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, levelToCopy.Elevation + offset);\n    newLevel.Name = \"Mezzanine\";\n}"}
{"prompt":"Inserta un terminal de aire en el extremo de un conducto.","completion":"Duct duct = new FilteredElementCollector(doc).OfClass(typeof(Duct)).FirstOrDefault() as Duct;\nFamilySymbol terminalSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_DuctTerminal).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (duct != null && terminalSymbol != null)\n{\n    if(!terminalSymbol.IsActive) terminalSymbol.Activate();\n    LocationCurve locCurve = duct.Location as LocationCurve;\n    if (locCurve != null)\n    {\n        Connector endConnector = duct.ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault(c => c.Origin.IsAlmostEqualTo(locCurve.Curve.GetEndPoint(1)));\n        if (endConnector != null)\n        {\n            doc.Create.NewFamilyInstance(endConnector.Origin, terminalSymbol, duct, StructuralType.NonStructural);\n        }\n    }\n}"}
{"prompt":"Recupera todas las habitaciones en el Nivel 'Losa 101'.","completion":"Level groundFloor = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Losa 101\") as Level;\nList<Element> roomsOnGround = new List<Element>();\n\nif (groundFloor != null)\n{\n    roomsOnGround = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Where(r => r.LevelId == groundFloor.Id).ToList();\n}"}
{"prompt":"Copy the 'Generic - 147mm' wall type and name it 'Interior - 14cm Plaster'.","completion":"string originalName = \"Generic - 147mm\";\nstring newName = \"Interior - 14cm Plaster\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif(originalType!=null)\n    originalType.Duplicate(newName);"}
{"prompt":"Replicate level 6 with a 1m offset and name it 'Mezzanine'.","completion":"string levelName = \"Level 6\";\nLevel levelToCopy = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (levelToCopy != null)\n{\n    double offset = UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, levelToCopy.Elevation + offset);\n    newLevel.Name = \"Mezzanine\";\n}"}
{"prompt":"Ajusta todas las ventanas para que la altura del antepecho sea 1 metro.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Fetch a list of all family type names from the 'Furniture' category.","completion":"List<Element> furnitureTypes = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().ToList();\nList<string> typeNames = new List<string>();\nforeach(Element type in furnitureTypes)\n{\n    typeNames.Add(type.Name);\n}\n"}
{"prompt":"Generate a new Level named 'Level 3' at an elevation of 10 meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\nif (newLevel != null)\n{\n    try { newLevel.Name = \"Level 3\"; } catch {}\n}"}
{"prompt":"Duplica el tipo de muro 'Genérico - 195mm' y nómbralo 'Interior - 15cm Yeso'.","completion":"string originalName = \"Genérico - 195mm\";\nstring newName = \"Interior - 15cm Yeso\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif (originalType != null)\n{\n    WallType newType = originalType.Duplicate(newName) as WallType;\n}"}
{"prompt":"Get the MEP space associated with the room 'Office 105'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Cast<Room>().FirstOrDefault(r => r.Name == \"Office 105\");\nList<Space> spaces = new List<Space>();\n\nif (room != null)\n{\n    spaces = new FilteredElementCollector(doc).OfClass(typeof(Space)).Cast<Space>().Where(s => s.Room != null && s.Room.Id == room.Id).ToList();\n}"}
{"prompt":"Inserta un punto al Path of Travel seleccionado.","completion":"\/\/ PathOfTravel related methods are likely inaccessible in this environment.\n\/\/ The following code is a placeholder to show the intent.\n\/*\nusing (Transaction t = new Transaction(doc, \"Update Path of Travel\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference pickedRef = localUidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un Path of Travel\");\n\n    if (pickedRef != null)\n    {\n        PathOfTravel pot = doc.GetElement(pickedRef) as PathOfTravel;\n        if (pot != null)\n        {\n            IList<XYZ> points = pot.GetPath();\n            if (points != null && points.Count >= 2)\n            {\n                XYZ midPoint = (points[0] + points[1]) \/ 2;\n                points.Insert(1, midPoint); \n                pot.Update(points);\n            }\n        }\n    }\n    t.Commit();\n}\n*\/"}
{"prompt":"Rotate a selected element 85 degrees around its Z-axis.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select an element to rotate\");\nElement elem = doc.GetElement(pickedRef.ElementId);\nLocationPoint lp = elem.Location as LocationPoint;\nLine axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\nElementTransformUtils.RotateElement(doc, elem.Id, axis, Math.PI \/ 85);"}
{"prompt":"Assign the 'Mark' parameter of all selected walls to 'W-EXT-5'.","completion":"using (Transaction t = new Transaction(doc, \"Set Wall Mark\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    ICollection<ElementId> selectedIds = localUidoc.Selection.GetElementIds();\n\n    if (selectedIds != null && selectedIds.Count > 5)\n    {\n        foreach(ElementId id in selectedIds)\n        {\n            Element elem = doc.GetElement(id);\n            if(elem is Wall)\n            {\n                Parameter p = elem.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n                if (p != null && !p.IsReadOnly)\n                {\n                    p.Set(\"W-EXT-01\");\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Genera un suelo de tipo 'Generic 150mm' que cubra el área definida por los muros perimetrales en el Nivel 1.","completion":"FloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault(f => f.Name == \"Generic 150mm\") as FloorType;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\n\nIList<Wall> walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>().ToList();\n\nif (floorType != null && level != null && walls.Count >= 4)\n{\n    CurveLoop profile = new CurveLoop();\n    \/\/ Simplified assumption of a rectangular perimeter for the agent\n    XYZ min = new XYZ(walls.Min(w => (w.Location as LocationCurve).Curve.GetEndPoint(0).X), walls.Min(w => (w.Location as LocationCurve).Curve.GetEndPoint(0).Y), 0);\n    XYZ max = new XYZ(walls.Max(w => (w.Location as LocationCurve).Curve.GetEndPoint(1).X), walls.Max(w => (w.Location as LocationCurve).Curve.GetEndPoint(1).Y), 0);\n\n    profile.Append(Line.CreateBound(new XYZ(min.X, min.Y, 0), new XYZ(max.X, min.Y, 0)));\n    profile.Append(Line.CreateBound(new XYZ(max.X, min.Y, 0), new XYZ(max.X, max.Y, 0)));\n    profile.Append(Line.CreateBound(new XYZ(max.X, max.Y, 0), new XYZ(min.X, max.Y, 0)));\n    profile.Append(Line.CreateBound(new XYZ(min.X, max.Y, 0), new XYZ(min.X, min.Y, 0)));\n\n    Floor.Create(doc, new List<CurveLoop> { profile }, floorType.Id, level.Id);\n}"}
{"prompt":"Crea un nuevo tipo de muro 'Muro Genérico 270mm' con un grosor de 27cm.","completion":"string newTypeName = \"Muro Genérico 270mm\";\nWallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif (oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(newTypeName) as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(27, UnitTypeId.Centimeters));\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n}"}
{"prompt":"Agrega un nivel llamado 'Nivel Azotea' a 14.7 metros.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(14.7, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Nivel Azotea\";\n}"}
{"prompt":"Find the structural framing element with the mark 'B-101'.","completion":"string markValue = \"B-101\";\nElement framingElement = new FilteredElementCollector(doc)\n    .OfCategory(BuiltInCategory.OST_StructuralFraming)\n    .WhereElementIsNotElementType()\n    .FirstOrDefault(e => {\n        Parameter p = e.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n        return p != null && p.AsString() == markValue;\n    });"}
{"prompt":"Copy level 1 with a 3m offset and name it 'Mezzanine'.","completion":"string levelName = \"Mezzanine\";\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\n\nif (level1 != null)\n{\n    double newElevation = level1.ProjectElevation + UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, newElevation);\n    if (newLevel != null)\n    {\n        newLevel.Name = levelName;\n    }\n}"}
{"prompt":"Create a 'Roof Terrace' level at 18m.","completion":"string levelName = \"Roof Terrace\";\ndouble elev = UnitUtils.ConvertToInternalUnits(18, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elev);\nnewLevel.Name = levelName;\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Replicate the 'Generic - 147mm' wall type and name it 'Interior - 17cm Plaster'.","completion":"string originalName = \"Generic - 147mm\";\nstring newName = \"Interior - 17cm Plaster\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif (originalType != null)\n{\n    WallType newType = originalType.Duplicate(newName) as WallType;\n}"}
{"prompt":"Crea 5 worksets para las disciplinas de ingeniería.","completion":"List<string> worksetNames = new List<string> { \"MEP_HVAC\", \"MEP_Plumbing\", \"MEP_Electrical\", \"STRUCT_Framing\", \"STRUCT_Foundations\" };\nforeach(string name in worksetNames)\n{\n    Workset newWorkset = Workset.Create(doc, name);\n}"}
{"prompt":"Apply 25mm thermal insulation to all hot water pipes.","completion":"PipeInsulationType insulationType = new FilteredElementCollector(doc).OfClass(typeof(PipeInsulationType)).FirstOrDefault() as PipeInsulationType;\nPipingSystemType hotWaterSystem = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).Cast<PipingSystemType>().FirstOrDefault(s => s.Name.Contains(\"Hot Water\"));\n\nif (insulationType != null && hotWaterSystem != null)\n{\n    List<Pipe> pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast<Pipe>().Where(p => \n    {\n        Parameter systemParam = p.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM);\n        return systemParam != null && systemParam.HasValue && systemParam.AsElementId() == hotWaterSystem.Id;\n    }).ToList();\n    \n    foreach(Pipe p in pipes)\n    {\n        PipeInsulation.Create(doc, p.Id, insulationType.Id, UnitUtils.ConvertToInternalUnits(25, UnitTypeId.Millimeters));\n    }\n}"}
{"prompt":"Build a 'Generic - 200mm' wall on 'Level 1' from (0,0) to (10,5).","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == \"Generic - 200mm\") as WallType;\nif (level != null && wallType != null)\n{\n    XYZ startPoint = new XYZ(0, 0, 0);\n    XYZ endPoint = new XYZ(10, 5, 0);\n    Line wallCurve = Line.CreateBound(startPoint, endPoint);\n    double height = UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\n    Wall.Create(doc, wallCurve, wallType.Id, level.Id, height, 0, false, false);\n}"}
{"prompt":"Create a 'Roof Terrace' level at 15m.","completion":"string levelName = \"Roof Terrace\";\ndouble elev = UnitUtils.ConvertToInternalUnits(15, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elev);\nnewLevel.Name = levelName;\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Crea un nuevo tipo de muro de 22cm llamado 'Interiores'.","completion":"string newTypeName = \"Interiores\";\nWallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif (oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(newTypeName) as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(22, UnitTypeId.Centimeters));\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n}"}
{"prompt":"Attach a reference point at coordinates (1,1,1) inside the family editor.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(1,1,1));"}
{"prompt":"Selecciona todos los muros del 'Nivel 2' y cambia su comentario a 'REVISAR AISLAMIENTO'.","completion":"Level level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 2\") as Level;\nif (level2 != null)\n{\n    List<Wall> wallsOnLevel2 = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Where(w => w.LevelId == level2.Id).Cast<Wall>().ToList();\n    foreach(Wall wall in wallsOnLevel2)\n    {\n        Parameter commentParam = wall.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n        if (commentParam != null && !commentParam.IsReadOnly)\n        {\n            commentParam.Set(\"REVISAR AISLAMIENTO\");\n        }\n    }\n}"}
{"prompt":"Include a reference point at coordinates (4,6,7) inside the family editor.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(4,6,7));"}
{"prompt":"Generate a new level named 'Mezzanine' at 6.8 meters elevation.","completion":"string levelName = \"Mezzanine\";\ndouble elevation = UnitUtils.ConvertToInternalUnits(6.8, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Obtén una lista de todas las vistas de planta del proyecto.","completion":"List<ViewPlan> planViews = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().Where(v => !v.IsTemplate).ToList();"}
{"prompt":"Get all walls from a linked model that intersect with a bounding box.","completion":"RevitLinkInstance linkInstance = new FilteredElementCollector(doc).OfClass(typeof(RevitLinkInstance)).FirstOrDefault() as RevitLinkInstance;\nList<Element> linkedWalls = new List<Element>();\nif (linkInstance != null)\n{\n    Document linkDoc = linkInstance.GetLinkDocument();\n    if (linkDoc != null)\n    {\n        BoundingBoxXYZ bbox = new BoundingBoxXYZ();\n        bbox.Min = new XYZ(0,0,0);\n        bbox.Max = new XYZ(50, 50, 10);\n        Outline outline = new Outline(bbox.Min, bbox.Max);\n        BoundingBoxIntersectsFilter filter = new BoundingBoxIntersectsFilter(outline);\n        linkedWalls = new FilteredElementCollector(linkDoc).OfClass(typeof(Wall)).WherePasses(filter).ToList();\n    }\n}"}
{"prompt":"Crea un pilar del tipo 'Hormigón-Rectangular 30x60' en cada intersección de la rejilla.","completion":"using (Transaction t = new Transaction(doc, \"Create Columns at Grids\"))\n{\n    t.Start();\n    FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(s => s.Name == \"Hormigón-Rectangular 30x60\");\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderBy(l => l.Elevation).FirstOrDefault();\n    List<Grid> grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().ToList();\n    if (columnSymbol != null && level != null)\n    {\n        if (!columnSymbol.IsActive) columnSymbol.Activate();\n        for (int i = 0; i < grids.Count; i++)\n        {\n            for (int j = i + 1; j < grids.Count; j++)\n            {\n                IntersectionResultArray results;\n                if(grids[i].Curve.Intersect(grids[j].Curve, out results) == SetComparisonResult.Overlap)\n                {\n                    if (results != null && !results.IsEmpty)\n                    {\n                        foreach (IntersectionResult ir in results)\n                        {\n                            doc.Create.NewFamilyInstance(ir.XYZPoint, columnSymbol, level, StructuralType.Column);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Obtain a list of all material names.","completion":"List<Material> materials = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().ToList();\nList<string> materialNames = new List<string>();\nforeach(Material m in materials)\n{\n    materialNames.Add(m.Name);\n}\n"}
{"prompt":"Extrae una lista de los nombres de todos los materiales.","completion":"List<Material> materials = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().ToList();\nList<string> materialNames = new List<string>();\nforeach(Material m in materials)\n{\n    materialNames.Add(m.Name);\n}\n"}
{"prompt":"Exporta el documento a un archivo IFC con la versión IFC4x3.","completion":"string folderPath = \"C:\/RevitExports\/\";\nstring fileName = doc.Title + \"_IFC4x3.ifc\";\nif(System.IO.Directory.Exists(folderPath))\n{\n    IFCExportOptions options = new IFCExportOptions();\n    options.FileVersion = IFCVersion.IFC4x3;\n    doc.Export(folderPath, fileName, options);\n}"}
{"prompt":"Recupera todas las habitaciones en el Nivel 'Losa 104'.","completion":"Level groundFloor = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Losa 104\") as Level;\nList<Element> roomsOnGround = new List<Element>();\n\nif (groundFloor != null)\n{\n    roomsOnGround = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Where(r => r.LevelId == groundFloor.Id).ToList();\n}"}
{"prompt":"Construct a global length parameter named 'CorridorWidth' with a value of 1.8m.","completion":"string paramName = \"CorridorWidth\";\nGlobalParameter gp = GlobalParameter.Create(doc, paramName, SpecTypeId.Length);\n\nif (gp != null)\n{\n    gp.SetValue(new DoubleParameterValue(UnitUtils.ConvertToInternalUnits(1.8, UnitTypeId.Meters)));\n}"}
{"prompt":"Duplicate the 'Generic - 111mm' wall type and name it 'Interior - 15cm Plaster'.","completion":"string originalName = \"Generic - 111mm\";\nstring newName = \"Interior - 15cm Plaster\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif (originalType != null)\n{\n    WallType newType = originalType.Duplicate(newName) as WallType;\n}"}
{"prompt":"Recupera una lista de los nombres de todos los materiales.","completion":"List<Material> materials = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().ToList();\nList<string> materialNames = new List<string>();\nforeach(Material m in materials)\n{\n    materialNames.Add(m.Name);\n}\n"}
{"prompt":"Crea una cimentación de viga de 8 metros de largo.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol foundationSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFoundation).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null && foundationSymbol != null)\n{\n    Line line = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters), 0, 0));\n    doc.Create.NewFamilyInstance(line, foundationSymbol, level, StructuralType.Footing);\n}"}
{"prompt":"Create a group from the current selection and move it 10 meters to the right.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds != null && selectedIds.Count > 0)\n{\n    Group group = doc.Create.NewGroup(selectedIds);\n    if (group != null)\n    {\n        XYZ translation = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), 0, 0);\n        ElementTransformUtils.MoveElement(doc, group.Id, translation);\n    }\n}"}
{"prompt":"Obtain the IDs of all 3D views starting with 'Coord' for export.","completion":"List<ElementId> viewsToExport = new FilteredElementCollector(doc).OfClass(typeof(View3D)).Cast<View3D>().Where(v => v.Name.StartsWith(\"Coord\") && !v.IsTemplate).Select(v => v.Id).ToList();\n"}
{"prompt":"Ubica una instancia de la familia 'Mesa de Oficina' en el centro de la habitación 'Despacho 105'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 105\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Mesa de Oficina\") as FamilySymbol;\nif(furnitureSymbol != null && !furnitureSymbol.IsActive) furnitureSymbol.Activate();\nif(room != null)\n{\n    LocationPoint roomCenter = room.Location as LocationPoint;\n    if(roomCenter != null && furnitureSymbol != null && room.Level != null)\n    {\n        doc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Crea 4 ejes en sentido vertical separados 10 metros.","completion":"double separation = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\nfor(int i=0; i<4; i++)\n{\n    Line line = Line.CreateBound(new XYZ(i * separation, 0, 0), new XYZ(i * separation, 40, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Duplicate the 'Generic - 150mm' wall type and name it 'Interior - 15cm Plaster'.","completion":"string originalName = \"Generic - 150mm\";\nstring newName = \"Interior - 15cm Plaster\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif (originalType != null)\n{\n    WallType newType = originalType.Duplicate(newName) as WallType;\n}"}
{"prompt":"Create a new level named 'Mezzanine' at 8.2 meters elevation.","completion":"string levelName = \"Mezzanine\";\ndouble elevation = UnitUtils.ConvertToInternalUnits(8.2, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Build a 30cm 'Double-Wall' type and then create a wall of that type.","completion":"using (Transaction t = new Transaction(doc, \"Create Wall Type and Wall\"))\n{\n    t.Start();\n    string newTypeName = \"Double-Wall\";\n    WallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n    WallType newWallType = null;\n    if (wallTypeToDuplicate != null)\n    {\n        newWallType = wallTypeToDuplicate.Duplicate(newTypeName) as WallType;\n        if (newWallType != null)\n        {\n            CompoundStructure cs = newWallType.GetCompoundStructure();\n            if (cs != null && cs.LayerCount > 0)\n            {\n                cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), 0.3 \/ 0.3048);\n                newWallType.SetCompoundStructure(cs);\n            }\n        }\n    }\n    if (newWallType != null)\n    {\n        Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n        Line wallCurve = Line.CreateBound(XYZ.Zero, new XYZ(10 \/ 0.3048, 0, 0));\n        double height = 3 \/ 0.3048;\n        if (level != null)\n        {\n            Wall.Create(doc, wallCurve, newWallType.Id, level.Id, height, 0, false, false);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Insert an instance of the 'Office Desk' family in the center of the 'Office 101' room.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Office 101\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Office Desk\") as FamilySymbol;\nif(furnitureSymbol != null && !furnitureSymbol.IsActive) furnitureSymbol.Activate();\nif(room != null)\n{\n    LocationPoint roomCenter = room.Location as LocationPoint;\n    if(roomCenter != null && furnitureSymbol != null && room.Level != null)\n    {\n        doc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Construct a Path of Travel between points (1,1) and (10,10) in the plan view.","completion":"\/\/ PathOfTravel.Create is likely inaccessible in this environment.\n\/\/ A comment is left as a placeholder for the intended functionality.\n\/*\nusing (Transaction t = new Transaction(doc, \"Create Path of Travel\"))\n{\n    t.Start();\n    ViewPlan viewPlan = doc.ActiveView as ViewPlan;\n\n    if (viewPlan != null && viewPlan.ViewType == ViewType.FloorPlan)\n    {\n        ElementId levelId = viewPlan.get_Parameter(BuiltInParameter.PLAN_VIEW_LEVEL).AsElementId();\n        Level level = doc.GetElement(levelId) as Level;\n        if (level != null)\n        {\n            XYZ startPoint = new XYZ(1 \/ 0.3048, 1 \/ 0.3048, level.Elevation);\n            XYZ endPoint = new XYZ(10 \/ 0.3048, 10 \/ 0.3048, level.Elevation);\n            \/\/ PathOfTravel.Create(viewPlan, startPoint, endPoint);\n        }\n    }\n    t.Commit();\n}\n*\/"}
{"prompt":"Place an instance of the 'Office Desk' family in the center of the 'Office 102' room.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Office 102\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Office Desk\") as FamilySymbol;\nif(furnitureSymbol != null && !furnitureSymbol.IsActive) furnitureSymbol.Activate();\nif(room != null)\n{\n    LocationPoint roomCenter = room.Location as LocationPoint;\n    if(roomCenter != null && furnitureSymbol != null && room.Level != null)\n    {\n        doc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Put a 6-meter truss between two points.","completion":"using (Transaction t = new Transaction(doc, \"Create Truss\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    FamilySymbol trussSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Family.Name.Contains(\"Truss\"));\n\n    if (level != null && trussSymbol != null)\n    {\n        if (!trussSymbol.IsActive) { trussSymbol.Activate(); }\n        Line trussLine = Line.CreateBound(new XYZ(0, 10, 0), new XYZ(6 \/ 0.3048, 10, 0));\n        doc.Create.NewFamilyInstance(trussLine, trussSymbol, level, StructuralType.NonStructural);\n    }\n    t.Commit();\n}"}
{"prompt":"Permite al usuario seleccionar un muro y obtén su ElementId.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un muro\");\nElementId selectedWallId = ElementId.InvalidElementId;\nif (pickedRef != null)\n{\n    selectedWallId = pickedRef.ElementId;\n}"}
{"prompt":"Mueve el muro seleccionado 5 metros hacia arriba.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un muro para mover\");\nif (pickedRef != null)\n{\n    XYZ translation = new XYZ(0, 0, UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters));\n    ElementTransformUtils.MoveElement(doc, pickedRef.ElementId, translation);\n}"}
{"prompt":"Build a 'Generic - 200mm' wall on 'Level 1' from (0,0) to (10,5).","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == \"Generic - 200mm\") as WallType;\n\nif (level != null && wallType != null)\n{\n    XYZ startPoint = new XYZ(0, 0, 0);\n    XYZ endPoint = new XYZ(10, 5, 0);\n    Line wallCurve = Line.CreateBound(startPoint, endPoint);\n    \/\/ Use a default height of 10ft as it's not specified in the prompt\n    double height = 10.0;\n    Wall.Create(doc, wallCurve, wallType.Id, level.Id, height, 0, false, false);\n}"}
{"prompt":"Coloca un rociador en las coordenadas (5,5,3).","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol sprinklerSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Sprinklers).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (level != null && sprinklerSymbol != null)\n{\n    if (!sprinklerSymbol.IsActive) sprinklerSymbol.Activate();\n    XYZ placementPoint = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters));\n    doc.Create.NewFamilyInstance(placementPoint, sprinklerSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n}"}
{"prompt":"Importa un archivo CAD llamado 'BasePlan.dwg' en la vista actual.","completion":"string filePath = \"C:\/CAD\/BasePlan.dwg\";\nDWGImportOptions options = new DWGImportOptions();\noptions.Placement = ImportPlacement.Origin;\nElementId importId;\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    doc.Import(filePath, options, activeView, out importId);\n}"}
{"prompt":"Carga la familia 'Mesa.rfa' y colócala en (5,5,0) en el Nivel 1.","completion":"string familyPath = \"C:\/Rutas\/Comunes\/Mesa.rfa\";\nFamily deskFamily = null;\nbool familyLoaded = doc.LoadFamily(familyPath, out deskFamily);\n\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\n\nif (familyLoaded && deskFamily != null && level1 != null)\n{\n    FamilySymbol deskSymbol = doc.GetElement(deskFamily.GetFamilySymbolIds().FirstOrDefault()) as FamilySymbol;\n    if (deskSymbol != null)\n    {\n        if (!deskSymbol.IsActive) deskSymbol.Activate();\n        XYZ point = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0);\n        doc.Create.NewFamilyInstance(point, deskSymbol, level1, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Add a reference point at coordinates (2,4,3) inside the family editor.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(2,4,3));"}
{"prompt":"Crea una tabla para puertas con los campos 'Marca de Tipo' y 'Costo'.","completion":"string scheduleName = \"Tabla de Puertas\";\nViewSchedule schedule = ViewSchedule.CreateSchedule(doc, new ElementId(BuiltInCategory.OST_Doors));\n\nif (schedule != null)\n{\n    schedule.Name = scheduleName;\n    ScheduleDefinition def = schedule.Definition;\n    if (def != null)\n    {\n        SchedulableField typeMarkField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.Value == (long)BuiltInParameter.ALL_MODEL_TYPE_MARK);\n        SchedulableField costField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.Value == (long)BuiltInParameter.ALL_MODEL_COST);\n        \n        if (typeMarkField != null) def.AddField(typeMarkField);\n        if (costField != null) def.AddField(costField);\n    }\n}"}
{"prompt":"Generate an MEP space for each room on Level 0.6","completion":"string levelName = \"Level 0.6\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    FilteredElementCollector roomCollector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WherePasses(new ElementLevelFilter(targetLevel.Id));\n    foreach (Room room in roomCollector.ToElements().Cast<Room>())\n    {\n        LocationPoint locPoint = room.Location as LocationPoint;\n        if (locPoint != null)\n        {\n            UV point = new UV(locPoint.Point.X, locPoint.Point.Y);\n            doc.Create.NewSpace(targetLevel, point);\n        }\n    }\n}"}
{"prompt":"Create an extrusion roof with an arc profile.","completion":"using (Transaction t = new Transaction(doc, \"Create Extrusion Roof\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    RoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n\n    if (level != null && roofType != null && doc.ActiveView != null)\n    {\n        CurveArray profile = new CurveArray();\n        profile.Append(Arc.Create(new XYZ(-10,0,0), new XYZ(10,0,0), new XYZ(0,5,0)));\n        Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisY, XYZ.Zero);\n        ReferencePlane refPlane = doc.Create.NewReferencePlane(plane.Origin, plane.Origin + XYZ.BasisX, plane.Normal, doc.ActiveView);\n        if(refPlane != null)\n            doc.Create.NewExtrusionRoof(profile, refPlane, level, roofType, 0, 20);\n    }\n    t.Commit();\n}"}
{"prompt":"Extrae el espacio MEP asociado a la habitación 'Oficina 104'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Cast<Room>().FirstOrDefault(r => r.Name == \"Oficina 104\");\nList<Space> spaces = new List<Space>();\n\nif (room != null)\n{\n    spaces = new FilteredElementCollector(doc).OfClass(typeof(Space)).Cast<Space>().Where(s => s.Room != null && s.Room.Id == room.Id).ToList();\n}"}
{"prompt":"Permite al usuario seleccionar un muro y obtén su ElementId.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un muro\");\nElementId selectedWallId = ElementId.InvalidElementId;\nif (pickedRef != null)\n{\n    selectedWallId = pickedRef.ElementId;\n}"}
{"prompt":"Generate a SketchPlane on Level 2.","completion":"using (Transaction t = new Transaction(doc, \"Create Sketch Plane\"))\n{\n    t.Start();\n    Level level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 2\");\n\n    if (level2 != null)\n    {\n        Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisZ, new XYZ(0, 0, level2.Elevation));\n        SketchPlane skp = SketchPlane.Create(doc, plane);\n    }\n    t.Commit();\n}"}
{"prompt":"Set the 'Comments' parameter for all doors on Level 4 to 'Fire Rating - 95 min'.","completion":"string levelName = \"Level 4\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(targetLevel.Id);\n    FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WherePasses(levelFilter);\n    foreach (Element door in collector)\n    {\n        Parameter commentsParam = door.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n        if (commentsParam != null && !commentsParam.IsReadOnly) { commentsParam.Set(\"Fire Rating - 95 min\"); }\n    }\n}"}
{"prompt":"Crea un pilar del tipo 'Hormigón-Rectangular 30x60' en cada intersección de la rejilla.","completion":"using (Transaction t = new Transaction(doc, \"Create Columns at Grids\"))\n{\n    t.Start();\n    FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(s => s.Name == \"Hormigón-Rectangular 30x60\");\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderBy(l => l.Elevation).FirstOrDefault();\n    List<Grid> grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().ToList();\n    if (columnSymbol != null && level != null)\n    {\n        if (!columnSymbol.IsActive) columnSymbol.Activate();\n        for (int i = 0; i < grids.Count; i++)\n        {\n            for (int j = i + 1; j < grids.Count; j++)\n            {\n                IntersectionResultArray results;\n                if(grids[i].Curve.Intersect(grids[j].Curve, out results) == SetComparisonResult.Overlap)\n                {\n                    if (results != null && !results.IsEmpty)\n                    {\n                        foreach (IntersectionResult ir in results)\n                        {\n                            doc.Create.NewFamilyInstance(ir.XYZPoint, columnSymbol, level, StructuralType.Column);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Construct a new Level named 'Level 9' at an elevation of 11 meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(11, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\nif (newLevel != null)\n{\n    try { newLevel.Name = \"Level 9\"; } catch {}\n}"}
{"prompt":"Modifica el tipo de la ventana seleccionada al tipo 'Fija 121x60'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una ventana\");\nFamilySymbol newType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name == \"Fija 121x60\");\nif (pickedRef != null && newType != null)\n{\n    FamilyInstance window = doc.GetElement(pickedRef.ElementId) as FamilyInstance;\n    if (window != null)\n    {\n        window.Symbol = newType;\n    }\n}"}
{"prompt":"Add a 90-degree elbow between two pipes.","completion":"using (Transaction t = new Transaction(doc, \"Add Elbow\"))\n{\n    t.Start();\n    List<Pipe> pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast<Pipe>().Where(p => p.ConnectorManager != null && p.ConnectorManager.UnusedConnectors.Size > 0).Take(2).ToList();\n\n    if (pipes.Count >= 2)\n    {\n        Connector c1 = pipes[0].ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n        Connector c2 = pipes[1].ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n        \n        if (c1 != null && c2 != null)\n        {\n            doc.Create.NewElbowFitting(c1, c2);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Exporta una lista de todas las advertencias del proyecto a un archivo de texto en el escritorio.","completion":"string desktopPath = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);\nstring filePath = System.IO.Path.Combine(desktopPath, \"RevitWarnings.txt\");\nIList<FailureMessage> warnings = doc.GetWarnings();\nList<string> warningDescriptions = warnings.Select(w => w.GetDescriptionText()).ToList();\nSystem.IO.File.WriteAllLines(filePath, warningDescriptions);"}
{"prompt":"Create a stair between Level 1 and Level 6","completion":"\/\/ This is a complex operation that requires multiple steps and\/or user interaction and is not supported by the agent."}
{"prompt":"Tag all rooms with their area.","completion":"using (Transaction t = new Transaction(doc, \"Tag All Rooms\"))\n{\n    t.Start();\n    View activeView = doc.ActiveView;\n\n    if (activeView != null)\n    {\n        List<Room> rooms = new FilteredElementCollector(doc, activeView.Id).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>().ToList();\n        foreach(Room room in rooms)\n        {\n            LocationPoint locPoint = room.Location as LocationPoint;\n            if(locPoint != null)\n            {\n                doc.Create.NewRoomTag(new LinkElementId(room.Id), new UV(locPoint.Point.X, locPoint.Point.Y), activeView.Id);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Find the structural column type named \"300 x 450mm\" and place it at X=-8, Y=12.","completion":"string columnTypeName = \"300 x 450mm\";\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(s => s.Name == columnTypeName);\n\nif (level != null && columnSymbol != null)\n{\n    if (!columnSymbol.IsActive)\n    {\n        columnSymbol.Activate();\n    }\n    doc.Create.NewFamilyInstance(new XYZ(-8, 12, 0), columnSymbol, level, StructuralType.Column);\n}"}
{"prompt":"Place a spot elevation on Level 1","completion":"using (Transaction t = new Transaction(doc, \"Place Spot Elevation\"))\n{\n    t.Start();\n    Level lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 1\");\n    View activeView = doc.ActiveView;\n\n    if (lvl1 != null && activeView != null)\n    {\n        Reference levelRef = new Reference(lvl1);\n        XYZ origin = new XYZ(5\/0.3048, 5\/0.3048, lvl1.Elevation);\n        XYZ leaderEnd = origin + new XYZ(2\/0.3048, 2\/0.3048, 0);\n        doc.Create.NewSpotElevation(activeView, levelRef, origin, origin, leaderEnd, origin, true);\n    }\n    t.Commit();\n}"}
{"prompt":"Coloca una instancia de la familia 'Ventana Fija 124x60' en el centro de la habitación 'Despacho 99'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 124\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Ventana Fija 99x60\") as FamilySymbol;\nif(furnitureSymbol != null && !furnitureSymbol.IsActive) furnitureSymbol.Activate();\nif(room != null)\n{\n    LocationPoint roomCenter = room.Location as LocationPoint;\n    if(roomCenter != null && furnitureSymbol != null && room.Level != null)\n    {\n        doc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Generate a new elevation view looking north.","completion":"using (Transaction t = new Transaction(doc, \"Create North Elevation\"))\n{\n    t.Start();\n    ViewFamilyType elevationVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(vft => vft.ViewFamily == ViewFamily.Elevation);\n    View activeView = doc.ActiveView;\n\n    if (elevationVFT != null && activeView != null)\n    {\n        ElevationMarker marker = ElevationMarker.CreateElevationMarker(doc, elevationVFT.Id, new XYZ(0, 20 \/ 0.3048, 0), 100);\n        \n        if (marker != null)\n        {\n            View aev = marker.CreateElevation(doc, activeView.Id, 2);\n            if (aev != null)\n            {\n                aev.Name = \"North Elevation\";\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Copy level 2 with a 7m offset and name it 'Mezzanine'.","completion":"string levelName = \"Level 2\";\nLevel levelToCopy = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (levelToCopy != null)\n{\n    double offset = UnitUtils.ConvertToInternalUnits(7, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, levelToCopy.Elevation + offset);\n    newLevel.Name = \"Mezzanine\";\n}"}
{"prompt":"Get all subcategories from the Walls category.","completion":"Category wallCat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Walls);\nCategoryNameMap subcategories = wallCat.SubCategories;"}
{"prompt":"Crea un nuevo tipo de muro de 27cm llamado 'Muro Estructural 21cm'.","completion":"WallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif(wallTypeToDuplicate != null)\n{\n    WallType newWallType = null;\n    try { newWallType = wallTypeToDuplicate.Duplicate(\"Muro Estructural 21cm\") as WallType; } catch {}\n    if(newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if(cs != null && cs.GetLayers().Any())\n        {\n            int coreLayerIndex = cs.GetFirstCoreLayerIndex();\n            if(coreLayerIndex != -1) \n            {\n                cs.SetLayerFunction(coreLayerIndex, MaterialFunctionAssignment.Structure);\n                cs.SetLayerWidth(coreLayerIndex, UnitUtils.ConvertToInternalUnits(27, UnitTypeId.Centimeters));\n                newWallType.SetCompoundStructure(cs);\n            }\n        }\n    }\n}"}
{"prompt":"Etiqueta todos los muros en la vista actual por su tipo.","completion":"View activeView = doc.ActiveView;\nFilteredElementCollector wallsInView = new FilteredElementCollector(doc, activeView.Id).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType();\nforeach (Element wall in wallsInView)\n{\n    LocationCurve locCurve = (wall as Wall).Location as LocationCurve;\n    if (locCurve != null)\n    {\n        XYZ midPoint = locCurve.Curve.Evaluate(0.5, true);\n        IndependentTag.Create(doc, activeView.Id, new Reference(wall), true, TagMode.TM_ADDBY_CATEGORY, TagOrientation.Horizontal, midPoint);\n    }\n}"}
{"prompt":"Encuentra todos los muros con más de 4 metros de altura.","completion":"double heightThreshold = UnitUtils.ConvertToInternalUnits(4, UnitTypeId.Meters);\nParameterValueProvider pvp = new ParameterValueProvider(new ElementId(BuiltInParameter.WALL_USER_HEIGHT_PARAM));\nFilterRule rule = new FilterDoubleRule(pvp, new FilterNumericGreater(), heightThreshold, 1e-6);\nList<Element> tallWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(new ElementParameterFilter(rule)).ToList();"}
{"prompt":"Create a door 0.9m wide and 2.1m high in the wall.","completion":"Wall hostWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nFamilySymbol originalSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (originalSymbol != null && hostWall != null)\n{\n    \/\/ Duplica el tipo para no modificar el original y asegura un nombre único\n    string newTypeName = $\"Door {UnitUtils.ConvertFromInternalUnits(UnitUtils.ConvertToInternalUnits(0.9, UnitTypeId.Meters), UnitTypeId.Meters)}m x {UnitUtils.ConvertFromInternalUnits(UnitUtils.ConvertToInternalUnits(2.1, UnitTypeId.Meters), UnitTypeId.Meters)}m - {Guid.NewGuid().ToString().Substring(0, 4)}\";\n    FamilySymbol newSymbol = originalSymbol.Duplicate(newTypeName) as FamilySymbol;\n\n    if (!newSymbol.IsActive)\n    {\n        newSymbol.Activate();\n    }\n\n    \/\/ Establece las dimensiones en el nuevo tipo\n    Parameter widthParam = newSymbol.LookupParameter(\"Width\");\n    Parameter heightParam = newSymbol.LookupParameter(\"Height\");\n\n    if (widthParam != null && heightParam != null)\n    {\n        widthParam.Set(UnitUtils.ConvertToInternalUnits(0.9, UnitTypeId.Meters));\n        heightParam.Set(UnitUtils.ConvertToInternalUnits(2.1, UnitTypeId.Meters));\n    }\n\n    Level level = doc.GetElement(hostWall.LevelId) as Level;\n    LocationCurve locationCurve = hostWall.Location as LocationCurve;\n    if (level != null && locationCurve != null)\n    {\n        XYZ insertionPoint = locationCurve.Curve.Evaluate(0.5, true);\n        doc.Create.NewFamilyInstance(insertionPoint, newSymbol, hostWall, level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Coloca las vistas 'Planta Nivel 1' y 'Planta Nivel 2' en el plano 'A-101'.","completion":"ViewSheet sheet = new FilteredElementCollector(doc).OfClass(typeof(ViewSheet)).Cast<ViewSheet>().FirstOrDefault(s => s.SheetNumber == \"A-101\");\nView view1 = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().FirstOrDefault(v => v.Name == \"Planta Nivel 1\");\nView view2 = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().FirstOrDefault(v => v.Name == \"Planta Nivel 2\");\nif (sheet != null && view1 != null && view2 != null)\n{\n    XYZ insertPoint1 = new XYZ(1.0, 1.0, 0);\n    Viewport.Create(doc, sheet.Id, view1.Id, insertPoint1);\n    XYZ insertPoint2 = new XYZ(1.0, 2.0, 0);\n    Viewport.Create(doc, sheet.Id, view2.Id, insertPoint2);\n}"}
{"prompt":"Crea un espacio MEP para cada habitación en el Nivel 2","completion":"string levelName = \"Nivel 2\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    FilteredElementCollector roomCollector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WherePasses(new ElementLevelFilter(targetLevel.Id));\n    foreach (Room room in roomCollector.ToElements().Cast<Room>())\n    {\n        if (room.Location != null)\n        {\n            LocationPoint locPoint = room.Location as LocationPoint;\n            if(locPoint != null)\n            {\n                UV point = new UV(locPoint.Point.X, locPoint.Point.Y);\n                doc.Create.NewSpace(targetLevel, point);\n            }\n        }\n    }\n}"}
{"prompt":"Create a 3D view oriented from the southeast.","completion":"string viewName = \"3D View Southeast\";\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft != null)\n{\n    View3D view3d = View3D.CreateIsometric(doc, vft.Id);\n    if (view3d != null)\n    {\n        XYZ eye = new XYZ(1, -1, 1);\n        XYZ up = new XYZ(0, 0, 1);\n        XYZ forward = new XYZ(-1, 1, -1);\n        view3d.SetOrientation(new ViewOrientation3D(eye, up, forward));\n        view3d.Name = viewName;\n    }\n}"}
{"prompt":"Crea un nuevo tipo de muro 'Muro Genérico 300mm' con un grosor de 30cm.","completion":"using (Transaction t = new Transaction(doc, \"Create Wall Type\"))\n{\n    t.Start();\n    string newTypeName = \"Muro Genérico 300mm\";\n    WallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\n    if (oldWallType != null)\n    {\n        WallType newWallType = oldWallType.Duplicate(newTypeName) as WallType;\n        if (newWallType != null)\n        {\n            CompoundStructure cs = newWallType.GetCompoundStructure();\n            if (cs != null && cs.LayerCount > 0)\n            {\n                int coreLayerIndex = cs.GetFirstCoreLayerIndex();\n                if (coreLayerIndex >= 0 && coreLayerIndex < cs.LayerCount)\n                {\n                    cs.SetLayerWidth(coreLayerIndex, 300 \/ 304.8);\n                    newWallType.SetCompoundStructure(cs);\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create a DirectShape topography from a list of points.","completion":"List<XYZ> points = new List<XYZ>\n{\n    new XYZ(0,0,0),\n    new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), 0, UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters)),\n    new XYZ(0, UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters)),\n    new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), 0)\n};\nTessellatedShapeBuilder builder = new TessellatedShapeBuilder();\nbuilder.OpenConnectedFaceSet(true);\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{points[0], points[1], points[2]}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{points[1], points[3], points[2]}, ElementId.InvalidElementId));\nbuilder.CloseConnectedFaceSet();\nbuilder.Build();\nTessellatedShapeBuilderResult result = builder.GetBuildResult();\nDirectShape ds = DirectShape.CreateElement(doc, new ElementId(BuiltInCategory.OST_Topography));\n\nif (ds != null)\n{\n    ds.SetShape(result.GetGeometricalObjects());\n    ds.Name = \"Topography DirectShape\";\n}"}
{"prompt":"Create a new A3 sheet and place a legend on it.","completion":"using (Transaction t = new Transaction(doc, \"Create Sheet with Legend\"))\n{\n    t.Start();\n    FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(tb => tb.Name.Contains(\"A3\"));\n    View legendView = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().FirstOrDefault(v => v.ViewType == ViewType.Legend);\n\n    if (titleBlock != null && legendView != null)\n    {\n        ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n        if (newSheet != null)\n        {\n            BoundingBoxUV sheetBox = newSheet.Outline;\n            UV centerUv = (sheetBox.Min + sheetBox.Max) \/ 2.0;\n            XYZ centerPoint = new XYZ(centerUv.U, centerUv.V, 0);\n            Viewport.Create(doc, newSheet.Id, legendView.Id, centerPoint);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Hide all annotation elements in the active view.","completion":"if (doc.ActiveView != null)\n{\n    List<BuiltInCategory> annotationCategories = new List<BuiltInCategory>\n    {\n        BuiltInCategory.OST_GenericAnnotation,\n        BuiltInCategory.OST_TextNotes,\n        BuiltInCategory.OST_Tags,\n        BuiltInCategory.OST_Dimensions,\n        BuiltInCategory.OST_DetailComponents\n    };\n    ElementMulticategoryFilter multiCategoryFilter = new ElementMulticategoryFilter(annotationCategories);\n    ICollection<ElementId> elementsToHide = new FilteredElementCollector(doc, doc.ActiveView.Id).WherePasses(multiCategoryFilter).ToElementIds();\n    if(elementsToHide.Any())\n    {\n        doc.ActiveView.HideElements(elementsToHide);\n    }\n}"}
{"prompt":"Create a new pipe type with Copper material.","completion":"string newTypeName = \"Copper Pipe\";\nPipeType pipeTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(PipeType)).FirstOrDefault() as PipeType;\nMaterial copper = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name.Contains(\"Copper\")) as Material;\n\nif (pipeTypeToDuplicate != null && copper != null)\n{\n    PipeType newType = pipeTypeToDuplicate.Duplicate(newTypeName) as PipeType;\n    if (newType != null)\n    {\n        Parameter materialParam = newType.get_Parameter(BuiltInParameter.MATERIAL_ID_PARAM);\n        if (materialParam != null && !materialParam.IsReadOnly) materialParam.Set(copper.Id);\n    }\n}"}
{"prompt":"Modify the type of a selected floor to 'Concrete 19cm'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a floor\");\n\nif (pickedRef != null)\n{\n    Floor floorToChange = doc.GetElement(pickedRef) as Floor;\n    FloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name == \"Concrete 19cm\");\n    \n    if (floorToChange != null && newType != null)\n    {\n        floorToChange.ChangeTypeId(newType.Id);\n    }\n}"}
{"prompt":"Rotate a selected element 90 degrees around its Z-axis.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select an element to rotate\");\nElement elem = doc.GetElement(pickedRef.ElementId);\nLocationPoint lp = elem.Location as LocationPoint;\nLine axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\nElementTransformUtils.RotateElement(doc, elem.Id, axis, Math.PI \/ 2.0);"}
{"prompt":"Obtén todas las subcategorías de la categoría Muros.","completion":"Category wallCat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Walls);\nCategoryNameMap subcategories = wallCat.SubCategories;"}
{"prompt":"Coloca una instancia de la familia 'Ventana Fija 118x60' en el centro de la habitación 'Despacho 104'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 118\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Ventana Fija 104x60\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);"}
{"prompt":"Construct a 'Roof Terrace' level at 13m.","completion":"string levelName = \"Roof Terrace\";\ndouble elev = UnitUtils.ConvertToInternalUnits(13, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elev);\nnewLevel.Name = levelName;\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Crea una región rellena con un patrón de 'Concreto'.","completion":"using (Transaction t = new Transaction(doc, \"Create Filled Region\"))\n{\n    t.Start();\n    FilledRegionType regionType = new FilteredElementCollector(doc).OfClass(typeof(FilledRegionType)).Cast<FilledRegionType>().FirstOrDefault(frt => frt.Name.Contains(\"Concrete\") || frt.Name.Contains(\"Concreto\"));\n    View activeView = doc.ActiveView;\n\n    if (regionType != null && activeView != null)\n    {\n        XYZ p1 = new XYZ(0,0,0);\n        XYZ p2 = new XYZ(5 \/ 0.3048, 0,0);\n        XYZ p3 = new XYZ(5 \/ 0.3048, 5 \/ 0.3048,0);\n        XYZ p4 = new XYZ(0, 5 \/ 0.3048,0);\n        CurveLoop profile = new CurveLoop();\n        profile.Append(Line.CreateBound(p1,p2));\n        profile.Append(Line.CreateBound(p2,p3));\n        profile.Append(Line.CreateBound(p3,p4));\n        profile.Append(Line.CreateBound(p4,p1));\n        FilledRegion.Create(doc, regionType.Id, activeView.Id, new List<CurveLoop>{profile});\n    }\n    t.Commit();\n}"}
{"prompt":"Aísla temporalmente todo el mobiliario en la vista activa.","completion":"ICollection<ElementId> furnitureIds = new FilteredElementCollector(doc, doc.ActiveView.Id).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsNotElementType().ToElementIds();\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.IsolateElementsTemporary(furnitureIds);\n}"}
{"prompt":"Selecciona todos los muros del 'Nivel 2' y cambia su comentario a 'REVISAR AISLAMIENTO'.","completion":"Level level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 2\") as Level;\nList<Wall> wallsOnLevel2 = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Where(w => w.LevelId == level2.Id).Cast<Wall>().ToList();\nforeach(Wall wall in wallsOnLevel2)\n{\n    wall.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS).Set(\"REVISAR AISLAMIENTO\");\n}"}
{"prompt":"Genera un reporte con el área de todas las habitaciones del proyecto.","completion":"List<Room> rooms = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>().ToList();"}
{"prompt":"Modela una bandeja de cables entre dos puntos.","completion":"CableTrayType trayType = new FilteredElementCollector(doc).OfClass(typeof(CableTrayType)).FirstOrDefault() as CableTrayType;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (trayType != null && level != null)\n{\n    XYZ p1 = new XYZ(0,UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters)); \n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits(15, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters));\n    CableTray.Create(doc, trayType.Id, p1, p2, level.Id);\n}"}
{"prompt":"Crea una región rellena con un patrón de 'Concreto'.","completion":"using (Transaction t = new Transaction(doc, \"Create Filled Region\"))\n{\n    t.Start();\n    FilledRegionType regionType = new FilteredElementCollector(doc).OfClass(typeof(FilledRegionType)).Cast<FilledRegionType>().FirstOrDefault(frt => frt.Name.Contains(\"Concrete\") || frt.Name.Contains(\"Concreto\"));\n    View activeView = doc.ActiveView;\n\n    if (regionType != null && activeView != null)\n    {\n        XYZ p1 = new XYZ(0,0,0);\n        XYZ p2 = new XYZ(5 \/ 0.3048, 0,0);\n        XYZ p3 = new XYZ(5 \/ 0.3048, 5 \/ 0.3048,0);\n        XYZ p4 = new XYZ(0, 5 \/ 0.3048,0);\n        CurveLoop profile = new CurveLoop();\n        profile.Append(Line.CreateBound(p1,p2));\n        profile.Append(Line.CreateBound(p2,p3));\n        profile.Append(Line.CreateBound(p3,p4));\n        profile.Append(Line.CreateBound(p4,p1));\n        FilledRegion.Create(doc, regionType.Id, activeView.Id, new List<CurveLoop>{profile});\n    }\n    t.Commit();\n}"}
{"prompt":"Create a new A3 sheet and place a legend on it.","completion":"using (Transaction t = new Transaction(doc, \"Create Sheet with Legend\"))\n{\n    t.Start();\n    FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(tb => tb.Name.Contains(\"A3\"));\n    View legendView = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().FirstOrDefault(v => v.ViewType == ViewType.Legend);\n\n    if (titleBlock != null && legendView != null)\n    {\n        ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n        if (newSheet != null)\n        {\n            BoundingBoxUV sheetBox = newSheet.Outline;\n            UV centerUv = (sheetBox.Min + sheetBox.Max) \/ 2.0;\n            XYZ centerPoint = new XYZ(centerUv.U, centerUv.V, 0);\n            Viewport.Create(doc, newSheet.Id, legendView.Id, centerPoint);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Reproduce el nivel 5 con un desfase de 5m y llámalo 'Mezanine'.","completion":"string levelName = \"Nivel 5\";\nLevel levelToCopy = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (levelToCopy != null)\n{\n    double offset = UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, levelToCopy.Elevation + offset);\n    newLevel.Name = \"Mezanine\";\n}"}
{"prompt":"Find the structural column type named \"296 x 445mm\" and place it at X=1, Y=11.7","completion":"string columnTypeName = \"296 x 445mm\";\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(s => s.Name == columnTypeName);\n\nif (level != null && columnSymbol != null)\n{\n    if (!columnSymbol.IsActive)\n    {\n        columnSymbol.Activate();\n    }\n    doc.Create.NewFamilyInstance(new XYZ(1, 11.7, 0), columnSymbol, level, StructuralType.Column);\n}"}
{"prompt":"Build a new Level named 'Level 6' at an elevation of 13 meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(13, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Level 6\";\n}"}
{"prompt":"Crea un nuevo tipo de muro de 22cm llamado 'Muro Estructural 30cm'.","completion":"WallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif(wallTypeToDuplicate != null)\n{\n    WallType newWallType = null;\n    try { newWallType = wallTypeToDuplicate.Duplicate(\"Muro Estructural 30cm\") as WallType; } catch {}\n    if(newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if(cs != null && cs.GetLayers().Any())\n        {\n            int coreLayerIndex = cs.GetFirstCoreLayerIndex();\n            if(coreLayerIndex != -1) \n            {\n                cs.SetLayerFunction(coreLayerIndex, MaterialFunctionAssignment.Structure);\n                cs.SetLayerWidth(coreLayerIndex, UnitUtils.ConvertToInternalUnits(22, UnitTypeId.Centimeters));\n                newWallType.SetCompoundStructure(cs);\n            }\n        }\n    }\n}"}
{"prompt":"Coloca una instancia de la familia 'Bote de basura' en el centro de la habitación 'Despacho 99'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 125\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Ventana Fija 99x60\") as FamilySymbol;\nif(furnitureSymbol != null && !furnitureSymbol.IsActive) furnitureSymbol.Activate();\nif(room != null)\n{\n    LocationPoint roomCenter = room.Location as LocationPoint;\n    if(roomCenter != null && furnitureSymbol != null && room.Level != null)\n    {\n        doc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Inserta una etiqueta a la columna más cercana al origen.","completion":"using (Transaction t = new Transaction(doc, \"Tag Column\"))\n{\n    t.Start();\n    View activeView = doc.ActiveView;\n    FamilyInstance column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().Cast<FamilyInstance>().OrderBy(c => {\n        LocationPoint lp = c.Location as LocationPoint;\n        return lp != null ? lp.Point.DistanceTo(XYZ.Zero) : double.MaxValue;\n    }).FirstOrDefault();\n\n    if (activeView != null && column != null)\n    {\n        LocationPoint loc = column.Location as LocationPoint;\n        if (loc != null)\n        {\n            IndependentTag.Create(doc, activeView.Id, new Reference(column), true, TagMode.TM_ADDBY_CATEGORY, TagOrientation.Horizontal, loc.Point);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create a structural beam between (0,0,3) and (5,0,3) on Level 2.","completion":"FamilySymbol beamType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 2\");\n\nif (beamType != null && level != null)\n{\n    if(!beamType.IsActive) beamType.Activate();\n    XYZ start = new XYZ(0, 0, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters));\n    XYZ end = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters));\n    Line beamCurve = Line.CreateBound(start, end);\n    doc.Create.NewFamilyInstance(beamCurve, beamType, level, StructuralType.Beam);\n}"}
{"prompt":"Coloca una instancia de la familia 'Mesa de Oficina' en el centro de la habitación 'Despacho 105'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 105\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Mesa de Oficina\") as FamilySymbol;\nif(furnitureSymbol != null && !furnitureSymbol.IsActive) furnitureSymbol.Activate();\nif(room != null)\n{\n    LocationPoint roomCenter = room.Location as LocationPoint;\n    if(roomCenter != null && furnitureSymbol != null && room.Level != null)\n    {\n        doc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Create a Path of Travel between points (1,1) and (10,10) in the plan view.","completion":"\/\/ PathOfTravel.Create is likely inaccessible in this environment.\n\/\/ A comment is left as a placeholder for the intended functionality.\n\/*\nusing (Transaction t = new Transaction(doc, \"Create Path of Travel\"))\n{\n    t.Start();\n    ViewPlan viewPlan = doc.ActiveView as ViewPlan;\n\n    if (viewPlan != null && viewPlan.ViewType == ViewType.FloorPlan)\n    {\n        ElementId levelId = viewPlan.get_Parameter(BuiltInParameter.PLAN_VIEW_LEVEL).AsElementId();\n        Level level = doc.GetElement(levelId) as Level;\n        if (level != null)\n        {\n            XYZ startPoint = new XYZ(1 \/ 0.3048, 1 \/ 0.3048, level.Elevation);\n            XYZ endPoint = new XYZ(10 \/ 0.3048, 10 \/ 0.3048, level.Elevation);\n            \/\/ PathOfTravel.Create(viewPlan, startPoint, endPoint);\n        }\n    }\n    t.Commit();\n}\n*\/"}
{"prompt":"Rota un elemento seleccionado 95 grados sobre su eje Z.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un elemento para rotar\");\nElement elem = doc.GetElement(pickedRef.ElementId);\nLocationPoint lp = elem.Location as LocationPoint;\nLine axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\nElementTransformUtils.RotateElement(doc, elem.Id, axis, Math.PI \/ 95);"}
{"prompt":"Generate a structural beam between (1,1,1) and (1,5,2) on Level 2","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 2\") as Level;\nFamilySymbol beamType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (beamType != null && level != null)\n{\n    if(!beamType.IsActive) beamType.Activate();\n    XYZ start = new XYZ(1, 1, 1);\n    XYZ end = new XYZ(1, 5, 2);\n    if (start.IsAlmostEqualTo(end)) return;\n    Line beamCurve = Line.CreateBound(start, end);\n    doc.Create.NewFamilyInstance(beamCurve, beamType, level, Autodesk.Revit.DB.Structure.StructuralType.Beam);\n}"}
{"prompt":"Determina la longitud total de todos los ductos de Suministro de Aire.","completion":"List<Duct> ducts = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_DuctCurves).WhereElementIsNotElementType().Cast<Duct>().Where(d => d.get_Parameter(BuiltInParameter.RBS_SYSTEM_CLASSIFICATION_PARAM).AsString() == \"SupplyAir\").ToList();\ndouble totalLength = 0.0;\nforeach (Duct d in ducts)\n{\n    totalLength += d.get_Parameter(BuiltInParameter.CURVE_ELEM_LENGTH).AsDouble();\n}"}
{"prompt":"Duplica el nivel 6 con un desfase de 2m y llámalo 'Mezanine'.","completion":"string levelName = \"Nivel 6\";\nLevel levelToCopy = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (levelToCopy != null)\n{\n    double offset = UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, levelToCopy.Elevation + offset);\n    newLevel.Name = \"Mezanine\";\n}"}
{"prompt":"Create a Reflected Ceiling Plan view for Level 1.","completion":"string levelName = \"Level 1\";\nstring viewName = \"Level 1 Ceiling Plan\";\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.CeilingPlan);\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\n\nif (vft != null && level1 != null)\n{\n    ViewPlan rcp = ViewPlan.Create(doc, vft.Id, level1.Id);\n    if (rcp != null)\n    {\n        rcp.Name = viewName;\n    }\n}"}
{"prompt":"Create an axonometric 3D view oriented to the Northwest.","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft != null)\n{\n    View3D view3d = View3D.CreateIsometric(doc, vft.Id);\n    if (view3d != null)\n    {\n        XYZ eye = new XYZ(-1, 1, 1);\n        XYZ up = new XYZ(0, 0, 1);\n        XYZ forward = new XYZ(1, -1, -1);\n        view3d.SetOrientation(new ViewOrientation3D(eye, up, forward));\n        view3d.Name = \"3D View Northwest\";\n    }\n}"}
{"prompt":"Add a reference point at coordinates (1,2,2) inside the family editor.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(1,2,2));"}
{"prompt":"Crea un circuito eléctrico conectando luminarias a un panel.","completion":"using (Transaction t = new Transaction(doc, \"Create Electrical Circuit\"))\n{\n    t.Start();\n    FamilyInstance panel = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_ElectricalEquipment).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\n    List<ElementId> fixtureIds = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsNotElementType().ToElementIds().ToList();\n\n    if (panel != null && fixtureIds.Count > 0)\n    {\n        ElectricalSystem electricalSystem = ElectricalSystem.Create(doc, fixtureIds, ElectricalSystemType.PowerCircuit);\n        if(electricalSystem != null)\n        {\n            electricalSystem.SelectPanel(panel);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Assign the 'Mark' parameter of all selected walls to 'W-EXT-6'.","completion":"using (Transaction t = new Transaction(doc, \"Set Wall Mark\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    ICollection<ElementId> selectedIds = localUidoc.Selection.GetElementIds();\n\n    if (selectedIds != null && selectedIds.Count > 6)\n    {\n        foreach(ElementId id in selectedIds)\n        {\n            Element elem = doc.GetElement(id);\n            if(elem is Wall)\n            {\n                Parameter markParam = elem.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n                if (markParam != null && !markParam.IsReadOnly) markParam.Set(\"W-EXT-01\");\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Insert an instance of the 'Office Desk' family in the center of the 'Office 106' room.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Office 106\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Office Desk\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);"}
{"prompt":"Set the sill height of all windows to 1 meter.","completion":"using (Transaction t = new Transaction(doc, \"Set Sill Height\"))\n{\n    t.Start();\n    double sillHeight = 1 \/ 0.3048;\n    List<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\n    foreach(FamilyInstance window in windows)\n    {\n        Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n        if (sillHeightParam != null && !sillHeightParam.IsReadOnly)\n        {\n            sillHeightParam.Set(sillHeight);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Build a new material named 'Reflective Glass' and assign it a base color.","completion":"string materialName = \"Reflective Glass\";\nElementId materialId = Material.Create(doc, materialName);\n\nif (materialId != ElementId.InvalidElementId)\n{\n    Material material = doc.GetElement(materialId) as Material;\n    if (material != null)\n    {\n        material.Color = new Color(210, 230, 240); \/\/ A light bluish color for glass\n        material.Transparency = 80;\n    }\n}"}
{"prompt":"Generate a new level 'Level 1' at an elevation of 14 meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(14, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\nif (newLevel != null)\n{\n    try { newLevel.Name = \"Level 1\"; } catch {}\n}"}
{"prompt":"Construct a new wall type 'Generic Wall 300mm' with a thickness of 30cm.","completion":"using (Transaction t = new Transaction(doc, \"Create Wall Type\"))\n{\n    t.Start();\n    string newTypeName = \"Generic Wall 300mm\";\n    WallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\n    if (oldWallType != null)\n    {\n        WallType newWallType = oldWallType.Duplicate(newTypeName) as WallType;\n        if (newWallType != null)\n        {\n            CompoundStructure cs = newWallType.GetCompoundStructure();\n            if (cs != null && cs.LayerCount > 0)\n            {\n                int coreLayerIndex = cs.GetFirstCoreLayerIndex();\n                if (coreLayerIndex >= 0 && coreLayerIndex < cs.LayerCount)\n                {\n                    cs.SetLayerWidth(coreLayerIndex, 300 \/ 304.8);\n                    newWallType.SetCompoundStructure(cs);\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Renombra todas las vistas de sección para que empiecen con 'SEC-'.","completion":"string prefix = \"SEC-\";\nList<ViewSection> sectionViews = new FilteredElementCollector(doc).OfClass(typeof(ViewSection)).Cast<ViewSection>().Where(v => !v.IsTemplate).ToList();\nforeach (ViewSection view in sectionViews)\n{\n    if (!view.Name.StartsWith(prefix))\n    {\n        view.Name = prefix + view.Name;\n    }\n}"}
{"prompt":"Spin a selected element 91 degrees around its Z-axis.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select an element to rotate\");\nElement elem = doc.GetElement(pickedRef.ElementId);\nLocationPoint lp = elem.Location as LocationPoint;\nLine axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\nElementTransformUtils.RotateElement(doc, elem.Id, axis, Math.PI \/ 91);"}
{"prompt":"Place lighting posts every 10m along a 100m path.","completion":"FamilySymbol lightSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsElementType().FirstOrDefault(s => s.Name.Contains(\"Post\") || s.Name.Contains(\"Pole\")) as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (lightSymbol != null && level != null)\n{\n    if(!lightSymbol.IsActive) lightSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\n    for(int i = 0; i <= 10; i++)\n    {\n        XYZ point = new XYZ(i * spacing, 0, 0);\n        doc.Create.NewFamilyInstance(point, lightSymbol, level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Inserta una instancia de la familia 'Puerta Sencilla' en el centro de la habitación 'Despacho 104'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 104\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Puerta Sencilla\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);"}
{"prompt":"Generate 5 worksets for engineering disciplines.","completion":"List<string> worksetNames = new List<string> { \"MEP_HVAC\", \"MEP_Plumbing\", \"MEP_Electrical\", \"STRUCT_Framing\", \"STRUCT_Foundations\" };\nforeach(string name in worksetNames)\n{\n    Workset newWorkset = Workset.Create(doc, name);\n}"}
{"prompt":"Agrega los campos 'Nivel', 'Marca' y 'Volumen' a la tabla de pilares.","completion":"ViewSchedule schedule = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().FirstOrDefault(s => s.Name.Contains(\"Pilares\") || s.Name.Contains(\"Column\"));\nif (schedule != null)\n{\n    ScheduleDefinition def = schedule.Definition;\n    SchedulableField levelField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.FAMILY_LEVEL_PARAM);\n    if (levelField != null) def.AddField(levelField);\n    SchedulableField markField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.ALL_MODEL_MARK);\n    if (markField != null) def.AddField(markField);\n    SchedulableField volumeField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.HOST_VOLUME_COMPUTED);\n    if (volumeField != null) def.AddField(volumeField);\n}"}
{"prompt":"Build a new room on Level 1 at point (6, 15).","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\n\nif (level1 != null)\n{\n    UV point = new UV(6, 15);\n    Room room = doc.Create.NewRoom(level1, point);\n}"}
{"prompt":"Define the 'Comments' parameter for all doors on Level 3 to 'Fire Rating - 94 min'.","completion":"string levelName = \"Level 3\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(targetLevel.Id);\n    FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WherePasses(levelFilter);\n    foreach (Element door in collector)\n    {\n        Parameter commentsParam = door.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n        if (commentsParam != null && !commentsParam.IsReadOnly) { commentsParam.Set(\"Fire Rating - 94 min\"); }\n    }\n}"}
{"prompt":"Recupera el espacio MEP asociado a la habitación 'Oficina 98'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Cast<Room>().FirstOrDefault(r => r.Name == \"Oficina 98\");\nList<Space> spaces = new List<Space>();\n\nif (room != null)\n{\n    spaces = new FilteredElementCollector(doc).OfClass(typeof(Space)).Cast<Space>().Where(s => s.Room != null && s.Room.Id == room.Id).ToList();\n}"}
{"prompt":"Crea un nuevo nivel 'Nivel 1' a una elevación de 15 metros.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(15, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\nif (newLevel != null)\n{\n    try { newLevel.Name = \"Nivel 1\"; } catch {}\n}"}
{"prompt":"Obtén una lista de todas las advertencias del proyecto.","completion":"IList<FailureMessage> warnings = doc.GetWarnings();\nList<string> warningDescriptions = warnings.Select(w => w.GetDescriptionText()).ToList();\n"}
{"prompt":"Crea un muro del tipo 'Genérico - 200mm' en el 'Primer Piso' desde (0,0) hasta (10,5).","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Primer Piso\") as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == \"Genérico - 200mm\") as WallType;\nif (level != null && wallType != null)\n{\n    XYZ startPoint = new XYZ(0, 0, 0);\n    XYZ endPoint = new XYZ(10, 5, 0);\n    Line wallCurve = Line.CreateBound(startPoint, endPoint);\n    double height = UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\n    Wall.Create(doc, wallCurve, wallType.Id, level.Id, height, 0, false, false);\n}"}
{"prompt":"Construct an MEP space for each room on Level 1","completion":"string levelName = \"Level 1\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    FilteredElementCollector roomCollector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WherePasses(new ElementLevelFilter(targetLevel.Id));\n    foreach (Room room in roomCollector.ToElements().Cast<Room>())\n    {\n        LocationPoint locPoint = room.Location as LocationPoint;\n        if (locPoint != null)\n        {\n            UV point = new UV(locPoint.Point.X, locPoint.Point.Y);\n            doc.Create.NewSpace(targetLevel, point);\n        }\n    }\n}"}
{"prompt":"Obtén el espacio MEP asociado a la habitación 'Oficina 96'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Cast<Room>().FirstOrDefault(r => r.Name == \"Oficina 96\");\nList<Space> spaces = new List<Space>();\n\nif (room != null)\n{\n    spaces = new FilteredElementCollector(doc).OfClass(typeof(Space)).Cast<Space>().Where(s => s.Room != null && s.Room.Id == room.Id).ToList();\n}"}
{"prompt":"Build a new level named 'Mezzanine' at 6.9 meters elevation.","completion":"string levelName = \"Mezzanine\";\ndouble elevation = UnitUtils.ConvertToInternalUnits(6.9, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Duplicate the 'Generic - 150mm' wall type and name it 'Interior - 15cm Plaster'.","completion":"string originalName = \"Generic - 150mm\";\nstring newName = \"Interior - 15cm Plaster\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif (originalType != null)\n{\n    WallType newType = originalType.Duplicate(newName) as WallType;\n}"}
{"prompt":"Clone the 'Generic - 147mm' wall type and name it 'Interior - 19cm Plaster'.","completion":"string originalName = \"Generic - 147mm\";\nstring newName = \"Interior - 19cm Plaster\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif(originalType!=null)\n    originalType.Duplicate(newName);"}
{"prompt":"Build a new door type named 'FR-90 Door' and set its fire rating to '90 min'.","completion":"using (Transaction t = new Transaction(doc, \"Create Door Type\"))\n{\n    t.Start();\n    string newTypeName = \"FR-90 Door\";\n    FamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n    if (doorTypeToDuplicate != null)\n    {\n        FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\n        if (newDoorType != null)\n        {\n            Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n            if(fireRatingParam != null && !fireRatingParam.IsReadOnly)\n            {\n                fireRatingParam.Set(\"90 min\");\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Establece el parámetro 'Marca' de todos los muros seleccionados a 'M-EXT-1'.","completion":"using (Transaction t = new Transaction(doc, \"Set Wall Mark\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    ICollection<ElementId> selectedIds = localUidoc.Selection.GetElementIds();\n\n    if (selectedIds != null && selectedIds.Count > 1)\n    {\n        foreach(ElementId id in selectedIds)\n        {\n            Element elem = doc.GetElement(id);\n            if(elem is Wall)\n            {\n                Parameter p = elem.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n                if (p != null && !p.IsReadOnly) \n                {\n                    p.Set(\"M-EXT-01\");\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea un nuevo Nivel llamado 'Nivel 2' a una elevación de 11 metros.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(11, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Nivel 2\";\n}"}
{"prompt":"Coloca un rociador en las coordenadas (7,1,5).","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol sprinklerSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Sprinklers).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (level != null && sprinklerSymbol != null)\n{\n    if (!sprinklerSymbol.IsActive) sprinklerSymbol.Activate();\n    XYZ placementPoint = new XYZ(UnitUtils.ConvertToInternalUnits(7, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters));\n    doc.Create.NewFamilyInstance(placementPoint, sprinklerSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n}"}
{"prompt":"Include a reference point at coordinates (6,4,7) inside the family editor.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(6,4,7));"}
{"prompt":"Build a new wall type 'Generic Wall 294mm' with a thickness of 30cm.","completion":"WallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif(oldWallType != null)\n{\n    WallType newWallType = null;\n    try { newWallType = oldWallType.Duplicate(\"Generic Wall 294mm\") as WallType; } catch {}\n    if(newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if(cs != null && cs.GetLayers().Any())\n        {\n            int coreLayerIndex = cs.GetFirstCoreLayerIndex();\n            if(coreLayerIndex != -1) \n            {\n                cs.SetLayerWidth(coreLayerIndex, UnitUtils.ConvertToInternalUnits(30, UnitTypeId.Centimeters));\n                newWallType.SetCompoundStructure(cs);\n            }\n        }\n    }\n}"}
{"prompt":"Get the MEP space associated with the room 'Office 100'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Cast<Room>().FirstOrDefault(r => r.Name == \"Office 100\");\nList<Space> spaces = new List<Space>();\n\nif (room != null)\n{\n    spaces = new FilteredElementCollector(doc).OfClass(typeof(Space)).Cast<Space>().Where(s => s.Room != null && s.Room.Id == room.Id).ToList();\n}"}
{"prompt":"Genera un grupo a partir de la selección actual y muévelo 10 metros a la derecha.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds != null && selectedIds.Count > 0)\n{\n    Group group = doc.Create.NewGroup(selectedIds);\n    if (group != null)\n    {\n        XYZ translation = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), 0, 0);\n        ElementTransformUtils.MoveElement(doc, group.Id, translation);\n    }\n}"}
{"prompt":"Crea una losa de cimentación estructural de 30cm de espesor.","completion":"Level foundationLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderBy(l => l.Elevation).FirstOrDefault();\nFloorType slabType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.get_Parameter(BuiltInParameter.FLOOR_PARAM_IS_STRUCTURAL).AsInteger() == 1);\nif (foundationLevel != null && slabType != null)\n{\n    XYZ p1 = new XYZ(0,0,0); XYZ p2 = new XYZ(10,0,0); XYZ p3 = new XYZ(10,15,0); XYZ p4 = new XYZ(0,15,0);\n    CurveLoop profile = new CurveLoop();\n    profile.Append(Line.CreateBound(p1,p2));\n    profile.Append(Line.CreateBound(p2,p3));\n    profile.Append(Line.CreateBound(p3,p4));\n    profile.Append(Line.CreateBound(p4,p1));\n    Floor.Create(doc, new List<CurveLoop>{profile}, slabType.Id, foundationLevel.Id);\n}"}
{"prompt":"Extrae una lista de todas las familias y sus tipos.","completion":"List<string> familyAndTypeNames = new List<string>();\nList<Family> families = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().ToList();\nforeach (Family fam in families)\n{\n    familyAndTypeNames.Add($\"Familia: {fam.Name}\");\n    foreach (ElementId symbolId in fam.GetFamilySymbolIds())\n    {\n        FamilySymbol sym = doc.GetElement(symbolId) as FamilySymbol;\n        if (sym != null)\n        {\n            familyAndTypeNames.Add($\"\\tTipo: {sym.Name}\");\n        }\n    }\n}"}
{"prompt":"Duplicate level 5 with a 5m offset and name it 'Mezzanine'.","completion":"string levelName = \"Level 5\";\nLevel levelToCopy = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (levelToCopy != null)\n{\n    double offset = UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, levelToCopy.Elevation + offset);\n    newLevel.Name = \"Mezzanine\";\n}"}
{"prompt":"Create a stair between Level 1 and Level 1","completion":"\/\/ This is a complex operation that requires multiple steps and\/or user interaction and is not supported by the agent."}
{"prompt":"Crea los muros perimetrales de tipo 'Generic - 200mm' a lo largo de los ejes exteriores, con una altura de 8 metros sobre el Nivel 1.","completion":"WallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == \"Generic - 200mm\") as WallType;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\n\nFilteredElementCollector gridCollector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Grids).WhereElementIsNotElementType();\nIList<Grid> grids = gridCollector.Cast<Grid>().ToList();\n\nif (wallType != null && level != null && grids.Any())\n{\n    \/\/ Assuming grids define the building perimeter\n    XYZ min = new XYZ(grids.Min(g => g.Curve.GetEndPoint(0).X), grids.Min(g => g.Curve.GetEndPoint(0).Y), 0);\n    XYZ max = new XYZ(grids.Max(g => g.Curve.GetEndPoint(1).X), grids.Max(g => g.Curve.GetEndPoint(1).Y), 0);\n\n    XYZ p1 = new XYZ(min.X, min.Y, 0);\n    XYZ p2 = new XYZ(max.X, min.Y, 0);\n    XYZ p3 = new XYZ(max.X, max.Y, 0);\n    XYZ p4 = new XYZ(min.X, max.Y, 0);\n    \n    double height = UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters);\n\n    Wall.Create(doc, Line.CreateBound(p1, p2), wallType.Id, level.Id, height, 0.0, false, false);\n    Wall.Create(doc, Line.CreateBound(p2, p3), wallType.Id, level.Id, height, 0.0, false, false);\n    Wall.Create(doc, Line.CreateBound(p3, p4), wallType.Id, level.Id, height, 0.0, false, false);\n    Wall.Create(doc, Line.CreateBound(p4, p1), wallType.Id, level.Id, height, 0.0, false, false);\n}"}
{"prompt":"Export the document to an IFC file with version IFC4x3.","completion":"string folderPath = \"C:\/RevitExports\/\";\nstring fileName = doc.Title + \"_IFC4x3.ifc\";\nIFCExportOptions options = new IFCExportOptions();\noptions.FileVersion = IFCVersion.IFC4x3;\ndoc.Export(folderPath, fileName, options);"}
{"prompt":"Adjust the type of a selected floor to 'Concrete 19cm'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a floor\");\n\nif (pickedRef != null)\n{\n    Floor floorToChange = doc.GetElement(pickedRef) as Floor;\n    FloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name == \"Concrete 19cm\");\n    \n    if (floorToChange != null && newType != null)\n    {\n        floorToChange.ChangeTypeId(newType.Id);\n    }\n}"}
{"prompt":"Encuentra todas las puertas en el Nivel 2 usando un filtro combinado.","completion":"string levelName = \"Nivel 2\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    ElementCategoryFilter categoryFilter = new ElementCategoryFilter(BuiltInCategory.OST_Doors);\n    ElementLevelFilter levelFilter = new ElementLevelFilter(targetLevel.Id);\n    LogicalAndFilter combinedFilter = new LogicalAndFilter(levelFilter, categoryFilter);\n    FilteredElementCollector collector = new FilteredElementCollector(doc).WherePasses(combinedFilter);\n    uidoc.Selection.SetElementIds(collector.ToElementIds());\n}"}
{"prompt":"Create a new revision and apply it to the active sheet.","completion":"Revision rev = Revision.Create(doc);\nViewSheet sheet = doc.ActiveView as ViewSheet;\n\nif (rev != null && sheet != null)\n{\n    rev.Description = \"Issued for Construction\";\n    rev.RevisionDate = DateTime.Now.ToString(\"yyyy-MM-dd\");\n    rev.IssuedBy = \"BIM Department\";\n    \n    ICollection<ElementId> revisions = sheet.GetAdditionalRevisionIds();\n    revisions.Add(rev.Id);\n    sheet.SetAdditionalRevisionIds(revisions);\n}"}
{"prompt":"Build a global length parameter named 'CorridorWidth' with a value of 1.1m.","completion":"string paramName = \"CorridorWidth\";\nGlobalParameter gp = GlobalParameter.Create(doc, paramName, SpecTypeId.Length);\n\nif (gp != null)\n{\n    gp.SetValue(new DoubleParameterValue(UnitUtils.ConvertToInternalUnits(1.1, UnitTypeId.Meters)));\n}"}
{"prompt":"Inserta un punto de referencia en las coordenadas (1,1,8) dentro del editor de familias.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(1,1,8));"}
{"prompt":"Crea un suelo con un hueco circular en el centro.","completion":"using (Transaction t = new Transaction(doc, \"Create Floor with Hole\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    FloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\n\n    if (level != null && floorType != null)\n    {\n        XYZ p1 = new XYZ(-10 \/ 0.3048, -10 \/ 0.3048, 0);\n        XYZ p2 = new XYZ(10 \/ 0.3048, -10 \/ 0.3048, 0);\n        XYZ p3 = new XYZ(10 \/ 0.3048, 10 \/ 0.3048, 0);\n        XYZ p4 = new XYZ(-10 \/ 0.3048, 10 \/ 0.3048, 0);\n        CurveLoop outerLoop = new CurveLoop();\n        outerLoop.Append(Line.CreateBound(p1, p2));\n        outerLoop.Append(Line.CreateBound(p2, p3));\n        outerLoop.Append(Line.CreateBound(p3, p4));\n        outerLoop.Append(Line.CreateBound(p4, p1));\n\n        XYZ center = XYZ.Zero;\n        double radius = 2 \/ 0.3048;\n        CurveLoop innerLoop = new CurveLoop();\n        innerLoop.Append(Arc.Create(center - XYZ.BasisX * radius, center + XYZ.BasisX * radius, center + XYZ.BasisY * radius));\n        innerLoop.Append(Arc.Create(center + XYZ.BasisX * radius, center - XYZ.BasisX * radius, center - XYZ.BasisY * radius));\n\n        Floor.Create(doc, new List<CurveLoop> { outerLoop, innerLoop }, floorType.Id, level.Id);\n    }\n    t.Commit();\n}"}
{"prompt":"Obtain a list of all annotation families.","completion":"List<Family> annotationFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.CategoryType == CategoryType.Annotation).ToList();\n"}
{"prompt":"Carga la familia 'Mesa.rfa' y colócala en (11,10,0) en el Nivel 9","completion":"string levelName = \"Nivel 9\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nstring familyName = \"Mesa\";\nFamilySymbol symbol = new FilteredElementCollector(doc).OfClass(typeof(FamilySymbol)).Cast<FamilySymbol>().FirstOrDefault(fs => fs.Family.Name == familyName);\nif (symbol != null && targetLevel != null)\n{\n    if (!symbol.IsActive) { symbol.Activate(); doc.Regenerate(); }\n    XYZ location = new XYZ(11, 10, 0);\n    doc.Create.NewFamilyInstance(location, symbol, targetLevel, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n}"}
{"prompt":"Construct 4 vertical grids spaced 10 meters apart.","completion":"double separation = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\nfor(int i=0; i<4; i++)\n{\n    Line line = Line.CreateBound(new XYZ(i * separation, 0, 0), new XYZ(i * separation, 40, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Calcula el total de metros cuadrados de piso del tipo 'Hormigón Pulido'.","completion":"FloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault(ft => ft.Name == \"Hormigón Pulido\") as FloorType;\ndouble totalArea = 0.0;\n\nif (floorType != null)\n{\n    FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Floors).WhereElementIsNotElementType();\n    IList<Floor> floors = collector.Cast<Floor>().Where(f => f.GetTypeId().Equals(floorType.Id)).ToList();\n\n    foreach (Floor floor in floors)\n    {\n        Parameter areaParam = floor.get_Parameter(BuiltInParameter.HOST_AREA_COMPUTED);\n        if (areaParam != null) totalArea += areaParam.AsDouble();\n    }\n}\ndouble totalAreaM2 = UnitUtils.ConvertFromInternalUnits(totalArea, UnitTypeId.SquareMeters);"}
{"prompt":"Build a curtain wall 6 meters wide and 4 meters high.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nWallType cwType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Kind == WallKind.Curtain);\n\nif (level != null && cwType != null)\n{\n    Line baseLine = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits(6, UnitTypeId.Meters), 0, 0));\n    Wall.Create(doc, baseLine, cwType.Id, level.Id, UnitUtils.ConvertToInternalUnits(4.0, UnitTypeId.Meters), 0.0, false, false);\n}"}
{"prompt":"Modify the type of a selected floor to 'Concrete 11cm'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a floor\");\n\nif (pickedRef != null)\n{\n    Floor floorToChange = doc.GetElement(pickedRef) as Floor;\n    FloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name == \"Concrete 11cm\");\n    \n    if (floorToChange != null && newType != null)\n    {\n        floorToChange.ChangeTypeId(newType.Id);\n    }\n}"}
{"prompt":"Retrieve the system type of a selected pipe.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a pipe\");\n\nPipingSystemType systemType = null;\nif (pickedRef != null)\n{\n    Pipe pipe = doc.GetElement(pickedRef.ElementId) as Pipe;\n    if (pipe != null)\n    {\n        Parameter systemTypeParam = pipe.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM);\n        if (systemTypeParam != null && systemTypeParam.HasValue)\n        {\n            systemType = doc.GetElement(systemTypeParam.AsElementId()) as PipingSystemType;\n        }\n    }\n}\n"}
{"prompt":"Pone un terminal de aire en el extremo de un conducto.","completion":"Duct duct = new FilteredElementCollector(doc).OfClass(typeof(Duct)).FirstOrDefault() as Duct;\nFamilySymbol terminalSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_DuctTerminal).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (duct != null && terminalSymbol != null)\n{\n    if(!terminalSymbol.IsActive) terminalSymbol.Activate();\n    LocationCurve locCurve = duct.Location as LocationCurve;\n    if (locCurve != null)\n    {\n        Connector endConnector = duct.ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault(c => c.Origin.IsAlmostEqualTo(locCurve.Curve.GetEndPoint(1)));\n        if (endConnector != null)\n        {\n            doc.Create.NewFamilyInstance(endConnector.Origin, terminalSymbol, duct, StructuralType.NonStructural);\n        }\n    }\n}"}
{"prompt":"Extrae el elemento anfitrión de la primera ventana que encuentres.","completion":"FamilyInstance windowInstance = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\n\nif (windowInstance != null)\n{\n    Element hostElement = windowInstance.Host;\n}"}
{"prompt":"Rota un elemento seleccionado 90 grados sobre su eje Z.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un elemento para rotar\");\nElement elem = doc.GetElement(pickedRef.ElementId);\nLocationPoint lp = elem.Location as LocationPoint;\nLine axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\nElementTransformUtils.RotateElement(doc, elem.Id, axis, Math.PI \/ 2.0);"}
{"prompt":"Get the total length of all walls in the project.","completion":"double totalLength = 0.0;\nList<Wall> walls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Cast<Wall>().ToList();\nforeach (Wall wall in walls)\n{\n    Parameter lengthParam = wall.get_Parameter(BuiltInParameter.CURVE_ELEM_LENGTH);\n    if (lengthParam != null && lengthParam.HasValue)\n    {\n        totalLength += lengthParam.AsDouble();\n    }\n}"}
{"prompt":"Create a filled region with a 'Concrete' pattern.","completion":"using (Transaction t = new Transaction(doc, \"Create Filled Region\"))\n{\n    t.Start();\n    FilledRegionType regionType = new FilteredElementCollector(doc).OfClass(typeof(FilledRegionType)).Cast<FilledRegionType>().FirstOrDefault(frt => frt.Name.Contains(\"Concrete\"));\n    View activeView = doc.ActiveView;\n\n    if (regionType != null && activeView != null)\n    {\n        XYZ p1 = new XYZ(0,0,0);\n        XYZ p2 = new XYZ(5 \/ 0.3048, 0,0);\n        XYZ p3 = new XYZ(5 \/ 0.3048, 5 \/ 0.3048,0);\n        XYZ p4 = new XYZ(0, 5 \/ 0.3048,0);\n        CurveLoop profile = new CurveLoop();\n        profile.Append(Line.CreateBound(p1,p2));\n        profile.Append(Line.CreateBound(p2,p3));\n        profile.Append(Line.CreateBound(p3,p4));\n        profile.Append(Line.CreateBound(p4,p1));\n        FilledRegion.Create(doc, regionType.Id, activeView.Id, new List<CurveLoop>{profile});\n    }\n    t.Commit();\n}"}
{"prompt":"Reproduce el nivel 4 con un desfase de 1m y llámalo 'Mezanine'.","completion":"string levelName = \"Nivel 4\";\nLevel levelToCopy = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (levelToCopy != null)\n{\n    double offset = UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, levelToCopy.Elevation + offset);\n    newLevel.Name = \"Mezanine\";\n}"}
{"prompt":"Find the structural column type named \"304 x 453mm\" and place it at X=1, Y=12.8","completion":"string columnTypeName = \"304 x 453mm\";\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(s => s.Name == columnTypeName);\n\nif (level != null && columnSymbol != null)\n{\n    if (!columnSymbol.IsActive)\n    {\n        columnSymbol.Activate();\n    }\n    doc.Create.NewFamilyInstance(new XYZ(1, 12.8, 0), columnSymbol, level, StructuralType.Column);\n}"}
{"prompt":"Fetch a list of all project warnings.","completion":"IList<FailureMessage> warnings = doc.GetWarnings();\nList<string> warningDescriptions = warnings.Select(w => w.GetDescriptionText()).ToList();\n"}
{"prompt":"Reproduce la vista de planta 'Nivel 1' y conviértela en una plantilla de vista.","completion":"using (Transaction t = new Transaction(doc, \"Create View Template\"))\n{\n    t.Start();\n    ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().FirstOrDefault(v => v.Name == \"Nivel 1\");\n    string templateName = \"Plantilla Nivel 1\";\n\n    if (viewToDuplicate != null)\n    {\n        ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n        View newView = doc.GetElement(newViewId) as View;\n        if (newView != null)\n        {\n           \/\/ In older APIs, direct conversion to a template may not be available.\n           \/\/ A common workaround is to set the IsTemplate property if available and writable, \n           \/\/ which is not the case here. This is left as a comment for conceptual understanding.\n           \/\/ newView.IsTemplate = true;\n            newView.Name = templateName;\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea una apertura de hueco vertical (shaft) desde el nivel base hasta el nivel más alto.","completion":"using (Transaction t = new Transaction(doc, \"Create Shaft\"))\n{\n    t.Start();\n    Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderBy(l => l.ProjectElevation).FirstOrDefault();\n    Level topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderByDescending(l => l.ProjectElevation).FirstOrDefault();\n\n    if (bottomLevel != null && topLevel != null)\n    {\n        XYZ p1 = new XYZ(2 \/ 0.3048, 2 \/ 0.3048,0);\n        XYZ p2 = new XYZ(5 \/ 0.3048, 2 \/ 0.3048,0);\n        XYZ p3 = new XYZ(5 \/ 0.3048, 5 \/ 0.3048,0);\n        XYZ p4 = new XYZ(2 \/ 0.3048, 5 \/ 0.3048,0);\n        CurveArray profile = new CurveArray();\n        profile.Append(Line.CreateBound(p1,p2));\n        profile.Append(Line.CreateBound(p2,p3));\n        profile.Append(Line.CreateBound(p3,p4));\n        profile.Append(Line.CreateBound(p4,p1));\n        doc.Create.NewOpening(bottomLevel, topLevel, profile);\n    }\n    t.Commit();\n}"}
{"prompt":"Retrieve all walls on Level 1 that are structural.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nif (level1 != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level1.Id);\n    ElementCategoryFilter categoryFilter = new ElementCategoryFilter(BuiltInCategory.OST_Walls);\n    ParameterValueProvider pvp = new ParameterValueProvider(new ElementId(BuiltInParameter.WALL_STRUCTURAL_SIGNIFICANT));\n    FilterIntegerRule rule = new FilterIntegerRule(pvp, new FilterNumericEquals(), 1);\n    ElementParameterFilter structuralFilter = new ElementParameterFilter(rule);\n    LogicalAndFilter andFilter = new LogicalAndFilter(new List<ElementFilter> { levelFilter, categoryFilter, structuralFilter });\n    List<Element> structuralWalls = new FilteredElementCollector(doc).WherePasses(andFilter).ToList();\n}"}
{"prompt":"Reproduce el nivel 2 con un desfase de 4m y llámalo 'Mezanine'.","completion":"string levelName = \"Nivel 2\";\nLevel levelToCopy = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (levelToCopy != null)\n{\n    double offset = UnitUtils.ConvertToInternalUnits(4, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, levelToCopy.Elevation + offset);\n    newLevel.Name = \"Mezanine\";\n}"}
{"prompt":"Calcula el total de metros cuadrados de piso del tipo 'Hormigón Pulido'.","completion":"FloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault(ft => ft.Name == \"Hormigón Pulido\") as FloorType;\ndouble totalArea = 0.0;\n\nif (floorType != null)\n{\n    FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Floors).WhereElementIsNotElementType();\n    IList<Floor> floors = collector.Cast<Floor>().Where(f => f.GetTypeId().Equals(floorType.Id)).ToList();\n\n    foreach (Floor floor in floors)\n    {\n        Parameter areaParam = floor.get_Parameter(BuiltInParameter.HOST_AREA_COMPUTED);\n        if (areaParam != null) totalArea += areaParam.AsDouble();\n    }\n}\ndouble totalAreaM2 = UnitUtils.ConvertFromInternalUnits(totalArea, UnitTypeId.SquareMeters);"}
{"prompt":"Copy the 'Level 5' view as a dependent view.","completion":"ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v => v.Name == \"Level 5\") as ViewPlan;\n\nif (viewToDuplicate != null)\n{\n    ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n}"}
{"prompt":"Generate a text note with given text, location, and target element.","completion":"using (Transaction t = new Transaction(doc, \"Create Text Note\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference targetRef = localUidoc.Selection.PickObject(ObjectType.Element, \"Select an element to annotate\");\n    XYZ textLocation = localUidoc.Selection.PickPoint(\"Choose the text location\");\n\n    View activeView = doc.ActiveView;\n    ElementId defaultTypeId = doc.GetDefaultElementTypeId(ElementTypeGroup.TextNoteType);\n\n    if (targetRef != null && textLocation != null && activeView != null && defaultTypeId != ElementId.InvalidElementId)\n    {\n        TextNoteOptions opts = new TextNoteOptions(defaultTypeId);\n        TextNote note = TextNote.Create(doc, activeView.Id, textLocation, \"REVIEW CLASH\", opts);\n        if (note != null)\n        {\n            note.AddLeader(TextNoteLeaderTypes.TNLT_STRAIGHT_L).End = targetRef.GlobalPoint;\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Establece el parámetro 'Comentarios' de todas las puertas del Nivel 5 a 'Clasificación Fuego - 87 min'.","completion":"string levelName = \"Nivel 5\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(targetLevel.Id);\n    FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WherePasses(levelFilter);\n    foreach (Element door in collector)\n    {\n        Parameter commentsParam = door.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n        if (commentsParam != null && !commentsParam.IsReadOnly) { commentsParam.Set(\"Clasificación Fuego - 87 min\"); }\n    }\n}"}
{"prompt":"Pivot a selected element 93 degrees around its Z-axis.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select an element to rotate\");\nElement elem = doc.GetElement(pickedRef.ElementId);\nLocationPoint lp = elem.Location as LocationPoint;\nLine axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\nElementTransformUtils.RotateElement(doc, elem.Id, axis, Math.PI \/ 93);"}
{"prompt":"Copy the 'Generic - 185mm' wall type and name it 'Interior - 15cm Plaster'.","completion":"string originalName = \"Generic - 185mm\";\nstring newName = \"Interior - 15cm Plaster\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif (originalType != null)\n{\n    WallType newType = originalType.Duplicate(newName) as WallType;\n}"}
{"prompt":"Ubica una instancia de la familia 'Mesa de Oficina' en el centro de la habitación 'Despacho 105'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 105\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Mesa de Oficina\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);"}
{"prompt":"Export the current model to an NWC file.","completion":"string folderPath = \"C:\/exports\/\";\nstring fileName = doc.Title + \".nwc\";\nNavisworksExportOptions options = new NavisworksExportOptions();\noptions.ExportScope = NavisworksExportScope.Model;\ndoc.Export(folderPath, fileName, options);"}
{"prompt":"Crea un parámetro global de longitud llamado 'AnchoCorredor' con valor de 1.2m.","completion":"string paramName = \"AnchoCorredor\";\nGlobalParameter gp = GlobalParameter.Create(doc, paramName, SpecTypeId.Length);\n\nif (gp != null)\n{\n    gp.SetValue(new DoubleParameterValue(UnitUtils.ConvertToInternalUnits(1.2, UnitTypeId.Meters)));\n}"}
{"prompt":"Obtain all rooms on the 'Ground Floor' Level.","completion":"Level groundFloor = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Ground Floor\") as Level;\nList<Element> roomsOnGround = new List<Element>();\n\nif (groundFloor != null)\n{\n    roomsOnGround = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Where(r => r.LevelId == groundFloor.Id).ToList();\n}"}
{"prompt":"Exporta el modelo a formato IFC4 para coordinación.","completion":"string folderPath = \"C:\/RevitExports\/\";\nstring fileName = doc.Title + \"-Coordination.ifc\";\nIFCExportOptions options = new IFCExportOptions();\noptions.FileVersion = IFCVersion.IFC4;\ndoc.Export(folderPath, fileName, options);"}
{"prompt":"Create a shaft opening that passes through from Level 1 to Level 3.","completion":"using (Transaction t = new Transaction(doc, \"Create Shaft Opening\"))\n{\n    t.Start();\n    Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 1\");\n    Level topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 3\");\n\n    if (bottomLevel != null && topLevel != null)\n    {\n        XYZ p1 = new XYZ(5 \/ 0.3048, 5 \/ 0.3048,0);\n        XYZ p2 = new XYZ(8 \/ 0.3048, 5 \/ 0.3048,0);\n        XYZ p3 = new XYZ(8 \/ 0.3048, 8 \/ 0.3048,0);\n        XYZ p4 = new XYZ(5 \/ 0.3048, 8 \/ 0.3048,0);\n        CurveArray profile = new CurveArray();\n        profile.Append(Line.CreateBound(p1,p2));\n        profile.Append(Line.CreateBound(p2,p3));\n        profile.Append(Line.CreateBound(p3,p4));\n        profile.Append(Line.CreateBound(p4,p1));\n        Opening shaft = doc.Create.NewOpening(bottomLevel, topLevel, profile);\n    }\n    t.Commit();\n}"}
{"prompt":"Copia el nivel 5 con un desfase de 2m y llámalo 'Mezanine'.","completion":"string levelName = \"Nivel 5\";\nLevel levelToCopy = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (levelToCopy != null)\n{\n    double offset = UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, levelToCopy.Elevation + offset);\n    newLevel.Name = \"Mezanine\";\n}"}
{"prompt":"Set the sill height of all windows to 900mm.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits(900, UnitTypeId.Millimeters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Build a new level named 'Mezzanine' at 7.4 meters elevation.","completion":"string levelName = \"Mezzanine\";\ndouble elevation = UnitUtils.ConvertToInternalUnits(7.4, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Construct a stair between Level 1 and Level 2","completion":"\/\/ This is a complex operation that requires multiple steps and\/or user interaction and is not supported by the agent."}
{"prompt":"Include a reference point at coordinates (5,4,4) inside the family editor.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(5,4,4));"}
{"prompt":"Construct a stair between Level 5 and Level 2","completion":"\/\/ This is a complex operation that requires multiple steps and\/or user interaction and is not supported by the agent."}
{"prompt":"Define the 'Mark' parameter of all selected walls to 'W-EXT-01'.","completion":"using (Transaction t = new Transaction(doc, \"Set Wall Mark\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    ICollection<ElementId> selectedIds = localUidoc.Selection.GetElementIds();\n\n    if (selectedIds != null && selectedIds.Count > 0)\n    {\n        foreach(ElementId id in selectedIds)\n        {\n            Element elem = doc.GetElement(id);\n            if(elem is Wall)\n            {\n                Parameter p = elem.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n                if (p != null && !p.IsReadOnly)\n                {\n                    p.Set(\"W-EXT-01\");\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create a floor plan view for 'Level 2'.","completion":"string levelName = \"Level 2\";\nLevel level3 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.FloorPlan);\n\nif (level3 != null && vft != null)\n{\n    ViewPlan viewPlan = ViewPlan.Create(doc, vft.Id, level3.Id);\n}"}
{"prompt":"Attach a reference point at coordinates (1,4,6) inside the family editor.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(1,4,6));"}
{"prompt":"Añade un punto al Path of Travel seleccionado.","completion":"\/\/ PathOfTravel related methods like GetPath and Update are likely inaccessible in this environment.\n\/\/ The following code is a placeholder to show the intent.\n\/*\nusing (Transaction t = new Transaction(doc, \"Update Path of Travel\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference pickedRef = localUidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un Path of Travel\");\n\n    if (pickedRef != null)\n    {\n        PathOfTravel pot = doc.GetElement(pickedRef) as PathOfTravel;\n        if (pot != null)\n        {\n            IList<XYZ> points = pot.GetPath();\n            if (points != null && points.Count >= 2)\n            {\n                XYZ midPoint = (points[0] + points[1]) \/ 2;\n                points.Insert(1, midPoint); \n                pot.Update(points);\n            }\n        }\n    }\n    t.Commit();\n}\n*\/"}
{"prompt":"Genera un piso rectangular de 10×8 metros.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\n\nif (level != null && floorType != null)\n{\n    double width = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\n    double length = UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters);\n    CurveLoop loop = new CurveLoop();\n    loop.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(width,0,0)));\n    loop.Append(Line.CreateBound(new XYZ(width,0,0), new XYZ(width,length,0)));\n    loop.Append(Line.CreateBound(new XYZ(width,length,0), new XYZ(0,length,0)));\n    loop.Append(Line.CreateBound(new XYZ(0,length,0), new XYZ(0,0,0)));\n    Floor.Create(doc, new List<CurveLoop> { loop }, floorType.Id, level.Id);\n}"}
{"prompt":"Create beams between horizontally aligned columns.","completion":"FamilySymbol beamSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nList<FamilyInstance> columns = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().Cast<FamilyInstance>().OrderBy(c => c.GetTransform().Origin.Y).ThenBy(c => c.GetTransform().Origin.X).ToList();\n\nif (beamSymbol != null && level != null && columns.Count >= 2)\n{\n    for(int i=0; i < columns.Count - 1; i++)\n    {\n        LocationPoint p1 = columns[i].Location as LocationPoint;\n        LocationPoint p2 = columns[i+1].Location as LocationPoint;\n        if (p1 != null && p2 != null && Math.Abs(p1.Point.Y - p2.Point.Y) < 0.01)\n        {\n            Line line = Line.CreateBound(p1.Point, p2.Point);\n            doc.Create.NewFamilyInstance(line, beamSymbol, level, StructuralType.Beam);\n        }\n    }\n}"}
{"prompt":"Place the 'Level 1' floor plan view on the active sheet.","completion":"View viewToPlace = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<View>().FirstOrDefault(v => v.Name == \"Level 1\" && !v.IsTemplate);\nViewSheet sheet = doc.ActiveView as ViewSheet;\n\nif (viewToPlace != null && sheet != null && Viewport.CanAddViewToSheet(doc, sheet.Id, viewToPlace.Id))\n{\n    BoundingBoxUV sheetBox = sheet.Outline;\n    XYZ centerPoint = new XYZ((sheetBox.Min.U + sheetBox.Max.U) \/ 2, (sheetBox.Min.V + sheetBox.Max.V) \/ 2, 0);\n    Viewport.Create(doc, sheet.Id, viewToPlace.Id, centerPoint);\n}"}
{"prompt":"Insert an instance of the 'Office Desk' family in the center of the 'Office 105' room.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Office 105\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Office Desk\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);"}
{"prompt":"Crea los siguientes planos: 'A-101' con nombre 'Planta Baja', y 'A-102' con nombre 'Planta Alta'.","completion":"FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (titleBlock != null)\n{\n    ViewSheet sheet1 = ViewSheet.Create(doc, titleBlock.Id);\n    sheet1.SheetNumber = \"A-101\";\n    sheet1.Name = \"Planta Baja\";\n    ViewSheet sheet2 = ViewSheet.Create(doc, titleBlock.Id);\n    sheet2.SheetNumber = \"A-102\";\n    sheet2.Name = \"Planta Alta\";\n}"}
{"prompt":"Create a new level named 'Mezzanine' at 7.5 meters elevation.","completion":"string levelName = \"Mezzanine\";\ndouble elevation = UnitUtils.ConvertToInternalUnits(7.5, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Find all doors on Level 2 that belong to the 'Single-Flush' family.","completion":"Level level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 2\");\nList<Element> doors = new List<Element>();\n\nif (level2 != null)\n{\n    ElementCategoryFilter catFilter = new ElementCategoryFilter(BuiltInCategory.OST_Doors);\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level2.Id);\n    FilterableValueProvider provider = new ParameterValueProvider(new ElementId(BuiltInParameter.ELEM_FAMILY_PARAM));\n    FilterStringRuleEvaluator evaluator = new FilterStringEquals();\n    FilterRule famNameRule = new FilterStringRule(provider, evaluator, \"Single-Flush\");\n    ElementParameterFilter famFilter = new ElementParameterFilter(famNameRule);\n    LogicalAndFilter andFilter = new LogicalAndFilter(new List<ElementFilter> { catFilter, levelFilter, famFilter });\n    doors = new FilteredElementCollector(doc).WherePasses(andFilter).ToList();\n}"}
{"prompt":"Ajusta el tipo de la ventana seleccionada al tipo 'Ventana Fija 121x60'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una ventana\");\nFamilySymbol newType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name == \"Ventana Fija 121x60\");\nif (pickedRef != null && newType != null)\n{\n    FamilyInstance window = doc.GetElement(pickedRef.ElementId) as FamilyInstance;\n    if (window != null)\n    {\n        window.Symbol = newType;\n    }\n}"}
{"prompt":"Encuentra todos los muros con el comentario 'Revisar'.","completion":"ElementId commentParamId = new ElementId(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\nParameterValueProvider pvp = new ParameterValueProvider(commentParamId);\nFilterStringRuleEvaluator evaluator = new FilterStringContains();\nFilterRule rule = new FilterStringRule(pvp, evaluator, \"Revisar\");\nElementFilter filter = new ElementParameterFilter(rule);\nList<Element> wallsToReview = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(filter).ToList();"}
{"prompt":"Mueve un elemento seleccionado a la posición (8,10).","completion":"ICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nElementId selectedId = selectedIds.FirstOrDefault();\nif (selectedId != null && selectedId != ElementId.InvalidElementId)\n{\n    Element elem = doc.GetElement(selectedId);\n    if (elem != null)\n    {\n        LocationPoint lp = elem.Location as LocationPoint;\n        if (lp != null)\n        {\n            XYZ currentPoint = lp.Point;\n            XYZ newPosition = new XYZ(8, 10, currentPoint.Z);\n            XYZ translation = newPosition - currentPoint;\n            ElementTransformUtils.MoveElement(doc, elem.Id, translation);\n        }\n    }\n}"}
{"prompt":"Aísla temporalmente la selección.","completion":"ICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nView activeView = doc.ActiveView;\n\nif (activeView != null && selectedIds.Any())\n{\n    activeView.IsolateElementsTemporary(selectedIds);\n}"}
{"prompt":"Ajusta un panel de vidrio de un muro cortina por un panel sólido.","completion":"using (Transaction t = new Transaction(doc, \"Change Curtain Panel\"))\n{\n    t.Start();\n    Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Cast<Wall>().FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain);\n    FamilySymbol solidPanelType = new FilteredElementCollector(doc).OfClass(typeof(FamilySymbol)).Cast<FamilySymbol>().FirstOrDefault(fs => fs.Family.FamilyCategory.Id.IntegerValue == (int)BuiltInCategory.OST_CurtainWallPanels && (fs.Name.Contains(\"Solid\") || fs.Name.Contains(\"Sólido\")));\n\n    if (curtainWall != null && solidPanelType != null)\n    {\n        CurtainGrid grid = curtainWall.CurtainGrid;\n        if (grid != null)\n        {\n            ElementId panelIdToChange = grid.GetPanelIds().FirstOrDefault();\n            if (panelIdToChange != ElementId.InvalidElementId)\n            {\n                Panel panelToChange = doc.GetElement(panelIdToChange) as Panel;\n                if (panelToChange != null) panelToChange.ChangeTypeId(solidPanelType.Id);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Get the names of all loaded furniture types.","completion":"FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType();\nList<string> furnitureTypeNames = collector.Select(e => e.Name).ToList();"}
{"prompt":"Inserta un punto de referencia en las coordenadas (5,1,7) dentro del editor de familias.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(5,1,7));"}
{"prompt":"Crea un nuevo tipo de muro de 28cm llamado 'Interiores'.","completion":"WallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif(wallTypeToDuplicate != null)\n{\n    WallType newWallType = null;\n    try { newWallType = wallTypeToDuplicate.Duplicate(\"Interiores\") as WallType; } catch {}\n    if(newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if(cs != null && cs.GetLayers().Any())\n        {\n            int coreLayerIndex = cs.GetFirstCoreLayerIndex();\n            if(coreLayerIndex != -1) \n            {\n                cs.SetLayerFunction(coreLayerIndex, MaterialFunctionAssignment.Structure);\n                cs.SetLayerWidth(coreLayerIndex, UnitUtils.ConvertToInternalUnits(28, UnitTypeId.Centimeters));\n                newWallType.SetCompoundStructure(cs);\n            }\n        }\n    }\n}"}
{"prompt":"Encuentra todas las puertas del Nivel 5 que sean de la familia 'Puerta Sencilla'.","completion":"string levelName = \"Nivel 5\";\nstring familyName = \"Puerta Sencilla\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WherePasses(new ElementLevelFilter(targetLevel.Id));\n    List<ElementId> doorIds = new List<ElementId>();\n    foreach (Element door in collector)\n    {\n        FamilyInstance fi = door as FamilyInstance;\n        if (fi != null && fi.Symbol.Family.Name == familyName)\n        {\n            doorIds.Add(door.Id);\n        }\n    }\n    uidoc.Selection.SetElementIds(doorIds);\n}"}
{"prompt":"Establece el parámetro 'Comentarios' de todas las puertas del Nivel 1 a 'Clasificación Fuego - 90 min'.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\n\nif (level1 != null)\n{\n    List<FamilyInstance> doorsOnLevel1 = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsNotElementType().Cast<FamilyInstance>().Where(fi => fi.LevelId == level1.Id).ToList();\n    foreach(FamilyInstance door in doorsOnLevel1)\n    {\n        Parameter commentsParam = door.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n        if (commentsParam != null && !commentsParam.IsReadOnly) commentsParam.Set(\"Clasificación Fuego - 90 min\");\n    }\n}"}
{"prompt":"Construct a new 5mm text type in green color.","completion":"using (Transaction t = new Transaction(doc, \"Create Green Text Type\"))\n{\n    t.Start();\n    string newTypeName = \"5mm Green\";\n    TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\n    if (defaultType != null)\n    {\n        TextNoteType newType = defaultType.Duplicate(newTypeName) as TextNoteType;\n        if (newType != null)\n        {\n            Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n            if (textSizeParam != null && !textSizeParam.IsReadOnly)\n            {\n                textSizeParam.Set(5 \/ 304.8);\n            }\n            Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n            if (lineColorParam != null && !lineColorParam.IsReadOnly)\n            {\n                 lineColorParam.Set(65280);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Modify the detail level of the active view to 'Medium'.","completion":"View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.DetailLevel = ViewDetailLevel.Medium;\n}"}
{"prompt":"Get the host element of the first window found.","completion":"FamilyInstance windowInstance = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\n\nif (windowInstance != null)\n{\n    Element hostElement = windowInstance.Host;\n}"}
{"prompt":"Coloca una cámara en la vista activa.","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(f => f.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft != null)\n{\n    View3D cameraView = View3D.CreatePerspective(doc, vft.Id);\n    if (cameraView != null)\n    {\n        cameraView.Name = \"Nueva Vista de Cámara\";\n        \/\/ Default position as it is not specified in prompt\n        XYZ eyePos = new XYZ(30, -30, 20);\n        XYZ upDir = XYZ.BasisZ;\n        XYZ forwardDir = new XYZ(-1, 1, -0.5);\n        ViewOrientation3D orientation = new ViewOrientation3D(eyePos, upDir, forwardDir);\n        cameraView.SetOrientation(orientation);\n    }\n}"}
{"prompt":"Create an assembly from the selected elements.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds != null && selectedIds.Count > 0)\n{\n    AssemblyInstance assemblyInstance = AssemblyInstance.Create(doc, selectedIds, new ElementId(BuiltInCategory.OST_Assemblies));\n    if (assemblyInstance != null)\n    {\n        assemblyInstance.Name = \"New Assembly\";\n    }\n}"}
{"prompt":"Create a new workset named 'Structure'.","completion":"string wsName = \"Structure\";\nWorkset newWorkset = Workset.Create(doc, wsName);\n"}
{"prompt":"Build an axonometric 3D view oriented to the Northwest.","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft != null)\n{\n    View3D view3d = View3D.CreateIsometric(doc, vft.Id);\n    if (view3d != null)\n    {\n        XYZ eye = new XYZ(-1, 1, 1);\n        XYZ up = new XYZ(0, 0, 1);\n        XYZ forward = new XYZ(1, -1, -1);\n        view3d.SetOrientation(new ViewOrientation3D(eye, up, forward));\n        view3d.Name = \"3D View Northwest\";\n    }\n}"}
{"prompt":"Retrieve all rooms on Level 3","completion":"string levelName = \"Level 3\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(targetLevel.Id);\n    FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WherePasses(levelFilter);\n    uidoc.Selection.SetElementIds(collector.ToElementIds());\n}"}
{"prompt":"Sitúa un rociador en las coordenadas (9,10,8).","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol sprinklerSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Sprinklers).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (level != null && sprinklerSymbol != null)\n{\n    if (!sprinklerSymbol.IsActive) sprinklerSymbol.Activate();\n    XYZ placementPoint = new XYZ(UnitUtils.ConvertToInternalUnits(9, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters));\n    doc.Create.NewFamilyInstance(placementPoint, sprinklerSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n}"}
{"prompt":"Obtain the MEP space associated with the room 'Office 97'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Cast<Room>().FirstOrDefault(r => r.Name == \"Office 97\");\nList<Space> spaces = new List<Space>();\n\nif (room != null)\n{\n    spaces = new FilteredElementCollector(doc).OfClass(typeof(Space)).Cast<Space>().Where(s => s.Room != null && s.Room.Id == room.Id).ToList();\n}"}
{"prompt":"Duplicate the 'Level 6' view as a dependent view.","completion":"ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v => v.Name == \"Level 6\") as ViewPlan;\n\nif (viewToDuplicate != null)\n{\n    ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n}"}
{"prompt":"Obtén todas las habitaciones en el Nivel 'Planta Baja'.","completion":"Level groundFloor = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Planta Baja\") as Level;\nList<Element> roomsOnGround = new List<Element>();\n\nif (groundFloor != null)\n{\n    roomsOnGround = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Where(r => r.LevelId == groundFloor.Id).ToList();\n}"}
{"prompt":"Construct a wall on Level 1 from (0,0,0) to (5,0,0) with a height of 5 meters.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (level1 != null && wallType != null)\n{\n    Line wallCurve = Line.CreateBound(new XYZ(0, 0, 0), new XYZ(5, 0, 0));\n    double height = UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters);\n    Wall.Create(doc, wallCurve, wallType.Id, level1.Id, height, 0.0, false, false);\n}"}
{"prompt":"Encuentra todas las puertas en el Nivel 6 usando un filtro combinado.","completion":"string levelName = \"Nivel 6\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    ElementCategoryFilter categoryFilter = new ElementCategoryFilter(BuiltInCategory.OST_Doors);\n    ElementLevelFilter levelFilter = new ElementLevelFilter(targetLevel.Id);\n    LogicalAndFilter combinedFilter = new LogicalAndFilter(levelFilter, categoryFilter);\n    FilteredElementCollector collector = new FilteredElementCollector(doc).WherePasses(combinedFilter);\n    uidoc.Selection.SetElementIds(collector.ToElementIds());\n}"}
{"prompt":"Construct an electrical circuit connecting light fixtures to a panel.","completion":"using (Transaction t = new Transaction(doc, \"Create Electrical Circuit\"))\n{\n    t.Start();\n    FamilyInstance panel = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_ElectricalEquipment).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\n    List<ElementId> fixtureIds = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsNotElementType().ToElementIds().ToList();\n\n    if (panel != null && fixtureIds.Count > 0)\n    {\n        ElectricalSystem electricalSystem = ElectricalSystem.Create(doc, fixtureIds, ElectricalSystemType.PowerCircuit);\n        if(electricalSystem != null)\n        {\n            electricalSystem.SelectPanel(panel);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Activa todos los símbolos de familia cargados en el proyecto.","completion":"List<FamilySymbol> symbols = new FilteredElementCollector(doc).OfClass(typeof(FamilySymbol)).Cast<FamilySymbol>().ToList();\nforeach (var sym in symbols)\n{\n    if (!sym.IsActive) \n    {\n        sym.Activate();\n    }\n}"}
{"prompt":"Duplicate the 'Basic Wall' type and rename it.","completion":"string typeToDuplicate = \"Basic Wall\";\nstring newTypeName = \"Basic Wall Copy\";\nWallType wt = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(w=>w.Name==typeToDuplicate);\n\nif (wt != null)\n{\n    WallType newWt = wt.Duplicate(newTypeName) as WallType;\n}"}
{"prompt":"Dentro del editor de familias, crea un plano de referencia vertical llamado 'Eje Central'.","completion":"View activeView = doc.ActiveView;\nif (activeView != null && doc.IsFamilyDocument)\n{\n    XYZ start = new XYZ(0, -5, 0);\n    XYZ end = new XYZ(0, 5, 0);\n    XYZ normal = XYZ.BasisX;\n    ReferencePlane rp = doc.FamilyCreate.NewReferencePlane(start, end, normal, activeView);\n    if (rp != null)\n    {\n        try { rp.Name = \"Eje Central\"; } catch {}\n    }\n}"}
{"prompt":"Pin all selected elements.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nif (selectedIds.Count > 0)\n{\n    foreach (ElementId id in selectedIds)\n    {\n        Element elem = doc.GetElement(id);\n        if (elem != null && !elem.Pinned)\n        {\n            elem.Pinned = true;\n        }\n    }\n}"}
{"prompt":"Obtain the total number of warnings in the project.","completion":"int totalWarnings = doc.GetWarnings().Count;\n"}
{"prompt":"Crea un nuevo tipo de muro de 20cm llamado 'Estructura'.","completion":"string newTypeName = \"Estructura\";\nWallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(newTypeName) as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(20, UnitTypeId.Centimeters));\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n}"}
{"prompt":"Move the project base point 100 meters to the north.","completion":"using (Transaction t = new Transaction(doc, \"Move Project Base Point\"))\n{\n    t.Start();\n    BasePoint projectBasePoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(bp => !bp.IsShared);\n\n    if (projectBasePoint != null)\n    {\n        XYZ translation = new XYZ(0, 100 \/ 0.3048, 0);\n        ElementTransformUtils.MoveElement(doc, projectBasePoint.Id, translation);\n    }\n    t.Commit();\n}"}
{"prompt":"Ubica una instancia de la familia 'Puerta Sencilla' en el centro de la habitación 'Despacho 100'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 100\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Puerta Sencilla\") as FamilySymbol;\nif(furnitureSymbol != null && !furnitureSymbol.IsActive) furnitureSymbol.Activate();\nif(room != null)\n{\n    LocationPoint roomCenter = room.Location as LocationPoint;\n    if(roomCenter != null && furnitureSymbol != null && room.Level != null)\n    {\n        doc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Ajusta todas las ventanas para que tengan la altura del antepecho a 896mm.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits(896, UnitTypeId.Millimeters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Coloca una instancia de la familia 'Ventana Fija 117x60' en el centro de la habitación 'Despacho 103'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 117\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Ventana Fija 103x60\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);"}
{"prompt":"Rota un elemento seleccionado 90 grados sobre su eje Z.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un elemento para rotar\");\nElement elem = doc.GetElement(pickedRef.ElementId);\nLocationPoint lp = elem.Location as LocationPoint;\nLine axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\nElementTransformUtils.RotateElement(doc, elem.Id, axis, Math.PI \/ 2.0);"}
{"prompt":"Modela un plafón a 2.8 metros de altura en Nivel 1.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\nCeilingType ceilingType = new FilteredElementCollector(doc).OfClass(typeof(CeilingType)).FirstOrDefault() as CeilingType;\nif (ceilingType != null && level != null)\n{\n    CurveLoop profile = new CurveLoop();\n    profile.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(10,0,0)));\n    profile.Append(Line.CreateBound(new XYZ(10,0,0), new XYZ(10,10,0)));\n    profile.Append(Line.CreateBound(new XYZ(10,10,0), new XYZ(0,10,0)));\n    profile.Append(Line.CreateBound(new XYZ(0,10,0), new XYZ(0,0,0)));\n    Ceiling ceiling = Ceiling.Create(doc, new List<CurveLoop>{profile}, ceilingType.Id, level.Id);\n    if (ceiling != null)\n    {\n        Parameter heightParam = ceiling.get_Parameter(BuiltInParameter.CEILING_HEIGHTABOVELEVEL_PARAM);\n        if (heightParam != null && !heightParam.IsReadOnly) heightParam.Set(UnitUtils.ConvertToInternalUnits(2.8, UnitTypeId.Meters));\n    }\n}"}
{"prompt":"Permite al usuario seleccionar un muro y obtén su ElementId.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un muro\");\nElementId selectedWallId = ElementId.InvalidElementId;\nif (pickedRef != null)\n{\n    selectedWallId = pickedRef.ElementId;\n}"}
{"prompt":"Generate a new Level named 'Level 1' at an elevation of 8 meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Level 1\";\n}"}
{"prompt":"Crea una nueva vista de alzado mirando al sur.","completion":"using (Transaction t = new Transaction(doc, \"Create South Elevation\"))\n{\n    t.Start();\n    ViewFamilyType elevationVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(vft => vft.ViewFamily == ViewFamily.Elevation);\n    View activeView = doc.ActiveView;\n\n    if (elevationVFT != null && activeView != null)\n    {\n        ElevationMarker marker = ElevationMarker.CreateElevationMarker(doc, elevationVFT.Id, new XYZ(0, -20 \/ 0.3048, 0), 100);\n        \n        if (marker != null)\n        {\n            View aev = marker.CreateElevation(doc, activeView.Id, 0);\n            if (aev != null)\n            {\n                aev.Name = \"Alzado Sur\";\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Inserta una línea de rejilla vertical a la mitad de un muro cortina.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Cast<Wall>().FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain);\nif (curtainWall != null)\n{\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    if (grid != null)\n    {\n        grid.AddGridLine(true, new XYZ(0,0,0), false);\n    }\n}"}
{"prompt":"Crea una vista 3D con la caja de sección activada.","completion":"string viewName = \"Vista 3D con Caja de Sección\";\nViewFamilyType vft3D = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft3D != null)\n{\n    View3D view3d = View3D.CreateIsometric(doc, vft3D.Id);\n    if (view3d != null)\n    {\n        view3d.Name = viewName;\n        view3d.IsSectionBoxActive = true;\n    }\n}"}
{"prompt":"Build a floor with a circular hole in the center.","completion":"using (Transaction t = new Transaction(doc, \"Create Floor with Hole\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    FloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\n\n    if (level != null && floorType != null)\n    {\n        XYZ p1 = new XYZ(-10 \/ 0.3048, -10 \/ 0.3048, 0);\n        XYZ p2 = new XYZ(10 \/ 0.3048, -10 \/ 0.3048, 0);\n        XYZ p3 = new XYZ(10 \/ 0.3048, 10 \/ 0.3048, 0);\n        XYZ p4 = new XYZ(-10 \/ 0.3048, 10 \/ 0.3048, 0);\n        CurveLoop outerLoop = new CurveLoop();\n        outerLoop.Append(Line.CreateBound(p1, p2));\n        outerLoop.Append(Line.CreateBound(p2, p3));\n        outerLoop.Append(Line.CreateBound(p3, p4));\n        outerLoop.Append(Line.CreateBound(p4, p1));\n\n        XYZ center = XYZ.Zero;\n        double radius = 2 \/ 0.3048;\n        CurveLoop innerLoop = new CurveLoop();\n        innerLoop.Append(Arc.Create(center - XYZ.BasisX * radius, center + XYZ.BasisX * radius, center + XYZ.BasisY * radius));\n        innerLoop.Append(Arc.Create(center + XYZ.BasisX * radius, center - XYZ.BasisX * radius, center - XYZ.BasisY * radius));\n\n        Floor.Create(doc, new List<CurveLoop> { outerLoop, innerLoop }, floorType.Id, level.Id);\n    }\n    t.Commit();\n}"}
{"prompt":"Add a tag to all furniture elements in the current view.","completion":"View activeView = doc.ActiveView;\nif (activeView == null) return;\n\nFilteredElementCollector collector = new FilteredElementCollector(doc, activeView.Id)\n    .OfCategory(BuiltInCategory.OST_Furniture)\n    .WhereElementIsNotElementType();\n\nIList<Element> elementsToTag = collector.ToElements();\n\nif (elementsToTag.Any())\n{\n    foreach (Element elem in elementsToTag)\n    {\n        Reference elemRef = new Reference(elem);\n        BoundingBoxXYZ bbox = elem.get_BoundingBox(activeView);\n        if (bbox == null) continue;\n\n        XYZ tagLocation = (bbox.Min + bbox.Max) \/ 2.0;\n        IndependentTag.Create(doc, activeView.Id, elemRef, true, TagMode.TM_ADDBY_CATEGORY, TagOrientation.Horizontal, tagLocation);\n    }\n}"}
{"prompt":"Get the MEP space associated with the room 'Office 99'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Cast<Room>().FirstOrDefault(r => r.Name == \"Office 99\");\nList<Space> spaces = new List<Space>();\n\nif (room != null)\n{\n    spaces = new FilteredElementCollector(doc).OfClass(typeof(Space)).Cast<Space>().Where(s => s.Room != null && s.Room.Id == room.Id).ToList();\n}"}
{"prompt":"Delete all unused wall types in the project.","completion":"ICollection<ElementId> allWallTypes = new FilteredElementCollector(doc).OfClass(typeof(WallType)).ToElementIds();\nICollection<ElementId> usedWallTypes = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Select(w => w.GetTypeId()).Distinct().ToList();\nList<ElementId> unusedWallTypes = allWallTypes.Except(usedWallTypes).ToList();\nif (unusedWallTypes.Any())\n{\n    doc.Delete(unusedWallTypes);\n}"}
{"prompt":"Erase all unused wall types in the project.","completion":"ICollection<ElementId> allWallTypes = new FilteredElementCollector(doc).OfClass(typeof(WallType)).ToElementIds();\nICollection<ElementId> usedWallTypes = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Select(w => w.GetTypeId()).Distinct().ToList();\nList<ElementId> unusedWallTypes = allWallTypes.Except(usedWallTypes).ToList();\ndoc.Delete(unusedWallTypes);"}
{"prompt":"Construct a door 0.9m wide and 2.1m high in the wall.","completion":"Wall hostWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nFamilySymbol originalSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (originalSymbol != null && hostWall != null)\n{\n    string newTypeName = \"Door 0.9m x 2.1m\";\n    FamilySymbol newSymbol = null;\n    try { newSymbol = originalSymbol.Duplicate(newTypeName) as FamilySymbol; } catch {}\n    if (newSymbol == null) { newSymbol = new FilteredElementCollector(doc).OfClass(typeof(FamilySymbol)).Cast<FamilySymbol>().FirstOrDefault(s => s.Name == newTypeName); }\n    if(newSymbol != null)\n    {\n        if (!newSymbol.IsActive) { newSymbol.Activate(); }\n        Parameter widthParam = newSymbol.LookupParameter(\"Width\");\n        if (widthParam != null) widthParam.Set(UnitUtils.ConvertToInternalUnits(0.9, UnitTypeId.Meters));\n        Parameter heightParam = newSymbol.LookupParameter(\"Height\");\n        if (heightParam != null) heightParam.Set(UnitUtils.ConvertToInternalUnits(2.1, UnitTypeId.Meters));\n        Level level = doc.GetElement(hostWall.LevelId) as Level;\n        LocationCurve locationCurve = hostWall.Location as LocationCurve;\n        if (level != null && locationCurve != null)\n        {\n            XYZ insertionPoint = locationCurve.Curve.Evaluate(0.5, true);\n            doc.Create.NewFamilyInstance(insertionPoint, newSymbol, hostWall, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n        }\n    }\n}"}
{"prompt":"Build an MEP space for each room on Level 1.","completion":"using (Transaction t = new Transaction(doc, \"Create MEP Spaces\"))\n{\n    t.Start();\n    Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 1\");\n\n    if (level1 != null)\n    {\n        List<Room> roomsOnLevel1 = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Where(e => (e as Room) != null && (e as Room).LevelId.Equals(level1.Id)).Cast<Room>().ToList();\n        foreach(Room room in roomsOnLevel1)\n        {\n           \/\/ The direct creation of MEP spaces from rooms might not be available in this specific API version.\n           \/\/ Placeholder comment for the intended logic.\n           \/\/ Space.Create(doc, room, null);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Define un filtro de vista para ocultar las líneas de detalle.","completion":"string filterName = \"Ocultar Líneas de Detalle\";\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    ICollection<ElementId> catsToHide = new List<ElementId>{new ElementId(BuiltInCategory.OST_Lines)};\n    ElementFilter filter = new ElementCategoryFilter(new ElementId(BuiltInCategory.OST_Lines));\n    ParameterFilterElement pfe = ParameterFilterElement.Create(doc, filterName, catsToHide, filter);\n    \n    if (pfe != null)\n    {\n        activeView.AddFilter(pfe.Id);\n        activeView.SetFilterVisibility(pfe.Id, false);\n    }\n}"}
{"prompt":"¿Cuántos metros cúbicos de cielorraso 'GWB on Metal Stud' hay?","completion":"CeilingType ceilingType = new FilteredElementCollector(doc).OfClass(typeof(CeilingType)).FirstOrDefault(ct => ct.Name == \"GWB on Metal Stud\") as CeilingType;\ndouble totalVolume = 0.0;\n\nif (ceilingType != null)\n{\n    FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Ceilings).WhereElementIsNotElementType();\n    IList<Ceiling> ceilings = collector.Cast<Ceiling>().Where(c => c.GetTypeId().Equals(ceilingType.Id)).ToList();\n\n    foreach (Ceiling ceiling in ceilings)\n    {\n        Parameter volumeParam = ceiling.get_Parameter(BuiltInParameter.HOST_VOLUME_COMPUTED);\n        if (volumeParam != null) totalVolume += volumeParam.AsDouble();\n    }\n}\ndouble totalVolumeM3 = UnitUtils.ConvertFromInternalUnits(totalVolume, UnitTypeId.CubicMeters);"}
{"prompt":"Position the 'Level 1' view in the center of the active sheet.","completion":"ViewPlan viewToPlace = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v => v.Name == \"Level 1\") as ViewPlan;\nViewSheet activeSheet = doc.ActiveView as ViewSheet;\n\nif (viewToPlace != null && activeSheet != null)\n{\n    BoundingBoxUV sheetBox = activeSheet.Outline;\n    XYZ centerPoint = new XYZ((sheetBox.Min.U + sheetBox.Max.U) \/ 2, (sheetBox.Min.V + sheetBox.Max.V) \/ 2, 0);\n    Viewport.Create(doc, activeSheet.Id, viewToPlace.Id, centerPoint);\n}"}
{"prompt":"Duplicate level 1 with a 3m offset and name it 'Mezzanine'.","completion":"string levelName = \"Mezzanine\";\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\n\nif (level1 != null)\n{\n    double newElevation = level1.ProjectElevation + UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, newElevation);\n    if (newLevel != null)\n    {\n        newLevel.Name = levelName;\n    }\n}"}
{"prompt":"Create a 'Roof Terrace' level at 10m.","completion":"string levelName = \"Roof Terrace\";\ndouble elev = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elev);\nnewLevel.Name = levelName;\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Obtén la longitud total de todos los muros del proyecto.","completion":"double totalLength = 0.0;\nList<Wall> walls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Cast<Wall>().ToList();\nforeach (Wall wall in walls)\n{\n    Parameter lengthParam = wall.get_Parameter(BuiltInParameter.CURVE_ELEM_LENGTH);\n    if (lengthParam != null && lengthParam.HasValue)\n    {\n        totalLength += lengthParam.AsDouble();\n    }\n}"}
{"prompt":"Añade el prefijo 'PLANTA-' a todas las vistas de plano.","completion":"string prefix = \"PLANTA-\";\nList<ViewPlan> planViews = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().Where(v => !v.IsTemplate).ToList();\nforeach(ViewPlan view in planViews)\n{\n    if (view != null)\n    {\n        view.Name = prefix + view.Name;\n    }\n}"}
{"prompt":"Inserta una cota de elevación en el Nivel 1.","completion":"using (Transaction t = new Transaction(doc, \"Place Spot Elevation\"))\n{\n    t.Start();\n    Level lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel 1\");\n    View activeView = doc.ActiveView;\n\n    if (lvl1 != null && activeView != null)\n    {\n        Reference levelRef = new Reference(lvl1);\n        XYZ origin = new XYZ(5\/0.3048, 5\/0.3048, lvl1.Elevation);\n        XYZ leaderEnd = origin + new XYZ(2\/0.3048, 2\/0.3048, 0);\n        doc.Create.NewSpotElevation(activeView, levelRef, origin, origin, leaderEnd, origin, true);\n    }\n    t.Commit();\n}"}
{"prompt":"Assign the sill height of all windows to 2 meter.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Añade un punto de referencia en las coordenadas (6,1,1) dentro del editor de familias.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(6,1,1));"}
{"prompt":"Crea un nuevo material llamado 'Roble Oscuro' con un patrón de superficie de madera.","completion":"string materialName = \"Roble Oscuro\";\nElementId materialId = Material.Create(doc, materialName);\n\nif (materialId != ElementId.InvalidElementId)\n{\n    Material material = doc.GetElement(materialId) as Material;\n    FillPatternElement fillPattern = new FilteredElementCollector(doc).OfClass(typeof(FillPatternElement)).FirstOrDefault(p => p.Name.Contains(\"Wood\") || p.Name.Contains(\"Madera\")) as FillPatternElement;\n    \n    if (material != null && fillPattern != null)\n    {\n        material.SurfaceForegroundPatternId = fillPattern.Id;\n        material.Color = new Color(139, 69, 19);\n    }\n}"}
{"prompt":"Clona el tipo de muro 'Genérico - 142mm' y nómbralo 'Interior - 15cm Yeso'.","completion":"string originalName = \"Genérico - 142mm\";\nstring newName = \"Interior - 15cm Yeso\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif (originalType != null)\n{\n    WallType newType = originalType.Duplicate(newName) as WallType;\n}"}
{"prompt":"Determine the total length of all Supply Air ducts.","completion":"List<Duct> ducts = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_DuctCurves).WhereElementIsNotElementType().Cast<Duct>().Where(d => d.get_Parameter(BuiltInParameter.RBS_SYSTEM_CLASSIFICATION_PARAM).AsString() == \"SupplyAir\").ToList();\ndouble totalLength = 0.0;\nforeach (Duct d in ducts)\n{\n    totalLength += d.get_Parameter(BuiltInParameter.CURVE_ELEM_LENGTH).AsDouble();\n}"}
{"prompt":"Localiza todos los muros con un parámetro 'Mark' vacío y asigna 'WM-01'.","completion":"List<Wall> walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>().ToList();\nforeach(var w in walls)\n{\n  Parameter p = w.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n  if(p != null && !p.IsReadOnly && string.IsNullOrEmpty(p.AsString()))\n  {\n      p.Set(\"WM-01\");\n  }\n}"}
{"prompt":"Dado un muro, encuentra todas las tuberías que lo atraviesan.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference wallRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un muro\");\n\nList<ElementId> intersectingPipes = new List<ElementId>();\nif (wallRef != null)\n{\n    Element wall = doc.GetElement(wallRef);\n    if (wall != null)\n    {\n        ElementIntersectsElementFilter filter = new ElementIntersectsElementFilter(wall);\n        intersectingPipes = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_PipeCurves).WherePasses(filter).ToElementIds().ToList();\n    }\n}\n"}
{"prompt":"Create a new 25cm wall type named 'Structural Wall 25cm'.","completion":"using (Transaction t = new Transaction(doc, \"Create Wall Type\"))\n{\n    t.Start();\n    string newTypeName = \"Structural Wall 25cm\";\n    WallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\n    if (wallTypeToDuplicate != null)\n    {\n        WallType newWallType = wallTypeToDuplicate.Duplicate(newTypeName) as WallType;\n        if (newWallType != null)\n        {\n            CompoundStructure cs = newWallType.GetCompoundStructure();\n            int coreLayerIndex = cs.GetFirstCoreLayerIndex();\n            cs.SetLayerFunction(coreLayerIndex, MaterialFunctionAssignment.Structure);\n            cs.SetLayerWidth(coreLayerIndex, 0.25 \/ 0.3048);\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Elimina todos los tipos de muro no utilizados en el proyecto.","completion":"ICollection<ElementId> allWallTypes = new FilteredElementCollector(doc).OfClass(typeof(WallType)).ToElementIds();\nICollection<ElementId> usedWallTypes = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Select(w => w.GetTypeId()).Distinct().ToList();\nList<ElementId> unusedWallTypes = allWallTypes.Except(usedWallTypes).ToList();\nif (unusedWallTypes.Any())\n{\n    doc.Delete(unusedWallTypes);\n}"}
{"prompt":"Create a new 25cm wall type named 'Structural Wall 25cm'.","completion":"using (Transaction t = new Transaction(doc, \"Create Wall Type\"))\n{\n    t.Start();\n    string newTypeName = \"Structural Wall 25cm\";\n    WallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\n    if (wallTypeToDuplicate != null)\n    {\n        WallType newWallType = wallTypeToDuplicate.Duplicate(newTypeName) as WallType;\n        if (newWallType != null)\n        {\n            CompoundStructure cs = newWallType.GetCompoundStructure();\n            int coreLayerIndex = cs.GetFirstCoreLayerIndex();\n            cs.SetLayerFunction(coreLayerIndex, MaterialFunctionAssignment.Structure);\n            cs.SetLayerWidth(coreLayerIndex, 0.25 \/ 0.3048);\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Construct a new level 'Level 1' at an elevation of 10 meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Level 1\";\n}"}
{"prompt":"Fetch a list of all plan views in the project.","completion":"List<ViewPlan> planViews = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().Where(v => !v.IsTemplate).ToList();"}
{"prompt":"Create a new door type named 'FR-90 Door' and set its fire rating to '90 min'.","completion":"string newTypeName = \"FR-90 Door\";\nFamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (doorTypeToDuplicate != null)\n{\n    FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\n    if (newDoorType != null)\n    {\n        Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n        if (fireRatingParam != null && !fireRatingParam.IsReadOnly) fireRatingParam.Set(\"90 min\");\n    }\n}"}
{"prompt":"Attach a reference point at coordinates (1,5,4) inside the family editor.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(1,5,4));"}
{"prompt":"Obtén el espacio MEP asociado a la habitación 'Oficina 103'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Cast<Room>().FirstOrDefault(r => r.Name == \"Oficina 103\");\nList<Space> spaces = new List<Space>();\n\nif (room != null)\n{\n    spaces = new FilteredElementCollector(doc).OfClass(typeof(Space)).Cast<Space>().Where(s => s.Room != null && s.Room.Id == room.Id).ToList();\n}"}
{"prompt":"Exporta el modelo actual a un archivo NWC.","completion":"string folderPath = \"C:\/exports\/\";\nstring fileName = doc.Title + \".nwc\";\nNavisworksExportOptions options = new NavisworksExportOptions();\noptions.ExportScope = NavisworksExportScope.Model;\ndoc.Export(folderPath, fileName, options);"}
{"prompt":"Apply a red color to all windows in the active view.","completion":"View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    OverrideGraphicSettings ogs = new OverrideGraphicSettings();\n    ogs.SetProjectionLineColor(new Color(255, 0, 0));\n    ICollection<ElementId> windows = new FilteredElementCollector(doc, activeView.Id).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().ToElementIds();\n    \n    foreach (ElementId windowId in windows)\n    {\n        activeView.SetElementOverrides(windowId, ogs);\n    }\n}"}
{"prompt":"Crea una nueva hoja A2 con el número 'A-201'.","completion":"string sheetNumber = \"A-201\";\nFamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (titleBlock != null)\n{\n    ViewSheet sheet = ViewSheet.Create(doc, titleBlock.Id);\n    if (sheet != null)\n    {\n        sheet.Name = \"Detalles Constructivos\";\n        sheet.SheetNumber = sheetNumber;\n    }\n}"}
{"prompt":"Crea una vista de planta para el 'Nivel 5'.","completion":"string levelName = \"Nivel 5\";\nLevel level3 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.FloorPlan);\n\nif (level3 != null && vft != null)\n{\n    ViewPlan viewPlan = ViewPlan.Create(doc, vft.Id, level3.Id);\n}"}
{"prompt":"Build a section view using a 10x10x3 meter box.","completion":"ViewFamilyType sectionVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(vft => vft.ViewFamily == ViewFamily.Section);\n\nif (sectionVFT != null)\n{\n    XYZ min = new XYZ(0, 0, 0);\n    XYZ max = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters));\n    BoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\n    sectionBox.Min = min;\n    sectionBox.Max = max;\n    ViewSection.CreateSection(doc, sectionVFT.Id, sectionBox);\n}"}
{"prompt":"Build a 20x15 meter foundation slab.","completion":"using (Transaction t = new Transaction(doc, \"Create Foundation Slab\"))\n{\n    t.Start();\n    Level foundationLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderBy(l => l.Elevation).FirstOrDefault();\n    FloorType slabType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.get_Parameter(BuiltInParameter.FLOOR_PARAM_IS_STRUCTURAL).AsInteger() == 1);\n\n    if (foundationLevel != null && slabType != null)\n    {\n        XYZ p1 = new XYZ(0,0,0);\n        XYZ p2 = new XYZ(20\/0.3048, 0, 0);\n        XYZ p3 = new XYZ(20\/0.3048, 15\/0.3048, 0);\n        XYZ p4 = new XYZ(0, 15\/0.3048, 0);\n        CurveLoop profile = new CurveLoop();\n        profile.Append(Line.CreateBound(p1,p2));\n        profile.Append(Line.CreateBound(p2,p3));\n        profile.Append(Line.CreateBound(p3,p4));\n        profile.Append(Line.CreateBound(p4,p1));\n        Floor.Create(doc, new List<CurveLoop>{profile}, slabType.Id, foundationLevel.Id);\n    }\n    t.Commit();\n}"}
{"prompt":"Create a wall on Level 1 from (0,0,0) to (5,0,0) with a height of 5 meters.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (level1 != null && wallType != null)\n{\n    Line wallCurve = Line.CreateBound(new XYZ(0, 0, 0), new XYZ(5, 0, 0));\n    double height = UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters);\n    Wall.Create(doc, wallCurve, wallType.Id, level1.Id, height, 0.0, false, false);\n}"}
{"prompt":"Crea un muro en el Nivel 1 que vaya de (0,0,0) a (10,0,0) con una altura de 4 metros.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (level1 != null && wallType != null)\n{\n    XYZ p1 = new XYZ(0, 0, 0);\n    XYZ p2 = new XYZ(10, 0, 0);\n    Line wallCurve = Line.CreateBound(p1, p2);\n    double height = UnitUtils.ConvertToInternalUnits(4, UnitTypeId.Meters);\n    Wall.Create(doc, wallCurve, wallType.Id, level1.Id, height, 0.0, false, false);\n}"}
{"prompt":"Crea un nuevo nivel llamado 'Mezzanine' a 7.5 metros de elevación.","completion":"string levelName = \"Mezzanine\";\ndouble elevation = UnitUtils.ConvertToInternalUnits(7.5, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Incorpora un punto de referencia en las coordenadas (1,4,4) dentro del editor de familias.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(1,4,4));"}
{"prompt":"Crea una escalera entre Nivel 1 y Nivel 2.","completion":"Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel 1\");\nLevel topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel 2\");\n\nif (bottomLevel != null && topLevel != null)\n{\n    \/\/ TODO: Stairs.Create(doc, bottomLevel.Id, topLevel.Id); is not a valid Revit API call.\n    \/\/ Stairs creation requires using the StairsEditScope class.\n}"}
{"prompt":"Generate a 5x5 column grid with 8-meter spacing.","completion":"FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (columnSymbol != null && level != null)\n{\n    if(!columnSymbol.IsActive) columnSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters);\n    for(int i=0; i<5; i++)\n    {\n        for(int j=0; j<5; j++)\n        {\n            doc.Create.NewFamilyInstance(new XYZ(i*spacing, j*spacing, 0), columnSymbol, level, StructuralType.Column);\n        }\n    }\n}"}
{"prompt":"Crea un DirectShape esférico con un radio de 5 metros.","completion":"using (Transaction t = new Transaction(doc, \"Create Sphere DirectShape\"))\n{\n    t.Start();\n    double radius = 5 \/ 0.3048;\n    List<GeometryObject> solids = new List<GeometryObject>();\n    Frame frame = new Frame(XYZ.Zero, XYZ.BasisX, XYZ.BasisY, XYZ.BasisZ);\n    Arc arc = Arc.Create(frame.Origin, radius, 0, Math.PI, frame.BasisX, frame.BasisY);\n    Line line = Line.CreateBound(arc.GetEndPoint(1), arc.GetEndPoint(0));\n    CurveLoop profile = CurveLoop.Create(new List<Curve> { arc, line });\n    Solid sphere = GeometryCreationUtilities.CreateRevolvedGeometry(frame, new List<CurveLoop> { profile }, 0, 2 * Math.PI);\n    solids.Add(sphere);\n    DirectShape ds = DirectShape.CreateElement(doc, new ElementId(BuiltInCategory.OST_GenericModel));\n\n    if (ds != null)\n    {\n        ds.SetShape(solids);\n        ds.Name = \"Esfera DirectShape\";\n    }\n    t.Commit();\n}"}
{"prompt":"Duplica la vista activa y ponle el nombre 'Vista Duplicada'.","completion":"View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    ElementId newViewId = activeView.Duplicate(ViewDuplicateOption.Duplicate);\n    View newView = doc.GetElement(newViewId) as View;\n    if (newView != null)\n    {\n        newView.Name = \"Vista Duplicada\";\n    }\n}"}
{"prompt":"Configure the sill height of all windows to 904mm.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits(904, UnitTypeId.Millimeters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Establece el parámetro 'Marca' de todos los muros seleccionados a 'M-EXT-01'.","completion":"using (Transaction t = new Transaction(doc, \"Set Wall Mark\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    ICollection<ElementId> selectedIds = localUidoc.Selection.GetElementIds();\n\n    if (selectedIds != null && selectedIds.Count > 0)\n    {\n        foreach(ElementId id in selectedIds)\n        {\n            Element elem = doc.GetElement(id);\n            if(elem is Wall)\n            {\n                Parameter markParam = elem.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n                if (markParam != null && !markParam.IsReadOnly) markParam.Set(\"M-EXT-01\");\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Rota el norte del proyecto 30 grados en sentido horario.","completion":"using (Transaction t = new Transaction(doc, \"Rotate Project North\"))\n{\n    t.Start();\n    BasePoint projectBasePoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(bp => !bp.IsShared);\n\n    if (projectBasePoint != null)\n    {\n        double angleInDegrees = 30.0;\n        double angleInRadians = -(angleInDegrees * Math.PI \/ 180.0);\n        using (var bbox = projectBasePoint.get_BoundingBox(null))\n        {\n          if (bbox != null)\n          {\n            XYZ center = bbox.Min;\n            Line axis = Line.CreateBound(center, center + XYZ.BasisZ);\n            ElementTransformUtils.RotateElement(doc, projectBasePoint.Id, axis, angleInRadians);\n          }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Align the centerlines of two user-selected walls.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference r1 = uidoc.Selection.PickObject(ObjectType.Element, \"Select the first wall (the one that will move)\");\nReference r2 = uidoc.Selection.PickObject(ObjectType.Element, \"Select the second wall (the reference)\");\n\nif (r1 != null && r2 != null)\n{\n    Wall w1 = doc.GetElement(r1) as Wall;\n    Wall w2 = doc.GetElement(r2) as Wall;\n    View activeView = doc.ActiveView;\n\n    if (w1 != null && w2 != null && activeView != null)\n    {\n        LocationCurve lc1 = w1.Location as LocationCurve;\n        LocationCurve lc2 = w2.Location as LocationCurve;\n        if (lc1 != null && lc2 != null)\n        {\n            doc.Create.NewAlignment(activeView, lc1.Curve.Reference, lc2.Curve.Reference);\n        }\n    }\n}"}
{"prompt":"Cambia el tipo de todos los muros seleccionados a 'Muro Exterior'.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nWallType targetWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Name == \"Muro Exterior\");\n\nif (selectedIds.Count > 0 && targetWallType != null)\n{\n    foreach(ElementId id in selectedIds)\n    {\n        Wall wall = doc.GetElement(id) as Wall;\n        if(wall != null) wall.ChangeTypeId(targetWallType.Id);\n    }\n}"}
{"prompt":"Define a view filter to hide detail lines.","completion":"string filterName = \"Hide Detail Lines\";\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    ICollection<ElementId> catsToHide = new List<ElementId>{new ElementId(BuiltInCategory.OST_Lines)};\n    ElementFilter filter = new ElementCategoryFilter(new ElementId(BuiltInCategory.OST_Lines));\n    ParameterFilterElement pfe = ParameterFilterElement.Create(doc, filterName, catsToHide, filter);\n    \n    if (pfe != null)\n    {\n        activeView.AddFilter(pfe.Id);\n        activeView.SetFilterVisibility(pfe.Id, false);\n    }\n}"}
{"prompt":"Crea un nuevo tipo de muro de 28cm llamado 'Interiores'.","completion":"WallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif(wallTypeToDuplicate != null)\n{\n    WallType newWallType = null;\n    try { newWallType = wallTypeToDuplicate.Duplicate(\"Interiores\") as WallType; } catch {}\n    if(newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if(cs != null && cs.GetLayers().Any())\n        {\n            int coreLayerIndex = cs.GetFirstCoreLayerIndex();\n            if(coreLayerIndex != -1) \n            {\n                cs.SetLayerFunction(coreLayerIndex, MaterialFunctionAssignment.Structure);\n                cs.SetLayerWidth(coreLayerIndex, UnitUtils.ConvertToInternalUnits(28, UnitTypeId.Centimeters));\n                newWallType.SetCompoundStructure(cs);\n            }\n        }\n    }\n}"}
{"prompt":"Inserta refuerzo a una columna.","completion":"RebarBarType barType = new FilteredElementCollector(doc).OfClass(typeof(RebarBarType)).FirstOrDefault() as RebarBarType;\nRebarShape shape = new FilteredElementCollector(doc).OfClass(typeof(RebarShape)).FirstOrDefault() as RebarShape;\nFamilyInstance column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\n\nif (barType != null && shape != null && column != null)\n{\n    \/\/ Para simplificar, asume que la columna tiene una LocationPoint y una Transform válida.\n    \/\/ Para mayor robustez, se podría validar column.Location y column.GetTransform().\n    Rebar.CreateFromRebarShape(doc, shape, barType, column, column.GetTransform().Origin, XYZ.BasisX, XYZ.BasisY);\n}"}
{"prompt":"Create a global length parameter named 'CorridorWidth' with a value of 0.5m.","completion":"string paramName = \"CorridorWidth\";\nGlobalParameter gp = GlobalParameter.Create(doc, paramName, SpecTypeId.Length);\n\nif (gp != null)\n{\n    gp.SetValue(new DoubleParameterValue(UnitUtils.ConvertToInternalUnits(0.5, UnitTypeId.Meters)));\n}"}
{"prompt":"Crea una retícula de ejes estructurales de 40x25 metros, con ejes longitudinales cada 8 metros y transversales cada 12.5 metros.","completion":"double length = UnitUtils.ConvertToInternalUnits(40, UnitTypeId.Meters);\ndouble width = UnitUtils.ConvertToInternalUnits(25, UnitTypeId.Meters);\ndouble spacingX = UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters);\ndouble spacingY = UnitUtils.ConvertToInternalUnits(12.5, UnitTypeId.Meters);\n\nfor (double y = 0; y <= width; y += spacingY)\n{\n    Line line = Line.CreateBound(new XYZ(0, y, 0), new XYZ(length, y, 0));\n    Grid.Create(doc, line);\n}\n\nfor (double x = 0; x <= length; x += spacingX)\n{\n    Line line = Line.CreateBound(new XYZ(x, 0, 0), new XYZ(x, width, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Add a reference point at coordinates (1,1,8) inside the family editor.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(1,1,8));"}
{"prompt":"Crea un nuevo tipo de puerta llamado 'Puerta RF-90' y establece su resistencia al fuego a '90 min'.","completion":"using (Transaction t = new Transaction(doc, \"Create Door Type\"))\n{\n    t.Start();\n    string newTypeName = \"Puerta RF-90\";\n    FamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n    if (doorTypeToDuplicate != null)\n    {\n        FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\n        if (newDoorType != null)\n        {\n            Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n            if(fireRatingParam != null && !fireRatingParam.IsReadOnly)\n            {\n                fireRatingParam.Set(\"90 min\");\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Put an instance of the 'Office Desk' family in the center of the 'Office 106' room.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Office 106\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Office Desk\") as FamilySymbol;\nif(furnitureSymbol != null && !furnitureSymbol.IsActive) furnitureSymbol.Activate();\nif(room != null)\n{\n    LocationPoint roomCenter = room.Location as LocationPoint;\n    if(roomCenter != null && furnitureSymbol != null && room.Level != null)\n    {\n        doc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Copia la vista 'Losa 100' como una vista dependiente.","completion":"ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v => v.Name == \"Losa 100\") as ViewPlan;\n\nif (viewToDuplicate != null)\n{\n    ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n}"}
{"prompt":"Generate a Path of Travel between points (1,1) and (10,10) in the plan view.","completion":"\/\/ PathOfTravel.Create is likely inaccessible in this environment.\n\/\/ A comment is left as a placeholder for the intended functionality.\n\/*\nusing (Transaction t = new Transaction(doc, \"Create Path of Travel\"))\n{\n    t.Start();\n    ViewPlan viewPlan = doc.ActiveView as ViewPlan;\n\n    if (viewPlan != null && viewPlan.ViewType == ViewType.FloorPlan)\n    {\n        ElementId levelId = viewPlan.get_Parameter(BuiltInParameter.PLAN_VIEW_LEVEL).AsElementId();\n        Level level = doc.GetElement(levelId) as Level;\n        if (level != null)\n        {\n            XYZ startPoint = new XYZ(1 \/ 0.3048, 1 \/ 0.3048, level.Elevation);\n            XYZ endPoint = new XYZ(10 \/ 0.3048, 10 \/ 0.3048, level.Elevation);\n            \/\/ PathOfTravel.Create(viewPlan, startPoint, endPoint);\n        }\n    }\n    t.Commit();\n}\n*\/"}
{"prompt":"Activa todos los símbolos de familia cargados en el proyecto.","completion":"List<FamilySymbol> symbols = new FilteredElementCollector(doc).OfClass(typeof(FamilySymbol)).Cast<FamilySymbol>().ToList();\nforeach (var sym in symbols)\n{\n    if (!sym.IsActive) \n    {\n        sym.Activate();\n    }\n}"}
{"prompt":"Alinea las líneas de centro de dos muros seleccionados por el usuario.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference r1 = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona el primer muro (el que se moverá)\");\nReference r2 = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona el segundo muro (el de referencia)\");\n\nif (r1 != null && r2 != null)\n{\n    Wall w1 = doc.GetElement(r1) as Wall;\n    Wall w2 = doc.GetElement(r2) as Wall;\n    View activeView = doc.ActiveView;\n\n    if (w1 != null && w2 != null && activeView != null)\n    {\n        LocationCurve lc1 = w1.Location as LocationCurve;\n        LocationCurve lc2 = w2.Location as LocationCurve;\n        if (lc1 != null && lc2 != null)\n        {\n            doc.Create.NewAlignment(activeView, lc1.Curve.Reference, lc2.Curve.Reference);\n        }\n    }\n}"}
{"prompt":"Establece el parámetro 'Comentarios' de todas las puertas del Nivel 1 a 'Clasificación Fuego - 93 min'.","completion":"using(Transaction t = new Transaction(doc, \"Set Door Comments\"))\n{\n    t.Start();\n    Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel 1\");\n    if(level1 != null)\n    {\n        List<FamilyInstance> doorsOnLevel1 = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsNotElementType().Cast<FamilyInstance>().Where(fi => fi.LevelId.Equals(level1.Id)).ToList();\n        foreach(FamilyInstance door in doorsOnLevel1)\n        {\n            Parameter commentsParam = door.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n            if(commentsParam != null && !commentsParam.IsReadOnly)\n            {\n                commentsParam.Set(\"Clasificación Fuego - 93 min\");\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Dibuja una región rellena con patrón diagonal.","completion":"using (Transaction t = new Transaction(doc, \"Draw Filled Region\"))\n{\n    t.Start();\n    View activeView = doc.ActiveView;\n    FillPatternElement fillPattern = new FilteredElementCollector(doc).OfClass(typeof(FillPatternElement)).Cast<FillPatternElement>().FirstOrDefault(p => !p.GetFillPattern().IsSolidFill);\n    if (activeView != null && fillPattern != null)\n    {\n        FilledRegionType filledRegionType = new FilteredElementCollector(doc, activeView.Id).OfClass(typeof(FilledRegionType)).FirstOrDefault() as FilledRegionType;\n        if (filledRegionType != null)\n        {\n            FilledRegionType newType = filledRegionType.Duplicate(\"Temp Diagonal Region\") as FilledRegionType;\n            if (newType != null)\n            {\n                newType.ForegroundPatternId = fillPattern.Id;\n                CurveLoop profile = new CurveLoop();\n                profile.Append(Line.CreateBound(new XYZ(0, 0, 0), new XYZ(5, 0, 0)));\n                profile.Append(Line.CreateBound(new XYZ(5, 0, 0), new XYZ(5, 5, 0)));\n                profile.Append(Line.CreateBound(new XYZ(5, 5, 0), new XYZ(0, 5, 0)));\n                profile.Append(Line.CreateBound(new XYZ(0, 5, 0), new XYZ(0, 0, 0)));\n                FilledRegion.Create(doc, newType.Id, activeView.Id, new List<CurveLoop> { profile });\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Recupera todas las habitaciones que están en el Nivel 3","completion":"string levelName = \"Nivel 3\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(targetLevel.Id);\n    FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WherePasses(levelFilter);\n    uidoc.Selection.SetElementIds(collector.ToElementIds());\n}"}
{"prompt":"Generate an assembly from the selected elements.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds != null && selectedIds.Count > 0)\n{\n    AssemblyInstance assemblyInstance = AssemblyInstance.Create(doc, selectedIds, new ElementId(BuiltInCategory.OST_Assemblies));\n    if (assemblyInstance != null)\n    {\n        assemblyInstance.Name = \"New Assembly\";\n    }\n}"}
{"prompt":"Conecta dos tuberías seleccionadas por el usuario con un codo.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference ref1 = uidoc.Selection.PickObject(ObjectType.Element, \"Select the first pipe\");\nReference ref2 = uidoc.Selection.PickObject(ObjectType.Element, \"Select the second pipe\");\nif (ref1 != null && ref2 != null)\n{\n    Pipe pipe1 = doc.GetElement(ref1) as Pipe;\n    Pipe pipe2 = doc.GetElement(ref2) as Pipe;\n    if (pipe1 != null && pipe2 != null)\n    {\n        Connector c1 = pipe1.ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n        Connector c2 = pipe2.ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n        if (c1 != null && c2 != null)\n        {\n            doc.Create.NewElbowFitting(c1, c2);\n        }\n    }\n}"}
{"prompt":"Ajusta el nombre de todas las tablas que contienen 'Puertas' por 'Listado de Puertas'.","completion":"List<ViewSchedule> schedules = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().Where(vs => vs.Name.Contains(\"Puertas\")).ToList();\nforeach(ViewSchedule schedule in schedules)\n{\n    schedule.Name = schedule.Name.Replace(\"Puertas\", \"Listado de Puertas\");\n}"}
{"prompt":"Vira un elemento seleccionado 93 grados sobre su eje Z.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un elemento para rotar\");\nElement elem = doc.GetElement(pickedRef.ElementId);\nLocationPoint lp = elem.Location as LocationPoint;\nLine axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\nElementTransformUtils.RotateElement(doc, elem.Id, axis, Math.PI \/ 93);"}
{"prompt":"Create an assembly from the selected elements.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds != null && selectedIds.Count > 0)\n{\n    AssemblyInstance assemblyInstance = AssemblyInstance.Create(doc, selectedIds, new ElementId(BuiltInCategory.OST_Assemblies));\n    if (assemblyInstance != null)\n    {\n        assemblyInstance.Name = \"New Assembly\";\n    }\n}"}
{"prompt":"Crea un nuevo nivel 'Nivel 3' a una elevación de 12 metros.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(12, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Nivel 3\";\n}"}
{"prompt":"Find all doors on Level 1 using a combined filter.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nList<Element> doors = new List<Element>();\n\nif (level1 != null)\n{\n    ElementCategoryFilter categoryFilter = new ElementCategoryFilter(BuiltInCategory.OST_Doors);\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level1.Id);\n    LogicalAndFilter combinedFilter = new LogicalAndFilter(categoryFilter, levelFilter);\n    doors = new FilteredElementCollector(doc).WherePasses(combinedFilter).ToList();\n}"}
{"prompt":"Crea un filtro de vista para ocultar muros demolidos.","completion":"using (Transaction t = new Transaction(doc, \"Create Demolition Filter\"))\n{\n    t.Start();\n    Phase demolishedPhase = new FilteredElementCollector(doc).OfClass(typeof(Phase)).Cast<Phase>().FirstOrDefault(p => p.Name.Contains(\"Demolished\") || p.Name.Contains(\"Demolición\"));\n    View activeView = doc.ActiveView;\n\n    if (demolishedPhase != null && activeView != null)\n    {\n        ElementId paramId = new ElementId(BuiltInParameter.PHASE_DEMOLISHED);\n        FilterRule rule = ParameterFilterRuleFactory.CreateEqualsRule(paramId, demolishedPhase.Id);\n        ElementFilter filter = new ElementParameterFilter(rule);\n        ICollection<ElementId> categories = new List<ElementId>{ new ElementId(BuiltInCategory.OST_Walls) };\n        ParameterFilterElement pfe = ParameterFilterElement.Create(doc, \"Filtro Demolición\", categories, filter);\n        \n        if (pfe != null)\n        {\n            activeView.AddFilter(pfe.Id);\n            activeView.SetFilterVisibility(pfe.Id, false);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Generate a new Level named 'Level 1' at an elevation of 10 meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Level 1\";\n}"}
{"prompt":"Permite al usuario seleccionar un muro y obtén su ElementId.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un muro\");\nElementId selectedWallId = ElementId.InvalidElementId;\nif (pickedRef != null)\n{\n    selectedWallId = pickedRef.ElementId;\n}"}
{"prompt":"Create a spherical DirectShape with a 5-meter radius.","completion":"using (Transaction t = new Transaction(doc, \"Create Sphere DirectShape\"))\n{\n    t.Start();\n    double radius = 5 \/ 0.3048;\n    List<GeometryObject> solids = new List<GeometryObject>();\n    Frame frame = new Frame(XYZ.Zero, XYZ.BasisX, XYZ.BasisY, XYZ.BasisZ);\n    Arc arc = Arc.Create(frame.Origin, radius, 0, Math.PI, frame.BasisX, frame.BasisY);\n    Line line = Line.CreateBound(arc.GetEndPoint(1), arc.GetEndPoint(0));\n    CurveLoop profile = CurveLoop.Create(new List<Curve> { arc, line });\n    Solid sphere = GeometryCreationUtilities.CreateRevolvedGeometry(frame, new List<CurveLoop> { profile }, 0, 2 * Math.PI);\n    solids.Add(sphere);\n    DirectShape ds = DirectShape.CreateElement(doc, new ElementId(BuiltInCategory.OST_GenericModel));\n\n    if (ds != null)\n    {\n        ds.SetShape(solids);\n        ds.Name = \"Sphere DirectShape\";\n    }\n    t.Commit();\n}"}
{"prompt":"Set the sill height of all windows to 903mm.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits(903, UnitTypeId.Millimeters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Create a new wall type 'Generic Wall 300mm' with a thickness of 30cm.","completion":"string newTypeName = \"Generic Wall 300mm\";\nWallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif(oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(newTypeName) as WallType;\n    if(newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if(cs != null)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(300, UnitTypeId.Millimeters));\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n}"}
{"prompt":"Construct a new level named 'Basement Floor' at an elevation of 0.1 meters.","completion":"string levelName = \"Basement Floor\";\ndouble elevationInternal = UnitUtils.ConvertToInternalUnits(0.1, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevationInternal);\nnewLevel.Name = levelName;"}
{"prompt":"Mueve un elemento seleccionado a la posición (9,8).","completion":"ICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nElementId selectedId = selectedIds.FirstOrDefault();\nif (selectedId != null && selectedId != ElementId.InvalidElementId)\n{\n    Element elem = doc.GetElement(selectedId);\n    if (elem != null)\n    {\n        LocationPoint lp = elem.Location as LocationPoint;\n        if (lp != null)\n        {\n            XYZ currentPoint = lp.Point;\n            XYZ newPosition = new XYZ(9, 8, currentPoint.Z);\n            XYZ translation = newPosition - currentPoint;\n            ElementTransformUtils.MoveElement(doc, elem.Id, translation);\n        }\n    }\n}"}
{"prompt":"Generate a stair between Level 2 and Level 3","completion":"\/\/ This is a complex operation that requires multiple steps and\/or user interaction and is not supported by the agent."}
{"prompt":"Fija el elemento seleccionado para que no se mueva.","completion":"UIDocument uidoc = new UIDocument(doc);\nElementId selectedId = uidoc.Selection.GetElementIds().FirstOrDefault();\n\nif (selectedId != ElementId.InvalidElementId)\n{\n    Element elementToPin = doc.GetElement(selectedId);\n    if (elementToPin != null)\n    {\n        elementToPin.Pinned = true;\n    }\n}"}
{"prompt":"Recupera las coordenadas del punto base y del punto de reconocimiento.","completion":"BasePoint surveyPoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(p => p.IsShared);\nBasePoint projectBasePoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(p => !p.IsShared);\n\nXYZ surveyCoords = null;\nif (surveyPoint != null) surveyCoords = surveyPoint.get_BoundingBox(null).Min;\n\nXYZ projectCoords = null;\nif (projectBasePoint != null) projectCoords = projectBasePoint.get_BoundingBox(null).Min;"}
{"prompt":"Construct an MEP space for each room on Level 2","completion":"string levelName = \"Level 2\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    FilteredElementCollector roomCollector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WherePasses(new ElementLevelFilter(targetLevel.Id));\n    foreach (Room room in roomCollector.ToElements().Cast<Room>())\n    {\n        LocationPoint locPoint = room.Location as LocationPoint;\n        if (locPoint != null)\n        {\n            UV point = new UV(locPoint.Point.X, locPoint.Point.Y);\n            doc.Create.NewSpace(targetLevel, point);\n        }\n    }\n}"}
{"prompt":"Recupera el espacio MEP asociado a la habitación 'Oficina 104'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Cast<Room>().FirstOrDefault(r => r.Name == \"Oficina 104\");\nList<Space> spaces = new List<Space>();\n\nif (room != null)\n{\n    spaces = new FilteredElementCollector(doc).OfClass(typeof(Space)).Cast<Space>().Where(s => s.Room != null && s.Room.Id == room.Id).ToList();\n}"}
{"prompt":"Copy all elements from Level 1 to Level 2.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nLevel level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 2\") as Level;\n\nif (level1 != null && level2 != null)\n{\n    ICollection<ElementId> elementsToCopy = new FilteredElementCollector(doc, level1.Id).WhereElementIsNotElementType().ToElementIds();\n    double elevationDiff = level2.ProjectElevation - level1.ProjectElevation;\n    XYZ translation = new XYZ(0, 0, elevationDiff);\n    if (elementsToCopy.Count > 0)\n    {\n        ElementTransformUtils.CopyElements(doc, elementsToCopy, translation);\n    }\n}"}
{"prompt":"Hide the elements I have selected.","completion":"ICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nView activeView = doc.ActiveView;\n\nif (activeView != null && selectedIds.Any())\n{\n    activeView.HideElements(selectedIds);\n}"}
{"prompt":"Create perimeter walls along the exterior grid lines, 30 feet high on Level 1, using 'Generic - 8\"' wall type.","completion":"WallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == \"Generic - 8\\\"\") as WallType;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\n\nFilteredElementCollector gridCollector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Grids).WhereElementIsNotElementType();\nIList<Grid> grids = gridCollector.Cast<Grid>().ToList();\n\nif (wallType != null && level != null && grids.Any())\n{\n    \/\/ Simplified rectangular perimeter from grid extents\n    XYZ min = new XYZ(grids.Min(g => g.Curve.GetEndPoint(0).X), grids.Min(g => g.Curve.GetEndPoint(0).Y), 0);\n    XYZ max = new XYZ(grids.Max(g => g.Curve.GetEndPoint(1).X), grids.Max(g => g.Curve.GetEndPoint(1).Y), 0);\n\n    XYZ p1 = new XYZ(min.X, min.Y, 0);\n    XYZ p2 = new XYZ(max.X, min.Y, 0);\n    XYZ p3 = new XYZ(max.X, max.Y, 0);\n    XYZ p4 = new XYZ(min.X, max.Y, 0);\n    \n    double height = 30.0;\n\n    Wall.Create(doc, Line.CreateBound(p1, p2), wallType.Id, level.Id, height, 0.0, false, false);\n    Wall.Create(doc, Line.CreateBound(p2, p3), wallType.Id, level.Id, height, 0.0, false, false);\n    Wall.Create(doc, Line.CreateBound(p3, p4), wallType.Id, level.Id, height, 0.0, false, false);\n    Wall.Create(doc, Line.CreateBound(p4, p1), wallType.Id, level.Id, height, 0.0, false, false);\n}"}
{"prompt":"Modifica el tipo de una losa por uno que contenga 'Acero'.","completion":"Floor floorToChange = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault() as Floor;\nFloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name.Contains(\"Acero\") || ft.Name.Contains(\"Concrete\"));\n\nif (floorToChange != null && newType != null)\n{\n    floorToChange.ChangeTypeId(newType.Id);\n}"}
{"prompt":"Assign all walls to the 'Structure' workset.","completion":"using (Transaction t = new Transaction(doc, \"Assign to Workset\"))\n{\n    t.Start();\n    if (doc.IsWorkshared)\n    {\n        Workset ws = new FilteredWorksetCollector(doc).OfKind(WorksetKind.UserWorkset).FirstOrDefault(w => w.Name == \"Structure\");\n        if (ws != null)\n        {\n            FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType();\n            foreach (Element e in collector)\n            {\n                Parameter p = e.get_Parameter(BuiltInParameter.ELEM_PARTITION_PARAM);\n                if (p != null && !p.IsReadOnly)\n                {\n                    p.Set(ws.Id.IntegerValue);\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Get a list of all annotation families.","completion":"List<Family> annotationFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.CategoryType == CategoryType.Annotation).ToList();\n"}
{"prompt":"Incorpora un punto de referencia en las coordenadas (6,2,5) dentro del editor de familias.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(6,2,5));"}
{"prompt":"Append a reference point at coordinates (4,7,1) inside the family editor.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(4,7,1));"}
{"prompt":"Exporta todas las hojas de un conjunto a un único PDF.","completion":"ViewSheetSet sheetSet = new FilteredElementCollector(doc).OfClass(typeof(ViewSheetSet)).FirstOrDefault() as ViewSheetSet;\n\nif (sheetSet != null)\n{\n    string folderPath = \"C:\/RevitExports\/\";\n    PDFExportOptions options = new PDFExportOptions();\n    options.Combine = true;\n    options.FileName = sheetSet.Name;\n    List<ElementId> sheetIds = sheetSet.Views.Cast<ViewSheet>().Select(s => s.Id).ToList();\n    doc.Export(folderPath, sheetIds, options);\n}"}
{"prompt":"Encuentra el host de una luminaria basada en cara.","completion":"FamilyInstance lightFixture = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsNotElementType().Cast<FamilyInstance>().FirstOrDefault(fi => fi.HostFace != null);\n\nElement host = null;\nif (lightFixture != null)\n{\n    Reference hostFaceRef = lightFixture.HostFace;\n    if (hostFaceRef != null)\n    {\n        host = doc.GetElement(hostFaceRef.ElementId);\n    }\n}"}
{"prompt":"Reproduce el nivel 2 con un desfase de 5m y llámalo 'Mezanine'.","completion":"string levelName = \"Nivel 2\";\nLevel levelToCopy = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (levelToCopy != null)\n{\n    double offset = UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, levelToCopy.Elevation + offset);\n    newLevel.Name = \"Mezanine\";\n}"}
{"prompt":"Inserta una instancia de la familia 'Mesa de Oficina' en el centro de la habitación 'Despacho 105'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 105\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Mesa de Oficina\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);"}
{"prompt":"Oculta todos los muros que sean más cortos de 2 metros.","completion":"double lengthThreshold = UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\nList<Wall> walls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Cast<Wall>().ToList();\nList<ElementId> shortWallIds = new List<ElementId>();\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    foreach(Wall wall in walls)\n    {\n        Parameter lengthParam = wall.get_Parameter(BuiltInParameter.CURVE_ELEM_LENGTH);\n        if(lengthParam != null && lengthParam.HasValue && lengthParam.AsDouble() < lengthThreshold)\n        {\n            shortWallIds.Add(wall.Id);\n        }\n    }\n    if (shortWallIds.Count > 0)\n    {\n        activeView.HideElements(shortWallIds);\n    }\n}"}
{"prompt":"Generate a curtain wall 6 meters wide and 4 meters high.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nWallType cwType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Kind == WallKind.Curtain);\n\nif (level != null && cwType != null)\n{\n    Line baseLine = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits(6, UnitTypeId.Meters), 0, 0));\n    Wall.Create(doc, baseLine, cwType.Id, level.Id, UnitUtils.ConvertToInternalUnits(4.0, UnitTypeId.Meters), 0.0, false, false);\n}"}
{"prompt":"Create a new elevation view looking south.","completion":"using (Transaction t = new Transaction(doc, \"Create South Elevation\"))\n{\n    t.Start();\n    ViewFamilyType elevationVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(vft => vft.ViewFamily == ViewFamily.Elevation);\n    View activeView = doc.ActiveView;\n\n    if (elevationVFT != null && activeView != null)\n    {\n        ElevationMarker marker = ElevationMarker.CreateElevationMarker(doc, elevationVFT.Id, new XYZ(0, -20 \/ 0.3048, 0), 100);\n        \n        if (marker != null)\n        {\n            View aev = marker.CreateElevation(doc, activeView.Id, 0);\n            if (aev != null)\n            {\n                aev.Name = \"South Elevation\";\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Clone the 'Level 5' view as a dependent view.","completion":"ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v => v.Name == \"Level 5\") as ViewPlan;\n\nif (viewToDuplicate != null)\n{\n    ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n}"}
{"prompt":"Crea un nuevo nivel 'Nivel 3' a una elevación de 12 metros.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(12, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Nivel 3\";\n}"}
{"prompt":"Encuentra todos los pilares estructurales en el Nivel 6 que sean de hormigón.","completion":"string levelName = \"Nivel 6\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().WherePasses(new ElementLevelFilter(targetLevel.Id));\n    List<ElementId> concreteColumnIds = new List<ElementId>();\n    foreach (Element column in collector)\n    {\n        Parameter materialParam = column.get_Parameter(BuiltInParameter.STRUCTURAL_MATERIAL_PARAM);\n        if (materialParam != null && materialParam.HasValue)\n        {\n            ElementId materialId = materialParam.AsElementId();\n            if (materialId != ElementId.InvalidElementId)\n            {\n                Material material = doc.GetElement(materialId) as Material;\n                if (material != null && material.Name.ToLower().Contains(\"hormigón\"))\n                {\n                    concreteColumnIds.Add(column.Id);\n                }\n            }\n        }\n    }\n    uidoc.Selection.SetElementIds(concreteColumnIds);\n}"}
{"prompt":"Inserta una instancia de la familia 'Mesa de Oficina' en el centro de la habitación 'Despacho 96'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 96\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Mesa de Oficina\") as FamilySymbol;\nif(furnitureSymbol != null && !furnitureSymbol.IsActive) furnitureSymbol.Activate();\nif(room != null)\n{\n    LocationPoint roomCenter = room.Location as LocationPoint;\n    if(roomCenter != null && furnitureSymbol != null && room.Level != null)\n    {\n        doc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Recupera el espacio MEP asociado a la habitación 'Oficina 103'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Cast<Room>().FirstOrDefault(r => r.Name == \"Oficina 103\");\nList<Space> spaces = new List<Space>();\n\nif (room != null)\n{\n    spaces = new FilteredElementCollector(doc).OfClass(typeof(Space)).Cast<Space>().Where(s => s.Room != null && s.Room.Id == room.Id).ToList();\n}"}
{"prompt":"Create a new wall type 'Generic Wall 280mm' with a thickness of 28cm.","completion":"string newTypeName = \"Generic Wall 280mm\";\nWallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif (oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(newTypeName) as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(28, UnitTypeId.Centimeters));\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n}"}
{"prompt":"Crea un nuevo tipo de muro de 25cm llamado 'Muro Estructural 25cm'.","completion":"string newTypeName = \"Muro Estructural 25cm\";\nWallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif(wallTypeToDuplicate != null)\n{\n    WallType newWallType = wallTypeToDuplicate.Duplicate(newTypeName) as WallType;\n    if(newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if(cs != null)\n        {\n            int coreLayerIndex = cs.GetFirstCoreLayerIndex();\n            cs.SetLayerFunction(coreLayerIndex, MaterialFunctionAssignment.Structure);\n            cs.SetLayerWidth(coreLayerIndex, UnitUtils.ConvertToInternalUnits(0.25, UnitTypeId.Meters));\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n}"}
{"prompt":"Copia el nivel 5 con un desfase de 4m y llámalo 'Mezanine'.","completion":"string levelName = \"Nivel 5\";\nLevel levelToCopy = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (levelToCopy != null)\n{\n    double offset = UnitUtils.ConvertToInternalUnits(4, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, levelToCopy.Elevation + offset);\n    newLevel.Name = \"Mezanine\";\n}"}
{"prompt":"Generate a global length parameter named 'CorridorWidth' with a value of 0.6m.","completion":"string paramName = \"CorridorWidth\";\nGlobalParameter gp = GlobalParameter.Create(doc, paramName, SpecTypeId.Length);\n\nif (gp != null)\n{\n    gp.SetValue(new DoubleParameterValue(UnitUtils.ConvertToInternalUnits(0.6, UnitTypeId.Meters)));\n}"}
{"prompt":"Apply the 'X-Ray' visual style to the active 3D view.","completion":"View3D view3D = doc.ActiveView as View3D;\nif (view3D != null && !view3D.IsTemplate)\n{\n    view3D.DisplayStyle = DisplayStyle.Wireframe;\n}"}
{"prompt":"Inserta todos los elementos seleccionados en el workset 'Fachada'.","completion":"using (Transaction t = new Transaction(doc, \"Assign to Workset\"))\n{\n    t.Start();\n    if(doc.IsWorkshared)\n    {\n        UIDocument localUidoc = uidoc;\n        ICollection<ElementId> selectedIds = localUidoc.Selection.GetElementIds();\n        \n        Workset workset = new FilteredWorksetCollector(doc).OfKind(WorksetKind.UserWorkset).FirstOrDefault(ws => ws.Name == \"Fachada\");\n        if(workset == null) workset = Workset.Create(doc, \"Fachada\");\n\n        if (selectedIds != null && selectedIds.Count > 0 && workset != null)\n        {\n            foreach(ElementId id in selectedIds)\n            {\n                Element elem = doc.GetElement(id);\n                Parameter wsparam = elem.get_Parameter(BuiltInParameter.ELEM_PARTITION_PARAM);\n                if(wsparam != null && !wsparam.IsReadOnly) wsparam.Set(workset.Id.IntegerValue);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Delete all detail lines in the active view.","completion":"using (Transaction t = new Transaction(doc, \"Delete Detail Lines\"))\n{\n    t.Start();\n    if (doc.ActiveView != null)\n    {\n        ICollection<ElementId> detailLines = new FilteredElementCollector(doc, doc.ActiveView.Id).OfClass(typeof(DetailCurve)).ToElementIds();\n        if (detailLines.Count > 0)\n        {\n            doc.Delete(detailLines);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Añade refuerzo a una columna.","completion":"RebarBarType barType = new FilteredElementCollector(doc).OfClass(typeof(RebarBarType)).FirstOrDefault() as RebarBarType;\nRebarShape shape = new FilteredElementCollector(doc).OfClass(typeof(RebarShape)).FirstOrDefault() as RebarShape;\nFamilyInstance column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\n\nif (barType != null && shape != null && column != null)\n{\n    \/\/ Para simplificar, asume que la columna tiene una LocationPoint y una Transform válida.\n    \/\/ Para mayor robustez, se podría validar column.Location y column.GetTransform().\n    Rebar.CreateFromRebarShape(doc, shape, barType, column, column.GetTransform().Origin, XYZ.BasisX, XYZ.BasisY);\n}"}
{"prompt":"Create a new Level named 'Level 7' at an elevation of 8 meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Level 7\";\n}"}
{"prompt":"Insert an instance of the 'Office Desk' family in the center of the 'Office 98' room.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Office 98\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Office Desk\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);"}
{"prompt":"Crea un tipo de muro 'Muro-Doble' de 30cm y luego crea un muro de ese tipo.","completion":"string newTypeName = \"Muro-Doble\";\nWallType newWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == newTypeName) as WallType;\nif (newWallType == null)\n{\n    WallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n    if (wallTypeToDuplicate != null)\n    {\n        newWallType = wallTypeToDuplicate.Duplicate(newTypeName) as WallType;\n        if (newWallType != null)\n        {\n            CompoundStructure cs = newWallType.GetCompoundStructure();\n            if (cs != null)\n            {\n                cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(30, UnitTypeId.Centimeters));\n                newWallType.SetCompoundStructure(cs);\n            }\n        }\n    }\n}\n\nif (newWallType != null)\n{\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    if (level != null)\n    {\n        \/\/ Create a default 10ft long wall with a default 10ft height\n        Line wallCurve = Line.CreateBound(XYZ.Zero, new XYZ(10, 0, 0));\n        Wall.Create(doc, wallCurve, newWallType.Id, level.Id, 10.0, 0, false, false);\n    }\n}"}
{"prompt":"Create a structural beam between (1,1,1) and (1,1,3) on Level 2","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 2\") as Level;\nFamilySymbol beamType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (beamType != null && level != null)\n{\n    if(!beamType.IsActive) beamType.Activate();\n    XYZ start = new XYZ(1, 1, 1);\n    XYZ end = new XYZ(1, 1, 3);\n    if (start.IsAlmostEqualTo(end)) return;\n    Line beamCurve = Line.CreateBound(start, end);\n    doc.Create.NewFamilyInstance(beamCurve, beamType, level, Autodesk.Revit.DB.Structure.StructuralType.Beam);\n}"}
{"prompt":"Fetch all rooms on Level 3.","completion":"Level level3 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 3\") as Level;\nList<Element> roomsOnLevel3 = new List<Element>();\n\nif (level3 != null)\n{\n    roomsOnLevel3 = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Where(r => r.LevelId == level3.Id).ToList();\n}"}
{"prompt":"Construct a shaft opening that passes through from Level 1 to Level 3.","completion":"using (Transaction t = new Transaction(doc, \"Create Shaft Opening\"))\n{\n    t.Start();\n    Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 1\");\n    Level topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 3\");\n\n    if (bottomLevel != null && topLevel != null)\n    {\n        XYZ p1 = new XYZ(5 \/ 0.3048, 5 \/ 0.3048,0);\n        XYZ p2 = new XYZ(8 \/ 0.3048, 5 \/ 0.3048,0);\n        XYZ p3 = new XYZ(8 \/ 0.3048, 8 \/ 0.3048,0);\n        XYZ p4 = new XYZ(5 \/ 0.3048, 8 \/ 0.3048,0);\n        CurveArray profile = new CurveArray();\n        profile.Append(Line.CreateBound(p1,p2));\n        profile.Append(Line.CreateBound(p2,p3));\n        profile.Append(Line.CreateBound(p3,p4));\n        profile.Append(Line.CreateBound(p4,p1));\n        doc.Create.NewOpening(bottomLevel, topLevel, profile);\n    }\n    t.Commit();\n}"}
{"prompt":"Configure the 'Comments' parameter for all doors on Level 1 to 'Fire Rating - 90 min'.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\n\nif (level1 != null)\n{\n    List<FamilyInstance> doorsOnLevel1 = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsNotElementType().Cast<FamilyInstance>().Where(fi => fi.LevelId == level1.Id).ToList();\n    foreach(FamilyInstance door in doorsOnLevel1)\n    {\n        Parameter commentsParam = door.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n        if (commentsParam != null && !commentsParam.IsReadOnly) commentsParam.Set(\"Fire Rating - 90 min\");\n    }\n}"}
{"prompt":"Encuentra todos los muros que no tienen nivel base asignado.","completion":"ElementFilter unassociatedFilter = new ElementLevelFilter(ElementId.InvalidElementId);\nList<Element> unassignedWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(unassociatedFilter).ToList();"}
{"prompt":"Create a vertical shaft opening from the base level to the top level.","completion":"using (Transaction t = new Transaction(doc, \"Create Shaft\"))\n{\n    t.Start();\n    Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderBy(l => l.ProjectElevation).FirstOrDefault();\n    Level topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderByDescending(l => l.ProjectElevation).FirstOrDefault();\n\n    if (bottomLevel != null && topLevel != null)\n    {\n        XYZ p1 = new XYZ(2 \/ 0.3048, 2 \/ 0.3048,0);\n        XYZ p2 = new XYZ(5 \/ 0.3048, 2 \/ 0.3048,0);\n        XYZ p3 = new XYZ(5 \/ 0.3048, 5 \/ 0.3048,0);\n        XYZ p4 = new XYZ(2 \/ 0.3048, 5 \/ 0.3048,0);\n        CurveArray profile = new CurveArray();\n        profile.Append(Line.CreateBound(p1,p2));\n        profile.Append(Line.CreateBound(p2,p3));\n        profile.Append(Line.CreateBound(p3,p4));\n        profile.Append(Line.CreateBound(p4,p1));\n        doc.Create.NewOpening(bottomLevel, topLevel, profile);\n    }\n    t.Commit();\n}"}
{"prompt":"Construct a rectangular opening in a floor.","completion":"using (Transaction t = new Transaction(doc, \"Create Opening\"))\n{\n    t.Start();\n    Floor floor = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault() as Floor;\n\n    if (floor != null)\n    {\n        XYZ p1 = new XYZ(1 \/ 0.3048, 1 \/ 0.3048, 0);\n        XYZ p2 = new XYZ(3 \/ 0.3048, 1 \/ 0.3048, 0);\n        XYZ p3 = new XYZ(3 \/ 0.3048, 3 \/ 0.3048, 0);\n        XYZ p4 = new XYZ(1 \/ 0.3048, 3 \/ 0.3048, 0);\n        CurveArray profile = new CurveArray();\n        profile.Append(Line.CreateBound(p1, p2));\n        profile.Append(Line.CreateBound(p2, p3));\n        profile.Append(Line.CreateBound(p3, p4));\n        profile.Append(Line.CreateBound(p4, p1));\n        doc.Create.NewOpening(floor, profile, true);\n    }\n    t.Commit();\n}"}
{"prompt":"Create a new schedule for Structural Columns.","completion":"string scheduleName = \"Structural Column Schedule\";\nElementId categoryId = new ElementId(BuiltInCategory.OST_StructuralColumns);\nViewSchedule schedule = ViewSchedule.CreateSchedule(doc, categoryId);\nschedule.Name = scheduleName;"}
{"prompt":"Duplica el tipo de muro 'Genérico - 149mm' y nómbralo 'Interior - 18cm Yeso'.","completion":"string originalName = \"Genérico - 149mm\";\nstring newName = \"Interior - 18cm Yeso\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif (originalType != null)\n{\n    WallType newType = originalType.Duplicate(newName) as WallType;\n}"}
{"prompt":"Encuentra todas las puertas en el Nivel 1 usando un filtro combinado.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\nList<Element> doors = new List<Element>();\n\nif (level1 != null)\n{\n    ElementCategoryFilter categoryFilter = new ElementCategoryFilter(BuiltInCategory.OST_Doors);\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level1.Id);\n    LogicalAndFilter combinedFilter = new LogicalAndFilter(categoryFilter, levelFilter);\n    doors = new FilteredElementCollector(doc).WherePasses(combinedFilter).ToList();\n}"}
{"prompt":"Pivot a selected element 91 degrees around its Z-axis.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select an element to rotate\");\nElement elem = doc.GetElement(pickedRef.ElementId);\nLocationPoint lp = elem.Location as LocationPoint;\nLine axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\nElementTransformUtils.RotateElement(doc, elem.Id, axis, Math.PI \/ 91);"}
{"prompt":"Insert a window 1m wide and 1.2m high into a wall.","completion":"FamilySymbol originalSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nWall hostWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\n\nif (originalSymbol != null && hostWall != null)\n{\n    \/\/ Duplica el tipo para no modificar el original y asegura un nombre único\n    string newTypeName = $\"Window {UnitUtils.ConvertFromInternalUnits(UnitUtils.ConvertToInternalUnits(1.0, UnitTypeId.Meters), UnitTypeId.Meters)}m x {UnitUtils.ConvertFromInternalUnits(UnitUtils.ConvertToInternalUnits(1.2, UnitTypeId.Meters), UnitTypeId.Meters)}m - {Guid.NewGuid().ToString().Substring(0, 4)}\";\n    FamilySymbol newSymbol = originalSymbol.Duplicate(newTypeName) as FamilySymbol;\n\n    if (!newSymbol.IsActive)\n    {\n        newSymbol.Activate();\n    }\n\n    \/\/ Establece las dimensiones en el nuevo tipo\n    Parameter widthParam = newSymbol.LookupParameter(\"Width\");\n    Parameter heightParam = newSymbol.LookupParameter(\"Height\");\n\n    if (widthParam != null && heightParam != null)\n    {\n        widthParam.Set(UnitUtils.ConvertToInternalUnits(1.0, UnitTypeId.Meters));\n        heightParam.Set(UnitUtils.ConvertToInternalUnits(1.2, UnitTypeId.Meters));\n    }\n\n    Level level = doc.GetElement(hostWall.LevelId) as Level;\n    LocationCurve locationCurve = hostWall.Location as LocationCurve;\n    if (level != null && locationCurve != null)\n    {\n        XYZ insertionPoint = locationCurve.Curve.Evaluate(0.5, true);\n        doc.Create.NewFamilyInstance(insertionPoint, newSymbol, hostWall, level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Create a global length parameter named 'CorridorWidth' with a value of 0.3m.","completion":"string paramName = \"CorridorWidth\";\nGlobalParameter gp = GlobalParameter.Create(doc, paramName, SpecTypeId.Length);\n\nif (gp != null)\n{\n    gp.SetValue(new DoubleParameterValue(UnitUtils.ConvertToInternalUnits(0.3, UnitTypeId.Meters)));\n}"}
{"prompt":"Generate a 5x5 column grid with 8-meter spacing.","completion":"FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (columnSymbol != null && level != null)\n{\n    if(!columnSymbol.IsActive) columnSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters);\n    for(int i=0; i<5; i++)\n    {\n        for(int j=0; j<5; j++)\n        {\n            doc.Create.NewFamilyInstance(new XYZ(i*spacing, j*spacing, 0), columnSymbol, level, StructuralType.Column);\n        }\n    }\n}"}
{"prompt":"Actualiza el tipo de la ventana seleccionada al tipo 'Ventana Fija 115x60'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una ventana\");\nFamilySymbol newType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name == \"Ventana Fija 115x60\");\nif (pickedRef != null && newType != null)\n{\n    FamilyInstance window = doc.GetElement(pickedRef.ElementId) as FamilyInstance;\n    if (window != null)\n    {\n        window.Symbol = newType;\n    }\n}"}
{"prompt":"Clona el tipo de muro 'Genérico - 150mm' y nómbralo 'Interior - 15cm Yeso'.","completion":"string originalName = \"Genérico - 150mm\";\nstring newName = \"Interior - 15cm Yeso\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif (originalType != null)\n{\n    WallType newType = originalType.Duplicate(newName) as WallType;\n}"}
{"prompt":"Create a new 5mm text type in green color.","completion":"using (Transaction t = new Transaction(doc, \"Create Green Text Type\"))\n{\n    t.Start();\n    string newTypeName = \"5mm Green\";\n    TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\n    if (defaultType != null)\n    {\n        TextNoteType newType = defaultType.Duplicate(newTypeName) as TextNoteType;\n        if (newType != null)\n        {\n            Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n            if (textSizeParam != null && !textSizeParam.IsReadOnly)\n            {\n                textSizeParam.Set(5 \/ 304.8);\n            }\n            Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n            if (lineColorParam != null && !lineColorParam.IsReadOnly)\n            {\n                 lineColorParam.Set(65280);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Añade un nivel llamado 'Nivel Azotea' a 16.2 metros.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(16.2, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Nivel Azotea\";\n}"}
{"prompt":"Generate a rectangular floor of 10x8 meters.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\n\nif (level != null && floorType != null)\n{\n    double width = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\n    double length = UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters);\n    XYZ p1 = new XYZ(0, 0, 0);\n    XYZ p2 = new XYZ(width, 0, 0);\n    XYZ p3 = new XYZ(width, length, 0);\n    XYZ p4 = new XYZ(0, length, 0);\n    CurveLoop loop = new CurveLoop();\n    loop.Append(Line.CreateBound(p1, p2));\n    loop.Append(Line.CreateBound(p2, p3));\n    loop.Append(Line.CreateBound(p3, p4));\n    loop.Append(Line.CreateBound(p4, p1));\n    Floor.Create(doc, new List<CurveLoop> { loop }, floorType.Id, level.Id);\n}"}
{"prompt":"Generate a new Level named 'Level 2' at an elevation of 14 meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(14, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Level 2\";\n}"}
{"prompt":"Attach a tag to the column closest to the origin.","completion":"using (Transaction t = new Transaction(doc, \"Tag Column\"))\n{\n    t.Start();\n    View activeView = doc.ActiveView;\n    FamilyInstance column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().Cast<FamilyInstance>().OrderBy(c => {\n        LocationPoint lp = c.Location as LocationPoint;\n        return lp != null ? lp.Point.DistanceTo(XYZ.Zero) : double.MaxValue;\n    }).FirstOrDefault();\n\n    if (activeView != null && column != null)\n    {\n        LocationPoint loc = column.Location as LocationPoint;\n        if (loc != null)\n        {\n            IndependentTag.Create(doc, activeView.Id, new Reference(column), true, TagMode.TM_ADDBY_CATEGORY, TagOrientation.Horizontal, loc.Point);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea un Path of Travel entre los puntos (1,1) y (10,10) en la vista de planta.","completion":"\/\/ PathOfTravel.Create is likely inaccessible in this environment.\n\/\/ A comment is left as a placeholder for the intended functionality.\n\/*\nusing (Transaction t = new Transaction(doc, \"Create Path of Travel\"))\n{\n    t.Start();\n    ViewPlan viewPlan = doc.ActiveView as ViewPlan;\n\n    if (viewPlan != null && viewPlan.ViewType == ViewType.FloorPlan)\n    {\n        ElementId levelId = viewPlan.get_Parameter(BuiltInParameter.PLAN_VIEW_LEVEL).AsElementId();\n        Level level = doc.GetElement(levelId) as Level;\n        if (level != null)\n        {\n            XYZ startPoint = new XYZ(1 \/ 0.3048, 1 \/ 0.3048, level.Elevation);\n            XYZ endPoint = new XYZ(10 \/ 0.3048, 10 \/ 0.3048, level.Elevation);\n            \/\/ PathOfTravel.Create(viewPlan, startPoint, endPoint);\n        }\n    }\n    t.Commit();\n}\n*\/"}
{"prompt":"Ubica una instancia de la familia 'M_Chair-Breuer' en el centro de la habitación 'Despacho 96'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 96\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"M_Chair-Breuer\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);"}
{"prompt":"Ajusta todas las ventanas para que tengan la altura del antepecho a 904mm.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits(904, UnitTypeId.Millimeters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Set the sill height of all windows to 2 meter.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Create a roof by footprint on the 'Roof Level'.","completion":"using (Transaction t = new Transaction(doc, \"Create Roof\"))\n{\n    t.Start();\n    Level roofLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Roof Level\");\n    RoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n\n    if (roofLevel != null && roofType != null)\n    {\n        CurveArray roofProfile = new CurveArray();\n        roofProfile.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(20 \/ 0.3048,0,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(20 \/ 0.3048,0,0), new XYZ(20 \/ 0.3048,30 \/ 0.3048,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(20 \/ 0.3048,30 \/ 0.3048,0), new XYZ(0,30 \/ 0.3048,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(0,30 \/ 0.3048,0), new XYZ(0,0,0)));\n        ModelCurveArray mapping = new ModelCurveArray();\n        doc.Create.NewFootPrintRoof(roofProfile, roofLevel, roofType, out mapping);\n    }\n    t.Commit();\n}"}
{"prompt":"Assign the 'Mark' parameter of all selected walls to 'W-EXT-2'.","completion":"using (Transaction t = new Transaction(doc, \"Set Wall Mark\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    ICollection<ElementId> selectedIds = localUidoc.Selection.GetElementIds();\n\n    if (selectedIds != null && selectedIds.Count > 2)\n    {\n        foreach(ElementId id in selectedIds)\n        {\n            Element elem = doc.GetElement(id);\n            if(elem is Wall)\n            {\n                Parameter p = elem.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n                if (p != null && !p.IsReadOnly)\n                {\n                    p.Set(\"W-EXT-01\");\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Clone the 'Level 1' view as a dependent view.","completion":"ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v => v.Name == \"Level 1\") as ViewPlan;\n\nif (viewToDuplicate != null)\n{\n    ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n}"}
{"prompt":"Include a reference point at coordinates (6,4,1) inside the family editor.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(6,4,1));"}
{"prompt":"Recupera todas las subcategorías de la categoría Puertas.","completion":"Category doorCat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Doors);\nCategoryNameMap subcategories = doorCat.SubCategories;"}
{"prompt":"Coloca una cota de elevación en una cara y un punto de vista dados.","completion":"using (Transaction t = new Transaction(doc, \"Place Spot Elevation\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference faceRef = localUidoc.Selection.PickObject(ObjectType.Face, \"Selecciona la cara superior del suelo\");\n\n    View activeView = doc.ActiveView;\n\n    if (faceRef != null && activeView != null)\n    {\n        XYZ pointOnFace = faceRef.GlobalPoint;\n        XYZ leaderEnd = pointOnFace + new XYZ(1 \/ 0.3048, 1 \/ 0.3048, 0);\n        doc.Create.NewSpotElevation(activeView, faceRef, pointOnFace, pointOnFace, leaderEnd, pointOnFace, true);\n    }\n    t.Commit();\n}"}
{"prompt":"Obtén el elemento anfitrión de la primera ventana que encuentres.","completion":"FamilyInstance windowInstance = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\n\nif (windowInstance != null)\n{\n    Element hostElement = windowInstance.Host;\n}"}
{"prompt":"Get a list of all project warnings.","completion":"IList<FailureMessage> warnings = doc.GetWarnings();\nList<string> warningDescriptions = warnings.Select(w => w.GetDescriptionText()).ToList();\n"}
{"prompt":"Apply 25mm thermal insulation to all hot water pipes.","completion":"PipeInsulationType insulationType = new FilteredElementCollector(doc).OfClass(typeof(PipeInsulationType)).FirstOrDefault() as PipeInsulationType;\nPipingSystemType hotWaterSystem = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).Cast<PipingSystemType>().FirstOrDefault(s => s.Name.Contains(\"Hot Water\"));\n\nif (insulationType != null && hotWaterSystem != null)\n{\n    List<Pipe> pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast<Pipe>().Where(p => \n    {\n        Parameter systemParam = p.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM);\n        return systemParam != null && systemParam.HasValue && systemParam.AsElementId() == hotWaterSystem.Id;\n    }).ToList();\n    \n    foreach(Pipe p in pipes)\n    {\n        PipeInsulation.Create(doc, p.Id, insulationType.Id, UnitUtils.ConvertToInternalUnits(25, UnitTypeId.Millimeters));\n    }\n}"}
{"prompt":"Place a camera in the active view.","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(f => f.ViewFamily == ViewFamily.ThreeDimensional);\nif (vft != null)\n{\n    View3D cameraView = View3D.CreatePerspective(doc, vft.Id);\n    if (cameraView != null)\n    {\n        try { cameraView.Name = \"New Camera View\"; } catch {}\n        XYZ eyePos = new XYZ(10, 10, 10);\n        XYZ upDir = XYZ.BasisZ;\n        XYZ forwardDir = XYZ.Zero - eyePos;\n        ViewOrientation3D orientation = new ViewOrientation3D(eyePos, upDir, forwardDir);\n        cameraView.SetOrientation(orientation);\n    }\n}"}
{"prompt":"Apply 25mm thermal insulation to all hot water pipes.","completion":"PipeInsulationType insulationType = new FilteredElementCollector(doc).OfClass(typeof(PipeInsulationType)).FirstOrDefault() as PipeInsulationType;\nPipingSystemType hotWaterSystem = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).Cast<PipingSystemType>().FirstOrDefault(s => s.Name.Contains(\"Hot Water\"));\n\nif (insulationType != null && hotWaterSystem != null)\n{\n    List<Pipe> pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast<Pipe>().Where(p => \n    {\n        Parameter systemParam = p.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM);\n        return systemParam != null && systemParam.HasValue && systemParam.AsElementId() == hotWaterSystem.Id;\n    }).ToList();\n    \n    foreach(Pipe p in pipes)\n    {\n        PipeInsulation.Create(doc, p.Id, insulationType.Id, UnitUtils.ConvertToInternalUnits(25, UnitTypeId.Millimeters));\n    }\n}"}
{"prompt":"Crea una vista de planta para el 'Nivel 3'.","completion":"string levelName = \"Nivel 3\";\nLevel level3 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.FloorPlan);\n\nif (level3 != null && vft != null)\n{\n    ViewPlan viewPlan = ViewPlan.Create(doc, vft.Id, level3.Id);\n}"}
{"prompt":"Agrega el prefijo 'ARQ-' a todas las tablas de planificación.","completion":"string prefix = \"ARQ-\";\nList<ViewSchedule> schedules = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().Where(v => !v.IsTemplate).ToList();\nforeach (ViewSchedule schedule in schedules)\n{\n    if (!schedule.Name.StartsWith(prefix))\n    {\n        schedule.Name = prefix + schedule.Name;\n    }\n}"}
{"prompt":"Crea un parámetro global de longitud llamado 'AnchoCorredor' con valor de 2.1m.","completion":"string paramName = \"AnchoCorredor\";\nGlobalParameter gp = GlobalParameter.Create(doc, paramName, SpecTypeId.Length);\n\nif (gp != null)\n{\n    gp.SetValue(new DoubleParameterValue(UnitUtils.ConvertToInternalUnits(2.1, UnitTypeId.Meters)));\n}"}
{"prompt":"Copy the 'Level 3' view as a dependent view.","completion":"ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v => v.Name == \"Level 3\") as ViewPlan;\n\nif (viewToDuplicate != null)\n{\n    ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n}"}
{"prompt":"Duplicate the 'Generic - 145mm' wall type and name it 'Interior - 10cm Plaster'.","completion":"string originalName = \"Generic - 145mm\";\nstring newName = \"Interior - 10cm Plaster\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif(originalType!=null)\n    originalType.Duplicate(newName);"}
{"prompt":"Copia la vista de planta 'Planta Baja' y conviértela en una plantilla de vista.","completion":"using (Transaction t = new Transaction(doc, \"Create View Template\"))\n{\n    t.Start();\n    ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().FirstOrDefault(v => v.Name == \"Planta Baja\");\n    string templateName = \"Plantilla Planta Baja\";\n\n    if (viewToDuplicate != null)\n    {\n        ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n        View newView = doc.GetElement(newViewId) as View;\n        if (newView != null)\n        {\n           \/\/ In older APIs, direct conversion to a template may not be available.\n           \/\/ A common workaround is to set the IsTemplate property if available and writable, \n           \/\/ which is not the case here. This is left as a comment for conceptual understanding.\n           \/\/ newView.IsTemplate = true;\n            newView.Name = templateName;\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Generate a door 0.9m wide and 2.1m high in the wall.","completion":"Wall hostWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nFamilySymbol originalSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (originalSymbol != null && hostWall != null)\n{\n    string newTypeName = \"Door 0.9m x 2.1m\";\n    FamilySymbol newSymbol = originalSymbol.Duplicate(newTypeName) as FamilySymbol;\n    if (newSymbol == null) return;\n\n    if (!newSymbol.IsActive)\n    {\n        newSymbol.Activate();\n    }\n\n    Parameter widthParam = newSymbol.get_Parameter(BuiltInParameter.FAMILY_WIDTH_PARAM);\n    Parameter heightParam = newSymbol.get_Parameter(BuiltInParameter.FAMILY_HEIGHT_PARAM);\n\n    if (widthParam != null && heightParam != null && !widthParam.IsReadOnly && !heightParam.IsReadOnly)\n    {\n        widthParam.Set(UnitUtils.ConvertToInternalUnits(0.9, UnitTypeId.Meters));\n        heightParam.Set(UnitUtils.ConvertToInternalUnits(2.1, UnitTypeId.Meters));\n    }\n\n    Level level = doc.GetElement(hostWall.LevelId) as Level;\n    LocationCurve locationCurve = hostWall.Location as LocationCurve;\n    if (level != null && locationCurve != null)\n    {\n        XYZ insertionPoint = locationCurve.Curve.Evaluate(0.5, true);\n        doc.Create.NewFamilyInstance(insertionPoint, newSymbol, hostWall, level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Spin a selected element 90 degrees around its Z-axis.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select an element to rotate\");\nElement elem = doc.GetElement(pickedRef.ElementId);\nLocationPoint lp = elem.Location as LocationPoint;\nLine axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\nElementTransformUtils.RotateElement(doc, elem.Id, axis, Math.PI \/ 2.0);"}
{"prompt":"Temporarily isolate all furniture in the active view.","completion":"ICollection<ElementId> furnitureIds = new FilteredElementCollector(doc, doc.ActiveView.Id).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsNotElementType().ToElementIds();\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.IsolateElementsTemporary(furnitureIds);\n}"}
{"prompt":"Spin project north 30 degrees clockwise.","completion":"using (Transaction t = new Transaction(doc, \"Rotate Project North\"))\n{\n    t.Start();\n    BasePoint projectBasePoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(bp => !bp.IsShared);\n\n    if (projectBasePoint != null)\n    {\n        double angleInDegrees = 30.0;\n        double angleInRadians = -(angleInDegrees * Math.PI \/ 180.0);\n        using (var bbox = projectBasePoint.get_BoundingBox(null))\n        {\n          if (bbox != null)\n          {\n            XYZ center = bbox.Min;\n            Line axis = Line.CreateBound(center, center + XYZ.BasisZ);\n            ElementTransformUtils.RotateElement(doc, projectBasePoint.Id, axis, angleInRadians);\n          }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Update the visual style of the active view to 'Hidden Line'.","completion":"View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.DisplayStyle = DisplayStyle.HLR;\n}"}
{"prompt":"Coloca un mueble en las coordenadas (2,3).","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null && furnitureSymbol != null)\n{\n    if (!furnitureSymbol.IsActive)\n    {\n        furnitureSymbol.Activate();\n    }\n    doc.Create.NewFamilyInstance(new XYZ(2, 3, 0), furnitureSymbol, level, StructuralType.NonStructural);\n}"}
{"prompt":"Replicate the 'Level 4' view as a dependent view.","completion":"ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v => v.Name == \"Level 4\") as ViewPlan;\n\nif (viewToDuplicate != null)\n{\n    ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n}"}
{"prompt":"Obtén todas las subcategorías de la categoría Muros.","completion":"Category wallCat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Walls);\nCategoryNameMap subcategories = wallCat.SubCategories;"}
{"prompt":"Obtén la geometría sólida de un elemento seleccionado.","completion":"UIDocument localUidoc = uidoc;\nReference pickedRef = localUidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un elemento para obtener su geometría\");\nif(pickedRef != null)\n{\n    Element elem = doc.GetElement(pickedRef);\n    if(elem != null)\n    {\n        Options opt = new Options() { ComputeReferences = true, DetailLevel = ViewDetailLevel.Fine };\n        GeometryElement geoElem = elem.get_Geometry(opt);\n        if(geoElem != null)\n        {\n            List<Solid> solids = geoElem.OfType<Solid>().Where(s => s.Volume > 0).ToList();\n        }\n    }\n}"}
{"prompt":"Copia la vista 'Losa 104' como una vista dependiente.","completion":"ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v => v.Name == \"Losa 104\") as ViewPlan;\n\nif (viewToDuplicate != null)\n{\n    ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n}"}
{"prompt":"Create a new door type named 'FR-90 Door' and set its fire rating to '90 min'.","completion":"using (Transaction t = new Transaction(doc, \"Create Door Type\"))\n{\n    t.Start();\n    string newTypeName = \"FR-90 Door\";\n    FamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n    if (doorTypeToDuplicate != null)\n    {\n        FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\n        if (newDoorType != null)\n        {\n            Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n            if(fireRatingParam != null && !fireRatingParam.IsReadOnly)\n            {\n                fireRatingParam.Set(\"90 min\");\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Adjust the type of a selected floor to 'Concrete 16cm'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a floor\");\n\nif (pickedRef != null)\n{\n    Floor floorToChange = doc.GetElement(pickedRef) as Floor;\n    FloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name == \"Concrete 16cm\");\n    \n    if (floorToChange != null && newType != null)\n    {\n        floorToChange.ChangeTypeId(newType.Id);\n    }\n}"}
{"prompt":"Create a text note with given text, location, and target element.","completion":"using (Transaction t = new Transaction(doc, \"Create Text Note\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference targetRef = localUidoc.Selection.PickObject(ObjectType.Element, \"Select an element to annotate\");\n    XYZ textLocation = localUidoc.Selection.PickPoint(\"Choose the text location\");\n\n    View activeView = doc.ActiveView;\n    ElementId defaultTypeId = doc.GetDefaultElementTypeId(ElementTypeGroup.TextNoteType);\n\n    if (targetRef != null && textLocation != null && activeView != null && defaultTypeId != ElementId.InvalidElementId)\n    {\n        TextNoteOptions opts = new TextNoteOptions(defaultTypeId);\n        TextNote note = TextNote.Create(doc, activeView.Id, textLocation, \"REVIEW CLASH\", opts);\n        if (note != null)\n        {\n            Leader leader = note.AddLeader(TextNoteLeaderTypes.TNLT_STRAIGHT_L);\n            leader.End = targetRef.GlobalPoint;\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Construct 8 horizontal grids spaced 10 meters apart.","completion":"double separation = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\nfor(int i = 0; i < 8; i++)\n{\n    Line line = Line.CreateBound(new XYZ(0, i * separation, 0), new XYZ(50, i * separation, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Temporarily isolate all furniture in the active view.","completion":"ICollection<ElementId> furnitureIds = new FilteredElementCollector(doc, doc.ActiveView.Id).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsNotElementType().ToElementIds();\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.IsolateElementsTemporary(furnitureIds);\n}"}
{"prompt":"Coloca una instancia de la familia 'Ventana Fija 122x60' en el centro de la habitación 'Despacho 98'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 122\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Ventana Fija 98x60\") as FamilySymbol;\nif(furnitureSymbol != null && !furnitureSymbol.IsActive) furnitureSymbol.Activate();\nif(room != null)\n{\n    LocationPoint roomCenter = room.Location as LocationPoint;\n    if(roomCenter != null && furnitureSymbol != null && room.Level != null)\n    {\n        doc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Importa un archivo CAD llamado 'BasePlan.dwg' en la vista actual.","completion":"string filePath = \"C:\/CAD\/BasePlan.dwg\";\nDWGImportOptions options = new DWGImportOptions();\noptions.Placement = ImportPlacement.Origin;\nElementId importId;\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    doc.Import(filePath, options, activeView, out importId);\n}"}
{"prompt":"Crea una vista 3D con la caja de sección activada.","completion":"string viewName = \"Vista 3D con Caja de Sección\";\nViewFamilyType vft3D = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft3D != null)\n{\n    View3D view3d = View3D.CreateIsometric(doc, vft3D.Id);\n    if (view3d != null)\n    {\n        view3d.Name = viewName;\n        view3d.IsSectionBoxActive = true;\n    }\n}"}
{"prompt":"Construye una tabla para puertas con los campos 'Marca de Tipo' y 'Costo'.","completion":"string scheduleName = \"Tabla de Puertas\";\nViewSchedule schedule = ViewSchedule.CreateSchedule(doc, new ElementId(BuiltInCategory.OST_Doors));\n\nif (schedule != null)\n{\n    schedule.Name = scheduleName;\n    ScheduleDefinition def = schedule.Definition;\n    if (def != null)\n    {\n        SchedulableField typeMarkField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.Value == (long)BuiltInParameter.ALL_MODEL_TYPE_MARK);\n        SchedulableField costField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.Value == (long)BuiltInParameter.ALL_MODEL_COST);\n        \n        if (typeMarkField != null) def.AddField(typeMarkField);\n        if (costField != null) def.AddField(costField);\n    }\n}"}
{"prompt":"Modela un grupo a partir de la selección actual y muévelo 10 metros a la derecha.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds != null && selectedIds.Count > 0)\n{\n    Group group = doc.Create.NewGroup(selectedIds);\n    if (group != null)\n    {\n        XYZ translation = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), 0, 0);\n        ElementTransformUtils.MoveElement(doc, group.Id, translation);\n    }\n}"}
{"prompt":"Crea un nuevo nivel 'Nivel 1' a una elevación de 17 metros.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(17, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\nif (newLevel != null)\n{\n    try { newLevel.Name = \"Nivel 1\"; } catch {}\n}"}
{"prompt":"Construct a new 25cm wall type named 'Structural Wall 25cm'.","completion":"using (Transaction t = new Transaction(doc, \"Create Wall Type\"))\n{\n    t.Start();\n    string newTypeName = \"Structural Wall 25cm\";\n    WallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\n    if (wallTypeToDuplicate != null)\n    {\n        WallType newWallType = wallTypeToDuplicate.Duplicate(newTypeName) as WallType;\n        if (newWallType != null)\n        {\n            CompoundStructure cs = newWallType.GetCompoundStructure();\n            int coreLayerIndex = cs.GetFirstCoreLayerIndex();\n            cs.SetLayerFunction(coreLayerIndex, MaterialFunctionAssignment.Structure);\n            cs.SetLayerWidth(coreLayerIndex, 0.25 \/ 0.3048);\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Assign the 'Mark' parameter of all selected walls to 'W-EXT-1'.","completion":"using (Transaction t = new Transaction(doc, \"Set Wall Mark\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    ICollection<ElementId> selectedIds = localUidoc.Selection.GetElementIds();\n\n    if (selectedIds != null && selectedIds.Count > 1)\n    {\n        foreach(ElementId id in selectedIds)\n        {\n            Element elem = doc.GetElement(id);\n            if(elem is Wall)\n            {\n                Parameter p = elem.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n                if (p != null && !p.IsReadOnly)\n                {\n                    p.Set(\"W-EXT-01\");\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Obtén una lista de todas las advertencias del proyecto.","completion":"IList<FailureMessage> warnings = doc.GetWarnings();\nList<string> warningDescriptions = warnings.Select(w => w.GetDescriptionText()).ToList();\n"}
{"prompt":"Encuentra el elemento de pórtico estructural con la marca 'B-101'.","completion":"string markValue = \"B-101\";\nElement framingElement = new FilteredElementCollector(doc)\n    .OfCategory(BuiltInCategory.OST_StructuralFraming)\n    .WhereElementIsNotElementType()\n    .FirstOrDefault(e => {\n        Parameter p = e.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n        return p != null && p.AsString() == markValue;\n    });"}
{"prompt":"Plasma un conducto de ventilación rectangular de 300x200 milímetros.","completion":"using (Transaction t = new Transaction(doc, \"Create Duct\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    DuctType ductType = new FilteredElementCollector(doc).OfClass(typeof(DuctType)).Cast<DuctType>().FirstOrDefault(d => d.Shape == ConnectorProfileType.Rectangular);\n    MEPSystemType systemType = new FilteredElementCollector(doc).OfClass(typeof(MEPSystemType)).Cast<MEPSystemType>().FirstOrDefault(s => s.SystemClassification == MEPSystemClassification.SupplyAir);\n\n    if (level != null && ductType != null && systemType != null)\n    {\n        XYZ p1 = new XYZ(0, 0, 3 \/ 0.3048);\n        XYZ p2 = new XYZ(10 \/ 0.3048, 0, 3 \/ 0.3048);\n        Duct duct = Duct.Create(doc, systemType.Id, ductType.Id, level.Id, p1, p2);\n\n        if (duct != null)\n        {\n            Parameter widthParam = duct.get_Parameter(BuiltInParameter.RBS_CURVE_WIDTH_PARAM);\n            Parameter heightParam = duct.get_Parameter(BuiltInParameter.RBS_CURVE_HEIGHT_PARAM);\n            if (widthParam != null && !widthParam.IsReadOnly) widthParam.Set(300 \/ 304.8);\n            if (heightParam != null && !heightParam.IsReadOnly) heightParam.Set(200 \/ 304.8);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Recupera todas las habitaciones que están en el Nivel 3","completion":"string levelName = \"Nivel 3\";\nLevel targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (targetLevel != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(targetLevel.Id);\n    FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WherePasses(levelFilter);\n    uidoc.Selection.SetElementIds(collector.ToElementIds());\n}"}
{"prompt":"Replicate the 'Generic - 145mm' wall type and name it 'Interior - 12cm Plaster'.","completion":"string originalName = \"Generic - 145mm\";\nstring newName = \"Interior - 12cm Plaster\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif(originalType!=null)\n    originalType.Duplicate(newName);"}
{"prompt":"Construct a new 3D view oriented from point (10,10,10) looking at the origin.","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v=>v.ViewFamily==ViewFamily.ThreeDimensional);\n\nif (vft != null)\n{\n    View3D view = View3D.CreateIsometric(doc, vft.Id);\n    if (view != null)\n    {\n        XYZ eyePos = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters));\n        XYZ upDir = XYZ.BasisZ;\n        XYZ forwardDir = XYZ.Zero - eyePos;\n        ViewOrientation3D vo = new ViewOrientation3D(eyePos, upDir, forwardDir);\n        view.SetOrientation(vo);\n        view.Name = \"View from (10,10,10)\";\n    }\n}"}
{"prompt":"Actualiza el nivel de detalle de la vista actual a 'Vista de Trabajo'.","completion":"View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.DetailLevel = ViewDetailLevel.Coarse;\n}"}
{"prompt":"Inserta un nivel llamado 'Nivel Azotea' a 15.5 metros.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(15.5, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Nivel Azotea\";\n}"}
{"prompt":"Encuentra todas las colisiones entre tuberías y vigas.","completion":"ICollection<ElementId> pipeIds = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_PipeCurves).WhereElementIsNotElementType().ToElementIds();\nICollection<ElementId> beamIds = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsNotElementType().ToElementIds();\n\nif(pipeIds.Count > 0 && beamIds.Count > 0)\n{\n    List<ElementFilter> beamFilters = new List<ElementFilter>();\n    foreach(ElementId beamId in beamIds)\n    {\n        Element beam = doc.GetElement(beamId);\n        if(beam != null) beamFilters.Add(new ElementIntersectsElementFilter(beam));\n    }\n    LogicalOrFilter clashFilter = new LogicalOrFilter(beamFilters);\n    ICollection<ElementId> clashingPipeIds = new FilteredElementCollector(doc, pipeIds).WherePasses(clashFilter).ToElementIds();\n    \/\/ clashingPipeIds contiene los IDs de los elementos en colisión, la selección\/visualización es externa.\n}"}
{"prompt":"Crea un parámetro global de longitud llamado 'AnchoCorredor' con valor de 1.2m.","completion":"string paramName = \"AnchoCorredor\";\nGlobalParameter gp = GlobalParameter.Create(doc, paramName, SpecTypeId.Length);\n\nif (gp != null)\n{\n    gp.SetValue(new DoubleParameterValue(UnitUtils.ConvertToInternalUnits(1.2, UnitTypeId.Meters)));\n}"}
{"prompt":"Genera una tabla para puertas con los campos 'Marca de Tipo' y 'Costo'.","completion":"string scheduleName = \"Tabla de Puertas\";\nViewSchedule schedule = ViewSchedule.CreateSchedule(doc, new ElementId(BuiltInCategory.OST_Doors));\n\nif (schedule != null)\n{\n    schedule.Name = scheduleName;\n    ScheduleDefinition def = schedule.Definition;\n    if (def != null)\n    {\n        SchedulableField typeMarkField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.Value == (long)BuiltInParameter.ALL_MODEL_TYPE_MARK);\n        SchedulableField costField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.Value == (long)BuiltInParameter.ALL_MODEL_COST);\n        \n        if (typeMarkField != null) def.AddField(typeMarkField);\n        if (costField != null) def.AddField(costField);\n    }\n}"}
{"prompt":"Find the host of a face-based light fixture.","completion":"FamilyInstance lightFixture = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsNotElementType().Cast<FamilyInstance>().FirstOrDefault(fi => fi.HostFace != null);\n\nElement host = null;\nif (lightFixture != null)\n{\n    Reference hostFaceRef = lightFixture.HostFace;\n    if (hostFaceRef != null)\n    {\n        host = doc.GetElement(hostFaceRef.ElementId);\n    }\n}"}
{"prompt":"Rota un elemento seleccionado 93 grados sobre su eje Z.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un elemento para rotar\");\nElement elem = doc.GetElement(pickedRef.ElementId);\nLocationPoint lp = elem.Location as LocationPoint;\nLine axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\nElementTransformUtils.RotateElement(doc, elem.Id, axis, Math.PI \/ 93);"}
{"prompt":"Clona el tipo de muro 'Genérico - 104mm' y nómbralo 'Interior - 15cm Yeso'.","completion":"string originalName = \"Genérico - 104mm\";\nstring newName = \"Interior - 15cm Yeso\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif(originalType!=null)\n    originalType.Duplicate(newName);"}
{"prompt":"Actualiza el tipo de una losa seleccionada a 'Concreto 17cm'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una losa\");\n\nif (pickedRef != null)\n{\n    Floor floorToChange = doc.GetElement(pickedRef) as Floor;\n    FloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name == \"Concreto 17cm\");\n    \n    if (floorToChange != null && newType != null)\n    {\n        floorToChange.ChangeTypeId(newType.Id);\n    }\n}"}
{"prompt":"Duplicate the 'Generic - 148mm' wall type and name it 'Interior - 20cm Plaster'.","completion":"string originalName = \"Generic - 148mm\";\nstring newName = \"Interior - 20cm Plaster\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif(originalType!=null)\n    originalType.Duplicate(newName);"}
{"prompt":"Alinea la cara de un muro con la cara de otro.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference ref1 = uidoc.Selection.PickObject(ObjectType.Face, \"Selecciona la cara de destino (estática)\");\nReference ref2 = uidoc.Selection.PickObject(ObjectType.Face, \"Selecciona la cara a mover\");\nView activeView = doc.ActiveView;\n\nif (ref1 != null && ref2 != null && activeView != null)\n{\n    doc.Create.NewAlignment(activeView, ref1, ref2);\n}"}
{"prompt":"Obtén una lista de todas las vistas de planta del proyecto.","completion":"List<ViewPlan> planViews = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().Where(v => !v.IsTemplate).ToList();"}
{"prompt":"Insert an instance of the 'Office Desk' family in the center of the 'Office 100' room.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Office 100\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Office Desk\") as FamilySymbol;\nif(furnitureSymbol != null && !furnitureSymbol.IsActive) furnitureSymbol.Activate();\nif(room != null)\n{\n    LocationPoint roomCenter = room.Location as LocationPoint;\n    if(roomCenter != null && furnitureSymbol != null && room.Level != null)\n    {\n        doc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Calculate the total length of all Supply Air ducts.","completion":"List<Duct> ducts = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_DuctCurves).WhereElementIsNotElementType().Cast<Duct>().Where(d => d.get_Parameter(BuiltInParameter.RBS_SYSTEM_CLASSIFICATION_PARAM).AsString() == \"SupplyAir\").ToList();\ndouble totalLength = 0.0;\nforeach (Duct d in ducts)\n{\n    totalLength += d.get_Parameter(BuiltInParameter.CURVE_ELEM_LENGTH).AsDouble();\n}"}
{"prompt":"Duplica el tipo de muro 'Genérico - 148mm' y nómbralo 'Interior - 12cm Yeso'.","completion":"string originalName = \"Genérico - 148mm\";\nstring newName = \"Interior - 12cm Yeso\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif(originalType!=null)\n    originalType.Duplicate(newName);"}
{"prompt":"Elimina todas las puertas del Nivel 1.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\nif (level1 != null)\n{\n    ElementCategoryFilter categoryFilter = new ElementCategoryFilter(BuiltInCategory.OST_Doors);\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level1.Id);\n    LogicalAndFilter andFilter = new LogicalAndFilter(categoryFilter, levelFilter);\n    ICollection<ElementId> doorsToDelete = new FilteredElementCollector(doc).WherePasses(andFilter).ToElementIds();\n    if (doorsToDelete.Count > 0)\n    {\n        doc.Delete(doorsToDelete);\n    }\n}"}
{"prompt":"Incorpora un nivel llamado 'Nivel Azotea' a 16.4 metros.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(16.4, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Nivel Azotea\";\n}"}
{"prompt":"Ubica una instancia de la familia 'Mesa de Oficina' en el centro de la habitación 'Despacho 99'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 99\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Mesa de Oficina\") as FamilySymbol;\nif(furnitureSymbol != null && !furnitureSymbol.IsActive) furnitureSymbol.Activate();\nif(room != null)\n{\n    LocationPoint roomCenter = room.Location as LocationPoint;\n    if(roomCenter != null && furnitureSymbol != null && room.Level != null)\n    {\n        doc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Create a new elevation view looking south.","completion":"using (Transaction t = new Transaction(doc, \"Create South Elevation\"))\n{\n    t.Start();\n    ViewFamilyType elevationVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(vft => vft.ViewFamily == ViewFamily.Elevation);\n    View activeView = doc.ActiveView;\n\n    if (elevationVFT != null && activeView != null)\n    {\n        ElevationMarker marker = ElevationMarker.CreateElevationMarker(doc, elevationVFT.Id, new XYZ(0, -20 \/ 0.3048, 0), 100);\n        \n        if (marker != null)\n        {\n            View aev = marker.CreateElevation(doc, activeView.Id, 0);\n            if (aev != null)\n            {\n                aev.Name = \"South Elevation\";\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Attach a horizontal grid line to a curtain wall at a height of 1.5 meters.","completion":"using (Transaction t = new Transaction(doc, \"Add Curtain Grid Line\"))\n{\n    t.Start();\n    Wall cw = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Cast<Wall>().FirstOrDefault(w => w.CurtainGrid != null);\n\n    if (cw != null)\n    {\n        CurtainGrid cg = cw.CurtainGrid;\n        if (cg != null)\n        {\n            LocationCurve locCurve = cw.Location as LocationCurve;\n            if(locCurve != null)\n            {\n                 XYZ startPoint = locCurve.Curve.GetEndPoint(0);\n                 XYZ endPoint = locCurve.Curve.GetEndPoint(1);\n                 XYZ midPoint = (startPoint + endPoint) \/ 2;\n                 XYZ gridLinePoint = new XYZ(midPoint.X, midPoint.Y, 1.5 \/ 0.3048);\n                 cg.AddGridLine(false, gridLinePoint, false);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Inserta un nivel llamado 'Nivel Azotea' a 15.3 metros.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(15.3, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Nivel Azotea\";\n}"}
{"prompt":"Crea una copia de la vista activa y nómbrala 'Copia de Trabajo'.","completion":"View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    ElementId newViewId = activeView.Duplicate(ViewDuplicateOption.Duplicate);\n    View newView = doc.GetElement(newViewId) as View;\n    if (newView != null)\n    {\n        newView.Name = \"Copia de Trabajo\";\n    }\n}"}
{"prompt":"Forma una bandeja de cables entre dos puntos.","completion":"CableTrayType trayType = new FilteredElementCollector(doc).OfClass(typeof(CableTrayType)).FirstOrDefault() as CableTrayType;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(trayType != null && level != null)\n{\n    XYZ start = new XYZ(0,10,3);\n    XYZ end = new XYZ(15,10,3);\n    CableTray.Create(doc, trayType.Id, start, end, level.Id);\n}"}
{"prompt":"Duplica la vista 'Nivel 2' como una vista dependiente.","completion":"ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v => v.Name == \"Nivel 2\") as ViewPlan;\n\nif (viewToDuplicate != null)\n{\n    ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n}"}
{"prompt":"Modela ocho ejes horizontales con una separación de 10m.","completion":"double separation = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\nfor(int i = 0; i < 8; i++)\n{\n    Line line = Line.CreateBound(new XYZ(0, i * separation, 0), new XYZ(50, i * separation, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Inside the family editor, create a new horizontal reference plane.","completion":"string rpName = \"Horizontal Plane\";\nXYZ start = new XYZ(UnitUtils.ConvertToInternalUnits(-5, UnitTypeId.Meters), 0, 0);\nXYZ end = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0, 0);\nXYZ normal = XYZ.BasisY;\n\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    ReferencePlane rp = doc.FamilyCreate.NewReferencePlane(start, end, normal, activeView);\n    if (rp != null)\n    {\n        rp.Name = rpName;\n    }\n}"}
{"prompt":"Crea un nuevo Nivel llamado 'Nivel 3' a una elevación de 14 metros.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(14, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\nif (newLevel != null)\n{\n    try { newLevel.Name = \"Nivel 3\"; } catch {}\n}"}
{"prompt":"Change the type of a floor to one that contains 'Concrete'.","completion":"Floor floorToChange = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault() as Floor;\nif(floorToChange != null)\n{\n    FloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name.Contains(\"Concrete\"));\n    if(newType!=null)\n        floorToChange.ChangeTypeId(newType.Id);\n}"}
{"prompt":"Crea un nuevo nivel 'Nivel 7' a una elevación de 8 metros.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Nivel 7\";\n}"}
{"prompt":"Spin a selected element 89 degrees around its Z-axis.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select an element to rotate\");\nElement elem = doc.GetElement(pickedRef.ElementId);\nLocationPoint lp = elem.Location as LocationPoint;\nLine axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\nElementTransformUtils.RotateElement(doc, elem.Id, axis, Math.PI \/ 89);"}
{"prompt":"Crea un nuevo material llamado 'Vidrio Reflectante' y asígnale un color base y una transparencia.","completion":"string materialName = \"Vidrio Reflectante\";\nElementId materialId = Material.Create(doc, materialName);\nif (materialId != ElementId.InvalidElementId)\n{\n    Material material = doc.GetElement(materialId) as Material;\n    if (material != null)\n    {\n        material.Color = new Color(210, 230, 240);\n        material.Transparency = 80;\n    }\n}"}
{"prompt":"Create a new linear dimension type with blue text and 2mm size.","completion":"using (Transaction t = new Transaction(doc, \"Create Dimension Type\"))\n{\n    t.Start();\n    string newTypeName = \"Blue Dimension 2mm\";\n    DimensionType linearDimType = new FilteredElementCollector(doc).OfClass(typeof(DimensionType)).Cast<DimensionType>().FirstOrDefault(dt => dt.StyleType == DimensionStyleType.Linear);\n\n    if (linearDimType != null)\n    {\n        DimensionType newDimType = linearDimType.Duplicate(newTypeName) as DimensionType;\n        if (newDimType != null)\n        {\n            Parameter colorParam = newDimType.get_Parameter(BuiltInParameter.LINE_COLOR);\n            if (colorParam != null && !colorParam.IsReadOnly) colorParam.Set(255);\n            Parameter textSizeParam = newDimType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n            if (textSizeParam != null && !textSizeParam.IsReadOnly) textSizeParam.Set(2 \/ 304.8);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Clone level 6 with a 2m offset and name it 'Mezzanine'.","completion":"string levelName = \"Level 6\";\nLevel levelToCopy = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nif (levelToCopy != null)\n{\n    double offset = UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, levelToCopy.Elevation + offset);\n    newLevel.Name = \"Mezzanine\";\n}"}
{"prompt":"Actualiza el tipo de una losa seleccionada a 'Concreto 20cm'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una losa\");\n\nif (pickedRef != null)\n{\n    Floor floorToChange = doc.GetElement(pickedRef) as Floor;\n    FloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name == \"Concreto 20cm\");\n    \n    if (floorToChange != null && newType != null)\n    {\n        floorToChange.ChangeTypeId(newType.Id);\n    }\n}"}
{"prompt":"Fetch the system type of a selected pipe.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a pipe\");\n\nPipingSystemType systemType = null;\nif (pickedRef != null)\n{\n    Pipe pipe = doc.GetElement(pickedRef.ElementId) as Pipe;\n    if (pipe != null)\n    {\n        Parameter systemTypeParam = pipe.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM);\n        if (systemTypeParam != null && systemTypeParam.HasValue)\n        {\n            systemType = doc.GetElement(systemTypeParam.AsElementId()) as PipingSystemType;\n        }\n    }\n}\n"}
{"prompt":"Genera ocho ejes horizontales con una separación de 10m.","completion":"double separation = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\nfor(int i = 0; i < 8; i++)\n{\n    Line line = Line.CreateBound(new XYZ(0, i * separation, 0), new XYZ(50, i * separation, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Hide the selected elements in the active view.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> idsToHide = uidoc.Selection.GetElementIds();\nView activeView = doc.ActiveView;\n\nif (activeView != null && idsToHide.Count > 0)\n{\n    activeView.HideElements(idsToHide);\n}"}
{"prompt":"Pinta la cara interior de los muros exteriores con 'Roble Oscuro'.","completion":"using (Transaction t = new Transaction(doc, \"Paint Walls\"))\n{\n    t.Start();\n    Material paintMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m => m.Name == \"Roble Oscuro\");\n    var exteriorWalls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Cast<Wall>().Where(w => w.WallType.Function == WallFunction.Exterior).ToList();\n\n    if (paintMaterial != null)\n    {\n        foreach (Wall w in exteriorWalls)\n        {\n            IList<Reference> interiorFaceRefs = HostObjectUtils.GetSideFaces(w, ShellLayerType.Interior);\n            if(interiorFaceRefs.Count > 0)\n            {\n                Face interiorFace = w.GetGeometryObjectFromReference(interiorFaceRefs.First()) as Face;\n                if (interiorFace != null)\n                {\n                    doc.Paint(w.Id, interiorFace, paintMaterial.Id);\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Actualiza el nombre de todas las vistas de planta para que empiecen con 'ARQ_'.","completion":"string prefix = \"ARQ_\";\nList<ViewPlan> planViews = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().Where(v => !v.IsTemplate).ToList();\nforeach(ViewPlan view in planViews)\n{\n    if(!view.Name.StartsWith(prefix))\n    {\n        view.Name = prefix + view.Name;\n    }\n}"}
{"prompt":"Modify the family name of a selected door to 'New_Door'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a door\");\n\nif (pickedRef != null)\n{\n    FamilyInstance door = doc.GetElement(pickedRef.ElementId) as FamilyInstance;\n    if (door != null && door.Symbol != null)\n    {\n        Family family = door.Symbol.Family;\n        if (family != null)\n        {\n            family.Name = \"New_Door\";\n        }\n    }\n}"}
{"prompt":"Create a new Level named 'Level 8' at an elevation of 7 meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(7, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Level 8\";\n}"}
{"prompt":"Crea un nuevo tipo de texto de 5mm de color verde.","completion":"using (Transaction t = new Transaction(doc, \"Create Green Text Type\"))\n{\n    t.Start();\n    string newTypeName = \"5mm Verde\";\n    TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\n    if (defaultType != null)\n    {\n        TextNoteType newType = defaultType.Duplicate(newTypeName) as TextNoteType;\n        if (newType != null)\n        {\n            Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n            if (textSizeParam != null && !textSizeParam.IsReadOnly)\n            {\n                textSizeParam.Set(5 \/ 304.8);\n            }\n            Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n            if (lineColorParam != null && !lineColorParam.IsReadOnly)\n            {\n                 lineColorParam.Set(65280);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Cambia el nombre de la vista activa a 'Plano de Fontanería'.","completion":"string newName = \"Plano de Fontanería\";\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.Name = newName;\n}"}
{"prompt":"Actualiza el tipo de la ventana seleccionada al tipo 'Fija 116x60'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una ventana\");\nFamilySymbol newType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name == \"Fija 116x60\");\nif (pickedRef != null && newType != null)\n{\n    FamilyInstance window = doc.GetElement(pickedRef.ElementId) as FamilyInstance;\n    if (window != null)\n    {\n        window.Symbol = newType;\n    }\n}"}
{"prompt":"Crea un nuevo tipo de puerta llamado 'Puerta RF-60' y asigna '60 min' al parámetro 'Fire Rating'.","completion":"string newTypeName = \"Puerta RF-60\";\nFamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (doorTypeToDuplicate != null)\n{\n    FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\n    if (newDoorType != null)\n    {\n        Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n        if (fireRatingParam != null && !fireRatingParam.IsReadOnly) fireRatingParam.Set(\"60 min\");\n    }\n}"}
{"prompt":"Tag all rooms with their area.","completion":"using (Transaction t = new Transaction(doc, \"Tag All Rooms\"))\n{\n    t.Start();\n    View activeView = doc.ActiveView;\n\n    if (activeView != null)\n    {\n        List<Room> rooms = new FilteredElementCollector(doc, activeView.Id).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>().ToList();\n        foreach(Room room in rooms)\n        {\n            LocationPoint locPoint = room.Location as LocationPoint;\n            if(locPoint != null)\n            {\n                doc.Create.NewRoomTag(new LinkElementId(room.Id), new UV(locPoint.Point.X, locPoint.Point.Y), activeView.Id);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea una nueva hoja A3 y colócale una leyenda.","completion":"using (Transaction t = new Transaction(doc, \"Create Sheet with Legend\"))\n{\n    t.Start();\n    FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(tb => tb.Name.Contains(\"A3\"));\n    View legendView = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().FirstOrDefault(v => v.ViewType == ViewType.Legend);\n\n    if (titleBlock != null && legendView != null)\n    {\n        ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n        if (newSheet != null)\n        {\n            BoundingBoxUV sheetBox = newSheet.Outline;\n            UV centerUv = (sheetBox.Min + sheetBox.Max) \/ 2.0;\n            XYZ centerPoint = new XYZ(centerUv.U, centerUv.V, 0);\n            Viewport.Create(doc, newSheet.Id, legendView.Id, centerPoint);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Exporta el modelo a NWC en la carpeta @\"C:\\Users\\enriq\\OneDrive\\Escritorio\\TAD\"","completion":"string folderPath = @\"C:\\Users\\enriq\\OneDrive\\Escritorio\\TAD\";\nstring fileName = doc.Title + \".nwc\";\nNavisworksExportOptions options = new NavisworksExportOptions();\noptions.ExportScope = NavisworksExportScope.Model;\ndoc.Export(folderPath, fileName, options);"}
{"prompt":"Get the solid geometry of a selected element.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select an element to get its geometry\");\n\nList<Solid> solids = new List<Solid>();\nif (pickedRef != null)\n{\n    Element elem = doc.GetElement(pickedRef);\n    if (elem != null)\n    {\n        Options opt = new Options() { ComputeReferences = true, DetailLevel = ViewDetailLevel.Fine };\n        GeometryElement geoElem = elem.get_Geometry(opt);\n        if (geoElem != null)\n        {\n            solids = geoElem.OfType<Solid>().Where(s => s.Volume > 0).ToList();\n        }\n    }\n}"}
