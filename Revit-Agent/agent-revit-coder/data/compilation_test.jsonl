{"prompt": "Selecciona todos los muros con una resistencia al fuego de 90 minutos.", "completion": "ElementId fireRatingParamId = new ElementId(BuiltInParameter.FIRE_RATING);\nParameterValueProvider pvp = new ParameterValueProvider(fireRatingParamId);\nFilterStringRuleEvaluator evaluator = new FilterStringEquals();\nFilterRule rule = new FilterStringRule(pvp, evaluator, \"90 min\");\nElementParameterFilter filter = new ElementParameterFilter(rule);\nICollection<ElementId> wallsToSelect = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(filter).ToElementIds();\nif (wallsToSelect.Count > 0)\n{\n    new UIDocument(doc).Selection.SetElementIds(wallsToSelect);\n}"}
{"prompt": "Encuentra todos los pilares estructurales en el Nivel 2 que sean de hormigón.", "completion": "Level level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 2\") as Level;\nFamilySymbol concreteColumnType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name.Contains(\"Hormigón\"));\nif (level2 != null && concreteColumnType != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level2.Id);\n    FamilySymbolFilter typeFilter = new FamilySymbolFilter(concreteColumnType.Id);\n    LogicalAndFilter andFilter = new LogicalAndFilter(levelFilter, typeFilter);\n    List<Element> concreteColumns = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WherePasses(andFilter).ToList();\n}"}
{"prompt": "Mueve el muro seleccionado 5 metros hacia arriba.", "completion": "UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un muro para mover\");\nif (pickedRef != null)\n{\n    XYZ translation = new XYZ(0, 0, UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters));\n    ElementTransformUtils.MoveElement(doc, pickedRef.ElementId, translation);\n}"}
{"prompt": "Rota la columna seleccionada 45 grados.", "completion": "UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una columna para rotar\");\nif (pickedRef != null)\n{\n    Element elem = doc.GetElement(pickedRef.ElementId);\n    LocationPoint lp = elem.Location as LocationPoint;\n    if (lp != null)\n    {\n        Line axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\n        double angle = 45 * Math.PI / 180.0;\n        ElementTransformUtils.RotateElement(doc, elem.Id, axis, angle);\n    }\n}"}
{"prompt": "Elimina todas las puertas del Nivel 1.", "completion": "Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\nif (level1 != null)\n{\n    ElementCategoryFilter categoryFilter = new ElementCategoryFilter(BuiltInCategory.OST_Doors);\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level1.Id);\n    LogicalAndFilter andFilter = new LogicalAndFilter(categoryFilter, levelFilter);\n    ICollection<ElementId> doorsToDelete = new FilteredElementCollector(doc).WherePasses(andFilter).ToElementIds();\n    if (doorsToDelete.Count > 0)\n    {\n        doc.Delete(doorsToDelete);\n    }\n}"}
{"prompt": "Cambia el tipo de la ventana seleccionada al tipo 'Fija 120x60'.", "completion": "UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una ventana\");\nFamilySymbol newType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name == \"Fija 120x60\");\nif (pickedRef != null && newType != null)\n{\n    FamilyInstance window = doc.GetElement(pickedRef.ElementId) as FamilyInstance;\n    if (window != null)\n    {\n        window.Symbol = newType;\n    }\n}"}
{"prompt": "Crea una apertura rectangular de 1x1 metros en el centro del suelo seleccionado.", "completion": "UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un suelo\");\nif (pickedRef != null)\n{\n    Floor floor = doc.GetElement(pickedRef.ElementId) as Floor;\n    if (floor != null)\n    {\n        BoundingBoxXYZ bbox = floor.get_BoundingBox(null);\n        XYZ center = (bbox.Min + bbox.Max) / 2.0;\n        double size = UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters);\n        XYZ p1 = new XYZ(center.X - size/2, center.Y - size/2, 0);\n        XYZ p2 = new XYZ(center.X + size/2, center.Y - size/2, 0);\n        XYZ p3 = new XYZ(center.X + size/2, center.Y + size/2, 0);\n        XYZ p4 = new XYZ(center.X - size/2, center.Y + size/2, 0);\n        CurveArray profile = new CurveArray();\n        profile.Append(Line.CreateBound(p1, p2));\n        profile.Append(Line.CreateBound(p2, p3));\n        profile.Append(Line.CreateBound(p3, p4));\n        profile.Append(Line.CreateBound(p4, p1));\n        doc.Create.NewOpening(floor, profile, false);\n    }\n}"}
{"prompt": "Oculta la categoría de mobiliario en la vista activa.", "completion": "View activeView = doc.ActiveView;\nCategory furnitureCategory = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Furniture);\nif (activeView != null && furnitureCategory != null && furnitureCategory.get_AllowsVisibilityControl(activeView))\n{\n    activeView.SetCategoryHidden(furnitureCategory.Id, true);\n}"}
{"prompt": "Crea los siguientes planos: 'A-101' con nombre 'Planta Baja', y 'A-102' con nombre 'Planta Alta'.", "completion": "FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (titleBlock != null)\n{\n    ViewSheet sheet1 = ViewSheet.Create(doc, titleBlock.Id);\n    sheet1.SheetNumber = \"A-101\";\n    sheet1.Name = \"Planta Baja\";\n    ViewSheet sheet2 = ViewSheet.Create(doc, titleBlock.Id);\n    sheet2.SheetNumber = \"A-102\";\n    sheet2.Name = \"Planta Alta\";\n}"}
{"prompt": "Coloca las vistas 'Planta Nivel 1' y 'Planta Nivel 2' en el plano 'A-101'.", "completion": "ViewSheet sheet = new FilteredElementCollector(doc).OfClass(typeof(ViewSheet)).Cast<ViewSheet>().FirstOrDefault(s => s.SheetNumber == \"A-101\");\nView view1 = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().FirstOrDefault(v => v.Name == \"Planta Nivel 1\");\nView view2 = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().FirstOrDefault(v => v.Name == \"Planta Nivel 2\");\nif (sheet != null && view1 != null && view2 != null)\n{\n    XYZ insertPoint1 = new XYZ(1.0, 1.0, 0);\n    Viewport.Create(doc, sheet.Id, view1.Id, insertPoint1);\n    XYZ insertPoint2 = new XYZ(1.0, 2.0, 0);\n    Viewport.Create(doc, sheet.Id, view2.Id, insertPoint2);\n}"}
{"prompt": "Añade el prefijo 'ARQ-' a todas las tablas de planificación.", "completion": "string prefix = \"ARQ-\";\nList<ViewSchedule> schedules = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().Where(v => !v.IsTemplate).ToList();\nforeach (ViewSchedule schedule in schedules)\n{\n    if (!schedule.Name.StartsWith(prefix))\n    {\n        schedule.Name = prefix + schedule.Name;\n    }\n}"}
{"prompt": "Renombra todas las vistas de sección para que empiecen con 'SEC-'.", "completion": "string prefix = \"SEC-\";\nList<ViewSection> sectionViews = new FilteredElementCollector(doc).OfClass(typeof(ViewSection)).Cast<ViewSection>().Where(v => !v.IsTemplate).ToList();\nforeach (ViewSection view in sectionViews)\n{\n    if (!view.Name.StartsWith(prefix))\n    {\n        view.Name = prefix + view.Name;\n    }\n}"}
{"prompt": "Crea los worksets 'Arquitectura', 'Estructura' y 'MEP'.", "completion": "if (doc.IsWorkshared)\n{\n    Workset.Create(doc, \"Arquitectura\");\n    Workset.Create(doc, \"Estructura\");\n    Workset.Create(doc, \"MEP\");\n}"}
{"prompt": "Asigna todos los muros y suelos seleccionados al workset 'Estructura'.", "completion": "UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nWorkset workset = new FilteredWorksetCollector(doc).OfKind(WorksetKind.UserWorkset).FirstOrDefault(ws => ws.Name == \"Estructura\");\nif (selectedIds.Count > 0 && workset != null)\n{\n    int worksetId = workset.Id.IntegerValue;\n    foreach (ElementId id in selectedIds)\n    {\n        Element elem = doc.GetElement(id);\n        Parameter wsparam = elem.get_Parameter(BuiltInParameter.ELEM_PARTITION_PARAM);\n        if (wsparam != null && !wsparam.IsReadOnly) wsparam.Set(worksetId);\n    }\n}"}
{"prompt": "Fija (pin) todos los vínculos de Revit en el proyecto.", "completion": "List<RevitLinkInstance> links = new FilteredElementCollector(doc).OfClass(typeof(RevitLinkInstance)).Cast<RevitLinkInstance>().ToList();\nforeach (RevitLinkInstance link in links)\n{\n    if (!link.Pinned)\n    {\n        link.Pinned = true;\n    }\n}"}
{"prompt": "Pin all selected elements.", "completion": "UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nif (selectedIds.Count > 0)\n{\n    foreach (ElementId id in selectedIds)\n    {\n        Element elem = doc.GetElement(id);\n        if (elem != null && !elem.Pinned)\n        {\n            elem.Pinned = true;\n        }\n    }\n}"}
{"prompt": "Set the 'Mark' parameter to 'D-01' for the selected door.", "completion": "UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a door\");\nif (pickedRef != null)\n{\n    Element door = doc.GetElement(pickedRef.ElementId);\n    if (door != null)\n    {\n        Parameter markParam = door.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n        if (markParam != null && !markParam.IsReadOnly)\n        {\n            markParam.Set(\"D-01\");\n        }\n    }\n}"}
{"prompt": "Cambia el parámetro 'Función' de todos los muros seleccionados a 'Interior'.", "completion": "UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nif (selectedIds.Count > 0)\n{\n    foreach(ElementId id in selectedIds)\n    {\n        Wall wall = doc.GetElement(id) as Wall;\n        if (wall != null)\n        {\n            Parameter funcParam = wall.get_Parameter(BuiltInParameter.FUNCTION_PARAM);\n            if (funcParam != null && !funcParam.IsReadOnly)\n            {\n                funcParam.Set(1); // 1 corresponde a Interior\n            }\n        }\n    }\n}"}
{"prompt": "Conecta dos tuberías seleccionadas por el usuario con un codo.", "completion": "UIDocument uidoc = new UIDocument(doc);\nReference ref1 = uidoc.Selection.PickObject(ObjectType.Element, \"Select the first pipe\");\nReference ref2 = uidoc.Selection.PickObject(ObjectType.Element, \"Select the second pipe\");\nif (ref1 != null && ref2 != null)\n{\n    Pipe pipe1 = doc.GetElement(ref1) as Pipe;\n    Pipe pipe2 = doc.GetElement(ref2) as Pipe;\n    if (pipe1 != null && pipe2 != null)\n    {\n        Connector c1 = pipe1.ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n        Connector c2 = pipe2.ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n        if (c1 != null && c2 != null)\n        {\n            doc.Create.NewElbowFitting(c1, c2);\n        }\n    }\n}"}
{"prompt": "Calcula el volumen total de hormigón de todas las zapatas de cimentación.", "completion": "double totalVolume = 0.0;\nList<FamilyInstance> footings = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFoundation).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach (FamilyInstance footing in footings)\n{\n    Parameter volumeParam = footing.get_Parameter(BuiltInParameter.HOST_VOLUME_COMPUTED);\n    if (volumeParam != null && volumeParam.HasValue)\n    {\n        totalVolume += volumeParam.AsDouble();\n    }\n}\n// El volumen está en pies cúbicos. El orquestador puede convertirlo a metros cúbicos."}
{"prompt": "Encuentra el muro con la marca 'M-01' y cambia su comentario a 'Muro de carga principal'.", "completion": "string markValue = \"M-01\";\nElementId markParamId = new ElementId(BuiltInParameter.ALL_MODEL_MARK);\nParameterValueProvider pvp = new ParameterValueProvider(markParamId);\nFilterStringRuleEvaluator evaluator = new FilterStringEquals();\nFilterRule rule = new FilterStringRule(pvp, evaluator, markValue);\nElementParameterFilter filter = new ElementParameterFilter(rule);\nWall wall = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(filter).FirstOrDefault() as Wall;\nif (wall != null)\n{\n    Parameter commentParam = wall.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n    if (commentParam != null && !commentParam.IsReadOnly)\n    {\n        commentParam.Set(\"Muro de carga principal\");\n    }\n}"}
{"prompt": "Añade refuerzo tipo estribo a la viga seleccionada.", "completion": "UIDocument uidoc = new UIDocument(doc);\nReference beamRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a beam\");\nRebarBarType barType = new FilteredElementCollector(doc).OfClass(typeof(RebarBarType)).FirstOrDefault() as RebarBarType;\nRebarShape stirrupShape = new FilteredElementCollector(doc).OfClass(typeof(RebarShape)).Cast<RebarShape>().FirstOrDefault(s => s.RebarStyle == RebarStyle.StirrupTie);\nif (beamRef != null && barType != null && stirrupShape != null)\n{\n    FamilyInstance beam = doc.GetElement(beamRef) as FamilyInstance;\n    if (beam != null)\n    {\n        Rebar.CreateFromRebarShape(doc, stirrupShape, barType, beam, beam.GetTransform().Origin, XYZ.BasisX, XYZ.BasisY);\n    }\n}"}
{"prompt":"Crea una losa de cimentación estructural de 40cm de espesor.","completion":"Level foundationLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderBy(l => l.Elevation).FirstOrDefault();\nFloorType slabTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.get_Parameter(BuiltInParameter.FLOOR_PARAM_IS_STRUCTURAL).AsInteger() == 1);\nif(slabTypeToDuplicate != null && foundationLevel != null)\n{\n    string newTypeName = \"Losa Cimentación 40cm\";\n    FloorType newSlabType = slabTypeToDuplicate.Duplicate(newTypeName) as FloorType;\n    if(newSlabType != null)\n    {\n        CompoundStructure cs = newSlabType.GetCompoundStructure();\n        if (cs != null)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(40, UnitTypeId.Centimeters));\n            newSlabType.SetCompoundStructure(cs);\n            XYZ p1 = new XYZ(0,0,0); XYZ p2 = new XYZ(10,0,0); XYZ p3 = new XYZ(10,10,0); XYZ p4 = new XYZ(0,10,0);\n            CurveLoop profile = new CurveLoop();\n            profile.Append(Line.CreateBound(p1,p2)); profile.Append(Line.CreateBound(p2,p3)); profile.Append(Line.CreateBound(p3,p4)); profile.Append(Line.CreateBound(p4,p1));\n            Floor.Create(doc, new List<CurveLoop>{profile}, newSlabType.Id, foundationLevel.Id);\n        }\n    }\n}"}
{"prompt":"Conecta dos conductos con una unión en T.","completion":"List<Duct> ducts = new FilteredElementCollector(doc).OfClass(typeof(Duct)).Cast<Duct>().ToList();\nif (ducts.Count >= 2)\n{\n    Connector c1 = ducts[0].ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n    Connector c2 = ducts[1].ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n    if (c1 != null && c2 != null)\n    {\n        // CORRECCIÓN: El método correcto es NewUnionFitting, no NewTeeFitting para una conexión simple.\n        doc.Create.NewUnionFitting(c1, c2);\n    }\n}"}
{"prompt":"Crea un nuevo parámetro de proyecto compartido de texto llamado 'Notas Adicionales' para muros y puertas.","completion":"string paramName = \"Notas Adicionales\";\nstring originalFile = doc.Application.SharedParametersFilename;\nstring tempFile = System.IO.Path.GetTempFileName() + \".txt\";\nusing (System.IO.File.Create(tempFile)) { }\ndoc.Application.SharedParametersFilename = tempFile;\ntry\n{\n    DefinitionFile defFile = doc.Application.OpenSharedParameterFile();\n    if (defFile != null)\n    {\n        DefinitionGroup group = defFile.Groups.Create(\"General\");\n        if (group != null)\n        {\n            ExternalDefinitionCreationOptions options = new ExternalDefinitionCreationOptions(paramName, SpecTypeId.String.Text);\n            Definition definition = group.Definitions.Create(options);\n            if (definition != null)\n            {\n                CategorySet categories = doc.Application.Create.NewCategorySet();\n                categories.Insert(doc.Settings.Categories.get_Item(BuiltInCategory.OST_Walls));\n                categories.Insert(doc.Settings.Categories.get_Item(BuiltInCategory.OST_Doors));\n                InstanceBinding binding = doc.Application.Create.NewInstanceBinding(categories);\n                doc.ParameterBindings.Insert(definition, binding, GroupTypeId.Data);\n            }\n        }\n    }\n}\nfinally\n{\n    doc.Application.SharedParametersFilename = originalFile;\n    System.IO.File.Delete(tempFile);\n}"}
{"prompt":"Inserta un terminal de aire en el extremo de un conducto.","completion":"Duct duct = new FilteredElementCollector(doc).OfClass(typeof(Duct)).FirstOrDefault() as Duct;\nFamilySymbol terminalSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_DuctTerminal).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (duct != null && terminalSymbol != null)\n{\n    if(!terminalSymbol.IsActive) terminalSymbol.Activate();\n    LocationCurve locCurve = duct.Location as LocationCurve;\n    if (locCurve != null)\n    {\n        Connector endConnector = duct.ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault(c => c.Origin.IsAlmostEqualTo(locCurve.Curve.GetEndPoint(1)));\n        if (endConnector != null)\n        {\n            doc.Create.NewFamilyInstance(endConnector.Origin, terminalSymbol, duct, StructuralType.NonStructural);\n        }\n    }\n}"}
{"prompt": "Etiqueta todos los muros en la vista actual.", "completion": "View activeView = doc.ActiveView;\nif (activeView == null) return;\n\nFilteredElementCollector collector = new FilteredElementCollector(doc, activeView.Id)\n    .OfCategory(BuiltInCategory.OST_Walls)\n    .WhereElementIsNotElementType();\n\nIList<Element> elementsToTag = collector.ToElements();\n\nif (elementsToTag.Any())\n{\n    foreach (Element elem in elementsToTag)\n    {\n        Reference elemRef = new Reference(elem);\n        BoundingBoxXYZ bbox = elem.get_BoundingBox(activeView);\n        if (bbox == null) continue;\n\n        XYZ tagLocation = (bbox.Min + bbox.Max) / 2.0;\n        IndependentTag.Create(doc, activeView.Id, elemRef, true, TagMode.TM_ADDBY_CATEGORY, TagOrientation.Horizontal, tagLocation);\n    }\n}"}
{"prompt": "Aplica etiquetas a cada puerta visible en la vista activa.", "completion": "View activeView = doc.ActiveView;\nif (activeView == null) return;\n\nFilteredElementCollector collector = new FilteredElementCollector(doc, activeView.Id)\n    .OfCategory(BuiltInCategory.OST_Doors)\n    .WhereElementIsNotElementType();\n\nIList<Element> elementsToTag = collector.ToElements();\n\nif (elementsToTag.Any())\n{\n    foreach (Element elem in elementsToTag)\n    {\n        Reference elemRef = new Reference(elem);\n        BoundingBoxXYZ bbox = elem.get_BoundingBox(activeView);\n        if (bbox == null) continue;\n\n        XYZ tagLocation = (bbox.Min + bbox.Max) / 2.0;\n        IndependentTag.Create(doc, activeView.Id, elemRef, true, TagMode.TM_ADDBY_CATEGORY, TagOrientation.Horizontal, tagLocation);\n    }\n}"}
{"prompt": "Crea etiquetas para todas las ventanas que se muestran en pantalla.", "completion": "View activeView = doc.ActiveView;\nif (activeView == null) return;\n\nFilteredElementCollector collector = new FilteredElementCollector(doc, activeView.Id)\n    .OfCategory(BuiltInCategory.OST_Windows)\n    .WhereElementIsNotElementType();\n\nIList<Element> elementsToTag = collector.ToElements();\n\nif (elementsToTag.Any())\n{\n    foreach (Element elem in elementsToTag)\n    {\n        Reference elemRef = new Reference(elem);\n        BoundingBoxXYZ bbox = elem.get_BoundingBox(activeView);\n        if (bbox == null) continue;\n\n        XYZ tagLocation = (bbox.Min + bbox.Max) / 2.0;\n        IndependentTag.Create(doc, activeView.Id, elemRef, true, TagMode.TM_ADDBY_CATEGORY, TagOrientation.Horizontal, tagLocation);\n    }\n}"}
{"prompt": "Etiqueta cada pilar estructural en la vista activa.", "completion": "View activeView = doc.ActiveView;\nif (activeView == null) return;\n\nFilteredElementCollector collector = new FilteredElementCollector(doc, activeView.Id)\n    .OfCategory(BuiltInCategory.OST_StructuralColumns)\n    .WhereElementIsNotElementType();\n\nIList<Element> elementsToTag = collector.ToElements();\n\nif (elementsToTag.Any())\n{\n    foreach (Element elem in elementsToTag)\n    {\n        Reference elemRef = new Reference(elem);\n        BoundingBoxXYZ bbox = elem.get_BoundingBox(activeView);\n        if (bbox == null) continue;\n\n        XYZ tagLocation = (bbox.Min + bbox.Max) / 2.0;\n        IndependentTag.Create(doc, activeView.Id, elemRef, true, TagMode.TM_ADDBY_CATEGORY, TagOrientation.Horizontal, tagLocation);\n    }\n}"}
{"prompt": "Añade una etiqueta a todos los elementos de mobiliario en la vista actual.", "completion": "View activeView = doc.ActiveView;\nif (activeView == null) return;\n\nFilteredElementCollector collector = new FilteredElementCollector(doc, activeView.Id)\n    .OfCategory(BuiltInCategory.OST_Furniture)\n    .WhereElementIsNotElementType();\n\nIList<Element> elementsToTag = collector.ToElements();\n\nif (elementsToTag.Any())\n{\n    foreach (Element elem in elementsToTag)\n    {\n        Reference elemRef = new Reference(elem);\n        BoundingBoxXYZ bbox = elem.get_BoundingBox(activeView);\n        if (bbox == null) continue;\n\n        XYZ tagLocation = (bbox.Min + bbox.Max) / 2.0;\n        IndependentTag.Create(doc, activeView.Id, elemRef, true, TagMode.TM_ADDBY_CATEGORY, TagOrientation.Horizontal, tagLocation);\n    }\n}"}
{"prompt": "Tag all walls in the current view.", "completion": "View activeView = doc.ActiveView;\nif (activeView == null) return;\n\nFilteredElementCollector collector = new FilteredElementCollector(doc, activeView.Id)\n    .OfCategory(BuiltInCategory.OST_Walls)\n    .WhereElementIsNotElementType();\n\nIList<Element> elementsToTag = collector.ToElements();\n\nif (elementsToTag.Any())\n{\n    foreach (Element elem in elementsToTag)\n    {\n        Reference elemRef = new Reference(elem);\n        BoundingBoxXYZ bbox = elem.get_BoundingBox(activeView);\n        if (bbox == null) continue;\n\n        XYZ tagLocation = (bbox.Min + bbox.Max) / 2.0;\n        IndependentTag.Create(doc, activeView.Id, elemRef, true, TagMode.TM_ADDBY_CATEGORY, TagOrientation.Horizontal, tagLocation);\n    }\n}"}
{"prompt": "Apply tags to every door visible in the active view.", "completion": "View activeView = doc.ActiveView;\nif (activeView == null) return;\n\nFilteredElementCollector collector = new FilteredElementCollector(doc, activeView.Id)\n    .OfCategory(BuiltInCategory.OST_Doors)\n    .WhereElementIsNotElementType();\n\nIList<Element> elementsToTag = collector.ToElements();\n\nif (elementsToTag.Any())\n{\n    foreach (Element elem in elementsToTag)\n    {\n        Reference elemRef = new Reference(elem);\n        BoundingBoxXYZ bbox = elem.get_BoundingBox(activeView);\n        if (bbox == null) continue;\n\n        XYZ tagLocation = (bbox.Min + bbox.Max) / 2.0;\n        IndependentTag.Create(doc, activeView.Id, elemRef, true, TagMode.TM_ADDBY_CATEGORY, TagOrientation.Horizontal, tagLocation);\n    }\n}"}
{"prompt": "Create tags for all windows shown on screen.", "completion": "View activeView = doc.ActiveView;\nif (activeView == null) return;\n\nFilteredElementCollector collector = new FilteredElementCollector(doc, activeView.Id)\n    .OfCategory(BuiltInCategory.OST_Windows)\n    .WhereElementIsNotElementType();\n\nIList<Element> elementsToTag = collector.ToElements();\n\nif (elementsToTag.Any())\n{\n    foreach (Element elem in elementsToTag)\n    {\n        Reference elemRef = new Reference(elem);\n        BoundingBoxXYZ bbox = elem.get_BoundingBox(activeView);\n        if (bbox == null) continue;\n\n        XYZ tagLocation = (bbox.Min + bbox.Max) / 2.0;\n        IndependentTag.Create(doc, activeView.Id, elemRef, true, TagMode.TM_ADDBY_CATEGORY, TagOrientation.Horizontal, tagLocation);\n    }\n}"}
{"prompt": "Tag every structural column in the active view.", "completion": "View activeView = doc.ActiveView;\nif (activeView == null) return;\n\nFilteredElementCollector collector = new FilteredElementCollector(doc, activeView.Id)\n    .OfCategory(BuiltInCategory.OST_StructuralColumns)\n    .WhereElementIsNotElementType();\n\nIList<Element> elementsToTag = collector.ToElements();\n\nif (elementsToTag.Any())\n{\n    foreach (Element elem in elementsToTag)\n    {\n        Reference elemRef = new Reference(elem);\n        BoundingBoxXYZ bbox = elem.get_BoundingBox(activeView);\n        if (bbox == null) continue;\n\n        XYZ tagLocation = (bbox.Min + bbox.Max) / 2.0;\n        IndependentTag.Create(doc, activeView.Id, elemRef, true, TagMode.TM_ADDBY_CATEGORY, TagOrientation.Horizontal, tagLocation);\n    }\n}"}
{"prompt": "Add a tag to all furniture elements in the current view.", "completion": "View activeView = doc.ActiveView;\nif (activeView == null) return;\n\nFilteredElementCollector collector = new FilteredElementCollector(doc, activeView.Id)\n    .OfCategory(BuiltInCategory.OST_Furniture)\n    .WhereElementIsNotElementType();\n\nIList<Element> elementsToTag = collector.ToElements();\n\nif (elementsToTag.Any())\n{\n    foreach (Element elem in elementsToTag)\n    {\n        Reference elemRef = new Reference(elem);\n        BoundingBoxXYZ bbox = elem.get_BoundingBox(activeView);\n        if (bbox == null) continue;\n\n        XYZ tagLocation = (bbox.Min + bbox.Max) / 2.0;\n        IndependentTag.Create(doc, activeView.Id, elemRef, true, TagMode.TM_ADDBY_CATEGORY, TagOrientation.Horizontal, tagLocation);\n    }\n}"}
{"prompt": "Aísla los elementos seleccionados en la vista.", "completion": "ICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nView activeView = doc.ActiveView;\n\nif (activeView != null && selectedIds.Any())\n{\n    activeView.IsolateElementsTemporary(selectedIds);\n}"}
{"prompt": "Oculta los elementos que tengo seleccionados.", "completion": "ICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nView activeView = doc.ActiveView;\n\nif (activeView != null && selectedIds.Any())\n{\n    activeView.HideElements(selectedIds);\n}"}
{"prompt": "Quiero ver solamente lo que he seleccionado.", "completion": "ICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nView activeView = doc.ActiveView;\n\nif (activeView != null && selectedIds.Any())\n{\n    activeView.IsolateElementsTemporary(selectedIds);\n}"}
{"prompt": "Esconde mi selección actual en esta vista.", "completion": "ICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nView activeView = doc.ActiveView;\n\nif (activeView != null && selectedIds.Any())\n{\n    activeView.HideElements(selectedIds);\n}"}
{"prompt": "Aísla temporalmente la selección.", "completion": "ICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nView activeView = doc.ActiveView;\n\nif (activeView != null && selectedIds.Any())\n{\n    activeView.IsolateElementsTemporary(selectedIds);\n}"}
{"prompt": "Isolate the selected elements in the view.", "completion": "ICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nView activeView = doc.ActiveView;\n\nif (activeView != null && selectedIds.Any())\n{\n    activeView.IsolateElementsTemporary(selectedIds);\n}"}
{"prompt": "Hide the elements I have selected.", "completion": "ICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nView activeView = doc.ActiveView;\n\nif (activeView != null && selectedIds.Any())\n{\n    activeView.HideElements(selectedIds);\n}"}
{"prompt": "I want to see only what I've selected.", "completion": "ICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nView activeView = doc.ActiveView;\n\nif (activeView != null && selectedIds.Any())\n{\n    activeView.IsolateElementsTemporary(selectedIds);\n}"}
{"prompt": "Hide my current selection in this view.", "completion": "ICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nView activeView = doc.ActiveView;\n\nif (activeView != null && selectedIds.Any())\n{\n    activeView.HideElements(selectedIds);\n}"}
{"prompt": "Temporarily isolate the current selection.", "completion": "ICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nView activeView = doc.ActiveView;\n\nif (activeView != null && selectedIds.Any())\n{\n    activeView.IsolateElementsTemporary(selectedIds);\n}"}
{"prompt": "Añade el prefijo 'ARQ-' a todos los nombres de materiales.", "completion": "string prefix = \"ARQ-\";\nIList<Material> materials = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().ToList();\n\nif (materials.Any())\n{\n    HashSet<string> existingNames = new HashSet<string>(materials.Select(m => m.Name));\n    foreach (Material mat in materials)\n    {\n        if (!mat.Name.StartsWith(prefix))\n        {\n            string newName = prefix + mat.Name;\n            string finalName = newName;\n            int i = 1;\n            while (existingNames.Contains(finalName))\n            {\n                finalName = $"{newName}_{i++}";\n            }\n            mat.Name = finalName;\n            existingNames.Add(finalName);\n        }\n    }\n}"}
{"prompt": "Quita el prefijo 'IMPORT_' de todos los materiales.", "completion": "string prefixToRemove = \"IMPORT_\";\nIList<Material> materials = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().ToList();\n\nif (materials.Any())\n{\n    HashSet<string> existingNames = new HashSet<string>(materials.Select(m => m.Name));\n    foreach (Material mat in materials)\n    {\n        if (mat.Name.StartsWith(prefixToRemove))\n        {\n            existingNames.Remove(mat.Name);\n            string newName = mat.Name.Substring(prefixToRemove.Length);\n            string finalName = newName;\n            int i = 1;\n            while (existingNames.Contains(finalName))\n            {\n                finalName = $"{newName}_{i++}";\n            }\n            mat.Name = finalName;\n            existingNames.Add(finalName);\n        }\n    }\n}"}
{"prompt": "Reemplaza el prefijo 'CAD_' por 'RVT_' en todos los materiales.", "completion": "string prefixToRemove = \"CAD_\";\nstring prefixToAdd = \"RVT_\";\nIList<Material> materials = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().ToList();\n\nif (materials.Any())\n{\n    HashSet<string> existingNames = new HashSet<string>(materials.Select(m => m.Name));\n    foreach (Material mat in materials)\n    {\n        if (mat.Name.StartsWith(prefixToRemove))\n        {\n            existingNames.Remove(mat.Name);\n            string baseName = mat.Name.Substring(prefixToRemove.Length);\n            string newName = prefixToAdd + baseName;\n            string finalName = newName;\n            int i = 1;\n            while (existingNames.Contains(finalName))\n            {\n                finalName = $"{newName}_{i++}";\n            }\n            mat.Name = finalName;\n            existingNames.Add(finalName);\n        }\n    }\n}"}
{"prompt": "Estandariza los materiales para que comiencen con el acrónimo 'MAT_'.", "completion": "string prefix = \"MAT_\";\nIList<Material> materials = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().ToList();\n\nif (materials.Any())\n{\n    HashSet<string> existingNames = new HashSet<string>(materials.Select(m => m.Name));\n    foreach (Material mat in materials)\n    {\n        if (!mat.Name.StartsWith(prefix))\n        {\n            string newName = prefix + mat.Name;\n            string finalName = newName;\n            int i = 1;\n            while (existingNames.Contains(finalName))\n            {\n                finalName = $"{newName}_{i++}";\n            }\n            mat.Name = finalName;\n            existingNames.Add(finalName);\n        }\n    }\n}"}
{"prompt": "Limpia los nombres de los materiales eliminando el prefijo 'TEMP_'.", "completion": "string prefixToRemove = \"TEMP_\";\nIList<Material> materials = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().ToList();\n\nif (materials.Any())\n{\n    HashSet<string> existingNames = new HashSet<string>(materials.Select(m => m.Name));\n    foreach (Material mat in materials)\n    {\n        if (mat.Name.StartsWith(prefixToRemove))\n        {\n            existingNames.Remove(mat.Name);\n            string newName = mat.Name.Substring(prefixToRemove.Length);\n            string finalName = newName;\n            int i = 1;\n            while (existingNames.Contains(finalName))\n            {\n                finalName = $"{newName}_{i++}";\n            }\n            mat.Name = finalName;\n            existingNames.Add(finalName);\n        }\n    }\n}"}
{"prompt": "Add the prefix 'ARCH-' to all material names.", "completion": "string prefix = \"ARCH-\";\nIList<Material> materials = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().ToList();\n\nif (materials.Any())\n{\n    HashSet<string> existingNames = new HashSet<string>(materials.Select(m => m.Name));\n    foreach (Material mat in materials)\n    {\n        if (!mat.Name.StartsWith(prefix))\n        {\n            string newName = prefix + mat.Name;\n            string finalName = newName;\n            int i = 1;\n            while (existingNames.Contains(finalName))\n            {\n                finalName = $"{newName}_{i++}";\n            }\n            mat.Name = finalName;\n            existingNames.Add(finalName);\n        }\n    }\n}"}
{"prompt": "Remove the 'DWG_' prefix from all materials.", "completion": "string prefixToRemove = \"DWG_\";\nIList<Material> materials = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().ToList();\n\nif (materials.Any())\n{\n    HashSet<string> existingNames = new HashSet<string>(materials.Select(m => m.Name));\n    foreach (Material mat in materials)\n    {\n        if (mat.Name.StartsWith(prefixToRemove))\n        {\n            existingNames.Remove(mat.Name);\n            string newName = mat.Name.Substring(prefixToRemove.Length);\n            string finalName = newName;\n            int i = 1;\n            while (existingNames.Contains(finalName))\n            {\n                finalName = $"{newName}_{i++}";\n            }\n            mat.Name = finalName;\n            existingNames.Add(finalName);\n        }\n    }\n}"}
{"prompt": "Replace the prefix 'OLD-' with 'NEW-' for all materials.", "completion": "string prefixToRemove = \"OLD-\";\nstring prefixToAdd = \"NEW-\";\nIList<Material> materials = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().ToList();\n\nif (materials.Any())\n{\n    HashSet<string> existingNames = new HashSet<string>(materials.Select(m => m.Name));\n    foreach (Material mat in materials)\n    {\n        if (mat.Name.StartsWith(prefixToRemove))\n        {\n            existingNames.Remove(mat.Name);\n            string baseName = mat.Name.Substring(prefixToRemove.Length);\n            string newName = prefixToAdd + baseName;\n            string finalName = newName;\n            int i = 1;\n            while (existingNames.Contains(finalName))\n            {\n                finalName = $"{newName}_{i++}";\n            }\n            mat.Name = finalName;\n            existingNames.Add(finalName);\n        }\n    }\n}"}
{"prompt": "Standardize materials to begin with the 'PROJ123_' acronym.", "completion": "string prefix = \"PROJ123_\";\nIList<Material> materials = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().ToList();\n\nif (materials.Any())\n{\n    HashSet<string> existingNames = new HashSet<string>(materials.Select(m => m.Name));\n    foreach (Material mat in materials)\n    {\n        if (!mat.Name.StartsWith(prefix))\n        {\n            string newName = prefix + mat.Name;\n            string finalName = newName;\n            int i = 1;\n            while (existingNames.Contains(finalName))\n            {\n                finalName = $"{newName}_{i++}";\n            }\n            mat.Name = finalName;\n            existingNames.Add(finalName);\n        }\n    }\n}"}
{"prompt": "Clean up the material names by stripping the 'RENDER_' prefix.", "completion": "string prefixToRemove = \"RENDER_\";\nIList<Material> materials = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().ToList();\n\nif (materials.Any())\n{\n    HashSet<string> existingNames = new HashSet<string>(materials.Select(m => m.Name));\n    foreach (Material mat in materials)\n    {\n        if (mat.Name.StartsWith(prefixToRemove))\n        {\n            existingNames.Remove(mat.Name);\n            string newName = mat.Name.Substring(prefixToRemove.Length);\n            string finalName = newName;\n            int i = 1;\n            while (existingNames.Contains(finalName))\n            {\n                finalName = $"{newName}_{i++}";\n            }\n            mat.Name = finalName;\n            existingNames.Add(finalName);\n        }\n    }\n}"}
{"prompt": "Crea una retícula de ejes estructurales de 40x25 metros, con ejes longitudinales cada 8 metros y transversales cada 12.5 metros.", "completion": "double length = UnitUtils.ConvertToInternalUnits(40, UnitTypeId.Meters);\ndouble width = UnitUtils.ConvertToInternalUnits(25, UnitTypeId.Meters);\ndouble spacingX = UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters);\ndouble spacingY = UnitUtils.ConvertToInternalUnits(12.5, UnitTypeId.Meters);\n\nfor (double y = 0; y <= width; y += spacingY)\n{\n    Line line = Line.CreateBound(new XYZ(0, y, 0), new XYZ(length, y, 0));\n    Grid.Create(doc, line);\n}\n\nfor (double x = 0; x <= length; x += spacingX)\n{\n    Line line = Line.CreateBound(new XYZ(x, 0, 0), new XYZ(x, width, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt": "Crea los muros perimetrales de tipo 'Generic - 200mm' a lo largo de los ejes exteriores, con una altura de 8 metros sobre el Nivel 1.", "completion": "WallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == \"Generic - 200mm\") as WallType;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\n\nFilteredElementCollector gridCollector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Grids).WhereElementIsNotElementType();\nIList<Grid> grids = gridCollector.Cast<Grid>().ToList();\n\nif (wallType != null && level != null && grids.Any())\n{\n    // Assuming grids define the building perimeter\n    XYZ min = new XYZ(grids.Min(g => g.Curve.GetEndPoint(0).X), grids.Min(g => g.Curve.GetEndPoint(0).Y), 0);\n    XYZ max = new XYZ(grids.Max(g => g.Curve.GetEndPoint(1).X), grids.Max(g => g.Curve.GetEndPoint(1).Y), 0);\n\n    XYZ p1 = new XYZ(min.X, min.Y, 0);\n    XYZ p2 = new XYZ(max.X, min.Y, 0);\n    XYZ p3 = new XYZ(max.X, max.Y, 0);\n    XYZ p4 = new XYZ(min.X, max.Y, 0);\n    \n    double height = UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters);\n\n    Wall.Create(doc, Line.CreateBound(p1, p2), wallType.Id, level.Id, height, 0.0, false, false);\n    Wall.Create(doc, Line.CreateBound(p2, p3), wallType.Id, level.Id, height, 0.0, false, false);\n    Wall.Create(doc, Line.CreateBound(p3, p4), wallType.Id, level.Id, height, 0.0, false, false);\n    Wall.Create(doc, Line.CreateBound(p4, p1), wallType.Id, level.Id, height, 0.0, false, false);\n}"}
{"prompt": "Genera un suelo de tipo 'Generic 150mm' que cubra el área definida por los muros perimetrales en el Nivel 1.", "completion": "FloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault(f => f.Name == \"Generic 150mm\") as FloorType;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\n\nIList<Wall> walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>().ToList();\n\nif (floorType != null && level != null && walls.Count >= 4)\n{\n    CurveLoop profile = new CurveLoop();\n    // Simplified assumption of a rectangular perimeter for the agent\n    XYZ min = new XYZ(walls.Min(w => (w.Location as LocationCurve).Curve.GetEndPoint(0).X), walls.Min(w => (w.Location as LocationCurve).Curve.GetEndPoint(0).Y), 0);\n    XYZ max = new XYZ(walls.Max(w => (w.Location as LocationCurve).Curve.GetEndPoint(1).X), walls.Max(w => (w.Location as LocationCurve).Curve.GetEndPoint(1).Y), 0);\n\n    profile.Append(Line.CreateBound(new XYZ(min.X, min.Y, 0), new XYZ(max.X, min.Y, 0)));\n    profile.Append(Line.CreateBound(new XYZ(max.X, min.Y, 0), new XYZ(max.X, max.Y, 0)));\n    profile.Append(Line.CreateBound(new XYZ(max.X, max.Y, 0), new XYZ(min.X, max.Y, 0)));\n    profile.Append(Line.CreateBound(new XYZ(min.X, max.Y, 0), new XYZ(min.X, min.Y, 0)));\n\n    Floor.Create(doc, new List<CurveLoop> { profile }, floorType.Id, level.Id);\n}"}
{"prompt": "Crea una cubierta a dos aguas con una pendiente del 10% sobre los muros existentes, usando el tipo 'Generic - 400mm'.", "completion": "RoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault(rt => rt.Name == \"Generic - 400mm\") as RoofType;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level; // Assuming roof is based on Level 1\n\nif (roofType != null && level != null)\n{\n    // This is a complex operation that requires multiple steps and/or user interaction and is not supported by the agent.\n}"}
{"prompt": "Build a structural grid 100 by 60 feet, with longitudinal lines every 25 ft and transverse lines every 20 ft.", "completion": "double length = 100.0;\ndouble width = 60.0;\ndouble spacingX = 25.0;\ndouble spacingY = 20.0;\n\n// Create transverse grids (Y direction)\nfor (double y = 0; y <= width; y += spacingY)\n{\n    Line line = Line.CreateBound(new XYZ(0, y, 0), new XYZ(length, y, 0));\n    Grid.Create(doc, line);\n}\n\n// Create longitudinal grids (X direction)\nfor (double x = 0; x <= length; x += spacingX)\n{\n    Line line = Line.CreateBound(new XYZ(x, 0, 0), new XYZ(x, width, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt": "Create perimeter walls along the exterior grid lines, 30 feet high on Level 1, using 'Generic - 8\"' wall type.", "completion": "WallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == \"Generic - 8\\\"\") as WallType;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\n\nFilteredElementCollector gridCollector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Grids).WhereElementIsNotElementType();\nIList<Grid> grids = gridCollector.Cast<Grid>().ToList();\n\nif (wallType != null && level != null && grids.Any())\n{\n    // Simplified rectangular perimeter from grid extents\n    XYZ min = new XYZ(grids.Min(g => g.Curve.GetEndPoint(0).X), grids.Min(g => g.Curve.GetEndPoint(0).Y), 0);\n    XYZ max = new XYZ(grids.Max(g => g.Curve.GetEndPoint(1).X), grids.Max(g => g.Curve.GetEndPoint(1).Y), 0);\n\n    XYZ p1 = new XYZ(min.X, min.Y, 0);\n    XYZ p2 = new XYZ(max.X, min.Y, 0);\n    XYZ p3 = new XYZ(max.X, max.Y, 0);\n    XYZ p4 = new XYZ(min.X, max.Y, 0);\n    \n    double height = 30.0;\n\n    Wall.Create(doc, Line.CreateBound(p1, p2), wallType.Id, level.Id, height, 0.0, false, false);\n    Wall.Create(doc, Line.CreateBound(p2, p3), wallType.Id, level.Id, height, 0.0, false, false);\n    Wall.Create(doc, Line.CreateBound(p3, p4), wallType.Id, level.Id, height, 0.0, false, false);\n    Wall.Create(doc, Line.CreateBound(p4, p1), wallType.Id, level.Id, height, 0.0, false, false);\n}"}
{"prompt": "Attach the top of all walls to the nearest roof or floor above.", "completion": "FilteredElementCollector wallCollector = new FilteredElementCollector(doc).OfClass(typeof(Wall));\n\nif (wallCollector.Any())\n{\n    foreach (Wall wall in wallCollector)\n    {\n        if (wall.get_Parameter(BuiltInParameter.WALL_HEIGHT_TYPE).AsElementId() != new ElementId(1000000 + (int)BuiltInParameter.WALL_USER_HEIGHT_PARAM))\n        {\n            wall.get_Parameter(BuiltInParameter.WALL_TOP_IS_ATTACHED).Set(1);\n        }\n    }\n}"}
{"prompt": "Add 'Bearing Footing - 36 x 12' foundations to all walls on Level 1.", "completion": "WallFoundationType foundationType = new FilteredElementCollector(doc).OfClass(typeof(WallFoundationType)).FirstOrDefault(f => f.Name == \"Bearing Footing - 36 x 12\") as WallFoundationType;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\n\nif (foundationType != null && level != null)\n{\n    FilteredElementCollector wallCollector = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Where(w => w.LevelId == level.Id);\n    IList<Wall> wallsOnLevel = wallCollector.Cast<Wall>().ToList();\n\n    if (wallsOnLevel.Any())\n    {\n        foreach (Wall wall in wallsOnLevel)\n        {\n            WallFoundation.Create(doc, foundationType.Id, wall.Id);\n        }\n    }\n}"}
{"prompt": "Dame una lista de todos los tipos de muro en el proyecto.", "completion": "FilteredElementCollector collector = new FilteredElementCollector(doc).OfClass(typeof(WallType));\nList<string> wallTypeNames = collector.Select(e => e.Name).ToList();"}
{"prompt": "Obtén los nombres de todos los tipos de suelo disponibles.", "completion": "FilteredElementCollector collector = new FilteredElementCollector(doc).OfClass(typeof(FloorType));\nList<string> floorTypeNames = collector.Select(e => e.Name).ToList();"}
{"prompt": "Necesito ver todos los tipos de puertas que están cargados.", "completion": "FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType();\nList<string> doorTypeNames = collector.Select(e => e.Name).ToList();"}
{"prompt": "Enumera todos los tipos de pilares estructurales.", "completion": "FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType();\nList<string> columnTypeNames = collector.Select(e => e.Name).ToList();"}
{"prompt": "Haz una lista con los nombres de todos los tipos de tubería.", "completion": "FilteredElementCollector collector = new FilteredElementCollector(doc).OfClass(typeof(PipeType));\nList<string> pipeTypeNames = collector.Select(e => e.Name).ToList();"}
{"prompt": "Quiero una lista de los tipos de equipos mecánicos en el modelo.", "completion": "FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_MechanicalEquipment).WhereElementIsElementType();\nList<string> equipmentTypeNames = collector.Select(e => e.Name).ToList();"}
{"prompt": "List all available window types in the project.", "completion": "FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType();\nList<string> windowTypeNames = collector.Select(e => e.Name).ToList();"}
{"prompt": "Get the names of all loaded furniture types.", "completion": "FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType();\nList<string> furnitureTypeNames = collector.Select(e => e.Name).ToList();"}
{"prompt": "What are the ceiling types in this model?", "completion": "FilteredElementCollector collector = new FilteredElementCollector(doc).OfClass(typeof(CeilingType));\nList<string> ceilingTypeNames = collector.Select(e => e.Name).ToList();"}
{"prompt": "Provide a list of all structural framing types.", "completion": "FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType();\nList<string> framingTypeNames = collector.Select(e => e.Name).ToList();"}
{"prompt": "Enumerate all duct types.", "completion": "FilteredElementCollector collector = new FilteredElementCollector(doc).OfClass(typeof(DuctType));\nList<string> ductTypeNames = collector.Select(e => e.Name).ToList();"}
{"prompt": "Show me a list of all plumbing fixture types.", "completion": "FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_PlumbingFixtures).WhereElementIsElementType();\nList<string> fixtureTypeNames = collector.Select(e => e.Name).ToList();"}
{"prompt": "Change the height of the selected walls to 3.5 meters.", "completion": "ICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nif (selectedIds.Any())\n{\n    double newHeight = UnitUtils.ConvertToInternalUnits(3.5, UnitTypeId.Meters);\n    foreach (ElementId id in selectedIds)\n    {\n        Element elem = doc.GetElement(id);\n        if (elem != null)\n        {\n            Parameter heightParam = elem.get_Parameter(BuiltInParameter.WALL_USER_HEIGHT_PARAM);\n            if (heightParam != null && !heightParam.IsReadOnly)\n            {\n                heightParam.Set(newHeight);\n            }\n        }\n    }\n}"}
{"prompt": "Asigna el comentario 'Revisar Detalle' a los elementos seleccionados.", "completion": "ICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nif (selectedIds.Any())\n{\n    string comment = \"Revisar Detalle\";\n    foreach (ElementId id in selectedIds)\n    {\n        Element elem = doc.GetElement(id);\n        if (elem != null)\n        {\n            Parameter commentParam = elem.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n            if (commentParam != null && !commentParam.IsReadOnly)\n            {\n                commentParam.Set(comment);\n            }\n        }\n    }\n}"}
{"prompt": "Set the Mark for the selected doors to 'D-101'.", "completion": "ICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nif (selectedIds.Any())\n{\n    string mark = \"D-101\";\n    foreach (ElementId id in selectedIds)\n    {\n        Element elem = doc.GetElement(id);\n        if (elem != null && elem.Category.Id.IntegerValue == (int)BuiltInCategory.OST_Doors)\n        {\n            Parameter markParam = elem.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n            if (markParam != null && !markParam.IsReadOnly)\n            {\n                markParam.Set(mark);\n            }\n        }\n    }\n}"}
{"prompt": "¿Cuál es la longitud de la viga seleccionada?", "completion": "ElementId selectedId = uidoc.Selection.GetElementIds().FirstOrDefault();\nif (selectedId != null && selectedId != ElementId.InvalidElementId)\n{\n    Element beam = doc.GetElement(selectedId);\n    if (beam != null)\n    {\n        Parameter lengthParam = beam.get_Parameter(BuiltInParameter.CURVE_ELEM_LENGTH);\n        if (lengthParam != null)\n        {\n            double lengthInFeet = lengthParam.AsDouble();\n            // The orchestrator would be responsible for displaying this value.\n        }\n    }\n}"}
{"prompt": "Delete the selected elements.", "completion": "ICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nif (selectedIds.Any())\n{\n    doc.Delete(selectedIds);\n}"}
{"prompt": "Borra los muros que tengo seleccionados.", "completion": "ICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nif (selectedIds.Any())\n{\n    doc.Delete(selectedIds);\n}"}
{"prompt": "Remove the selected furniture from the model.", "completion": "ICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nif (selectedIds.Any())\n{\n    doc.Delete(selectedIds);\n}"}
{"prompt": "Elimina la selección actual.", "completion": "ICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nif (selectedIds.Any())\n{\n    doc.Delete(selectedIds);\n}"}
{"prompt": "Crea un nuevo plano con el número 'A-101' y nombre 'Planta Baja'.", "completion": "FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (titleBlock != null)\n{\n    ViewSheet sheet = ViewSheet.Create(doc, titleBlock.Id);\n    if (sheet != null)\n    {\n        sheet.SheetNumber = \"A-101\";\n        sheet.Name = \"Planta Baja\";\n    }\n}"}
{"prompt": "Place the 'Level 1' floor plan view on the active sheet.", "completion": "View viewToPlace = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v => v.Name == \"Level 1\" && !v.IsTemplate) as View;\nViewSheet sheet = doc.ActiveView as ViewSheet;\n\nif (viewToPlace != null && sheet != null && Viewport.CanAddViewToSheet(doc, sheet.Id, viewToPlace.Id))\n{\n    BoundingBoxUV sheetBox = sheet.Outline;\n    XYZ centerPoint = new XYZ((sheetBox.U.Min + sheetBox.U.Max) / 2, (sheetBox.V.Min + sheetBox.V.Max) / 2, 0);\n    Viewport.Create(doc, sheet.Id, viewToPlace.Id, centerPoint);\n}"}
{"prompt": "Crea una vista de planta para el 'Nivel 2'.", "completion": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 2\") as Level;\nViewFamilyType viewFamilyType = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(vft => vft.ViewFamily == ViewFamily.FloorPlan);\n\nif (level != null && viewFamilyType != null)\n{\n    ViewPlan.Create(doc, viewFamilyType.Id, level.Id);\n}"}
{"prompt": "Duplicate the active view with detailing.", "completion": "View activeView = doc.ActiveView;\nif (activeView != null)\n{\n    activeView.Duplicate(ViewDuplicateOption.WithDetailing);\n}"}
{"prompt": "Crea un suelo en la habitación 'Oficina 101' usando el tipo de piso 'Genérico 150mm'.", "completion": "Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Oficina 101\") as Room;\n\nif (room != null)\n{\n    Level level = room.Level;\n    FloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault(ft => ft.Name == \"Genérico 150mm\") as FloorType;\n\n    if (level != null && floorType != null)\n    {\n        SpatialElementBoundaryOptions options = new SpatialElementBoundaryOptions();\n        IList<IList<BoundarySegment>> boundarySegments = room.GetBoundarySegments(options);\n        IList<BoundarySegment> outerBoundary = boundarySegments.FirstOrDefault();\n\n        if (outerBoundary != null && outerBoundary.Any())\n        {\n            CurveLoop curveLoop = new CurveLoop();\n            foreach (BoundarySegment segment in outerBoundary)\n            {\n                curveLoop.Append(segment.GetCurve());\n            }\n            Floor.Create(doc, new List<CurveLoop> { curveLoop }, floorType.Id, level.Id);\n        }\n    }\n}"}
{"prompt": "Create a ceiling in the 'Living Room' at a height of 9 feet.", "completion": "Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Living Room\") as Room;\n\nif (room != null)\n{\n    Level level = room.Level;\n    CeilingType ceilingType = new FilteredElementCollector(doc).OfClass(typeof(CeilingType)).FirstOrDefault() as CeilingType;\n\n    if (level != null && ceilingType != null)\n    {\n        SpatialElementBoundaryOptions options = new SpatialElementBoundaryOptions();\n        IList<IList<BoundarySegment>> boundarySegments = room.GetBoundarySegments(options);\n        IList<BoundarySegment> outerBoundary = boundarySegments.FirstOrDefault();\n\n        if (outerBoundary != null && outerBoundary.Any())\n        {\n            CurveLoop curveLoop = new CurveLoop();\n            foreach (BoundarySegment segment in outerBoundary)\n            {\n                curveLoop.Append(segment.GetCurve());\n            }\n            Ceiling ceiling = Ceiling.Create(doc, new List<CurveLoop> { curveLoop }, ceilingType.Id, level.Id);\n            if (ceiling != null)\n            {\n                Parameter heightParam = ceiling.get_Parameter(BuiltInParameter.CEILING_HEIGHTABOVELEVEL_PARAM);\n                if (heightParam != null && !heightParam.IsReadOnly) heightParam.Set(9.0);\n            }\n        }\n    }\n}"}
{"prompt": "Generate a floor that matches the boundary of the 'Kitchen' room.", "completion": "Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Kitchen\") as Room;\n\nif (room != null)\n{\n    Level level = room.Level;\n    FloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\n\n    if (level != null && floorType != null)\n    {\n        SpatialElementBoundaryOptions options = new SpatialElementBoundaryOptions();\n        IList<IList<BoundarySegment>> boundarySegments = room.GetBoundarySegments(options);\n        IList<BoundarySegment> outerBoundary = boundarySegments.FirstOrDefault();\n\n        if (outerBoundary != null && outerBoundary.Any())\n        {\n            CurveLoop curveLoop = new CurveLoop();\n            foreach (BoundarySegment segment in outerBoundary)\n            {\n                curveLoop.Append(segment.GetCurve());\n            }\n            Floor.Create(doc, new List<CurveLoop> { curveLoop }, floorType.Id, level.Id);\n        }\n    }\n}"}
{"prompt": "Modela un plafón para el 'Dormitorio Principal' a 2.7 metros de altura.", "completion": "Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Dormitorio Principal\") as Room;\n\nif (room != null)\n{\n    Level level = room.Level;\n    CeilingType ceilingType = new FilteredElementCollector(doc).OfClass(typeof(CeilingType)).FirstOrDefault() as CeilingType;\n\n    if (level != null && ceilingType != null)\n    {\n        SpatialElementBoundaryOptions options = new SpatialElementBoundaryOptions();\n        IList<IList<BoundarySegment>> boundarySegments = room.GetBoundarySegments(options);\n        IList<BoundarySegment> outerBoundary = boundarySegments.FirstOrDefault();\n\n        if (outerBoundary != null && outerBoundary.Any())\n        {\n            CurveLoop curveLoop = new CurveLoop();\n            foreach (BoundarySegment segment in outerBoundary)\n            {\n                curveLoop.Append(segment.GetCurve());\n            }\n            Ceiling ceiling = Ceiling.Create(doc, new List<CurveLoop> { curveLoop }, ceilingType.Id, level.Id);\n            if (ceiling != null)\n            {\n                Parameter heightParam = ceiling.get_Parameter(BuiltInParameter.CEILING_HEIGHTABOVELEVEL_PARAM);\n                if (heightParam != null && !heightParam.IsReadOnly) heightParam.Set(UnitUtils.ConvertToInternalUnits(2.7, UnitTypeId.Meters));\n            }\n        }\n    }\n}"}
{"prompt": "Based on the perimeter of the 'Conference Room', create a 'Polished Concrete' floor.", "completion": "Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Conference Room\") as Room;\n\nif (room != null)\n{\n    Level level = room.Level;\n    FloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault(ft => ft.Name == \"Polished Concrete\") as FloorType;\n\n    if (level != null && floorType != null)\n    {\n        SpatialElementBoundaryOptions options = new SpatialElementBoundaryOptions();\n        IList<IList<BoundarySegment>> boundarySegments = room.GetBoundarySegments(options);\n        IList<BoundarySegment> outerBoundary = boundarySegments.FirstOrDefault();\n\n        if (outerBoundary != null && outerBoundary.Any())\n        {\n            CurveLoop curveLoop = new CurveLoop();\n            foreach (BoundarySegment segment in outerBoundary)\n            {\n                curveLoop.Append(segment.GetCurve());\n            }\n            Floor.Create(doc, new List<CurveLoop> { curveLoop }, floorType.Id, level.Id);\n        }\n    }\n}"}
